--
-- ARRAYS
--

-- directory paths are passed to us in environment variables
-- \getenv abs_srcdir ''/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests''

CREATE TABLE arrtest (
	a 			int2[],
	b 			int4[][][],
	c 			name[],
	d			text[][],
	e 			float8[],
	f			char(5)[],
	g			varchar(5)[]
)
ERROR: --
-- ARRAYS
--

-- directory paths are passed to us in environment variables
-- \getenv abs_srcdir ''/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests''

CREATE TABLE arrtest (
	a 			int2[],
	b 			int4[][][],
	c 			name[],
	d			text[][],
	e 			float8[],
	f			char(5)[],
	g			varchar(5)[]
)

Catalog Error: Type with name name does not exist!
Did you mean "date"?


CREATE TABLE array_op_test (
	seqno		int4,
	i			int4[],
	t			text[]
)


-- \set filename /* REPLACED */ ''/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests'' ''/data/array.data''
COPY array_op_test FROM /* REPLACED */ '/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/array.data'
ERROR: 

-- \set filename /* REPLACED */ ''/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests'' ''/data/array.data''
COPY array_op_test FROM /* REPLACED */ '/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/array.data'

Conversion Error: CSV Error on Line: 2
Original Line: 2	{3,6}	{AAAAAA98232,AAAAAAAA79710,AAAAAAAAAAAAAAAAA69675,AAAAAAAAAAAAAAAA55798,AAAAAAAAA12793}
Error when converting column "i". Type VARCHAR with value '{3,6}' can't be cast to the destination type LIST

Column i is being converted as type LIST
This type was either manually set or derived from an existing table. Select a different type to correctly parse this column.

  file=/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/array.data
  delimiter = 	 (Auto-Detected)
  quote = " (Auto-Detected)
  escape = " (Auto-Detected)
  new_line = \n (Auto-Detected)
  header = true (Auto-Detected)
  skip_rows = 0 (Auto-Detected)
  date_format =  (Auto-Detected)
  timestamp_format =  (Auto-Detected)
  null_padding=0
  sample_size=20480
  ignore_errors=false
  all_varchar=0



ANALYZE array_op_test


--
-- only the ''e'' array is 0-based, the others are 1-based.
--

INSERT INTO arrtest (a[1:5], b[1:1][1:2][1:2], c, d, f, g)
   VALUES ('{1,2,3,4,5}', '{{{0,0},{1,2}}}', '{}', '{}', '{}', '{}')
ERROR: 

--
-- only the ''e'' array is 0-based, the others are 1-based.
--

INSERT INTO arrtest (a[1:5], b[1:1][1:2][1:2], c, d, f, g)
   VALUES ('{1,2,3,4,5}', '{{{0,0},{1,2}}}', '{}', '{}', '{}', '{}')

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


UPDATE arrtest SET e[0] = '1.1'
ERROR: 

UPDATE arrtest SET e[0] = '1.1'

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 3: UPDATE arrtest SET e[0] = '1.1'
               ^


UPDATE arrtest SET e[1] = '2.2'
ERROR: 

UPDATE arrtest SET e[1] = '2.2'

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 3: UPDATE arrtest SET e[1] = '2.2'
               ^


INSERT INTO arrtest (f)
   VALUES ('{"too long"}')
ERROR: 

INSERT INTO arrtest (f)
   VALUES ('{"too long"}')

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


INSERT INTO arrtest (a, b[1:2][1:2], c, d, e, f, g)
   VALUES ('{11,12,23}', '{{3,4},{4,5}}', '{"foobar"}',
           '{{"elt1", "elt2"}}', '{"3.4", "6.7"}',
           '{"abc","abcde"}', '{"abc","abcde"}')
ERROR: 

INSERT INTO arrtest (a, b[1:2][1:2], c, d, e, f, g)
   VALUES ('{11,12,23}', '{{3,4},{4,5}}', '{"foobar"}',
           '{{"elt1", "elt2"}}', '{"3.4", "6.7"}',
           '{"abc","abcde"}', '{"abc","abcde"}')

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


INSERT INTO arrtest (a, b[1:2], c, d[1:2])
   VALUES ('{}', '{3,4}', '{foo,bar}', '{bar,foo}')
ERROR: 

INSERT INTO arrtest (a, b[1:2], c, d[1:2])
   VALUES ('{}', '{3,4}', '{foo,bar}', '{bar,foo}')

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


INSERT INTO arrtest (b[2]) VALUES(now())
ERROR: 

INSERT INTO arrtest (b[2]) VALUES(now())

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
  -- error, type mismatch

INSERT INTO arrtest (b[1:2]) VALUES(now())
ERROR:   -- error, type mismatch

INSERT INTO arrtest (b[1:2]) VALUES(now())

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
  -- error, type mismatch

SELECT * FROM arrtest
ERROR:   -- error, type mismatch

SELECT * FROM arrtest

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


SELECT arrtest.a[1],
          arrtest.b[1][1][1],
          arrtest.c[1],
          arrtest.d[1][1],
          arrtest.e[0]
   FROM arrtest
ERROR: 

SELECT arrtest.a[1],
          arrtest.b[1][1][1],
          arrtest.c[1],
          arrtest.d[1][1],
          arrtest.e[0]
   FROM arrtest

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


SELECT a[1], b[1][1][1], c[1], d[1][1], e[0]
   FROM arrtest
ERROR: 

SELECT a[1], b[1][1][1], c[1], d[1][1], e[0]
   FROM arrtest

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


SELECT a[1:3],
          b[1:1][1:2][1:2],
          c[1:2],
          d[1:1][1:2]
   FROM arrtest
ERROR: 

SELECT a[1:3],
          b[1:1][1:2][1:2],
          c[1:2],
          d[1:1][1:2]
   FROM arrtest

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


SELECT array_ndims(a) AS a,array_ndims(b) AS b,array_ndims(c) AS c
   FROM arrtest
ERROR: 

SELECT array_ndims(a) AS a,array_ndims(b) AS b,array_ndims(c) AS c
   FROM arrtest

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


SELECT array_dims(a) AS a,array_dims(b) AS b,array_dims(c) AS c
   FROM arrtest
ERROR: 

SELECT array_dims(a) AS a,array_dims(b) AS b,array_dims(c) AS c
   FROM arrtest

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


-- returns nothing
SELECT *
   FROM arrtest
   WHERE a[1] < 5 and
         c = '{"foobar"}'::_name
ERROR: 

-- returns nothing
SELECT *
   FROM arrtest
   WHERE a[1] < 5 and
         c = '{"foobar"}'::_name

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


UPDATE arrtest
  SET a[1:2] = '{16,25}'
  WHERE NOT a = '{}'::_int2
ERROR: 

UPDATE arrtest
  SET a[1:2] = '{16,25}'
  WHERE NOT a = '{}'::_int2

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 3: UPDATE arrtest
               ^


UPDATE arrtest
  SET b[1:1][1:1][1:2] = '{113, 117}',
      b[1:1][1:2][2:2] = '{142, 147}'
  WHERE array_dims(b) = '[1:1][1:2][1:2]'
ERROR: 

UPDATE arrtest
  SET b[1:1][1:1][1:2] = '{113, 117}',
      b[1:1][1:2][2:2] = '{142, 147}'
  WHERE array_dims(b) = '[1:1][1:2][1:2]'

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 3: UPDATE arrtest
               ^


UPDATE arrtest
  SET c[2:2] = '{"new_word"}'
  WHERE array_dims(c) is not null
ERROR: 

UPDATE arrtest
  SET c[2:2] = '{"new_word"}'
  WHERE array_dims(c) is not null

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 3: UPDATE arrtest
               ^


SELECT a,b,c FROM arrtest
ERROR: 

SELECT a,b,c FROM arrtest

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


SELECT a[1:3],
          b[1:1][1:2][1:2],
          c[1:2],
          d[1:1][2:2]
   FROM arrtest
ERROR: 

SELECT a[1:3],
          b[1:1][1:2][1:2],
          c[1:2],
          d[1:1][2:2]
   FROM arrtest

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


SELECT b[1:1][2][2],
       d[1:1][2]
   FROM arrtest
ERROR: 

SELECT b[1:1][2][2],
       d[1:1][2]
   FROM arrtest

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


INSERT INTO arrtest(a) VALUES('{1,null,3}')
ERROR: 

INSERT INTO arrtest(a) VALUES('{1,null,3}')

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

SELECT a FROM arrtest
ERROR: 
SELECT a FROM arrtest

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

UPDATE arrtest SET a[4] = NULL WHERE a[2] IS NULL
ERROR: 
UPDATE arrtest SET a[4] = NULL WHERE a[2] IS NULL

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 2: UPDATE arrtest SET a[4] = NULL WHERE a[2] IS ...
               ^

SELECT a FROM arrtest WHERE a[2] IS NULL
ERROR: 
SELECT a FROM arrtest WHERE a[2] IS NULL

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

DELETE FROM arrtest WHERE a[2] IS NULL AND b IS NULL
ERROR: 
DELETE FROM arrtest WHERE a[2] IS NULL AND b IS NULL

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 2: DELETE FROM arrtest WHERE a[2] IS NULL AND b IS NU...
                    ^

SELECT a,b,c FROM arrtest
ERROR: 
SELECT a,b,c FROM arrtest

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?


-- test non-error-throwing API
SELECT pg_input_is_valid('{1,2,3}', 'integer[]')
ERROR: 

-- test non-error-throwing API
SELECT pg_input_is_valid('{1,2,3}', 'integer[]')

Catalog Error: Scalar Function with name pg_input_is_valid does not exist!
Did you mean "json_valid"?

SELECT pg_input_is_valid('{1,2', 'integer[]')
ERROR: 
SELECT pg_input_is_valid('{1,2', 'integer[]')

Catalog Error: Scalar Function with name pg_input_is_valid does not exist!
Did you mean "json_valid"?

SELECT pg_input_is_valid('{1,zed}', 'integer[]')
ERROR: 
SELECT pg_input_is_valid('{1,zed}', 'integer[]')

Catalog Error: Scalar Function with name pg_input_is_valid does not exist!
Did you mean "json_valid"?

SELECT * FROM pg_input_error_info('{1,zed}', 'integer[]')
ERROR: 
SELECT * FROM pg_input_error_info('{1,zed}', 'integer[]')

Catalog Error: Table Function with name pg_input_error_info does not exist!
Did you mean "pragma_storage_info"?


-- test mixed slice/scalar subscripting
select '{{1,2,3},{4,5,6},{7,8,9}}'::int[]
ERROR: 

-- test mixed slice/scalar subscripting
select '{{1,2,3},{4,5,6},{7,8,9}}'::int[]

Conversion Error: Type VARCHAR with value '{{1,2,3},{4,5,6},{7,8,9}}' can't be cast to the destination type LIST

select ('{{1,2,3},{4,5,6},{7,8,9}}'::int[])[1:2][2]
ERROR: 
select ('{{1,2,3},{4,5,6},{7,8,9}}'::int[])[1:2][2]

Conversion Error: Type VARCHAR with value '{{1,2,3},{4,5,6},{7,8,9}}' can't be cast to the destination type LIST

select '[0:2][0:2]={{1,2,3},{4,5,6},{7,8,9}}'::int[]
ERROR: 
select '[0:2][0:2]={{1,2,3},{4,5,6},{7,8,9}}'::int[]

Conversion Error: Type VARCHAR with value '[0:2][0:2]={{1,2,3},{4,5,6},{7,8,9}}' can't be cast to the destination type LIST

select ('[0:2][0:2]={{1,2,3},{4,5,6},{7,8,9}}'::int[])[1:2][2]
ERROR: 
select ('[0:2][0:2]={{1,2,3},{4,5,6},{7,8,9}}'::int[])[1:2][2]

Conversion Error: Type VARCHAR with value '[0:2][0:2]={{1,2,3},{4,5,6},{7,8,9}}' can't be cast to the destination type LIST


--
-- check subscription corner cases
--
-- More subscripts than MAXDIM (6)
SELECT ('{}'::int[])[1][2][3][4][5][6][7]
ERROR: 

--
-- check subscription corner cases
--
-- More subscripts than MAXDIM (6)
SELECT ('{}'::int[])[1][2][3][4][5][6][7]

Binder Error: No function matches the given name and argument types 'array_extract(INTEGER, INTEGER_LITERAL)'. You might need to add explicit type casts.
	Candidate functions:
	array_extract(ANY[], BIGINT) -> ANY
	array_extract(VARCHAR, BIGINT) -> VARCHAR
	array_extract(STRUCT, VARCHAR) -> ANY
	array_extract(STRUCT, BIGINT) -> ANY


-- NULL index yields NULL when selecting
SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL][1]
ERROR: 
-- NULL index yields NULL when selecting
SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL][1]

Binder Error: No function matches the given name and argument types 'array_extract(INTEGER, NULL)'. You might need to add explicit type casts.
	Candidate functions:
	array_extract(ANY[], BIGINT) -> ANY
	array_extract(VARCHAR, BIGINT) -> VARCHAR
	array_extract(STRUCT, VARCHAR) -> ANY
	array_extract(STRUCT, BIGINT) -> ANY


SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL:1][1]
ERROR: 
SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL:1][1]

Binder Error: ARRAY_SLICE can only operate on LISTs and VARCHARs

SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][1:NULL][1]
ERROR: 
SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][1:NULL][1]

Binder Error: ARRAY_SLICE can only operate on LISTs and VARCHARs

-- NULL index in assignment is an error
UPDATE arrtest
  SET c[NULL] = '{"can''t assign"}'
  WHERE array_dims(c) is not null
ERROR: 
-- NULL index in assignment is an error
UPDATE arrtest
  SET c[NULL] = '{"can''t assign"}'
  WHERE array_dims(c) is not null

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 3: UPDATE arrtest
               ^

UPDATE arrtest
  SET c[NULL:1] = '{"can''t assign"}'
  WHERE array_dims(c) is not null
ERROR: 
UPDATE arrtest
  SET c[NULL:1] = '{"can''t assign"}'
  WHERE array_dims(c) is not null

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 2: UPDATE arrtest
               ^

UPDATE arrtest
  SET c[1:NULL] = '{"can''t assign"}'
  WHERE array_dims(c) is not null
ERROR: 
UPDATE arrtest
  SET c[1:NULL] = '{"can''t assign"}'
  WHERE array_dims(c) is not null

Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 2: UPDATE arrtest
               ^

-- Un-subscriptable type
SELECT (now())[1]
ERROR: 
-- Un-subscriptable type
SELECT (now())[1]

Binder Error: No function matches the given name and argument types 'array_extract(TIMESTAMP WITH TIME ZONE, INTEGER_LITERAL)'. You might need to add explicit type casts.
	Candidate functions:
	array_extract(ANY[], BIGINT) -> ANY
	array_extract(VARCHAR, BIGINT) -> VARCHAR
	array_extract(STRUCT, VARCHAR) -> ANY
	array_extract(STRUCT, BIGINT) -> ANY



-- test slices with empty lower and/or upper index
CREATE TEMP TABLE arrtest_s (
  a       int2[],
  b       int2[][]
)

INSERT INTO arrtest_s VALUES ('{1,2,3,4,5}', '{{1,2,3}, {4,5,6}, {7,8,9}}')
ERROR: 
INSERT INTO arrtest_s VALUES ('{1,2,3,4,5}', '{{1,2,3}, {4,5,6}, {7,8,9}}')

Conversion Error: Type VARCHAR with value '{1,2,3,4,5}' can't be cast to the destination type LIST
LINE 2: INSERT INTO arrtest_s VALUES ('{1,2,3,4,5}', '{{1,2,3}, {4,5,6}, {7,...
                                      ^

INSERT INTO arrtest_s VALUES ('[0:4]={1,2,3,4,5}', '[0:2][0:2]={{1,2,3}, {4,5,6}, {7,8,9}}')
ERROR: 
INSERT INTO arrtest_s VALUES ('[0:4]={1,2,3,4,5}', '[0:2][0:2]={{1,2,3}, {4,5,6}, {7,8,9}}')

Conversion Error: Type VARCHAR with value '[0:4]={1,2,3,4,5}' can't be cast to the destination type LIST
LINE 2: INSERT INTO arrtest_s VALUES ('[0:4]={1,2,3,4,5}', '[0:2][0:2]={{1,2...
                                      ^


SELECT * FROM arrtest_s
RESULT: 
	[]

SELECT a[:3], b[:2][:2] FROM arrtest_s
RESULT: 
	[]

SELECT a[2:], b[2:][2:] FROM arrtest_s
RESULT: 
	[]

SELECT a[:], b[:] FROM arrtest_s
RESULT: 
	[]


-- updates
UPDATE arrtest_s SET a[:3] = '{11, 12, 13}', b[:2][:2] = '{{11,12}, {14,15}}'
  WHERE array_lower(a,1) = 1
ERROR: 

-- updates
UPDATE arrtest_s SET a[:3] = '{11, 12, 13}', b[:2][:2] = '{{11,12}, {14,15}}'
  WHERE array_lower(a,1) = 1

Catalog Error: Scalar Function with name array_lower does not exist!
Did you mean "array_where"?
LINE 5:   WHERE array_lower(a,1) = 1
                ^

SELECT * FROM arrtest_s
RESULT: 
	[]

UPDATE arrtest_s SET a[3:] = '{23, 24, 25}', b[2:][2:] = '{{25,26}, {28,29}}'

SELECT * FROM arrtest_s
RESULT: 
	[]

UPDATE arrtest_s SET a[:] = '{11, 12, 13, 14, 15}'

SELECT * FROM arrtest_s
RESULT: 
	[]

UPDATE arrtest_s SET a[:] = '{23, 24, 25}'
  -- fail, too small
INSERT INTO arrtest_s VALUES(NULL, NULL)

UPDATE arrtest_s SET a[:] = '{11, 12, 13, 14, 15}'
ERROR: 
UPDATE arrtest_s SET a[:] = '{11, 12, 13, 14, 15}'

Conversion Error: Type VARCHAR with value '{11, 12, 13, 14, 15}' can't be cast to the destination type LIST
LINE 2: UPDATE arrtest_s SET a[:] = '{11, 12, 13, 14, 15}'
                                    ^
  -- fail, no good with null

-- we want to work with a point_tbl that includes a null
CREATE TEMP TABLE point_tbl AS SELECT * FROM public.point_tbl
ERROR:   -- fail, no good with null

-- we want to work with a point_tbl that includes a null
CREATE TEMP TABLE point_tbl AS SELECT * FROM public.point_tbl

Catalog Error: Table with name point_tbl does not exist!
Did you mean "memory.INT2_TBL"?
LINE 4: ...ail, no good with null

-- we want to work with a point_tbl that includes a null
CREATE TEMP TABLE point_tbl AS SELECT * FROM public.point_tbl
                                                  ^

INSERT INTO POINT_TBL(f1) VALUES (NULL)
ERROR: 
INSERT INTO POINT_TBL(f1) VALUES (NULL)

Catalog Error: Table with name POINT_TBL does not exist!
Did you mean "INT2_TBL"?


-- check with fixed-length-array type, such as point
SELECT f1[0:1] FROM POINT_TBL
ERROR: 

-- check with fixed-length-array type, such as point
SELECT f1[0:1] FROM POINT_TBL

Catalog Error: Table with name POINT_TBL does not exist!
Did you mean "INT2_TBL"?

SELECT f1[0:] FROM POINT_TBL
ERROR: 
SELECT f1[0:] FROM POINT_TBL

Catalog Error: Table with name POINT_TBL does not exist!
Did you mean "INT2_TBL"?

SELECT f1[:1] FROM POINT_TBL
ERROR: 
SELECT f1[:1] FROM POINT_TBL

Catalog Error: Table with name POINT_TBL does not exist!
Did you mean "INT2_TBL"?

SELECT f1[:] FROM POINT_TBL
ERROR: 
SELECT f1[:] FROM POINT_TBL

Catalog Error: Table with name POINT_TBL does not exist!
Did you mean "INT2_TBL"?


-- subscript assignments to fixed-width result in NULL if previous value is NULL
UPDATE point_tbl SET f1[0] = 10 WHERE f1 IS NULL RETURNING *
ERROR: 

-- subscript assignments to fixed-width result in NULL if previous value is NULL
UPDATE point_tbl SET f1[0] = 10 WHERE f1 IS NULL RETURNING *

Catalog Error: Table with name point_tbl does not exist!
Did you mean "INT2_TBL"?
LINE 4: UPDATE point_tbl SET f1[0] = 10 WHERE f1 IS NULL RETURNING *
...
               ^

INSERT INTO point_tbl(f1[0]) VALUES(0) RETURNING *
ERROR: 
INSERT INTO point_tbl(f1[0]) VALUES(0) RETURNING *

Catalog Error: Table with name point_tbl does not exist!
Did you mean "INT2_TBL"?

-- NULL assignments get ignored
UPDATE point_tbl SET f1[0] = NULL WHERE f1::text = '(10,10)'::point::text RETURNING *
ERROR: 
-- NULL assignments get ignored
UPDATE point_tbl SET f1[0] = NULL WHERE f1::text = '(10,10)'::point::text RETURNING *

Catalog Error: Table with name point_tbl does not exist!
Did you mean "INT2_TBL"?
LINE 3: UPDATE point_...
               ^

-- but non-NULL subscript assignments work
UPDATE point_tbl SET f1[0] = -10, f1[1] = -10 WHERE f1::text = '(10,10)'::point::text RETURNING *
ERROR: 
-- but non-NULL subscript assignments work
UPDATE point_tbl SET f1[0] = -10, f1[1] = -10 WHERE f1::text = '(10,10)'::point::text RETURNING *

Catalog Error: Table with name point_tbl does not exist!
Did you mean "INT2_TBL"?
LINE 3: UP...
               ^

-- but not to expand the range
UPDATE point_tbl SET f1[3] = 10 WHERE f1::text = '(-10,-10)'::point::text RETURNING *
ERROR: 
-- but not to expand the range
UPDATE point_tbl SET f1[3] = 10 WHERE f1::text = '(-10,-10)'::point::text RETURNING *

Catalog Error: Table with name point_tbl does not exist!
Did you mean "INT2_TBL"?
LINE 3: UPDATE point_t...
               ^


--
-- test array extension
--
CREATE TEMP TABLE arrtest1 (i int[], t text[])

insert into arrtest1 values(array[1,2,null,4], array['one','two',null,'four'])

select * from arrtest1
RESULT: 
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

update arrtest1 set i[2] = 22, t[2] = 'twenty-two'
ERROR: 
update arrtest1 set i[2] = 22, t[2] = 'twenty-two'

Conversion Error: Unimplemented type for cast (INTEGER -> INTEGER[])
LINE 2: update arrtest1 set i[2] = 22, t[2] = 'twenty-two'
                                   ^

select * from arrtest1
RESULT: 
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

update arrtest1 set i[5] = 5, t[5] = 'five'
ERROR: 
update arrtest1 set i[5] = 5, t[5] = 'five'

Conversion Error: Unimplemented type for cast (INTEGER -> INTEGER[])
LINE 2: update arrtest1 set i[5] = 5, t[5] = 'five'
                                   ^

select * from arrtest1
RESULT: 
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

update arrtest1 set i[8] = 8, t[8] = 'eight'
ERROR: 
update arrtest1 set i[8] = 8, t[8] = 'eight'

Conversion Error: Unimplemented type for cast (INTEGER -> INTEGER[])
LINE 2: update arrtest1 set i[8] = 8, t[8] = 'eight'
                                   ^

select * from arrtest1
RESULT: 
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

update arrtest1 set i[0] = 0, t[0] = 'zero'
ERROR: 
update arrtest1 set i[0] = 0, t[0] = 'zero'

Conversion Error: Unimplemented type for cast (INTEGER -> INTEGER[])
LINE 2: update arrtest1 set i[0] = 0, t[0] = 'zero'
                                   ^

select * from arrtest1
RESULT: 
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

update arrtest1 set i[-3] = -3, t[-3] = 'minus-three'
ERROR: 
update arrtest1 set i[-3] = -3, t[-3] = 'minus-three'

Conversion Error: Unimplemented type for cast (INTEGER -> INTEGER[])
LINE 2: update arrtest1 set i[-3] = -3, t[-3] = 'minus-three'
                                    ^

select * from arrtest1
RESULT: 
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

update arrtest1 set i[0:2] = array[10,11,12], t[0:2] = array['ten','eleven','twelve']

select * from arrtest1
RESULT: 
	[([10, 11, 12], ['ten', 'eleven', 'twelve'])]

update arrtest1 set i[8:10] = array[18,null,20], t[8:10] = array['p18',null,'p20']

select * from arrtest1
RESULT: 
	[([18, None, 20], ['p18', None, 'p20'])]

update arrtest1 set i[11:12] = array[null,22], t[11:12] = array[null,'p22']

select * from arrtest1
RESULT: 
	[([None, 22], [None, 'p22'])]

update arrtest1 set i[15:16] = array[null,26], t[15:16] = array[null,'p26']

select * from arrtest1
RESULT: 
	[([None, 26], [None, 'p26'])]

update arrtest1 set i[-5:-3] = array[-15,-14,-13], t[-5:-3] = array['m15','m14','m13']

select * from arrtest1
RESULT: 
	[([-15, -14, -13], ['m15', 'm14', 'm13'])]

update arrtest1 set i[-7:-6] = array[-17,null], t[-7:-6] = array['m17',null]

select * from arrtest1
RESULT: 
	[([-17, None], ['m17', None])]

update arrtest1 set i[-12:-10] = array[-22,null,-20], t[-12:-10] = array['m22',null,'m20']

select * from arrtest1
RESULT: 
	[([-22, None, -20], ['m22', None, 'm20'])]

delete from arrtest1

insert into arrtest1 values(array[1,2,null,4], array['one','two',null,'four'])

select * from arrtest1
RESULT: 
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

update arrtest1 set i[0:5] = array[0,1,2,null,4,5], t[0:5] = array['z','p1','p2',null,'p4','p5']

select * from arrtest1
RESULT: 
	[([0, 1, 2, None, 4, 5], ['z', 'p1', 'p2', None, 'p4', 'p5'])]


--
-- array expressions and operators
--

-- table creation and INSERTs
CREATE TEMP TABLE arrtest2 (i integer ARRAY[4], f float8[], n numeric[], t text[], d timestamp[])

INSERT INTO arrtest2 VALUES(
  ARRAY[[[113,142],[1,147]]],
  ARRAY[1.1,1.2,1.3]::float8[],
  ARRAY[1.1,1.2,1.3],
  ARRAY[[['aaa','aab'],['aba','abb'],['aca','acb']],[['baa','bab'],['bba','bbb'],['bca','bcb']]],
  ARRAY['19620326','19931223','19970117']::timestamp[]
)
ERROR: 
INSERT INTO arrtest2 VALUES(
  ARRAY[[[113,142],[1,147]]],
  ARRAY[1.1,1.2,1.3]::float8[],
  ARRAY[1.1,1.2,1.3],
  ARRAY[[['aaa','aab'],['aba','abb'],['aca','acb']],[['baa','bab'],['bba','bbb'],['bca','bcb']]],
  ARRAY['19620326','19931223','19970117']::timestamp[]
)

Conversion Error: Cannot cast list with length 1 to array with length 4


-- some more test data
CREATE TEMP TABLE arrtest_f (f0 int, f1 text, f2 float8)

insert into arrtest_f values(1,'cat1',1.21)

insert into arrtest_f values(2,'cat1',1.24)

insert into arrtest_f values(3,'cat1',1.18)

insert into arrtest_f values(4,'cat1',1.26)

insert into arrtest_f values(5,'cat1',1.15)

insert into arrtest_f values(6,'cat2',1.15)

insert into arrtest_f values(7,'cat2',1.26)

insert into arrtest_f values(8,'cat2',1.32)

insert into arrtest_f values(9,'cat2',1.30)


CREATE TEMP TABLE arrtest_i (f0 int, f1 text, f2 int)

insert into arrtest_i values(1,'cat1',21)

insert into arrtest_i values(2,'cat1',24)

insert into arrtest_i values(3,'cat1',18)

insert into arrtest_i values(4,'cat1',26)

insert into arrtest_i values(5,'cat1',15)

insert into arrtest_i values(6,'cat2',15)

insert into arrtest_i values(7,'cat2',26)

insert into arrtest_i values(8,'cat2',32)

insert into arrtest_i values(9,'cat2',30)


-- expressions
SELECT t.f[1][3][1] AS "131", t.f[2][2][1] AS "221" FROM (
  SELECT ARRAY[[[111,112],[121,122],[131,132]],[[211,212],[221,122],[231,232]]] AS f
) AS t
RESULT: 
	[(131, 221)]

SELECT ARRAY[[[[[['hello'],['world']]]]]]
RESULT: 
	[([[[[[['hello'], ['world']]]]]],)]

SELECT ARRAY[ARRAY['hello'],ARRAY['world']]
RESULT: 
	[([['hello'], ['world']],)]

SELECT ARRAY(select f2 from arrtest_f order by f2) AS "ARRAY"
RESULT: 
	[([1.15, 1.15, 1.18, 1.21, 1.24, 1.26, 1.26, 1.3, 1.32],)]


-- with nulls
SELECT '{1,null,3}'::int[]
ERROR: 

-- with nulls
SELECT '{1,null,3}'::int[]

Conversion Error: Type VARCHAR with value '{1,null,3}' can't be cast to the destination type LIST

SELECT ARRAY[1,NULL,3]
RESULT: 
	[([1, None, 3],)]


-- functions
SELECT array_append(array[42], 6) AS "{42,6}"
RESULT: 
	[([42, 6],)]

SELECT array_prepend(6, array[42]) AS "{6,42}"
RESULT: 
	[([6, 42],)]

SELECT array_cat(ARRAY[1,2], ARRAY[3,4]) AS "{1,2,3,4}"
RESULT: 
	[([1, 2, 3, 4],)]

SELECT array_cat(ARRAY[1,2], ARRAY[[3,4],[5,6]]) AS "{{1,2},{3,4},{5,6}}"
ERROR: 
SELECT array_cat(ARRAY[1,2], ARRAY[[3,4],[5,6]]) AS "{{1,2},{3,4},{5,6}}"

Binder Error: Cannot concatenate lists of types INTEGER[] and INTEGER[][] - an explicit cast is required

SELECT array_cat(ARRAY[[3,4],[5,6]], ARRAY[1,2]) AS "{{3,4},{5,6},{1,2}}"
ERROR: 
SELECT array_cat(ARRAY[[3,4],[5,6]], ARRAY[1,2]) AS "{{3,4},{5,6},{1,2}}"

Binder Error: Cannot concatenate lists of types INTEGER[][] and INTEGER[] - an explicit cast is required


SELECT array_position(ARRAY[1,2,3,4,5], 4)
RESULT: 
	[(4,)]

SELECT array_position(ARRAY[5,3,4,2,1], 4)
RESULT: 
	[(3,)]

SELECT array_position(ARRAY[[1,2],[3,4]], 3)
ERROR: 
SELECT array_position(ARRAY[[1,2],[3,4]], 3)

Binder Error: Cannot get list_position of element of type INTEGER in a list of type INTEGER[][] - an explicit cast is required

SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon')
RESULT: 
	[(2,)]

SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'sat')
RESULT: 
	[(7,)]

SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], NULL)
RESULT: 
	[(None,)]

SELECT array_position(ARRAY['sun','mon','tue','wed','thu',NULL,'fri','sat'], NULL)
RESULT: 
	[(None,)]

SELECT array_position(ARRAY['sun','mon','tue','wed','thu',NULL,'fri','sat'], 'sat')
RESULT: 
	[(8,)]


SELECT array_positions(NULL, 10)
ERROR: 

SELECT array_positions(NULL, 10)

Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

SELECT array_positions(NULL, NULL::int)
ERROR: 
SELECT array_positions(NULL, NULL::int)

Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], 4)
ERROR: 
SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], 4)

Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

SELECT array_positions(ARRAY[[1,2],[3,4]], 4)
ERROR: 
SELECT array_positions(ARRAY[[1,2],[3,4]], 4)

Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], NULL)
ERROR: 
SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], NULL)

Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

SELECT array_positions(ARRAY[1,2,3,NULL,5,6,1,2,3,NULL,5,6], NULL)
ERROR: 
SELECT array_positions(ARRAY[1,2,3,NULL,5,6,1,2,3,NULL,5,6], NULL)

Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

SELECT array_length(array_positions(ARRAY(SELECT 'AAAAAAAAAAAAAAAAAAAAAAAAA'::text || i % 10
                                          FROM generate_series(1,100) g(i)),
                                  'AAAAAAAAAAAAAAAAAAAAAAAAA5'), 1)
ERROR: 
SELECT array_length(array_positions(ARRAY(SELECT 'AAAAAAAAAAAAAAAAAAAAAAAAA'::text || i % 10
                                          FROM generate_series(1,100) g(i)),
                                  'AAAAAAAAAAAAAAAAAAAAAAAAA5'), 1)

Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?


DO $$
DECLARE
  o int;
  a int[] := ARRAY[1,2,3,2,3,1,2];
BEGIN
  o := array_position(a, 2);
  WHILE o IS NOT NULL
  LOOP
    RAISE NOTICE '%', o;
    o := array_position(a, 2, o + 1);
  END LOOP;
END
$$ LANGUAGE plpgsql
ERROR: 

DO $$
DECLARE
  o int;
  a int[] := ARRAY[1,2,3,2,3,1,2];
BEGIN
  o := array_position(a, 2);
  WHILE o IS NOT NULL
  LOOP
    RAISE NOTICE '%', o;
    o := array_position(a, 2, o + 1);
  END LOOP;
END
$$ LANGUAGE plpgsql

Parser Error: syntax error at or near "DO"


SELECT array_position('[2:4]={1,2,3}'::int[], 1)
ERROR: 

SELECT array_position('[2:4]={1,2,3}'::int[], 1)

Conversion Error: Type VARCHAR with value '[2:4]={1,2,3}' can't be cast to the destination type LIST

SELECT array_positions('[2:4]={1,2,3}'::int[], 1)
ERROR: 
SELECT array_positions('[2:4]={1,2,3}'::int[], 1)

Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?


SELECT
    array_position(ids, (1, 1)),
    array_positions(ids, (1, 1))
        FROM
(VALUES
    (ARRAY[(0, 0), (1, 1)]),
    (ARRAY[(1, 1)])
) AS f (ids)
ERROR: 

SELECT
    array_position(ids, (1, 1)),
    array_positions(ids, (1, 1))
        FROM
(VALUES
    (ARRAY[(0, 0), (1, 1)]),
    (ARRAY[(1, 1)])
) AS f (ids)

Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?


-- operators
SELECT a FROM arrtest WHERE b = ARRAY[[[113,142],[1,147]]]
ERROR: 

-- operators
SELECT a FROM arrtest WHERE b = ARRAY[[[113,142],[1,147]]]

Catalog Error: Table with name arrtest does not exist!
Did you mean "arrtest1"?

SELECT NOT ARRAY[1.1,1.2,1.3] = ARRAY[1.1,1.2,1.3] AS "FALSE"
RESULT: 
	[(False,)]

SELECT ARRAY[1,2] || 3 AS "{1,2,3}"
RESULT: 
	[('[1, 2]3',)]

SELECT 0 || ARRAY[1,2] AS "{0,1,2}"
RESULT: 
	[('0[1, 2]',)]

SELECT ARRAY[1,2] || ARRAY[3,4] AS "{1,2,3,4}"
RESULT: 
	[([1, 2, 3, 4],)]

SELECT ARRAY[[['hello','world']]] || ARRAY[[['happy','birthday']]] AS "ARRAY"
RESULT: 
	[([[['hello', 'world']], [['happy', 'birthday']]],)]

SELECT ARRAY[[1,2],[3,4]] || ARRAY[5,6] AS "{{1,2},{3,4},{5,6}}"
ERROR: 
SELECT ARRAY[[1,2],[3,4]] || ARRAY[5,6] AS "{{1,2},{3,4},{5,6}}"

Binder Error: Cannot concatenate lists of types INTEGER[][] and INTEGER[] - an explicit cast is required

SELECT ARRAY[0,0] || ARRAY[1,1] || ARRAY[2,2] AS "{0,0,1,1,2,2}"
RESULT: 
	[([0, 0, 1, 1, 2, 2],)]

SELECT 0 || ARRAY[1,2] || 3 AS "{0,1,2,3}"
RESULT: 
	[('0[1, 2]3',)]

SELECT ARRAY[1.1] || ARRAY[2,3,4]
RESULT: 
	[([Decimal('1.1'), Decimal('2.0'), Decimal('3.0'), Decimal('4.0')],)]

SELECT array_agg(x) || array_agg(x) FROM (VALUES (ROW(1,2)), (ROW(3,4))) v(x)
RESULT: 
	[([(1, 2), (3, 4), (1, 2), (3, 4)],)]

SELECT ROW(1,2) || array_agg(x) FROM (VALUES (ROW(3,4)), (ROW(5,6))) v(x)
RESULT: 
	[('(1, 2)[(3, 4), (5, 6)]',)]


SELECT * FROM array_op_test WHERE i @> '{32}' ORDER BY seqno
ERROR: 

SELECT * FROM array_op_test WHERE i @> '{32}' ORDER BY seqno

Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

SELECT * FROM array_op_test WHERE i && '{32}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE i && '{32}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


SELECT * FROM array_op_test WHERE i @> '{17}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE i @> '{17}' ORDER BY seqno

Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

SELECT * FROM array_op_test WHERE i && '{17}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE i && '{17}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


SELECT * FROM array_op_test WHERE i @> '{32,17}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE i @> '{32,17}' ORDER BY seqno

Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

SELECT * FROM array_op_test WHERE i && '{32,17}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE i && '{32,17}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


SELECT * FROM array_op_test WHERE i <@ '{38,34,32,89}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE i <@ '{38,34,32,89}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


SELECT * FROM array_op_test WHERE i = '{}' ORDER BY seqno
RESULT: 
	[]

SELECT * FROM array_op_test WHERE i @> '{}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE i @> '{}' ORDER BY seqno

Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

SELECT * FROM array_op_test WHERE i && '{}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE i && '{}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


SELECT * FROM array_op_test WHERE i <@ '{}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE i <@ '{}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


SELECT * FROM array_op_test WHERE i = '{NULL}' ORDER BY seqno
RESULT: 
	[]

SELECT * FROM array_op_test WHERE i @> '{NULL}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE i @> '{NULL}' ORDER BY seqno

Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

SELECT * FROM array_op_test WHERE i && '{NULL}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE i && '{NULL}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


SELECT * FROM array_op_test WHERE i <@ '{NULL}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE i <@ '{NULL}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN



SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908}' ORDER BY seqno
ERROR: 

SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908}' ORDER BY seqno

Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, VARCHAR)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


SELECT * FROM array_op_test WHERE t @> '{AAAAAAAAAA646}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE t @> '{AAAAAAAAAA646}' ORDER BY seqno

Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

SELECT * FROM array_op_test WHERE t && '{AAAAAAAAAA646}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE t && '{AAAAAAAAAA646}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, VARCHAR)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno

Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, VARCHAR)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


SELECT * FROM array_op_test WHERE t <@ '{AAAAAAAA72908,AAAAAAAAAAAAAAAAAAA17075,AA88409,AAAAAAAAAAAAAAAAAA36842,AAAAAAA48038,AAAAAAAAAAAAAA10611}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE t <@ '{AAAAAAAA72908,AAAAAAAAAAAAAAAAAAA17075,AA88409,AAAAAAAAAAAAAAAAAA36842,AAAAAAA48038,AAAAAAAAAAAAAA10611}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, VARCHAR)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


SELECT * FROM array_op_test WHERE t = '{}' ORDER BY seqno
RESULT: 
	[]

SELECT * FROM array_op_test WHERE t @> '{}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE t @> '{}' ORDER BY seqno

Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

SELECT * FROM array_op_test WHERE t && '{}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE t && '{}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, VARCHAR)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


SELECT * FROM array_op_test WHERE t <@ '{}' ORDER BY seqno
ERROR: 
SELECT * FROM array_op_test WHERE t <@ '{}' ORDER BY seqno

Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, VARCHAR)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN



-- array casts
SELECT ARRAY[1,2,3]::text[]::int[]::float8[] AS "{1,2,3}"
RESULT: 
	[([1.0, 2.0, 3.0],)]

SELECT pg_typeof(ARRAY[1,2,3]::text[]::int[]::float8[]) AS "double precision[]"
RESULT: 
	[('double[]',)]

SELECT ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[] AS "{{a,bc},{def,hijk}}"
RESULT: 
	[(['[a, bc]', '[def, hijk]'],)]

SELECT pg_typeof(ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[]) AS "character varying[]"
RESULT: 
	[('varchar[]',)]

SELECT CAST(ARRAY[[[[[['a','bb','ccc']]]]]] as text[]) as "{{{{{{a,bb,ccc}}}}}}"
RESULT: 
	[(['[[[[[a, bb, ccc]]]]]'],)]

SELECT NULL::text[]::int[] AS "NULL"
RESULT: 
	[(None,)]


-- scalar op any/all (array)
select 33 = any ('{1,2,3}')
ERROR: 

-- scalar op any/all (array)
select 33 = any ('{1,2,3}')

Binder Error: UNNEST() for correlated expressions is not supported yet

select 33 = any ('{1,2,33}')
ERROR: 
select 33 = any ('{1,2,33}')

Binder Error: UNNEST() for correlated expressions is not supported yet

select 33 = all ('{1,2,33}')
ERROR: 
select 33 = all ('{1,2,33}')

Binder Error: UNNEST() for correlated expressions is not supported yet

select 33 >= all ('{1,2,33}')
ERROR: 
select 33 >= all ('{1,2,33}')

Binder Error: UNNEST() for correlated expressions is not supported yet

-- boundary cases
select null::int >= all ('{1,2,33}')
ERROR: 
-- boundary cases
select null::int >= all ('{1,2,33}')

Binder Error: UNNEST() for correlated expressions is not supported yet

select null::int >= all ('{}')
ERROR: 
select null::int >= all ('{}')

Binder Error: UNNEST() for correlated expressions is not supported yet

select null::int >= any ('{}')
ERROR: 
select null::int >= any ('{}')

Binder Error: UNNEST() for correlated expressions is not supported yet

-- cross-datatype
select 33.4 = any (array[1,2,3])
RESULT: 
	[(False,)]

select 33.4 > all (array[1,2,3])
RESULT: 
	[(True,)]

-- errors
select 33 * any ('{1,2,3}')
ERROR: 
-- errors
select 33 * any ('{1,2,3}')

Parser Error: Unsupported comparison "*" for ANY/ALL subquery

select 33 * any (44)
ERROR: 
select 33 * any (44)

Parser Error: Unsupported comparison "*" for ANY/ALL subquery

-- nulls
select 33 = any (null::int[])
RESULT: 
	[(False,)]

select null::int = any ('{1,2,3}')
ERROR: 
select null::int = any ('{1,2,3}')

Binder Error: UNNEST() for correlated expressions is not supported yet

select 33 = any ('{1,null,3}')
ERROR: 
select 33 = any ('{1,null,3}')

Binder Error: UNNEST() for correlated expressions is not supported yet

select 33 = any ('{1,null,33}')
ERROR: 
select 33 = any ('{1,null,33}')

Binder Error: UNNEST() for correlated expressions is not supported yet

select 33 = all (null::int[])
RESULT: 
	[(True,)]

select null::int = all ('{1,2,3}')
ERROR: 
select null::int = all ('{1,2,3}')

Binder Error: UNNEST() for correlated expressions is not supported yet

select 33 = all ('{1,null,3}')
ERROR: 
select 33 = all ('{1,null,3}')

Binder Error: UNNEST() for correlated expressions is not supported yet

select 33 = all ('{33,null,33}')
ERROR: 
select 33 = all ('{33,null,33}')

Binder Error: UNNEST() for correlated expressions is not supported yet

-- nulls later in the bitmap
SELECT -1 != ALL(ARRAY(SELECT NULLIF(g.i, 900) FROM generate_series(1,1000) g(i)))
RESULT: 
	[(None,)]


-- test indexes on arrays
create temp table arr_tbl (f1 int[] unique)
ERROR: 

-- test indexes on arrays
create temp table arr_tbl (f1 int[] unique)

Invalid type Error: Invalid Type [INTEGER[]]: Invalid type for index key.

insert into arr_tbl values ('{1,2,3}')
ERROR: 
insert into arr_tbl values ('{1,2,3}')

Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

insert into arr_tbl values ('{1,2}')
ERROR: 
insert into arr_tbl values ('{1,2}')

Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

-- failure expected:
insert into arr_tbl values ('{1,2,3}')
ERROR: 
-- failure expected:
insert into arr_tbl values ('{1,2,3}')

Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

insert into arr_tbl values ('{2,3,4}')
ERROR: 
insert into arr_tbl values ('{2,3,4}')

Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

insert into arr_tbl values ('{1,5,3}')
ERROR: 
insert into arr_tbl values ('{1,5,3}')

Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

insert into arr_tbl values ('{1,2,10}')
ERROR: 
insert into arr_tbl values ('{1,2,10}')

Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?


set enable_seqscan to off
ERROR: 

set enable_seqscan to off

Catalog Error: unrecognized configuration parameter "enable_seqscan"

Did you mean: "enable_object_cache"

set enable_bitmapscan to off
ERROR: 
set enable_bitmapscan to off

Catalog Error: unrecognized configuration parameter "enable_bitmapscan"

Did you mean: "enable_object_cache"

select * from arr_tbl where f1 > '{1,2,3}' and f1 <= '{1,5,3}'
ERROR: 
select * from arr_tbl where f1 > '{1,2,3}' and f1 <= '{1,5,3}'

Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

select * from arr_tbl where f1 >= '{1,2,3}' and f1 < '{1,5,3}'
ERROR: 
select * from arr_tbl where f1 >= '{1,2,3}' and f1 < '{1,5,3}'

Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?


-- test ON CONFLICT DO UPDATE with arrays
create temp table arr_pk_tbl (pk int4 primary key, f1 int[])

insert into arr_pk_tbl values (1, '{1,2,3}')
ERROR: 
insert into arr_pk_tbl values (1, '{1,2,3}')

Conversion Error: Type VARCHAR with value '{1,2,3}' can't be cast to the destination type LIST
LINE 2: insert into arr_pk_tbl values (1, '{1,2,3}')
                                          ^

insert into arr_pk_tbl values (1, '{3,4,5}') on conflict (pk)
  do update set f1[1] = excluded.f1[1], f1[3] = excluded.f1[3]
  returning pk, f1
ERROR: 
insert into arr_pk_tbl values (1, '{3,4,5}') on conflict (pk)
  do update set f1[1] = excluded.f1[1], f1[3] = excluded.f1[3]
  returning pk, f1

Binder Error: Multiple assignments to same column "f1"

insert into arr_pk_tbl(pk, f1[1:2]) values (1, '{6,7,8}') on conflict (pk)
  do update set f1[1] = excluded.f1[1],
    f1[2] = excluded.f1[2],
    f1[3] = excluded.f1[3]
  returning pk, f1
ERROR: 
insert into arr_pk_tbl(pk, f1[1:2]) values (1, '{6,7,8}') on conflict (pk)
  do update set f1[1] = excluded.f1[1],
    f1[2] = excluded.f1[2],
    f1[3] = excluded.f1[3]
  returning pk, f1

Binder Error: Multiple assignments to same column "f1"


-- note: if above selects don''t produce the expected tuple order,
-- then you didn''t get an indexscan plan, and something is busted.
reset enable_seqscan
ERROR: 

-- note: if above selects don''t produce the expected tuple order,
-- then you didn''t get an indexscan plan, and something is busted.
reset enable_seqscan

Catalog Error: unrecognized configuration parameter "enable_seqscan"

Did you mean: "enable_object_cache"

reset enable_bitmapscan
ERROR: 
reset enable_bitmapscan

Catalog Error: unrecognized configuration parameter "enable_bitmapscan"

Did you mean: "enable_object_cache"


-- test subscript overflow detection

-- The normal error message includes a platform-dependent limit,
-- so suppress it to avoid needing multiple expected-files.
-- \set VERBOSITY sqlstate

insert into arr_pk_tbl values(10, '[-2147483648:-2147483647]={1,2}')
ERROR: 

-- test subscript overflow detection

-- The normal error message includes a platform-dependent limit,
-- so suppress it to avoid needing multiple expected-files.
-- \set VERBOSITY sqlstate

insert into arr_pk_tbl values(10, '[-2147483648:-2147483647]={1,2}')

Conversion Error: Type VARCHAR with value '[-2147483648:-2147483647]={1,2}' can't be cast to the destination type LIST
LINE 9: insert into arr_pk_tbl values(10, '[-2147483648:-2147483647]={1,2}')
                                          ^

update arr_pk_tbl set f1[2147483647] = 42 where pk = 10

update arr_pk_tbl set f1[2147483646:2147483647] = array[4,2] where pk = 10


-- also exercise the expanded-array case
do $$ declare a int[];
begin
  a := '[-2147483648:-2147483647]={1,2}'::int[];
  a[2147483647] := 42;
end $$
ERROR: 

-- also exercise the expanded-array case
do $$ declare a int[];
begin
  a := '[-2147483648:-2147483647]={1,2}'::int[];
  a[2147483647] := 42;
end $$

Parser Error: syntax error at or near "do"


-- \set VERBOSITY default

-- test [not] (like|ilike) (any|all) (...)
select 'foo' like any (array['%a', '%o'])
ERROR: 

-- \set VERBOSITY default

-- test [not] (like|ilike) (any|all) (...)
select 'foo' like any (array['%a', '%o'])

Parser Error: Unsupported comparison "~~" for ANY/ALL subquery
 -- t
select 'foo' like any (array['%a', '%b'])
ERROR:  -- t
select 'foo' like any (array['%a', '%b'])

Parser Error: Unsupported comparison "~~" for ANY/ALL subquery
 -- f
select 'foo' like all (array['f%', '%o'])
ERROR:  -- f
select 'foo' like all (array['f%', '%o'])

Parser Error: Unsupported comparison "~~" for ANY/ALL subquery
 -- t
select 'foo' like all (array['f%', '%b'])
ERROR:  -- t
select 'foo' like all (array['f%', '%b'])

Parser Error: Unsupported comparison "~~" for ANY/ALL subquery
 -- f
select 'foo' not like any (array['%a', '%b'])
ERROR:  -- f
select 'foo' not like any (array['%a', '%b'])

Parser Error: Unsupported comparison "!~~" for ANY/ALL subquery
 -- t
select 'foo' not like all (array['%a', '%o'])
ERROR:  -- t
select 'foo' not like all (array['%a', '%o'])

Parser Error: Unsupported comparison "!~~" for ANY/ALL subquery
 -- f
select 'foo' ilike any (array['%A', '%O'])
ERROR:  -- f
select 'foo' ilike any (array['%A', '%O'])

Parser Error: Unsupported comparison "~~*" for ANY/ALL subquery
 -- t
select 'foo' ilike all (array['F%', '%O'])
ERROR:  -- t
select 'foo' ilike all (array['F%', '%O'])

Parser Error: Unsupported comparison "~~*" for ANY/ALL subquery
 -- t

--
-- General array parser tests
--

-- none of the following should be accepted
select '{{1,{2}},{2,3}}'::text[]
ERROR:  -- t

--
-- General array parser tests
--

-- none of the following should be accepted
select '{{1,{2}},{2,3}}'::text[]

Conversion Error: Type VARCHAR with value '{{1,{2}},{2,3}}' can't be cast to the destination type LIST

select E'{{1,2},\\{2,3}}'::text[]
ERROR: 
select E'{{1,2},\\{2,3}}'::text[]

Conversion Error: Type VARCHAR with value '{{1,2},\{2,3}}' can't be cast to the destination type LIST

select '{"a"b}'::text[]
ERROR: 
select '{"a"b}'::text[]

Conversion Error: Type VARCHAR with value '{"a"b}' can't be cast to the destination type LIST

select '{a"b"}'::text[]
ERROR: 
select '{a"b"}'::text[]

Conversion Error: Type VARCHAR with value '{a"b"}' can't be cast to the destination type LIST

select '{"a""b"}'::text[]
ERROR: 
select '{"a""b"}'::text[]

Conversion Error: Type VARCHAR with value '{"a""b"}' can't be cast to the destination type LIST

select '{{"1 2" x},{3}}'::text[]
ERROR: 
select '{{"1 2" x},{3}}'::text[]

Conversion Error: Type VARCHAR with value '{{"1 2" x},{3}}' can't be cast to the destination type LIST

select '{{"1 2"} x,{3}}'::text[]
ERROR: 
select '{{"1 2"} x,{3}}'::text[]

Conversion Error: Type VARCHAR with value '{{"1 2"} x,{3}}' can't be cast to the destination type LIST

select '{}}'::text[]
ERROR: 
select '{}}'::text[]

Conversion Error: Type VARCHAR with value '{}}' can't be cast to the destination type LIST

select '{ }}'::text[]
ERROR: 
select '{ }}'::text[]

Conversion Error: Type VARCHAR with value '{ }}' can't be cast to the destination type LIST

select '}{'::text[]
ERROR: 
select '}{'::text[]

Conversion Error: Type VARCHAR with value '}{' can't be cast to the destination type LIST

select '{foo{}}'::text[]
ERROR: 
select '{foo{}}'::text[]

Conversion Error: Type VARCHAR with value '{foo{}}' can't be cast to the destination type LIST

select '{"foo"{}}'::text[]
ERROR: 
select '{"foo"{}}'::text[]

Conversion Error: Type VARCHAR with value '{"foo"{}}' can't be cast to the destination type LIST

select '{foo,,bar}'::text[]
ERROR: 
select '{foo,,bar}'::text[]

Conversion Error: Type VARCHAR with value '{foo,,bar}' can't be cast to the destination type LIST

select '{{1},{{2}}}'::text[]
ERROR: 
select '{{1},{{2}}}'::text[]

Conversion Error: Type VARCHAR with value '{{1},{{2}}}' can't be cast to the destination type LIST

select '{{{1}},{2}}'::text[]
ERROR: 
select '{{{1}},{2}}'::text[]

Conversion Error: Type VARCHAR with value '{{{1}},{2}}' can't be cast to the destination type LIST

select '{{},{{}}}'::text[]
ERROR: 
select '{{},{{}}}'::text[]

Conversion Error: Type VARCHAR with value '{{},{{}}}' can't be cast to the destination type LIST

select '{{{}},{}}'::text[]
ERROR: 
select '{{{}},{}}'::text[]

Conversion Error: Type VARCHAR with value '{{{}},{}}' can't be cast to the destination type LIST

select '{{1},{}}'::text[]
ERROR: 
select '{{1},{}}'::text[]

Conversion Error: Type VARCHAR with value '{{1},{}}' can't be cast to the destination type LIST

select '{{},{1}}'::text[]
ERROR: 
select '{{},{1}}'::text[]

Conversion Error: Type VARCHAR with value '{{},{1}}' can't be cast to the destination type LIST

select '[1:0]={}'::int[]
ERROR: 
select '[1:0]={}'::int[]

Conversion Error: Type VARCHAR with value '[1:0]={}' can't be cast to the destination type LIST

select '[2147483646:2147483647]={1,2}'::int[]
ERROR: 
select '[2147483646:2147483647]={1,2}'::int[]

Conversion Error: Type VARCHAR with value '[2147483646:2147483647]={1,2}' can't be cast to the destination type LIST

select '[1:-1]={}'::int[]
ERROR: 
select '[1:-1]={}'::int[]

Conversion Error: Type VARCHAR with value '[1:-1]={}' can't be cast to the destination type LIST

select '[2]={1}'::int[]
ERROR: 
select '[2]={1}'::int[]

Conversion Error: Type VARCHAR with value '[2]={1}' can't be cast to the destination type LIST

select '[1:]={1}'::int[]
ERROR: 
select '[1:]={1}'::int[]

Conversion Error: Type VARCHAR with value '[1:]={1}' can't be cast to the destination type LIST

select '[:1]={1}'::int[]
ERROR: 
select '[:1]={1}'::int[]

Conversion Error: Type VARCHAR with value '[:1]={1}' can't be cast to the destination type LIST

select array[]
RESULT: 
	[([],)]

select '{{1,},{1},}'::text[]
ERROR: 
select '{{1,},{1},}'::text[]

Conversion Error: Type VARCHAR with value '{{1,},{1},}' can't be cast to the destination type LIST

select '{{1,},{1}}'::text[]
ERROR: 
select '{{1,},{1}}'::text[]

Conversion Error: Type VARCHAR with value '{{1,},{1}}' can't be cast to the destination type LIST

select '{{1,}}'::text[]
ERROR: 
select '{{1,}}'::text[]

Conversion Error: Type VARCHAR with value '{{1,}}' can't be cast to the destination type LIST

select '{1,}'::text[]
ERROR: 
select '{1,}'::text[]

Conversion Error: Type VARCHAR with value '{1,}' can't be cast to the destination type LIST

select '[21474836488:21474836489]={1,2}'::int[]
ERROR: 
select '[21474836488:21474836489]={1,2}'::int[]

Conversion Error: Type VARCHAR with value '[21474836488:21474836489]={1,2}' can't be cast to the destination type LIST

select '[-2147483649:-2147483648]={1,2}'::int[]
ERROR: 
select '[-2147483649:-2147483648]={1,2}'::int[]

Conversion Error: Type VARCHAR with value '[-2147483649:-2147483648]={1,2}' can't be cast to the destination type LIST

-- none of the above should be accepted

-- all of the following should be accepted
select '{}'::text[]
ERROR: 
-- none of the above should be accepted

-- all of the following should be accepted
select '{}'::text[]

Conversion Error: Type VARCHAR with value '{}' can't be cast to the destination type LIST

select '{{},{}}'::text[]
ERROR: 
select '{{},{}}'::text[]

Conversion Error: Type VARCHAR with value '{{},{}}' can't be cast to the destination type LIST

select '{{{1,2,3,4},{2,3,4,5}},{{3,4,5,6},{4,5,6,7}}}'::text[]
ERROR: 
select '{{{1,2,3,4},{2,3,4,5}},{{3,4,5,6},{4,5,6,7}}}'::text[]

Conversion Error: Type VARCHAR with value '{{{1,2,3,4},{2,3,4,5}},{{3,4,5,6},{4,5,6,7}}}' can't be cast to the destination type LIST

select '{null,n\ull,"null"}'::text[]
ERROR: 
select '{null,n\ull,"null"}'::text[]

Conversion Error: Type VARCHAR with value '{null,n\ull,"null"}' can't be cast to the destination type LIST
