
-----------
QUERY:
--
-- ARRAYS
--

-- directory paths are passed to us in environment variables
-- \getenv abs_srcdir '/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests'

CREATE TABLE arrtest (
	a 			int2[],
	b 			int4[][][],
	c 			name[],
	d			text[][],
	e 			float8[],
	f			char(5)[],
	g			varchar(5)[]
);
RESULT:
	ERROR - Catalog Error: Type with name name does not exist!
Did you mean "date"?

-----------
QUERY:


CREATE TABLE array_op_test (
	seqno		int4,
	i			int4[],
	t			text[]
);
RESULT:
	[]

-----------
QUERY:


-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' '/data/array.data'
COPY array_op_test FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/array.data';
RESULT:
	ERROR - Conversion Error: CSV Error on Line: 2
Error when converting column "i".
Type VARCHAR with value '{3,6}' can't be cast to the destination type LIST
Column i is being converted as type LIST
This type was either manually set or derived from an existing table. Select a different type to correctly parse this column.
  file=/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/array.data
  delimiter = 	 (Auto-Detected)
  quote = " (Auto-Detected)
  escape = " (Auto-Detected)
  new_line = \n (Auto-Detected)
  header = true (Auto-Detected)
  skip_rows = 0 (Auto-Detected)
  date_format =  (Auto-Detected)
  timestamp_format =  (Auto-Detected)
  null_padding=0
  sample_size=20480
  ignore_errors=0
  all_varchar=0


-----------
QUERY:

ANALYZE array_op_test;
RESULT:
	[]

-----------
QUERY:


--
-- only the /* REPLACED */''e/* REPLACED */'' array is 0-based, the others are 1-based.
--

INSERT INTO arrtest (a[1:5], b[1:1][1:2][1:2], c, d, f, g)
   VALUES ('{1,2,3,4,5}', '{{{0,0},{1,2}}}', '{}', '{}', '{}', '{}');
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


UPDATE arrtest SET e[0] = '1.1';
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 3: UPDATE arrtest SET e[0] = '1.1';
               ^

-----------
QUERY:


UPDATE arrtest SET e[1] = '2.2';
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 3: UPDATE arrtest SET e[1] = '2.2';
               ^

-----------
QUERY:


INSERT INTO arrtest (f)
   VALUES ('{"too long"}');
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


INSERT INTO arrtest (a, b[1:2][1:2], c, d, e, f, g)
   VALUES ('{11,12,23}', '{{3,4},{4,5}}', '{"foobar"}',
           '{{"elt1", "elt2"}}', '{"3.4", "6.7"}',
           '{"abc","abcde"}', '{"abc","abcde"}');
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


INSERT INTO arrtest (a, b[1:2], c, d[1:2])
   VALUES ('{}', '{3,4}', '{foo,bar}', '{bar,foo}');
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


INSERT INTO arrtest (b[2]) VALUES(now());
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:
  -- error, type mismatch

INSERT INTO arrtest (b[1:2]) VALUES(now());
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:
  -- error, type mismatch

SELECT * FROM arrtest;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


SELECT arrtest.a[1],
          arrtest.b[1][1][1],
          arrtest.c[1],
          arrtest.d[1][1],
          arrtest.e[0]
   FROM arrtest;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


SELECT a[1], b[1][1][1], c[1], d[1][1], e[0]
   FROM arrtest;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


SELECT a[1:3],
          b[1:1][1:2][1:2],
          c[1:2],
          d[1:1][1:2]
   FROM arrtest;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


SELECT array_ndims(a) AS a,array_ndims(b) AS b,array_ndims(c) AS c
   FROM arrtest;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


SELECT array_dims(a) AS a,array_dims(b) AS b,array_dims(c) AS c
   FROM arrtest;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


-- returns nothing
SELECT *
   FROM arrtest
   WHERE a[1] < 5 and
         c = '{"foobar"}'::_name;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


UPDATE arrtest
  SET a[1:2] = '{16,25}'
  WHERE NOT a = '{}'::_int2;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 3: UPDATE arrtest
               ^

-----------
QUERY:


UPDATE arrtest
  SET b[1:1][1:1][1:2] = '{113, 117}',
      b[1:1][1:2][2:2] = '{142, 147}'
  WHERE array_dims(b) = '[1:1][1:2][1:2]';
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 3: UPDATE arrtest
               ^

-----------
QUERY:


UPDATE arrtest
  SET c[2:2] = '{"new_word"}'
  WHERE array_dims(c) is not null;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 3: UPDATE arrtest
               ^

-----------
QUERY:


SELECT a,b,c FROM arrtest;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


SELECT a[1:3],
          b[1:1][1:2][1:2],
          c[1:2],
          d[1:1][2:2]
   FROM arrtest;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


SELECT b[1:1][2][2],
       d[1:1][2]
   FROM arrtest;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


INSERT INTO arrtest(a) VALUES('{1,null,3}');
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:

SELECT a FROM arrtest;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:

UPDATE arrtest SET a[4] = NULL WHERE a[2] IS NULL;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 2: UPDATE arrtest SET a[4] = NULL WHERE a[2] IS ...
               ^

-----------
QUERY:

SELECT a FROM arrtest WHERE a[2] IS NULL;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:

DELETE FROM arrtest WHERE a[2] IS NULL AND b IS NULL;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 2: DELETE FROM arrtest WHERE a[2] IS NULL AND b IS NU...
                    ^

-----------
QUERY:

SELECT a,b,c FROM arrtest;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?

-----------
QUERY:


-- test non-error-throwing API
SELECT pg_input_is_valid('{1,2,3}', 'integer[]');
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_input_is_valid does not exist!
Did you mean "json_valid"?

-----------
QUERY:

SELECT pg_input_is_valid('{1,2', 'integer[]');
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_input_is_valid does not exist!
Did you mean "json_valid"?

-----------
QUERY:

SELECT pg_input_is_valid('{1,zed}', 'integer[]');
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_input_is_valid does not exist!
Did you mean "json_valid"?

-----------
QUERY:

SELECT * FROM pg_input_error_info('{1,zed}', 'integer[]');
RESULT:
	ERROR - Catalog Error: Table Function with name pg_input_error_info does not exist!
Did you mean "pragma_storage_info"?

-----------
QUERY:


-- test mixed slice/scalar subscripting
select '{{1,2,3},{4,5,6},{7,8,9}}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{1,2,3},{4,5,6},{7,8,9}}' can't be cast to the destination type LIST

-----------
QUERY:

select ('{{1,2,3},{4,5,6},{7,8,9}}'::int[])[1:2][2];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{1,2,3},{4,5,6},{7,8,9}}' can't be cast to the destination type LIST

-----------
QUERY:

select '[0:2][0:2]={{1,2,3},{4,5,6},{7,8,9}}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[0:2][0:2]={{1,2,3},{4,5,6},{7,8,9}}' can't be cast to the destination type LIST

-----------
QUERY:

select ('[0:2][0:2]={{1,2,3},{4,5,6},{7,8,9}}'::int[])[1:2][2];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[0:2][0:2]={{1,2,3},{4,5,6},{7,8,9}}' can't be cast to the destination type LIST

-----------
QUERY:


--
-- check subscription corner cases
--
-- More subscripts than MAXDIM (6)
SELECT ('{}'::int[])[1][2][3][4][5][6][7];
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'array_extract(INTEGER, INTEGER_LITERAL)'. You might need to add explicit type casts.
	Candidate functions:
	array_extract(ANY[], BIGINT) -> ANY
	array_extract(VARCHAR, BIGINT) -> VARCHAR
	array_extract(STRUCT, VARCHAR) -> ANY
	array_extract(STRUCT, BIGINT) -> ANY


-----------
QUERY:

-- NULL index yields NULL when selecting
SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL][1];
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'array_extract(INTEGER, NULL)'. You might need to add explicit type casts.
	Candidate functions:
	array_extract(ANY[], BIGINT) -> ANY
	array_extract(VARCHAR, BIGINT) -> VARCHAR
	array_extract(STRUCT, VARCHAR) -> ANY
	array_extract(STRUCT, BIGINT) -> ANY


-----------
QUERY:

SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL:1][1];
RESULT:
	ERROR - Binder Error: ARRAY_SLICE can only operate on LISTs and VARCHARs

-----------
QUERY:

SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][1:NULL][1];
RESULT:
	ERROR - Binder Error: ARRAY_SLICE can only operate on LISTs and VARCHARs

-----------
QUERY:

-- NULL index in assignment is an error
UPDATE arrtest
  SET c[NULL] = '{"can''t assign"}'
  WHERE array_dims(c) is not null;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 3: UPDATE arrtest
               ^

-----------
QUERY:

UPDATE arrtest
  SET c[NULL:1] = '{"can''t assign"}'
  WHERE array_dims(c) is not null;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 2: UPDATE arrtest
               ^

-----------
QUERY:

UPDATE arrtest
  SET c[1:NULL] = '{"can''t assign"}'
  WHERE array_dims(c) is not null;
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "array_op_test"?
LINE 2: UPDATE arrtest
               ^

-----------
QUERY:

-- Un-subscriptable type
SELECT (now())[1];
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'array_extract(TIMESTAMP WITH TIME ZONE, INTEGER_LITERAL)'. You might need to add explicit type casts.
	Candidate functions:
	array_extract(ANY[], BIGINT) -> ANY
	array_extract(VARCHAR, BIGINT) -> VARCHAR
	array_extract(STRUCT, VARCHAR) -> ANY
	array_extract(STRUCT, BIGINT) -> ANY


-----------
QUERY:


-- test slices with empty lower and/or upper index
CREATE TEMP TABLE arrtest_s (
  a       int2[],
  b       int2[][]
);
RESULT:
	[]

-----------
QUERY:

INSERT INTO arrtest_s VALUES ('{1,2,3,4,5}', '{{1,2,3}, {4,5,6}, {7,8,9}}');
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{1,2,3,4,5}' can't be cast to the destination type LIST
LINE 2: INSERT INTO arrtest_s VALUES ('{1,2,3,4,5}', '{{1,2,3}, {4,5,6}, {7,...
                                      ^

-----------
QUERY:

INSERT INTO arrtest_s VALUES ('[0:4]={1,2,3,4,5}', '[0:2][0:2]={{1,2,3}, {4,5,6}, {7,8,9}}');
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[0:4]={1,2,3,4,5}' can't be cast to the destination type LIST
LINE 2: INSERT INTO arrtest_s VALUES ('[0:4]={1,2,3,4,5}', '[0:2][0:2]={{1,2...
                                      ^

-----------
QUERY:


SELECT * FROM arrtest_s;
RESULT:
	[]

-----------
QUERY:

SELECT a[:3], b[:2][:2] FROM arrtest_s;
RESULT:
	[]

-----------
QUERY:

SELECT a[2:], b[2:][2:] FROM arrtest_s;
RESULT:
	[]

-----------
QUERY:

SELECT a[:], b[:] FROM arrtest_s;
RESULT:
	[]

-----------
QUERY:


-- updates
UPDATE arrtest_s SET a[:3] = '{11, 12, 13}', b[:2][:2] = '{{11,12}, {14,15}}'
  WHERE array_lower(a,1) = 1;
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_lower does not exist!
Did you mean "array_where"?
LINE 5:   WHERE array_lower(a,1) = 1;
                ^

-----------
QUERY:

SELECT * FROM arrtest_s;
RESULT:
	[]

-----------
QUERY:

UPDATE arrtest_s SET a[3:] = '{23, 24, 25}', b[2:][2:] = '{{25,26}, {28,29}}';
RESULT:
	[]

-----------
QUERY:

SELECT * FROM arrtest_s;
RESULT:
	[]

-----------
QUERY:

UPDATE arrtest_s SET a[:] = '{11, 12, 13, 14, 15}';
RESULT:
	[]

-----------
QUERY:

SELECT * FROM arrtest_s;
RESULT:
	[]

-----------
QUERY:

UPDATE arrtest_s SET a[:] = '{23, 24, 25}';
RESULT:
	[]

-----------
QUERY:
  -- fail, too small
INSERT INTO arrtest_s VALUES(NULL, NULL);
RESULT:
	[]

-----------
QUERY:

UPDATE arrtest_s SET a[:] = '{11, 12, 13, 14, 15}';
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{11, 12, 13, 14, 15}' can't be cast to the destination type LIST
LINE 2: UPDATE arrtest_s SET a[:] = '{11, 12, 13, 14, 15}';
                                    ^

-----------
QUERY:
  -- fail, no good with null

-- we want to work with a point_tbl that includes a null
CREATE TEMP TABLE point_tbl AS SELECT * FROM public.point_tbl;
RESULT:
	ERROR - Catalog Error: Table with name point_tbl does not exist!
Did you mean "memory.INT2_TBL"?
LINE 4: ...ail, no good with null

-- we want to work with a point_tbl that includes a null
CREATE TEMP TABLE point_tbl AS SELECT * FROM public.point_tbl;
                                                  ^

-----------
QUERY:

INSERT INTO POINT_TBL(f1) VALUES (NULL);
RESULT:
	ERROR - Catalog Error: Table with name POINT_TBL does not exist!
Did you mean "INT2_TBL"?

-----------
QUERY:


-- check with fixed-length-array type, such as point
SELECT f1[0:1] FROM POINT_TBL;
RESULT:
	ERROR - Catalog Error: Table with name POINT_TBL does not exist!
Did you mean "INT2_TBL"?

-----------
QUERY:

SELECT f1[0:] FROM POINT_TBL;
RESULT:
	ERROR - Catalog Error: Table with name POINT_TBL does not exist!
Did you mean "INT2_TBL"?

-----------
QUERY:

SELECT f1[:1] FROM POINT_TBL;
RESULT:
	ERROR - Catalog Error: Table with name POINT_TBL does not exist!
Did you mean "INT2_TBL"?

-----------
QUERY:

SELECT f1[:] FROM POINT_TBL;
RESULT:
	ERROR - Catalog Error: Table with name POINT_TBL does not exist!
Did you mean "INT2_TBL"?

-----------
QUERY:


-- subscript assignments to fixed-width result in NULL if previous value is NULL
UPDATE point_tbl SET f1[0] = 10 WHERE f1 IS NULL RETURNING *;
RESULT:
	ERROR - Catalog Error: Table with name point_tbl does not exist!
Did you mean "INT2_TBL"?
LINE 4: UPDATE point_tbl SET f1[0] = 10 WHERE f1 IS NULL RETURNING *;...
               ^

-----------
QUERY:

INSERT INTO point_tbl(f1[0]) VALUES(0) RETURNING *;
RESULT:
	ERROR - Catalog Error: Table with name point_tbl does not exist!
Did you mean "INT2_TBL"?

-----------
QUERY:

-- NULL assignments get ignored
UPDATE point_tbl SET f1[0] = NULL WHERE f1::text = '(10,10)'::point::text RETURNING *;
RESULT:
	ERROR - Catalog Error: Table with name point_tbl does not exist!
Did you mean "INT2_TBL"?
LINE 3: UPDATE point_...
               ^

-----------
QUERY:

-- but non-NULL subscript assignments work
UPDATE point_tbl SET f1[0] = -10, f1[1] = -10 WHERE f1::text = '(10,10)'::point::text RETURNING *;
RESULT:
	ERROR - Catalog Error: Table with name point_tbl does not exist!
Did you mean "INT2_TBL"?
LINE 3: UP...
               ^

-----------
QUERY:

-- but not to expand the range
UPDATE point_tbl SET f1[3] = 10 WHERE f1::text = '(-10,-10)'::point::text RETURNING *;
RESULT:
	ERROR - Catalog Error: Table with name point_tbl does not exist!
Did you mean "INT2_TBL"?
LINE 3: UPDATE point_t...
               ^

-----------
QUERY:


--
-- test array extension
--
CREATE TEMP TABLE arrtest1 (i int[], t text[]);
RESULT:
	[]

-----------
QUERY:

insert into arrtest1 values(array[1,2,null,4], array['one','two',null,'four']);
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

-----------
QUERY:

update arrtest1 set i[2] = 22, t[2] = 'twenty-two';
RESULT:
	ERROR - Conversion Error: Unimplemented type for cast (INTEGER -> INTEGER[])
LINE 2: update arrtest1 set i[2] = 22, t[2] = 'twenty-two';
                                   ^

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

-----------
QUERY:

update arrtest1 set i[5] = 5, t[5] = 'five';
RESULT:
	ERROR - Conversion Error: Unimplemented type for cast (INTEGER -> INTEGER[])
LINE 2: update arrtest1 set i[5] = 5, t[5] = 'five';
                                   ^

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

-----------
QUERY:

update arrtest1 set i[8] = 8, t[8] = 'eight';
RESULT:
	ERROR - Conversion Error: Unimplemented type for cast (INTEGER -> INTEGER[])
LINE 2: update arrtest1 set i[8] = 8, t[8] = 'eight';
                                   ^

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

-----------
QUERY:

update arrtest1 set i[0] = 0, t[0] = 'zero';
RESULT:
	ERROR - Conversion Error: Unimplemented type for cast (INTEGER -> INTEGER[])
LINE 2: update arrtest1 set i[0] = 0, t[0] = 'zero';
                                   ^

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

-----------
QUERY:

update arrtest1 set i[-3] = -3, t[-3] = 'minus-three';
RESULT:
	ERROR - Conversion Error: Unimplemented type for cast (INTEGER -> INTEGER[])
LINE 2: update arrtest1 set i[-3] = -3, t[-3] = 'minus-three';
                                    ^

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

-----------
QUERY:

update arrtest1 set i[0:2] = array[10,11,12], t[0:2] = array['ten','eleven','twelve'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([10, 11, 12], ['ten', 'eleven', 'twelve'])]

-----------
QUERY:

update arrtest1 set i[8:10] = array[18,null,20], t[8:10] = array['p18',null,'p20'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([18, None, 20], ['p18', None, 'p20'])]

-----------
QUERY:

update arrtest1 set i[11:12] = array[null,22], t[11:12] = array[null,'p22'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([None, 22], [None, 'p22'])]

-----------
QUERY:

update arrtest1 set i[15:16] = array[null,26], t[15:16] = array[null,'p26'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([None, 26], [None, 'p26'])]

-----------
QUERY:

update arrtest1 set i[-5:-3] = array[-15,-14,-13], t[-5:-3] = array['m15','m14','m13'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([-15, -14, -13], ['m15', 'm14', 'm13'])]

-----------
QUERY:

update arrtest1 set i[-7:-6] = array[-17,null], t[-7:-6] = array['m17',null];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([-17, None], ['m17', None])]

-----------
QUERY:

update arrtest1 set i[-12:-10] = array[-22,null,-20], t[-12:-10] = array['m22',null,'m20'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([-22, None, -20], ['m22', None, 'm20'])]

-----------
QUERY:

delete from arrtest1;
RESULT:
	[]

-----------
QUERY:

insert into arrtest1 values(array[1,2,null,4], array['one','two',null,'four']);
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

-----------
QUERY:

update arrtest1 set i[0:5] = array[0,1,2,null,4,5], t[0:5] = array['z','p1','p2',null,'p4','p5'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([0, 1, 2, None, 4, 5], ['z', 'p1', 'p2', None, 'p4', 'p5'])]

-----------
QUERY:


--
-- array expressions and operators
--

-- table creation and INSERTs
CREATE TEMP TABLE arrtest2 (i integer ARRAY[4], f float8[], n numeric[], t text[], d timestamp[]);
RESULT:
	[]

-----------
QUERY:

INSERT INTO arrtest2 VALUES(
  ARRAY[[[113,142],[1,147]]],
  ARRAY[1.1,1.2,1.3]::float8[],
  ARRAY[1.1,1.2,1.3],
  ARRAY[[['aaa','aab'],['aba','abb'],['aca','acb']],[['baa','bab'],['bba','bbb'],['bca','bcb']]],
  ARRAY['19620326','19931223','19970117']::timestamp[]
);
RESULT:
	ERROR - Conversion Error: Cannot cast list with length 1 to array with length 4

-----------
QUERY:


-- some more test data
CREATE TEMP TABLE arrtest_f (f0 int, f1 text, f2 float8);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(1,'cat1',1.21);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(2,'cat1',1.24);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(3,'cat1',1.18);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(4,'cat1',1.26);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(5,'cat1',1.15);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(6,'cat2',1.15);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(7,'cat2',1.26);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(8,'cat2',1.32);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(9,'cat2',1.30);
RESULT:
	[]

-----------
QUERY:


CREATE TEMP TABLE arrtest_i (f0 int, f1 text, f2 int);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(1,'cat1',21);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(2,'cat1',24);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(3,'cat1',18);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(4,'cat1',26);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(5,'cat1',15);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(6,'cat2',15);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(7,'cat2',26);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(8,'cat2',32);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(9,'cat2',30);
RESULT:
	[]

-----------
QUERY:


-- expressions
SELECT t.f[1][3][1] AS "131", t.f[2][2][1] AS "221" FROM (
  SELECT ARRAY[[[111,112],[121,122],[131,132]],[[211,212],[221,122],[231,232]]] AS f
) AS t;
RESULT:
	[(131, 221)]

-----------
QUERY:

SELECT ARRAY[[[[[['hello'],['world']]]]]];
RESULT:
	[([[[[[['hello'], ['world']]]]]],)]

-----------
QUERY:

SELECT ARRAY[ARRAY['hello'],ARRAY['world']];
RESULT:
	[([['hello'], ['world']],)]

-----------
QUERY:

SELECT ARRAY(select f2 from arrtest_f order by f2) AS "ARRAY";
RESULT:
	[([1.15, 1.15, 1.18, 1.21, 1.24, 1.26, 1.26, 1.3, 1.32],)]

-----------
QUERY:


-- with nulls
SELECT '{1,null,3}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{1,null,3}' can't be cast to the destination type LIST

-----------
QUERY:

SELECT ARRAY[1,NULL,3];
RESULT:
	[([1, None, 3],)]

-----------
QUERY:


-- functions
SELECT array_append(array[42], 6) AS "{42,6}";
RESULT:
	[([42, 6],)]

-----------
QUERY:

SELECT array_prepend(6, array[42]) AS "{6,42}";
RESULT:
	[([6, 42],)]

-----------
QUERY:

SELECT array_cat(ARRAY[1,2], ARRAY[3,4]) AS "{1,2,3,4}";
RESULT:
	[([1, 2, 3, 4],)]

-----------
QUERY:

SELECT array_cat(ARRAY[1,2], ARRAY[[3,4],[5,6]]) AS "{{1,2},{3,4},{5,6}}";
RESULT:
	ERROR - Binder Error: Cannot concatenate lists of types INTEGER[] and INTEGER[][] - an explicit cast is required

-----------
QUERY:

SELECT array_cat(ARRAY[[3,4],[5,6]], ARRAY[1,2]) AS "{{3,4},{5,6},{1,2}}";
RESULT:
	ERROR - Binder Error: Cannot concatenate lists of types INTEGER[][] and INTEGER[] - an explicit cast is required

-----------
QUERY:


SELECT array_position(ARRAY[1,2,3,4,5], 4);
RESULT:
	[(4,)]

-----------
QUERY:

SELECT array_position(ARRAY[5,3,4,2,1], 4);
RESULT:
	[(3,)]

-----------
QUERY:

SELECT array_position(ARRAY[[1,2],[3,4]], 3);
RESULT:
	ERROR - Binder Error: Cannot get list_position of element of type INTEGER in a list of type INTEGER[][] - an explicit cast is required

-----------
QUERY:

SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon');
RESULT:
	[(2,)]

-----------
QUERY:

SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'sat');
RESULT:
	[(7,)]

-----------
QUERY:

SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], NULL);
RESULT:
	[(None,)]

-----------
QUERY:

SELECT array_position(ARRAY['sun','mon','tue','wed','thu',NULL,'fri','sat'], NULL);
RESULT:
	[(None,)]

-----------
QUERY:

SELECT array_position(ARRAY['sun','mon','tue','wed','thu',NULL,'fri','sat'], 'sat');
RESULT:
	[(8,)]

-----------
QUERY:


SELECT array_positions(NULL, 10);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

-----------
QUERY:

SELECT array_positions(NULL, NULL::int);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

-----------
QUERY:

SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], 4);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

-----------
QUERY:

SELECT array_positions(ARRAY[[1,2],[3,4]], 4);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

-----------
QUERY:

SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], NULL);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

-----------
QUERY:

SELECT array_positions(ARRAY[1,2,3,NULL,5,6,1,2,3,NULL,5,6], NULL);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

-----------
QUERY:

SELECT array_length(array_positions(ARRAY(SELECT 'AAAAAAAAAAAAAAAAAAAAAAAAA'::text || i % 10
                                          FROM generate_series(1,100) g(i)),
                                  'AAAAAAAAAAAAAAAAAAAAAAAAA5'), 1);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

-----------
QUERY:


DO $$
DECLARE
  o int;
  a int[] := ARRAY[1,2,3,2,3,1,2];
BEGIN
  o := array_position(a, 2);
  WHILE o IS NOT NULL
  LOOP
    RAISE NOTICE '%', o;
    o := array_position(a, 2, o + 1);
  END LOOP;
END
$$ LANGUAGE plpgsql;
RESULT:
	ERROR - Parser Error: syntax error at or near "DO"

-----------
QUERY:


SELECT array_position('[2:4]={1,2,3}'::int[], 1);
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[2:4]={1,2,3}' can't be cast to the destination type LIST

-----------
QUERY:

SELECT array_positions('[2:4]={1,2,3}'::int[], 1);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

-----------
QUERY:


SELECT
    array_position(ids, (1, 1)),
    array_positions(ids, (1, 1))
        FROM
(VALUES
    (ARRAY[(0, 0), (1, 1)]),
    (ARRAY[(1, 1)])
) AS f (ids);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_positions does not exist!
Did you mean "array_position"?

-----------
QUERY:


-- operators
SELECT a FROM arrtest WHERE b = ARRAY[[[113,142],[1,147]]];
RESULT:
	ERROR - Catalog Error: Table with name arrtest does not exist!
Did you mean "arrtest1"?

-----------
QUERY:

SELECT NOT ARRAY[1.1,1.2,1.3] = ARRAY[1.1,1.2,1.3] AS "FALSE";
RESULT:
	[(False,)]

-----------
QUERY:

SELECT ARRAY[1,2] || 3 AS "{1,2,3}";
RESULT:
	[('[1, 2]3',)]

-----------
QUERY:

SELECT 0 || ARRAY[1,2] AS "{0,1,2}";
RESULT:
	[('0[1, 2]',)]

-----------
QUERY:

SELECT ARRAY[1,2] || ARRAY[3,4] AS "{1,2,3,4}";
RESULT:
	[([1, 2, 3, 4],)]

-----------
QUERY:

SELECT ARRAY[[['hello','world']]] || ARRAY[[['happy','birthday']]] AS "ARRAY";
RESULT:
	[([[['hello', 'world']], [['happy', 'birthday']]],)]

-----------
QUERY:

SELECT ARRAY[[1,2],[3,4]] || ARRAY[5,6] AS "{{1,2},{3,4},{5,6}}";
RESULT:
	ERROR - Binder Error: Cannot concatenate lists of types INTEGER[][] and INTEGER[] - an explicit cast is required

-----------
QUERY:

SELECT ARRAY[0,0] || ARRAY[1,1] || ARRAY[2,2] AS "{0,0,1,1,2,2}";
RESULT:
	[([0, 0, 1, 1, 2, 2],)]

-----------
QUERY:

SELECT 0 || ARRAY[1,2] || 3 AS "{0,1,2,3}";
RESULT:
	[('0[1, 2]3',)]

-----------
QUERY:

SELECT ARRAY[1.1] || ARRAY[2,3,4];
RESULT:
	[([Decimal('1.1'), Decimal('2.0'), Decimal('3.0'), Decimal('4.0')],)]

-----------
QUERY:

SELECT array_agg(x) || array_agg(x) FROM (VALUES (ROW(1,2)), (ROW(3,4))) v(x);
RESULT:
	[([(1, 2), (3, 4), (1, 2), (3, 4)],)]

-----------
QUERY:

SELECT ROW(1,2) || array_agg(x) FROM (VALUES (ROW(3,4)), (ROW(5,6))) v(x);
RESULT:
	[('(1, 2)[(3, 4), (5, 6)]',)]

-----------
QUERY:


SELECT * FROM array_op_test WHERE i @> '{32}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

-----------
QUERY:

SELECT * FROM array_op_test WHERE i && '{32}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:

SELECT * FROM array_op_test WHERE i @> '{17}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

-----------
QUERY:

SELECT * FROM array_op_test WHERE i && '{17}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:

SELECT * FROM array_op_test WHERE i @> '{32,17}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

-----------
QUERY:

SELECT * FROM array_op_test WHERE i && '{32,17}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:

SELECT * FROM array_op_test WHERE i <@ '{38,34,32,89}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:

SELECT * FROM array_op_test WHERE i = '{}' ORDER BY seqno;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i @> '{}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

-----------
QUERY:

SELECT * FROM array_op_test WHERE i && '{}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:

SELECT * FROM array_op_test WHERE i <@ '{}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:

SELECT * FROM array_op_test WHERE i = '{NULL}' ORDER BY seqno;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i @> '{NULL}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

-----------
QUERY:

SELECT * FROM array_op_test WHERE i && '{NULL}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:

SELECT * FROM array_op_test WHERE i <@ '{NULL}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:


SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

-----------
QUERY:

SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, VARCHAR)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:

SELECT * FROM array_op_test WHERE t @> '{AAAAAAAAAA646}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

-----------
QUERY:

SELECT * FROM array_op_test WHERE t && '{AAAAAAAAAA646}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, VARCHAR)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:

SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

-----------
QUERY:

SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, VARCHAR)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:

SELECT * FROM array_op_test WHERE t <@ '{AAAAAAAA72908,AAAAAAAAAAAAAAAAAAA17075,AA88409,AAAAAAAAAAAAAAAAAA36842,AAAAAAA48038,AAAAAAAAAAAAAA10611}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, VARCHAR)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:

SELECT * FROM array_op_test WHERE t = '{}' ORDER BY seqno;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM array_op_test WHERE t @> '{}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: failed to bind function, either: Invalid LIST argument during lambda function binding!
 or: Referenced column "variable_has_all" not found in FROM clause!
Candidate bindings: "array_op_test.i"

-----------
QUERY:

SELECT * FROM array_op_test WHERE t && '{}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, VARCHAR)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:

SELECT * FROM array_op_test WHERE t <@ '{}' ORDER BY seqno;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'list_contains(STRING_LITERAL, VARCHAR)'. You might need to add explicit type casts.
	Candidate functions:
	list_contains(ANY[], ANY) -> BOOLEAN


-----------
QUERY:


-- array casts
SELECT ARRAY[1,2,3]::text[]::int[]::float8[] AS "{1,2,3}";
RESULT:
	[([1.0, 2.0, 3.0],)]

-----------
QUERY:

SELECT pg_typeof(ARRAY[1,2,3]::text[]::int[]::float8[]) AS "double precision[]";
RESULT:
	[('double[]',)]

-----------
QUERY:

SELECT ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[] AS "{{a,bc},{def,hijk}}";
RESULT:
	[(['[a, bc]', '[def, hijk]'],)]

-----------
QUERY:

SELECT pg_typeof(ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[]) AS "character varying[]";
RESULT:
	[('varchar[]',)]

-----------
QUERY:

SELECT CAST(ARRAY[[[[[['a','bb','ccc']]]]]] as text[]) as "{{{{{{a,bb,ccc}}}}}}";
RESULT:
	[(['[[[[[a, bb, ccc]]]]]'],)]

-----------
QUERY:

SELECT NULL::text[]::int[] AS "NULL";
RESULT:
	[(None,)]

-----------
QUERY:


-- scalar op any/all (array)
select 33 = any ('{1,2,3}');
RESULT:
	ERROR - Binder Error: UNNEST() for correlated expressions is not supported yet

-----------
QUERY:

select 33 = any ('{1,2,33}');
RESULT:
	ERROR - Binder Error: UNNEST() for correlated expressions is not supported yet

-----------
QUERY:

select 33 = all ('{1,2,33}');
RESULT:
	ERROR - Binder Error: UNNEST() for correlated expressions is not supported yet

-----------
QUERY:

select 33 >= all ('{1,2,33}');
RESULT:
	ERROR - Binder Error: UNNEST() for correlated expressions is not supported yet

-----------
QUERY:

-- boundary cases
select null::int >= all ('{1,2,33}');
RESULT:
	ERROR - Binder Error: UNNEST() for correlated expressions is not supported yet

-----------
QUERY:

select null::int >= all ('{}');
RESULT:
	ERROR - Binder Error: UNNEST() for correlated expressions is not supported yet

-----------
QUERY:

select null::int >= any ('{}');
RESULT:
	ERROR - Binder Error: UNNEST() for correlated expressions is not supported yet

-----------
QUERY:

-- cross-datatype
select 33.4 = any (array[1,2,3]);
RESULT:
	[(False,)]

-----------
QUERY:

select 33.4 > all (array[1,2,3]);
RESULT:
	[(True,)]

-----------
QUERY:

-- errors
select 33 * any ('{1,2,3}');
RESULT:
	ERROR - Parser Error: Unsupported comparison "*" for ANY/ALL subquery

-----------
QUERY:

select 33 * any (44);
RESULT:
	ERROR - Parser Error: Unsupported comparison "*" for ANY/ALL subquery

-----------
QUERY:

-- nulls
select 33 = any (null::int[]);
RESULT:
	[(False,)]

-----------
QUERY:

select null::int = any ('{1,2,3}');
RESULT:
	ERROR - Binder Error: UNNEST() for correlated expressions is not supported yet

-----------
QUERY:

select 33 = any ('{1,null,3}');
RESULT:
	ERROR - Binder Error: UNNEST() for correlated expressions is not supported yet

-----------
QUERY:

select 33 = any ('{1,null,33}');
RESULT:
	ERROR - Binder Error: UNNEST() for correlated expressions is not supported yet

-----------
QUERY:

select 33 = all (null::int[]);
RESULT:
	[(True,)]

-----------
QUERY:

select null::int = all ('{1,2,3}');
RESULT:
	ERROR - Binder Error: UNNEST() for correlated expressions is not supported yet

-----------
QUERY:

select 33 = all ('{1,null,3}');
RESULT:
	ERROR - Binder Error: UNNEST() for correlated expressions is not supported yet

-----------
QUERY:

select 33 = all ('{33,null,33}');
RESULT:
	ERROR - Binder Error: UNNEST() for correlated expressions is not supported yet

-----------
QUERY:

-- nulls later in the bitmap
SELECT -1 != ALL(ARRAY(SELECT NULLIF(g.i, 900) FROM generate_series(1,1000) g(i)));
RESULT:
	[(None,)]

-----------
QUERY:


-- test indexes on arrays
create temp table arr_tbl (f1 int[] unique);
RESULT:
	ERROR - Invalid type Error: Invalid Type [INTEGER[]]: Invalid type for index key.

-----------
QUERY:

insert into arr_tbl values ('{1,2,3}');
RESULT:
	ERROR - Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

-----------
QUERY:

insert into arr_tbl values ('{1,2}');
RESULT:
	ERROR - Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

-----------
QUERY:

-- failure expected:
insert into arr_tbl values ('{1,2,3}');
RESULT:
	ERROR - Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

-----------
QUERY:

insert into arr_tbl values ('{2,3,4}');
RESULT:
	ERROR - Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

-----------
QUERY:

insert into arr_tbl values ('{1,5,3}');
RESULT:
	ERROR - Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

-----------
QUERY:

insert into arr_tbl values ('{1,2,10}');
RESULT:
	ERROR - Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

-----------
QUERY:


set enable_seqscan to off;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_seqscan"

Did you mean: "enable_object_cache"

-----------
QUERY:

set enable_bitmapscan to off;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_bitmapscan"

Did you mean: "enable_object_cache"

-----------
QUERY:

select * from arr_tbl where f1 > '{1,2,3}' and f1 <= '{1,5,3}';
RESULT:
	ERROR - Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

-----------
QUERY:

select * from arr_tbl where f1 >= '{1,2,3}' and f1 < '{1,5,3}';
RESULT:
	ERROR - Catalog Error: Table with name arr_tbl does not exist!
Did you mean "CHAR_TBL"?

-----------
QUERY:


-- test ON CONFLICT DO UPDATE with arrays
create temp table arr_pk_tbl (pk int4 primary key, f1 int[]);
RESULT:
	[]

-----------
QUERY:

insert into arr_pk_tbl values (1, '{1,2,3}');
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{1,2,3}' can't be cast to the destination type LIST
LINE 2: insert into arr_pk_tbl values (1, '{1,2,3}');
                                          ^

-----------
QUERY:

insert into arr_pk_tbl values (1, '{3,4,5}') on conflict (pk)
  do update set f1[1] = excluded.f1[1], f1[3] = excluded.f1[3]
  returning pk, f1;
RESULT:
	ERROR - Binder Error: Multiple assignments to same column "f1"

-----------
QUERY:

insert into arr_pk_tbl(pk, f1[1:2]) values (1, '{6,7,8}') on conflict (pk)
  do update set f1[1] = excluded.f1[1],
    f1[2] = excluded.f1[2],
    f1[3] = excluded.f1[3]
  returning pk, f1;
RESULT:
	ERROR - Binder Error: Multiple assignments to same column "f1"

-----------
QUERY:


-- note: if above selects don/* REPLACED */''t produce the expected tuple order,
-- then you didn/* REPLACED */''t get an indexscan plan, and something is busted.
reset enable_seqscan;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_seqscan"

Did you mean: "enable_object_cache"

-----------
QUERY:

reset enable_bitmapscan;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_bitmapscan"

Did you mean: "enable_object_cache"

-----------
QUERY:


-- test subscript overflow detection

-- The normal error message includes a platform-dependent limit,
-- so suppress it to avoid needing multiple expected-files.
-- \set VERBOSITY sqlstate

insert into arr_pk_tbl values(10, '[-2147483648:-2147483647]={1,2}');
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[-2147483648:-2147483647]={1,2}' can't be cast to the destination type LIST
LINE 9: insert into arr_pk_tbl values(10, '[-2147483648:-2147483647]={1,2}');
                                          ^

-----------
QUERY:

update arr_pk_tbl set f1[2147483647] = 42 where pk = 10;
RESULT:
	[]

-----------
QUERY:

update arr_pk_tbl set f1[2147483646:2147483647] = array[4,2] where pk = 10;
RESULT:
	[]

-----------
QUERY:


-- also exercise the expanded-array case
do $$ declare a int[];
begin
  a := '[-2147483648:-2147483647]={1,2}'::int[];
  a[2147483647] := 42;
end $$;
RESULT:
	ERROR - Parser Error: syntax error at or near "do"

-----------
QUERY:


-- \set VERBOSITY default

-- test [not] (like|ilike) (any|all) (...)
select 'foo' like any (array['%a', '%o']);
RESULT:
	ERROR - Parser Error: Unsupported comparison "~~" for ANY/ALL subquery

-----------
QUERY:
 -- t
select 'foo' like any (array['%a', '%b']);
RESULT:
	ERROR - Parser Error: Unsupported comparison "~~" for ANY/ALL subquery

-----------
QUERY:
 -- f
select 'foo' like all (array['f%', '%o']);
RESULT:
	ERROR - Parser Error: Unsupported comparison "~~" for ANY/ALL subquery

-----------
QUERY:
 -- t
select 'foo' like all (array['f%', '%b']);
RESULT:
	ERROR - Parser Error: Unsupported comparison "~~" for ANY/ALL subquery

-----------
QUERY:
 -- f
select 'foo' not like any (array['%a', '%b']);
RESULT:
	ERROR - Parser Error: Unsupported comparison "!~~" for ANY/ALL subquery

-----------
QUERY:
 -- t
select 'foo' not like all (array['%a', '%o']);
RESULT:
	ERROR - Parser Error: Unsupported comparison "!~~" for ANY/ALL subquery

-----------
QUERY:
 -- f
select 'foo' ilike any (array['%A', '%O']);
RESULT:
	ERROR - Parser Error: Unsupported comparison "~~*" for ANY/ALL subquery

-----------
QUERY:
 -- t
select 'foo' ilike all (array['F%', '%O']);
RESULT:
	ERROR - Parser Error: Unsupported comparison "~~*" for ANY/ALL subquery

-----------
QUERY:
 -- t

--
-- General array parser tests
--

-- none of the following should be accepted
select '{{1,{2}},{2,3}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{1,{2}},{2,3}}' can't be cast to the destination type LIST

-----------
QUERY:

select E'{{1,2},\\{2,3}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{1,2},\{2,3}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{"a"b}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{"a"b}' can't be cast to the destination type LIST

-----------
QUERY:

select '{a"b"}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{a"b"}' can't be cast to the destination type LIST

-----------
QUERY:

select '{"a""b"}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{"a""b"}' can't be cast to the destination type LIST

-----------
QUERY:

select '{{"1 2" x},{3}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{"1 2" x},{3}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{{"1 2"} x,{3}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{"1 2"} x,{3}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{ }}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{ }}' can't be cast to the destination type LIST

-----------
QUERY:

select '}{'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '}{' can't be cast to the destination type LIST

-----------
QUERY:

select '{foo{}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{foo{}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{"foo"{}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{"foo"{}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{foo,,bar}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{foo,,bar}' can't be cast to the destination type LIST

-----------
QUERY:

select '{{1},{{2}}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{1},{{2}}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{{{1}},{2}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{{1}},{2}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{{},{{}}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{},{{}}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{{{}},{}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{{}},{}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{{1},{}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{1},{}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{{},{1}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{},{1}}' can't be cast to the destination type LIST

-----------
QUERY:

select '[1:0]={}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[1:0]={}' can't be cast to the destination type LIST

-----------
QUERY:

select '[2147483646:2147483647]={1,2}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[2147483646:2147483647]={1,2}' can't be cast to the destination type LIST

-----------
QUERY:

select '[1:-1]={}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[1:-1]={}' can't be cast to the destination type LIST

-----------
QUERY:

select '[2]={1}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[2]={1}' can't be cast to the destination type LIST

-----------
QUERY:

select '[1:]={1}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[1:]={1}' can't be cast to the destination type LIST

-----------
QUERY:

select '[:1]={1}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[:1]={1}' can't be cast to the destination type LIST

-----------
QUERY:

select array[];
RESULT:
	[([],)]

-----------
QUERY:

select '{{1,},{1},}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{1,},{1},}' can't be cast to the destination type LIST

-----------
QUERY:

select '{{1,},{1}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{1,},{1}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{{1,}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{1,}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{1,}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{1,}' can't be cast to the destination type LIST

-----------
QUERY:

select '[21474836488:21474836489]={1,2}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[21474836488:21474836489]={1,2}' can't be cast to the destination type LIST

-----------
QUERY:

select '[-2147483649:-2147483648]={1,2}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[-2147483649:-2147483648]={1,2}' can't be cast to the destination type LIST

-----------
QUERY:

-- none of the above should be accepted

-- all of the following should be accepted
select '{}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{}' can't be cast to the destination type LIST

-----------
QUERY:

select '{{},{}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{},{}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{{{1,2,3,4},{2,3,4,5}},{{3,4,5,6},{4,5,6,7}}}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{{{1,2,3,4},{2,3,4,5}},{{3,4,5,6},{4,5,6,7}}}' can't be cast to the destination type LIST

-----------
QUERY:

select '{null,n\ull,"null"}'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{null,n\ull,"null"}' can't be cast to the destination type LIST

-----------
QUERY:

select '{ ab\c , "ab\"c" }'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{ ab\c , "ab\"c" }' can't be cast to the destination type LIST

-----------
QUERY:

select '{0 second  ,0 second}'::interval[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{0 second  ,0 second}' can't be cast to the destination type LIST

-----------
QUERY:

select '{ { "," } , { 3 } }'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{ { "," } , { 3 } }' can't be cast to the destination type LIST

-----------
QUERY:

select '  {   {  "  0 second  "   ,  0 second  }   }'::text[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '  {   {  "  0 second  "   ,  0 second  }   }' can't be cast to the destination type LIST

-----------
QUERY:

select '{
           0 second,
           @ 1 hour @ 42 minutes @ 20 seconds
         }'::interval[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{
           0 second,
           @ 1 hour @ 42 minutes @ 20 seconds
         }' can't be cast to the destination type LIST

-----------
QUERY:

select array[]::text[];
RESULT:
	[([],)]

-----------
QUERY:

select '[2]={1,7}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[2]={1,7}' can't be cast to the destination type LIST

-----------
QUERY:

select '[0:1]={1.1,2.2}'::float8[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[0:1]={1.1,2.2}' can't be cast to the destination type LIST

-----------
QUERY:

select '[2147483646:2147483646]={1}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[2147483646:2147483646]={1}' can't be cast to the destination type LIST

-----------
QUERY:

select '[-2147483648:-2147483647]={1,2}'::int[];
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '[-2147483648:-2147483647]={1,2}' can't be cast to the destination type LIST

-----------
QUERY:

-- all of the above should be accepted

-- tests for array aggregates
CREATE TEMP TABLE arraggtest ( f1 INT[], f2 TEXT[][], f3 FLOAT[]);
RESULT:
	[]

-----------
QUERY:


INSERT INTO arraggtest (f1, f2, f3) VALUES
('{1,2,3,4}','{{grey,red},{blue,blue}}','{1.6, 0.0}');
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{1,2,3,4}' can't be cast to the destination type LIST
LINE 4: ('{1,2,3,4}','{{grey,red},{blue,blue}}','{1.6, 0.0}');...
         ^

-----------
QUERY:

INSERT INTO arraggtest (f1, f2, f3) VALUES
('{1,2,3}','{{grey,red},{grey,blue}}','{1.6}');
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{1,2,3}' can't be cast to the destination type LIST
LINE 3: ('{1,2,3}','{{grey,red},{grey,blue}}','{1.6}');...
         ^

-----------
QUERY:

SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
RESULT:
	[(None, None, None, None, None, None)]

-----------
QUERY:


INSERT INTO arraggtest (f1, f2, f3) VALUES
('{3,3,2,4,5,6}','{{white,yellow},{pink,orange}}','{2.1,3.3,1.8,1.7,1.6}');
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{3,3,2,4,5,6}' can't be cast to the destination type LIST
LINE 4: ('{3,3,2,4,5,6}','{{white,yellow},{pink,orange}}','{2.1,3.3,1.8,1.7,1.6}');...
         ^

-----------
QUERY:

SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
RESULT:
	[(None, None, None, None, None, None)]

-----------
QUERY:


INSERT INTO arraggtest (f1, f2, f3) VALUES
('{2}','{{black,red},{green,orange}}','{1.6,2.2,2.6,0.4}');
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{2}' can't be cast to the destination type LIST
LINE 4: ('{2}','{{black,red},{green,orange}}','{1.6,2.2,2.6,0.4}');...
         ^

-----------
QUERY:

SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
RESULT:
	[(None, None, None, None, None, None)]

-----------
QUERY:


INSERT INTO arraggtest (f1, f2, f3) VALUES
('{4,2,6,7,8,1}','{{red},{black},{purple},{blue},{blue}}',NULL);
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{4,2,6,7,8,1}' can't be cast to the destination type LIST
LINE 4: ('{4,2,6,7,8,1}','{{red},{black},{purple},{blue},{blue}}',NULL);...
         ^

-----------
QUERY:

SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
RESULT:
	[(None, None, None, None, None, None)]

-----------
QUERY:


INSERT INTO arraggtest (f1, f2, f3) VALUES
('{}','{{pink,white,blue,red,grey,orange}}','{2.1,1.87,1.4,2.2}');
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{}' can't be cast to the destination type LIST
LINE 4: ('{}','{{pink,white,blue,red,grey,orange}}','{2.1,1.87,1.4,2.2}');...
         ^

-----------
QUERY:

SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
RESULT:
	[(None, None, None, None, None, None)]

-----------
QUERY:


-- A few simple tests for arrays of composite types

create type comptype as (f1 int, f2 text);
RESULT:
	ERROR - Parser Error: syntax error at or near "("

-----------
QUERY:


create table comptable (c1 comptype, c2 comptype[]);
RESULT:
	ERROR - Catalog Error: Type with name comptype does not exist!
Did you mean "map"?

-----------
QUERY:


-- XXX would like to not have to specify row() construct types here ...
insert into comptable
  values (row(1,'foo'), array[row(2,'bar')::comptype, row(3,'baz')::comptype]);
RESULT:
	ERROR - Catalog Error: Table with name comptable does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:


-- check that implicitly named array type _comptype isn/* REPLACED */''t a problem
create type _comptype as enum('fooey');
RESULT:
	[]

-----------
QUERY:


select * from comptable;
RESULT:
	ERROR - Catalog Error: Table with name comptable does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

select c2[2].f2 from comptable;
RESULT:
	ERROR - Catalog Error: Table with name comptable does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:


drop type _comptype;
RESULT:
	[]

-----------
QUERY:

drop table comptable;
RESULT:
	ERROR - Catalog Error: Table with name comptable does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

drop type comptype;
RESULT:
	ERROR - Catalog Error: Type with name comptype does not exist!
Did you mean "map"?

-----------
QUERY:


create or replace function unnest1(anyarray)
returns setof anyelement as $$
select $1[s] from generate_subscripts($1,1) g(s);
$$ language sql immutable;
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


create or replace function unnest2(anyarray)
returns setof anyelement as $$
select $1[s1][s2] from generate_subscripts($1,1) g1(s1),
                   generate_subscripts($1,2) g2(s2);
$$ language sql immutable;
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


select * from unnest1(array[1,2,3]);
RESULT:
	ERROR - Catalog Error: Table Function with name unnest1 does not exist!
Did you mean "unnest"?

-----------
QUERY:

select * from unnest2(array[[1,2,3],[4,5,6]]);
RESULT:
	ERROR - Catalog Error: Table Function with name unnest2 does not exist!
Did you mean "unnest"?

-----------
QUERY:


drop function unnest1(anyarray);
RESULT:
	ERROR - Parser Error: syntax error at or near "("

-----------
QUERY:

drop function unnest2(anyarray);
RESULT:
	ERROR - Parser Error: syntax error at or near "("

-----------
QUERY:


select array_fill(null::integer, array[3,3],array[2,2]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select array_fill(null::integer, array[3,3]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select array_fill(null::text, array[3,3],array[2,2]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select array_fill(null::text, array[3,3]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select array_fill(7, array[3,3],array[2,2]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select array_fill(7, array[3,3]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select array_fill('juhu'::text, array[3,3],array[2,2]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select array_fill('juhu'::text, array[3,3]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select a, a = '{}' as is_eq, array_dims(a)
  from (select array_fill(42, array[0]) as a) ss;
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select a, a = '{}' as is_eq, array_dims(a)
  from (select array_fill(42, '{}') as a) ss;
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select a, a = '{}' as is_eq, array_dims(a)
  from (select array_fill(42, '{}', '{}') as a) ss;
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

-- raise exception
select array_fill(1, null, array[2,2]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select array_fill(1, array[2,2], null);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select array_fill(1, array[2,2], '{}');
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select array_fill(1, array[3,3], array[1,1,1]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select array_fill(1, array[1,2,null]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:

select array_fill(1, array[[1,2],[3,4]]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_fill does not exist!
Did you mean "array_filter"?

-----------
QUERY:


select string_to_array('1|2|3', '|');
RESULT:
	[(['1', '2', '3'],)]

-----------
QUERY:

select string_to_array('1|2|3|', '|');
RESULT:
	[(['1', '2', '3', ''],)]

-----------
QUERY:

select string_to_array('1||2|3||', '||');
RESULT:
	[(['1', '2|3', ''],)]

-----------
QUERY:

select string_to_array('1|2|3', '');
RESULT:
	[(['1', '|', '2', '|', '3'],)]

-----------
QUERY:

select string_to_array('', '|');
RESULT:
	[([''],)]

-----------
QUERY:

select string_to_array('1|2|3', NULL);
RESULT:
	[(['1|2|3'],)]

-----------
QUERY:

select string_to_array(NULL, '|') IS NULL;
RESULT:
	[(True,)]

-----------
QUERY:

select string_to_array('abc', '');
RESULT:
	[(['a', 'b', 'c'],)]

-----------
QUERY:

select string_to_array('abc', '', 'abc');
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'string_to_array(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL)'. You might need to add explicit type casts.
	Candidate functions:
	string_to_array(VARCHAR, VARCHAR) -> VARCHAR[]


-----------
QUERY:

select string_to_array('abc', ',');
RESULT:
	[(['abc'],)]

-----------
QUERY:

select string_to_array('abc', ',', 'abc');
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'string_to_array(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL)'. You might need to add explicit type casts.
	Candidate functions:
	string_to_array(VARCHAR, VARCHAR) -> VARCHAR[]


-----------
QUERY:

select string_to_array('1,2,3,4,,6', ',');
RESULT:
	[(['1', '2', '3', '4', '', '6'],)]

-----------
QUERY:

select string_to_array('1,2,3,4,,6', ',', '');
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'string_to_array(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL)'. You might need to add explicit type casts.
	Candidate functions:
	string_to_array(VARCHAR, VARCHAR) -> VARCHAR[]


-----------
QUERY:

select string_to_array('1,2,3,4,*,6', ',', '*');
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'string_to_array(STRING_LITERAL, STRING_LITERAL, STRING_LITERAL)'. You might need to add explicit type casts.
	Candidate functions:
	string_to_array(VARCHAR, VARCHAR) -> VARCHAR[]


-----------
QUERY:


select v, v is null as "is null" from string_to_table('1|2|3', '|') g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1|2|3|', '|') g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1||2|3||', '||') g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1|2|3', '') g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:

select v, v is null as "is null" from string_to_table('', '|') g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1|2|3', NULL) g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:

select v, v is null as "is null" from string_to_table(NULL, '|') g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:

select v, v is null as "is null" from string_to_table('abc', '') g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:

select v, v is null as "is null" from string_to_table('abc', '', 'abc') g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:

select v, v is null as "is null" from string_to_table('abc', ',') g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:

select v, v is null as "is null" from string_to_table('abc', ',', 'abc') g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1,2,3,4,,6', ',') g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1,2,3,4,,6', ',', '') g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1,2,3,4,*,6', ',', '*') g(v);
RESULT:
	ERROR - Catalog Error: Table Function with name string_to_table does not exist!
Did you mean "range"?

-----------
QUERY:


select array_to_string(NULL::int4[], ',') IS NULL;
RESULT:
	[(True,)]

-----------
QUERY:

select array_to_string('{}'::int4[], ',');
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{}' can't be cast to the destination type LIST

-----------
QUERY:

select array_to_string(array[1,2,3,4,NULL,6], ',');
RESULT:
	[('1,2,3,4,6',)]

-----------
QUERY:

select array_to_string(array[1,2,3,4,NULL,6], ',', '*');
RESULT:
	ERROR - Binder Error: Macro function 'array_to_string(arr, sep)' requires 2 positional arguments, but 3 positional arguments were provided.

-----------
QUERY:

select array_to_string(array[1,2,3,4,NULL,6], NULL);
RESULT:
	[('1,2,3,4,6',)]

-----------
QUERY:

select array_to_string(array[1,2,3,4,NULL,6], ',', NULL);
RESULT:
	ERROR - Binder Error: Macro function 'array_to_string(arr, sep)' requires 2 positional arguments, but 3 positional arguments were provided.

-----------
QUERY:


select array_to_string(string_to_array('1|2|3', '|'), '|');
RESULT:
	[('1|2|3',)]

-----------
QUERY:


select array_length(array[1,2,3], 1);
RESULT:
	[(3,)]

-----------
QUERY:

select array_length(array[[1,2,3], [4,5,6]], 0);
RESULT:
	ERROR - Not implemented Error: array_length for lists with dimensions other than 1 not implemented

-----------
QUERY:

select array_length(array[[1,2,3], [4,5,6]], 1);
RESULT:
	[(2,)]

-----------
QUERY:

select array_length(array[[1,2,3], [4,5,6]], 2);
RESULT:
	ERROR - Not implemented Error: array_length for lists with dimensions other than 1 not implemented

-----------
QUERY:

select array_length(array[[1,2,3], [4,5,6]], 3);
RESULT:
	ERROR - Not implemented Error: array_length for lists with dimensions other than 1 not implemented

-----------
QUERY:


select cardinality(NULL::int[]);
RESULT:
	[(None,)]

-----------
QUERY:

select cardinality('{}'::int[]);
RESULT:
	ERROR - Binder Error: Cardinality can only operate on MAPs

-----------
QUERY:

select cardinality(array[1,2,3]);
RESULT:
	ERROR - Binder Error: Cardinality can only operate on MAPs

-----------
QUERY:

select cardinality('[2:4]={5,6,7}'::int[]);
RESULT:
	ERROR - Binder Error: Cardinality can only operate on MAPs

-----------
QUERY:

select cardinality('{{1,2}}'::int[]);
RESULT:
	ERROR - Binder Error: Cardinality can only operate on MAPs

-----------
QUERY:

select cardinality('{{1,2},{3,4},{5,6}}'::int[]);
RESULT:
	ERROR - Binder Error: Cardinality can only operate on MAPs

-----------
QUERY:

select cardinality('{{{1,9},{5,6}},{{2,3},{3,4}}}'::int[]);
RESULT:
	ERROR - Binder Error: Cardinality can only operate on MAPs

-----------
QUERY:


-- array_agg(anynonarray)
select array_agg(unique1) from (select unique1 from tenk1 where unique1 < 15 order by unique1) ss;
RESULT:
	ERROR - Catalog Error: Table with name tenk1 does not exist!
Did you mean "arrtest1"?

-----------
QUERY:

select array_agg(ten) from (select ten from tenk1 where unique1 < 15 order by unique1) ss;
RESULT:
	ERROR - Catalog Error: Table with name tenk1 does not exist!
Did you mean "arrtest1"?

-----------
QUERY:

select array_agg(nullif(ten, 4)) from (select ten from tenk1 where unique1 < 15 order by unique1) ss;
RESULT:
	ERROR - Catalog Error: Table with name tenk1 does not exist!
Did you mean "arrtest1"?

-----------
QUERY:

select array_agg(unique1) from tenk1 where unique1 < -15;
RESULT:
	ERROR - Catalog Error: Table with name tenk1 does not exist!
Did you mean "arrtest1"?

-----------
QUERY:


-- array_agg(anyarray)
select array_agg(ar)
  from (values ('{1,2}'::int[]), ('{3,4}'::int[])) v(ar);
RESULT:
	ERROR - Invalid Input Error: Attempting to execute an unsuccessful or closed pending query result
Error: Conversion Error: Type VARCHAR with value '{1,2}' can't be cast to the destination type LIST

-----------
QUERY:

select array_agg(distinct ar order by ar desc)
  from (select array[i / 2] from generate_series(1,10) a(i)) b(ar);
RESULT:
	[([[5.0], [4.5], [4.0], [3.5], [3.0], [2.5], [2.0], [1.5], [1.0], [0.5]],)]

-----------
QUERY:

select array_agg(ar)
  from (select array_agg(array[i, i+1, i-1])
        from generate_series(1,2) a(i)) b(ar);
RESULT:
	[([[[1, 2, 0], [2, 3, 1]]],)]

-----------
QUERY:

select array_agg(array[i+1.2, i+1.3, i+1.4]) from generate_series(1,3) g(i);
RESULT:
	[([[Decimal('2.2'), Decimal('2.3'), Decimal('2.4')], [Decimal('3.2'), Decimal('3.3'), Decimal('3.4')], [Decimal('4.2'), Decimal('4.3'), Decimal('4.4')]],)]

-----------
QUERY:

select array_agg(array['Hello', i::text]) from generate_series(9,11) g(i);
RESULT:
	[([['Hello', '9'], ['Hello', '10'], ['Hello', '11']],)]

-----------
QUERY:

select array_agg(array[i, nullif(i, 3), i+1]) from generate_series(1,4) g(i);
RESULT:
	[([[1, 1, 2], [2, 2, 3], [3, None, 4], [4, 4, 5]],)]

-----------
QUERY:

-- errors
select array_agg('{}'::int[]) from generate_series(1,2);
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{}' can't be cast to the destination type LIST

-----------
QUERY:

select array_agg(null::int[]) from generate_series(1,2);
RESULT:
	[([None, None],)]

-----------
QUERY:

select array_agg(ar)
  from (values ('{1,2}'::int[]), ('{3}'::int[])) v(ar);
RESULT:
	ERROR - Invalid Input Error: Attempting to execute an unsuccessful or closed pending query result
Error: Conversion Error: Type VARCHAR with value '{1,2}' can't be cast to the destination type LIST

-----------
QUERY:


select unnest(array[1,2,3]);
RESULT:
	[(1,), (2,), (3,)]

-----------
QUERY:

select * from unnest(array[1,2,3]);
RESULT:
	[(1,), (2,), (3,)]

-----------
QUERY:

select unnest(array[1,2,3,4.5]::float8[]);
RESULT:
	[(1.0,), (2.0,), (3.0,), (4.5,)]

-----------
QUERY:

select unnest(array[1,2,3,4.5]::numeric[]);
RESULT:
	[(Decimal('1.000'),), (Decimal('2.000'),), (Decimal('3.000'),), (Decimal('4.500'),)]

-----------
QUERY:

select unnest(array[1,2,3,null,4,null,null,5,6]);
RESULT:
	[(1,), (2,), (3,), (None,), (4,), (None,), (None,), (5,), (6,)]

-----------
QUERY:

select unnest(array[1,2,3,null,4,null,null,5,6]::text[]);
RESULT:
	[('1',), ('2',), ('3',), (None,), ('4',), (None,), (None,), ('5',), ('6',)]

-----------
QUERY:

select abs(unnest(array[1,2,null,-3]));
RESULT:
	[(1,), (2,), (None,), (3,)]

-----------
QUERY:

select array_remove(array[1,2,2,3], 2);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_remove does not exist!
Did you mean "array_reverse"?

-----------
QUERY:

select array_remove(array[1,2,2,3], 5);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_remove does not exist!
Did you mean "array_reverse"?

-----------
QUERY:

select array_remove(array[1,NULL,NULL,3], NULL);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_remove does not exist!
Did you mean "array_reverse"?

-----------
QUERY:

select array_remove(array['A','CC','D','C','RR'], 'RR');
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_remove does not exist!
Did you mean "array_reverse"?

-----------
QUERY:

select array_remove(array[1.0, 2.1, 3.3], 1);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_remove does not exist!
Did you mean "array_reverse"?

-----------
QUERY:

select array_remove('{{1,2,2},{1,4,3}}', 2);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_remove does not exist!
Did you mean "array_reverse"?

-----------
QUERY:
 -- not allowed
select array_remove(array['X','X','X'], 'X') = '{}';
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_remove does not exist!
Did you mean "array_reverse"?

-----------
QUERY:

select array_replace(array[1,2,5,4],5,3);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_replace does not exist!
Did you mean "array_reduce"?

-----------
QUERY:

select array_replace(array[1,2,5,4],5,NULL);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_replace does not exist!
Did you mean "array_reduce"?

-----------
QUERY:

select array_replace(array[1,2,NULL,4,NULL],NULL,5);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_replace does not exist!
Did you mean "array_reduce"?

-----------
QUERY:

select array_replace(array['A','B','DD','B'],'B','CC');
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_replace does not exist!
Did you mean "array_reduce"?

-----------
QUERY:

select array_replace(array[1,NULL,3],NULL,NULL);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_replace does not exist!
Did you mean "array_reduce"?

-----------
QUERY:

select array_replace(array['AB',NULL,'CDE'],NULL,'12');
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_replace does not exist!
Did you mean "array_reduce"?

-----------
QUERY:


-- array(select array-value ...)
select array(select array[i,i/2] from generate_series(1,5) i);
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types '/(STRUCT(generate_series BIGINT), INTEGER_LITERAL)'. You might need to add explicit type casts.
	Candidate functions:
	/(FLOAT, FLOAT) -> FLOAT
	/(DOUBLE, DOUBLE) -> DOUBLE
	/(INTERVAL, BIGINT) -> INTERVAL


-----------
QUERY:

select array(select array['Hello', i::text] from generate_series(9,11) i);
RESULT:
	[([['Hello', "{'generate_series': 9}"], ['Hello', "{'generate_series': 10}"], ['Hello', "{'generate_series': 11}"]],)]

-----------
QUERY:


-- Insert/update on a column that is array of composite

create temp table t1 (f1 int8_tbl[]);
RESULT:
	ERROR - Catalog Error: Type with name int8_tbl does not exist!
Did you mean "int8"?

-----------
QUERY:

insert into t1 (f1[5].q1) values(42);
RESULT:
	ERROR - Catalog Error: Table with name t1 does not exist!
Did you mean "arrtest1"?

-----------
QUERY:

select * from t1;
RESULT:
	ERROR - Catalog Error: Table with name t1 does not exist!
Did you mean "arrtest1"?

-----------
QUERY:

update t1 set f1[5].q2 = 43;
RESULT:
	ERROR - Catalog Error: Table with name t1 does not exist!
Did you mean "arrtest1"?
LINE 2: update t1 set f1[5].q2 = 43;
               ^

-----------
QUERY:

select * from t1;
RESULT:
	ERROR - Catalog Error: Table with name t1 does not exist!
Did you mean "arrtest1"?

-----------
QUERY:


-- Check that arrays of composites are safely detoasted when needed

create temp table src (f1 text);
RESULT:
	[]

-----------
QUERY:

insert into src
  select string_agg(random()::text,'') from generate_series(1,10000);
RESULT:
	[]

-----------
QUERY:

create type textandtext as (c1 text, c2 text);
RESULT:
	ERROR - Parser Error: syntax error at or near "("

-----------
QUERY:

create temp table dest (f1 textandtext[]);
RESULT:
	ERROR - Catalog Error: Type with name textandtext does not exist!
Did you mean "text"?

-----------
QUERY:

insert into dest select array[row(f1,f1)::textandtext] from src;
RESULT:
	ERROR - Catalog Error: Table with name dest does not exist!
Did you mean "src"?

-----------
QUERY:

select length(fipshash((f1[1]).c2)) from dest;
RESULT:
	ERROR - Catalog Error: Table with name dest does not exist!
Did you mean "src"?

-----------
QUERY:

delete from src;
RESULT:
	[]

-----------
QUERY:

select length(fipshash((f1[1]).c2)) from dest;
RESULT:
	ERROR - Catalog Error: Table with name dest does not exist!
Did you mean "src"?

-----------
QUERY:

truncate table src;
RESULT:
	[]

-----------
QUERY:

drop table src;
RESULT:
	[]

-----------
QUERY:

select length(fipshash((f1[1]).c2)) from dest;
RESULT:
	ERROR - Catalog Error: Table with name dest does not exist!
Did you mean "arrtest1"?

-----------
QUERY:

drop table dest;
RESULT:
	ERROR - Catalog Error: Table with name dest does not exist!
Did you mean "arrtest1"?

-----------
QUERY:

drop type textandtext;
RESULT:
	ERROR - Catalog Error: Type with name textandtext does not exist!
Did you mean "text"?

-----------
QUERY:


-- Tests for polymorphic-array form of width_bucket()

-- this exercises the varwidth and float8 code paths
SELECT
    op,
    width_bucket(op::numeric, ARRAY[1, 3, 5, 10.0]::numeric[]) AS wb_n1,
    width_bucket(op::numeric, ARRAY[0, 5.5, 9.99]::numeric[]) AS wb_n2,
    width_bucket(op::numeric, ARRAY[-6, -5, 2.0]::numeric[]) AS wb_n3,
    width_bucket(op::float8, ARRAY[1, 3, 5, 10.0]::float8[]) AS wb_f1,
    width_bucket(op::float8, ARRAY[0, 5.5, 9.99]::float8[]) AS wb_f2,
    width_bucket(op::float8, ARRAY[-6, -5, 2.0]::float8[]) AS wb_f3
FROM (VALUES
  (-5.2),
  (-0.0000000001),
  (0.000000000001),
  (1),
  (1.99999999999999),
  (2),
  (2.00000000000001),
  (3),
  (4),
  (4.5),
  (5),
  (5.5),
  (6),
  (7),
  (8),
  (9),
  (9.99999999999999),
  (10),
  (10.0000000000001)
) v(op);
RESULT:
	ERROR - Catalog Error: Scalar Function with name width_bucket does not exist!
Did you mean "time_bucket"?

-----------
QUERY:


-- ensure float8 path handles NaN properly
SELECT
    op,
    width_bucket(op, ARRAY[1, 3, 9, 'NaN', 'NaN']::float8[]) AS wb
FROM (VALUES
  (-5.2::float8),
  (4::float8),
  (77::float8),
  ('NaN'::float8)
) v(op);
RESULT:
	ERROR - Catalog Error: Scalar Function with name width_bucket does not exist!
Did you mean "time_bucket"?

-----------
QUERY:


-- these exercise the generic fixed-width code path
SELECT
    op,
    width_bucket(op, ARRAY[1, 3, 5, 10]) AS wb_1
FROM generate_series(0,11) as op;
RESULT:
	ERROR - Catalog Error: Scalar Function with name width_bucket does not exist!
Did you mean "time_bucket"?

-----------
QUERY:


SELECT width_bucket(now(),
                    array['yesterday', 'today', 'tomorrow']::timestamptz[]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name width_bucket does not exist!
Did you mean "time_bucket"?

-----------
QUERY:


-- corner cases
SELECT width_bucket(5, ARRAY[3]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name width_bucket does not exist!
Did you mean "time_bucket"?

-----------
QUERY:

SELECT width_bucket(5, '{}');
RESULT:
	ERROR - Catalog Error: Scalar Function with name width_bucket does not exist!
Did you mean "time_bucket"?

-----------
QUERY:


-- error cases
SELECT width_bucket('5'::text, ARRAY[3, 4]::integer[]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name width_bucket does not exist!
Did you mean "time_bucket"?

-----------
QUERY:

SELECT width_bucket(5, ARRAY[3, 4, NULL]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name width_bucket does not exist!
Did you mean "time_bucket"?

-----------
QUERY:

SELECT width_bucket(5, ARRAY[ARRAY[1, 2], ARRAY[3, 4]]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name width_bucket does not exist!
Did you mean "time_bucket"?

-----------
QUERY:


-- trim_array

SELECT arr, trim_array(arr, 2)
FROM
(VALUES ('{1,2,3,4,5,6}'::bigint[]),
        ('{1,2}'),
        ('[10:16]={1,2,3,4,5,6,7}'),
        ('[-15:-10]={1,2,3,4,5,6}'),
        ('{{1,10},{2,20},{3,30},{4,40}}')) v(arr);
RESULT:
	ERROR - Catalog Error: Scalar Function with name trim_array does not exist!
Did you mean "trim"?

-----------
QUERY:


SELECT trim_array(ARRAY[1, 2, 3], -1);
RESULT:
	ERROR - Catalog Error: Scalar Function with name trim_array does not exist!
Did you mean "trim"?

-----------
QUERY:
 -- fail
SELECT trim_array(ARRAY[1, 2, 3], 10);
RESULT:
	ERROR - Catalog Error: Scalar Function with name trim_array does not exist!
Did you mean "trim"?

-----------
QUERY:
 -- fail
SELECT trim_array(ARRAY[]::int[], 1);
RESULT:
	ERROR - Catalog Error: Scalar Function with name trim_array does not exist!
Did you mean "trim"?

-----------
QUERY:
 -- fail

-- array_shuffle
SELECT array_shuffle('{1,2,3,4,5,6}'::int[]) <@ '{1,2,3,4,5,6}';
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_shuffle does not exist!
Did you mean "array_slice"?

-----------
QUERY:

SELECT array_shuffle('{1,2,3,4,5,6}'::int[]) @> '{1,2,3,4,5,6}';
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_shuffle does not exist!
Did you mean "array_slice"?

-----------
QUERY:

SELECT array_dims(array_shuffle('[-1:2][2:3]={{1,2},{3,NULL},{5,6},{7,8}}'::int[]));
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_dims does not exist!
Did you mean "array_has"?

-----------
QUERY:

SELECT array_dims(array_shuffle('{{{1,2},{3,NULL}},{{5,6},{7,8}},{{9,10},{11,12}}}'::int[]));
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_dims does not exist!
Did you mean "array_has"?

-----------
QUERY:


-- array_sample
SELECT array_sample('{1,2,3,4,5,6}'::int[], 3) <@ '{1,2,3,4,5,6}';
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_sample does not exist!
Did you mean "array_apply"?

-----------
QUERY:

SELECT array_length(array_sample('{1,2,3,4,5,6}'::int[], 3), 1);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_sample does not exist!
Did you mean "array_apply"?

-----------
QUERY:

SELECT array_dims(array_sample('[-1:2][2:3]={{1,2},{3,NULL},{5,6},{7,8}}'::int[], 3));
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_dims does not exist!
Did you mean "array_has"?

-----------
QUERY:

SELECT array_dims(array_sample('{{{1,2},{3,NULL}},{{5,6},{7,8}},{{9,10},{11,12}}}'::int[], 2));
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_dims does not exist!
Did you mean "array_has"?

-----------
QUERY:

SELECT array_sample('{1,2,3,4,5,6}'::int[], -1);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_sample does not exist!
Did you mean "array_apply"?

-----------
QUERY:
 -- fail
SELECT array_sample('{1,2,3,4,5,6}'::int[], 7);
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_sample does not exist!
Did you mean "array_apply"?

-----------
QUERY:
 --fail

RESULT:
	[]
