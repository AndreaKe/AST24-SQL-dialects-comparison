
-----------
QUERY:
--
-- ARRAYS
--

-- directory paths are passed to us in environment variables
-- \getenv abs_srcdir '/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests'

CREATE TABLE arrtest (
	a 			int2[],
	b 			int4[][][],
	c 			name[],
	d			text[][],
	e 			float8[],
	f			char(5)[],
	g			varchar(5)[]
);
RESULT:
	[]

-----------
QUERY:


CREATE TABLE array_op_test (
	seqno		int4,
	i			int4[],
	t			text[]
);
RESULT:
	[]

-----------
QUERY:


-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' '/data/array.data'
COPY array_op_test FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/array.data';
RESULT:
	[]

-----------
QUERY:

ANALYZE array_op_test;
RESULT:
	[]

-----------
QUERY:


--
-- only the /* REPLACED */''e/* REPLACED */'' array is 0-based, the others are 1-based.
--

INSERT INTO arrtest (a[1:5], b[1:1][1:2][1:2], c, d, f, g)
   VALUES ('{1,2,3,4,5}', '{{{0,0},{1,2}}}', '{}', '{}', '{}', '{}');
RESULT:
	[]

-----------
QUERY:


UPDATE arrtest SET e[0] = '1.1';
RESULT:
	[]

-----------
QUERY:


UPDATE arrtest SET e[1] = '2.2';
RESULT:
	[]

-----------
QUERY:


INSERT INTO arrtest (f)
   VALUES ('{"too long"}');
RESULT:
	ERROR - value too long for type character(5)


-----------
QUERY:


INSERT INTO arrtest (a, b[1:2][1:2], c, d, e, f, g)
   VALUES ('{11,12,23}', '{{3,4},{4,5}}', '{"foobar"}',
           '{{"elt1", "elt2"}}', '{"3.4", "6.7"}',
           '{"abc","abcde"}', '{"abc","abcde"}');
RESULT:
	[]

-----------
QUERY:


INSERT INTO arrtest (a, b[1:2], c, d[1:2])
   VALUES ('{}', '{3,4}', '{foo,bar}', '{bar,foo}');
RESULT:
	[]

-----------
QUERY:


INSERT INTO arrtest (b[2]) VALUES(now());
RESULT:
	ERROR - subscripted assignment to "b" requires type integer but expression is of type timestamp with time zone
LINE 3: INSERT INTO arrtest (b[2]) VALUES(now());
                             ^
HINT:  You will need to rewrite or cast the expression.


-----------
QUERY:
  -- error, type mismatch

INSERT INTO arrtest (b[1:2]) VALUES(now());
RESULT:
	ERROR - subscripted assignment to "b" requires type integer[] but expression is of type timestamp with time zone
LINE 3: INSERT INTO arrtest (b[1:2]) VALUES(now());
                             ^
HINT:  You will need to rewrite or cast the expression.


-----------
QUERY:
  -- error, type mismatch

SELECT * FROM arrtest;
RESULT:
	[([1, 2, 3, 4, 5], [[[0, 0], [1, 2]]], [], [], [1.1, 2.2], [], []), ([11, 12, 23], [[3, 4], [4, 5]], ['foobar'], [['elt1', 'elt2']], [3.4, 6.7], ['abc  ', 'abcde'], ['abc', 'abcde']), ([], [3, 4], ['foo', 'bar'], ['bar', 'foo'], None, None, None)]

-----------
QUERY:


SELECT arrtest.a[1],
          arrtest.b[1][1][1],
          arrtest.c[1],
          arrtest.d[1][1],
          arrtest.e[0]
   FROM arrtest;
RESULT:
	[(1, 0, None, None, 1.1), (11, None, 'foobar', 'elt1', None), (None, None, 'foo', None, None)]

-----------
QUERY:


SELECT a[1], b[1][1][1], c[1], d[1][1], e[0]
   FROM arrtest;
RESULT:
	[(1, 0, None, None, 1.1), (11, None, 'foobar', 'elt1', None), (None, None, 'foo', None, None)]

-----------
QUERY:


SELECT a[1:3],
          b[1:1][1:2][1:2],
          c[1:2],
          d[1:1][1:2]
   FROM arrtest;
RESULT:
	[([1, 2, 3], [[[0, 0], [1, 2]]], [], []), ([11, 12, 23], [], ['foobar'], [['elt1', 'elt2']]), ([], [], ['foo', 'bar'], [])]

-----------
QUERY:


SELECT array_ndims(a) AS a,array_ndims(b) AS b,array_ndims(c) AS c
   FROM arrtest;
RESULT:
	[(1, 3, None), (1, 2, 1), (None, 1, 1)]

-----------
QUERY:


SELECT array_dims(a) AS a,array_dims(b) AS b,array_dims(c) AS c
   FROM arrtest;
RESULT:
	[('[1:5]', '[1:1][1:2][1:2]', None), ('[1:3]', '[1:2][1:2]', '[1:1]'), (None, '[1:2]', '[1:2]')]

-----------
QUERY:


-- returns nothing
SELECT *
   FROM arrtest
   WHERE a[1] < 5 and
         c = '{"foobar"}'::_name;
RESULT:
	[]

-----------
QUERY:


UPDATE arrtest
  SET a[1:2] = '{16,25}'
  WHERE NOT a = '{}'::_int2;
RESULT:
	[]

-----------
QUERY:


UPDATE arrtest
  SET b[1:1][1:1][1:2] = '{113, 117}',
      b[1:1][1:2][2:2] = '{142, 147}'
  WHERE array_dims(b) = '[1:1][1:2][1:2]';
RESULT:
	[]

-----------
QUERY:


UPDATE arrtest
  SET c[2:2] = '{"new_word"}'
  WHERE array_dims(c) is not null;
RESULT:
	[]

-----------
QUERY:


SELECT a,b,c FROM arrtest;
RESULT:
	[([16, 25, 3, 4, 5], [[[113, 142], [1, 147]]], []), ([], [3, 4], ['foo', 'new_word']), ([16, 25, 23], [[3, 4], [4, 5]], ['foobar', 'new_word'])]

-----------
QUERY:


SELECT a[1:3],
          b[1:1][1:2][1:2],
          c[1:2],
          d[1:1][2:2]
   FROM arrtest;
RESULT:
	[([16, 25, 3], [[[113, 142], [1, 147]]], [], []), ([], [], ['foo', 'new_word'], []), ([16, 25, 23], [], ['foobar', 'new_word'], [['elt2']])]

-----------
QUERY:


SELECT b[1:1][2][2],
       d[1:1][2]
   FROM arrtest;
RESULT:
	[([[[113, 142], [1, 147]]], []), ([], []), ([], [['elt1', 'elt2']])]

-----------
QUERY:


INSERT INTO arrtest(a) VALUES('{1,null,3}');
RESULT:
	[]

-----------
QUERY:

SELECT a FROM arrtest;
RESULT:
	[([16, 25, 3, 4, 5],), ([],), ([16, 25, 23],), ([1, None, 3],)]

-----------
QUERY:

UPDATE arrtest SET a[4] = NULL WHERE a[2] IS NULL;
RESULT:
	[]

-----------
QUERY:

SELECT a FROM arrtest WHERE a[2] IS NULL;
RESULT:
	[([None],), ([1, None, 3, None],)]

-----------
QUERY:

DELETE FROM arrtest WHERE a[2] IS NULL AND b IS NULL;
RESULT:
	[]

-----------
QUERY:

SELECT a,b,c FROM arrtest;
RESULT:
	[([16, 25, 3, 4, 5], [[[113, 142], [1, 147]]], []), ([16, 25, 23], [[3, 4], [4, 5]], ['foobar', 'new_word']), ([None], [3, 4], ['foo', 'new_word'])]

-----------
QUERY:


-- test non-error-throwing API
SELECT pg_input_is_valid('{1,2,3}', 'integer[]');
RESULT:
	[(True,)]

-----------
QUERY:

SELECT pg_input_is_valid('{1,2', 'integer[]');
RESULT:
	[(False,)]

-----------
QUERY:

SELECT pg_input_is_valid('{1,zed}', 'integer[]');
RESULT:
	[(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('{1,zed}', 'integer[]');
RESULT:
	[('invalid input syntax for type integer: "zed"', None, None, '22P02')]

-----------
QUERY:


-- test mixed slice/scalar subscripting
select '{{1,2,3},{4,5,6},{7,8,9}}'::int[];
RESULT:
	[([[1, 2, 3], [4, 5, 6], [7, 8, 9]],)]

-----------
QUERY:

select ('{{1,2,3},{4,5,6},{7,8,9}}'::int[])[1:2][2];
RESULT:
	[([[1, 2], [4, 5]],)]

-----------
QUERY:

select '[0:2][0:2]={{1,2,3},{4,5,6},{7,8,9}}'::int[];
RESULT:
	ERROR - array does not start with '{'

-----------
QUERY:

select ('[0:2][0:2]={{1,2,3},{4,5,6},{7,8,9}}'::int[])[1:2][2];
RESULT:
	[([[5, 6], [8, 9]],)]

-----------
QUERY:


--
-- check subscription corner cases
--
-- More subscripts than MAXDIM (6)
SELECT ('{}'::int[])[1][2][3][4][5][6][7];
RESULT:
	ERROR - number of array dimensions (7) exceeds the maximum allowed (6)


-----------
QUERY:

-- NULL index yields NULL when selecting
SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL][1];
RESULT:
	[(None,)]

-----------
QUERY:

SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][NULL:1][1];
RESULT:
	[(None,)]

-----------
QUERY:

SELECT ('{{{1},{2},{3}},{{4},{5},{6}}}'::int[])[1][1:NULL][1];
RESULT:
	[(None,)]

-----------
QUERY:

-- NULL index in assignment is an error
UPDATE arrtest
  SET c[NULL] = '{"can''t assign"}'
  WHERE array_dims(c) is not null;
RESULT:
	ERROR - array subscript in assignment must not be null


-----------
QUERY:

UPDATE arrtest
  SET c[NULL:1] = '{"can''t assign"}'
  WHERE array_dims(c) is not null;
RESULT:
	ERROR - array subscript in assignment must not be null


-----------
QUERY:

UPDATE arrtest
  SET c[1:NULL] = '{"can''t assign"}'
  WHERE array_dims(c) is not null;
RESULT:
	ERROR - array subscript in assignment must not be null


-----------
QUERY:

-- Un-subscriptable type
SELECT (now())[1];
RESULT:
	ERROR - cannot subscript type timestamp with time zone because it does not support subscripting
LINE 3: SELECT (now())[1];
                ^


-----------
QUERY:


-- test slices with empty lower and/or upper index
CREATE TEMP TABLE arrtest_s (
  a       int2[],
  b       int2[][]
);
RESULT:
	[]

-----------
QUERY:

INSERT INTO arrtest_s VALUES ('{1,2,3,4,5}', '{{1,2,3}, {4,5,6}, {7,8,9}}');
RESULT:
	[]

-----------
QUERY:

INSERT INTO arrtest_s VALUES ('[0:4]={1,2,3,4,5}', '[0:2][0:2]={{1,2,3}, {4,5,6}, {7,8,9}}');
RESULT:
	[]

-----------
QUERY:


SELECT * FROM arrtest_s;
RESULT:
	ERROR - array does not start with '{'

-----------
QUERY:

SELECT a[:3], b[:2][:2] FROM arrtest_s;
RESULT:
	[([1, 2, 3], [[1, 2], [4, 5]]), ([1, 2, 3, 4], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])]

-----------
QUERY:

SELECT a[2:], b[2:][2:] FROM arrtest_s;
RESULT:
	[([2, 3, 4, 5], [[5, 6], [8, 9]]), ([3, 4, 5], [[9]])]

-----------
QUERY:

SELECT a[:], b[:] FROM arrtest_s;
RESULT:
	[([1, 2, 3, 4, 5], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]), ([1, 2, 3, 4, 5], [[1, 2, 3], [4, 5, 6], [7, 8, 9]])]

-----------
QUERY:


-- updates
UPDATE arrtest_s SET a[:3] = '{11, 12, 13}', b[:2][:2] = '{{11,12}, {14,15}}'
  WHERE array_lower(a,1) = 1;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM arrtest_s;
RESULT:
	ERROR - array does not start with '{'

-----------
QUERY:

UPDATE arrtest_s SET a[3:] = '{23, 24, 25}', b[2:][2:] = '{{25,26}, {28,29}}';
RESULT:
	[]

-----------
QUERY:

SELECT * FROM arrtest_s;
RESULT:
	ERROR - array does not start with '{'

-----------
QUERY:

UPDATE arrtest_s SET a[:] = '{11, 12, 13, 14, 15}';
RESULT:
	[]

-----------
QUERY:

SELECT * FROM arrtest_s;
RESULT:
	ERROR - array does not start with '{'

-----------
QUERY:

UPDATE arrtest_s SET a[:] = '{23, 24, 25}';
RESULT:
	ERROR - source array too small


-----------
QUERY:
  -- fail, too small
INSERT INTO arrtest_s VALUES(NULL, NULL);
RESULT:
	[]

-----------
QUERY:

UPDATE arrtest_s SET a[:] = '{11, 12, 13, 14, 15}';
RESULT:
	ERROR - array slice subscript must provide both boundaries
DETAIL:  When assigning to a slice of an empty array value, slice boundaries must be fully specified.


-----------
QUERY:
  -- fail, no good with null

-- we want to work with a point_tbl that includes a null
CREATE TEMP TABLE point_tbl AS SELECT * FROM public.point_tbl;
RESULT:
	ERROR - relation "point_tbl" already exists


-----------
QUERY:

INSERT INTO POINT_TBL(f1) VALUES (NULL);
RESULT:
	[]

-----------
QUERY:


-- check with fixed-length-array type, such as point
SELECT f1[0:1] FROM POINT_TBL;
RESULT:
	ERROR - slices of fixed-length arrays not implemented


-----------
QUERY:

SELECT f1[0:] FROM POINT_TBL;
RESULT:
	ERROR - slices of fixed-length arrays not implemented


-----------
QUERY:

SELECT f1[:1] FROM POINT_TBL;
RESULT:
	ERROR - slices of fixed-length arrays not implemented


-----------
QUERY:

SELECT f1[:] FROM POINT_TBL;
RESULT:
	ERROR - slices of fixed-length arrays not implemented


-----------
QUERY:


-- subscript assignments to fixed-width result in NULL if previous value is NULL
UPDATE point_tbl SET f1[0] = 10 WHERE f1 IS NULL RETURNING *;
RESULT:
	[(None,), (None,)]

-----------
QUERY:

INSERT INTO point_tbl(f1[0]) VALUES(0) RETURNING *;
RESULT:
	[(None,)]

-----------
QUERY:

-- NULL assignments get ignored
UPDATE point_tbl SET f1[0] = NULL WHERE f1::text = '(10,10)'::point::text RETURNING *;
RESULT:
	[('(10,10)',)]

-----------
QUERY:

-- but non-NULL subscript assignments work
UPDATE point_tbl SET f1[0] = -10, f1[1] = -10 WHERE f1::text = '(10,10)'::point::text RETURNING *;
RESULT:
	[('(-10,-10)',)]

-----------
QUERY:

-- but not to expand the range
UPDATE point_tbl SET f1[3] = 10 WHERE f1::text = '(-10,-10)'::point::text RETURNING *;
RESULT:
	ERROR - array subscript out of range


-----------
QUERY:


--
-- test array extension
--
CREATE TEMP TABLE arrtest1 (i int[], t text[]);
RESULT:
	[]

-----------
QUERY:

insert into arrtest1 values(array[1,2,null,4], array['one','two',null,'four']);
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

-----------
QUERY:

update arrtest1 set i[2] = 22, t[2] = 'twenty-two';
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([1, 22, None, 4], ['one', 'twenty-two', None, 'four'])]

-----------
QUERY:

update arrtest1 set i[5] = 5, t[5] = 'five';
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([1, 22, None, 4, 5], ['one', 'twenty-two', None, 'four', 'five'])]

-----------
QUERY:

update arrtest1 set i[8] = 8, t[8] = 'eight';
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([1, 22, None, 4, 5, None, None, 8], ['one', 'twenty-two', None, 'four', 'five', None, None, 'eight'])]

-----------
QUERY:

update arrtest1 set i[0] = 0, t[0] = 'zero';
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([0, 1, 22, None, 4, 5, None, None, 8], ['zero', 'one', 'twenty-two', None, 'four', 'five', None, None, 'eight'])]

-----------
QUERY:

update arrtest1 set i[-3] = -3, t[-3] = 'minus-three';
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([-3, None, None, 0, 1, 22, None, 4, 5, None, None, 8], ['minus-three', None, None, 'zero', 'one', 'twenty-two', None, 'four', 'five', None, None, 'eight'])]

-----------
QUERY:

update arrtest1 set i[0:2] = array[10,11,12], t[0:2] = array['ten','eleven','twelve'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([-3, None, None, 10, 11, 12, None, 4, 5, None, None, 8], ['minus-three', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'eight'])]

-----------
QUERY:

update arrtest1 set i[8:10] = array[18,null,20], t[8:10] = array['p18',null,'p20'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([-3, None, None, 10, 11, 12, None, 4, 5, None, None, 18, None, 20], ['minus-three', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'p18', None, 'p20'])]

-----------
QUERY:

update arrtest1 set i[11:12] = array[null,22], t[11:12] = array[null,'p22'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([-3, None, None, 10, 11, 12, None, 4, 5, None, None, 18, None, 20, None, 22], ['minus-three', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'p18', None, 'p20', None, 'p22'])]

-----------
QUERY:

update arrtest1 set i[15:16] = array[null,26], t[15:16] = array[null,'p26'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([-3, None, None, 10, 11, 12, None, 4, 5, None, None, 18, None, 20, None, 22, None, None, None, 26], ['minus-three', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'p18', None, 'p20', None, 'p22', None, None, None, 'p26'])]

-----------
QUERY:

update arrtest1 set i[-5:-3] = array[-15,-14,-13], t[-5:-3] = array['m15','m14','m13'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([-15, -14, -13, None, None, 10, 11, 12, None, 4, 5, None, None, 18, None, 20, None, 22, None, None, None, 26], ['m15', 'm14', 'm13', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'p18', None, 'p20', None, 'p22', None, None, None, 'p26'])]

-----------
QUERY:

update arrtest1 set i[-7:-6] = array[-17,null], t[-7:-6] = array['m17',null];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([-17, None, -15, -14, -13, None, None, 10, 11, 12, None, 4, 5, None, None, 18, None, 20, None, 22, None, None, None, 26], ['m17', None, 'm15', 'm14', 'm13', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'p18', None, 'p20', None, 'p22', None, None, None, 'p26'])]

-----------
QUERY:

update arrtest1 set i[-12:-10] = array[-22,null,-20], t[-12:-10] = array['m22',null,'m20'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([-22, None, -20, None, None, -17, None, -15, -14, -13, None, None, 10, 11, 12, None, 4, 5, None, None, 18, None, 20, None, 22, None, None, None, 26], ['m22', None, 'm20', None, None, 'm17', None, 'm15', 'm14', 'm13', None, None, 'ten', 'eleven', 'twelve', None, 'four', 'five', None, None, 'p18', None, 'p20', None, 'p22', None, None, None, 'p26'])]

-----------
QUERY:

delete from arrtest1;
RESULT:
	[]

-----------
QUERY:

insert into arrtest1 values(array[1,2,null,4], array['one','two',null,'four']);
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([1, 2, None, 4], ['one', 'two', None, 'four'])]

-----------
QUERY:

update arrtest1 set i[0:5] = array[0,1,2,null,4,5], t[0:5] = array['z','p1','p2',null,'p4','p5'];
RESULT:
	[]

-----------
QUERY:

select * from arrtest1;
RESULT:
	[([0, 1, 2, None, 4, 5], ['z', 'p1', 'p2', None, 'p4', 'p5'])]

-----------
QUERY:


--
-- array expressions and operators
--

-- table creation and INSERTs
CREATE TEMP TABLE arrtest2 (i integer ARRAY[4], f float8[], n numeric[], t text[], d timestamp[]);
RESULT:
	[]

-----------
QUERY:

INSERT INTO arrtest2 VALUES(
  ARRAY[[[113,142],[1,147]]],
  ARRAY[1.1,1.2,1.3]::float8[],
  ARRAY[1.1,1.2,1.3],
  ARRAY[[['aaa','aab'],['aba','abb'],['aca','acb']],[['baa','bab'],['bba','bbb'],['bca','bcb']]],
  ARRAY['19620326','19931223','19970117']::timestamp[]
);
RESULT:
	[]

-----------
QUERY:


-- some more test data
CREATE TEMP TABLE arrtest_f (f0 int, f1 text, f2 float8);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(1,'cat1',1.21);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(2,'cat1',1.24);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(3,'cat1',1.18);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(4,'cat1',1.26);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(5,'cat1',1.15);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(6,'cat2',1.15);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(7,'cat2',1.26);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(8,'cat2',1.32);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_f values(9,'cat2',1.30);
RESULT:
	[]

-----------
QUERY:


CREATE TEMP TABLE arrtest_i (f0 int, f1 text, f2 int);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(1,'cat1',21);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(2,'cat1',24);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(3,'cat1',18);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(4,'cat1',26);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(5,'cat1',15);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(6,'cat2',15);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(7,'cat2',26);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(8,'cat2',32);
RESULT:
	[]

-----------
QUERY:

insert into arrtest_i values(9,'cat2',30);
RESULT:
	[]

-----------
QUERY:


-- expressions
SELECT t.f[1][3][1] AS "131", t.f[2][2][1] AS "221" FROM (
  SELECT ARRAY[[[111,112],[121,122],[131,132]],[[211,212],[221,122],[231,232]]] AS f
) AS t;
RESULT:
	[(131, 221)]

-----------
QUERY:

SELECT ARRAY[[[[[['hello'],['world']]]]]];
RESULT:
	[([[[[[['hello'], ['world']]]]]],)]

-----------
QUERY:

SELECT ARRAY[ARRAY['hello'],ARRAY['world']];
RESULT:
	[([['hello'], ['world']],)]

-----------
QUERY:

SELECT ARRAY(select f2 from arrtest_f order by f2) AS "ARRAY";
RESULT:
	[([1.15, 1.15, 1.18, 1.21, 1.24, 1.26, 1.26, 1.3, 1.32],)]

-----------
QUERY:


-- with nulls
SELECT '{1,null,3}'::int[];
RESULT:
	[([1, None, 3],)]

-----------
QUERY:

SELECT ARRAY[1,NULL,3];
RESULT:
	[([1, None, 3],)]

-----------
QUERY:


-- functions
SELECT array_append(array[42], 6) AS "{42,6}";
RESULT:
	[([42, 6],)]

-----------
QUERY:

SELECT array_prepend(6, array[42]) AS "{6,42}";
RESULT:
	[([6, 42],)]

-----------
QUERY:

SELECT array_cat(ARRAY[1,2], ARRAY[3,4]) AS "{1,2,3,4}";
RESULT:
	[([1, 2, 3, 4],)]

-----------
QUERY:

SELECT array_cat(ARRAY[1,2], ARRAY[[3,4],[5,6]]) AS "{{1,2},{3,4},{5,6}}";
RESULT:
	[([[1, 2], [3, 4], [5, 6]],)]

-----------
QUERY:

SELECT array_cat(ARRAY[[3,4],[5,6]], ARRAY[1,2]) AS "{{3,4},{5,6},{1,2}}";
RESULT:
	[([[3, 4], [5, 6], [1, 2]],)]

-----------
QUERY:


SELECT array_position(ARRAY[1,2,3,4,5], 4);
RESULT:
	[(4,)]

-----------
QUERY:

SELECT array_position(ARRAY[5,3,4,2,1], 4);
RESULT:
	[(3,)]

-----------
QUERY:

SELECT array_position(ARRAY[[1,2],[3,4]], 3);
RESULT:
	ERROR - searching for elements in multidimensional arrays is not supported


-----------
QUERY:

SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'mon');
RESULT:
	[(2,)]

-----------
QUERY:

SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], 'sat');
RESULT:
	[(7,)]

-----------
QUERY:

SELECT array_position(ARRAY['sun','mon','tue','wed','thu','fri','sat'], NULL);
RESULT:
	[(None,)]

-----------
QUERY:

SELECT array_position(ARRAY['sun','mon','tue','wed','thu',NULL,'fri','sat'], NULL);
RESULT:
	[(6,)]

-----------
QUERY:

SELECT array_position(ARRAY['sun','mon','tue','wed','thu',NULL,'fri','sat'], 'sat');
RESULT:
	[(8,)]

-----------
QUERY:


SELECT array_positions(NULL, 10);
RESULT:
	[(None,)]

-----------
QUERY:

SELECT array_positions(NULL, NULL::int);
RESULT:
	[(None,)]

-----------
QUERY:

SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], 4);
RESULT:
	[([4, 10],)]

-----------
QUERY:

SELECT array_positions(ARRAY[[1,2],[3,4]], 4);
RESULT:
	ERROR - searching for elements in multidimensional arrays is not supported


-----------
QUERY:

SELECT array_positions(ARRAY[1,2,3,4,5,6,1,2,3,4,5,6], NULL);
RESULT:
	[([],)]

-----------
QUERY:

SELECT array_positions(ARRAY[1,2,3,NULL,5,6,1,2,3,NULL,5,6], NULL);
RESULT:
	[([4, 10],)]

-----------
QUERY:

SELECT array_length(array_positions(ARRAY(SELECT 'AAAAAAAAAAAAAAAAAAAAAAAAA'::text || i % 10
                                          FROM generate_series(1,100) g(i)),
                                  'AAAAAAAAAAAAAAAAAAAAAAAAA5'), 1);
RESULT:
	[(10,)]

-----------
QUERY:


DO $$
DECLARE
  o int;
  a int[] := ARRAY[1,2,3,2,3,1,2];
BEGIN
  o := array_position(a, 2);
  WHILE o IS NOT NULL
  LOOP
    RAISE NOTICE '%', o;
    o := array_position(a, 2, o + 1);
  END LOOP;
END
$$ LANGUAGE plpgsql;
RESULT:
	[]

-----------
QUERY:


SELECT array_position('[2:4]={1,2,3}'::int[], 1);
RESULT:
	[(2,)]

-----------
QUERY:

SELECT array_positions('[2:4]={1,2,3}'::int[], 1);
RESULT:
	[([2],)]

-----------
QUERY:


SELECT
    array_position(ids, (1, 1)),
    array_positions(ids, (1, 1))
        FROM
(VALUES
    (ARRAY[(0, 0), (1, 1)]),
    (ARRAY[(1, 1)])
) AS f (ids);
RESULT:
	[(2, [2]), (1, [1])]

-----------
QUERY:


-- operators
SELECT a FROM arrtest WHERE b = ARRAY[[[113,142],[1,147]]];
RESULT:
	[([16, 25, 3, 4, 5],)]

-----------
QUERY:

SELECT NOT ARRAY[1.1,1.2,1.3] = ARRAY[1.1,1.2,1.3] AS "FALSE";
RESULT:
	[(False,)]

-----------
QUERY:

SELECT ARRAY[1,2] || 3 AS "{1,2,3}";
RESULT:
	[([1, 2, 3],)]

-----------
QUERY:

SELECT 0 || ARRAY[1,2] AS "{0,1,2}";
RESULT:
	[([0, 1, 2],)]

-----------
QUERY:

SELECT ARRAY[1,2] || ARRAY[3,4] AS "{1,2,3,4}";
RESULT:
	[([1, 2, 3, 4],)]

-----------
QUERY:

SELECT ARRAY[[['hello','world']]] || ARRAY[[['happy','birthday']]] AS "ARRAY";
RESULT:
	[([[['hello', 'world']], [['happy', 'birthday']]],)]

-----------
QUERY:

SELECT ARRAY[[1,2],[3,4]] || ARRAY[5,6] AS "{{1,2},{3,4},{5,6}}";
RESULT:
	[([[1, 2], [3, 4], [5, 6]],)]

-----------
QUERY:

SELECT ARRAY[0,0] || ARRAY[1,1] || ARRAY[2,2] AS "{0,0,1,1,2,2}";
RESULT:
	[([0, 0, 1, 1, 2, 2],)]

-----------
QUERY:

SELECT 0 || ARRAY[1,2] || 3 AS "{0,1,2,3}";
RESULT:
	[([0, 1, 2, 3],)]

-----------
QUERY:

SELECT ARRAY[1.1] || ARRAY[2,3,4];
RESULT:
	[([Decimal('1.1'), Decimal('2'), Decimal('3'), Decimal('4')],)]

-----------
QUERY:

SELECT array_agg(x) || array_agg(x) FROM (VALUES (ROW(1,2)), (ROW(3,4))) v(x);
RESULT:
	[('{"(1,2)","(3,4)","(1,2)","(3,4)"}',)]

-----------
QUERY:

SELECT ROW(1,2) || array_agg(x) FROM (VALUES (ROW(3,4)), (ROW(5,6))) v(x);
RESULT:
	[('{"(1,2)","(3,4)","(5,6)"}',)]

-----------
QUERY:


SELECT * FROM array_op_test WHERE i @> '{32}' ORDER BY seqno;
RESULT:
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523'])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i && '{32}' ORDER BY seqno;
RESULT:
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523'])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i @> '{17}' ORDER BY seqno;
RESULT:
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (12, [17, 99, 18, 52, 91, 72, 0, 43, 96, 23], ['AAAAA33250', 'AAAAAAAAAAAAAAAAAAA85420', 'AAAAAAAAAAA33576']), (15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (19, [52, 82, 17, 74, 23, 46, 69, 51, 75], ['AAAAAAAAAAAAA73084', 'AAAAA75968', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAAAAA1205', 'A68938']), (53, [38, 17], ['AAAAAAAAAAA21658']), (65, [61, 5, 76, 59, 17], ['AAAAAA99807', 'AAAAA64741', 'AAAAAAAAAAA53908', 'AA21643', 'AAAAAAAAA10012']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673'])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i && '{17}' ORDER BY seqno;
RESULT:
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (12, [17, 99, 18, 52, 91, 72, 0, 43, 96, 23], ['AAAAA33250', 'AAAAAAAAAAAAAAAAAAA85420', 'AAAAAAAAAAA33576']), (15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (19, [52, 82, 17, 74, 23, 46, 69, 51, 75], ['AAAAAAAAAAAAA73084', 'AAAAA75968', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAAAAA1205', 'A68938']), (53, [38, 17], ['AAAAAAAAAAA21658']), (65, [61, 5, 76, 59, 17], ['AAAAAA99807', 'AAAAA64741', 'AAAAAAAAAAA53908', 'AA21643', 'AAAAAAAAA10012']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673'])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i @> '{32,17}' ORDER BY seqno;
RESULT:
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673'])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i && '{32,17}' ORDER BY seqno;
RESULT:
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (12, [17, 99, 18, 52, 91, 72, 0, 43, 96, 23], ['AAAAA33250', 'AAAAAAAAAAAAAAAAAAA85420', 'AAAAAAAAAAA33576']), (15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (19, [52, 82, 17, 74, 23, 46, 69, 51, 75], ['AAAAAAAAAAAAA73084', 'AAAAA75968', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAAAAA1205', 'A68938']), (53, [38, 17], ['AAAAAAAAAAA21658']), (65, [61, 5, 76, 59, 17], ['AAAAAA99807', 'AAAAA64741', 'AAAAAAAAAAA53908', 'AA21643', 'AAAAAAAAA10012']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523'])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i <@ '{38,34,32,89}' ORDER BY seqno;
RESULT:
	[(40, [34], ['AAAAAAAAAAAAAA10611', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAA50956', 'AAAAAAAAAAAAAAAA31334', 'AAAAA70466', 'AAAAAAAA81587', 'AAAAAAA74623']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (101, [], [])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i = '{}' ORDER BY seqno;
RESULT:
	[(101, [], [])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i @> '{}' ORDER BY seqno;
RESULT:
	[(1, [92, 75, 71, 52, 64, 83], ['AAAAAAAA44066', 'AAAAAA1059', 'AAAAAAAAAAA176', 'AAAAAAA48038']), (2, [3, 6], ['AAAAAA98232', 'AAAAAAAA79710', 'AAAAAAAAAAAAAAAAA69675', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAA12793']), (3, [37, 64, 95, 43, 3, 41, 13, 30, 11, 43], ['AAAAAAAAAA48845', 'AAAAA75968', 'AAAAA95309', 'AAA54451', 'AAAAAAAAAA22292', 'AAAAAAA99836', 'A96617', 'AA17009', 'AAAAAAAAAAAAAA95246']), (4, [71, 39, 99, 55, 33, 75, 45], ['AAAAAAAAA53663', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAA64777', 'AAA99043', 'AAAAAAAAAAAAAAAAAAA91804', '39557']), (5, [50, 42, 77, 50, 4], ['AAAAAAAAAAAAAAAAA26540', 'AAAAAAA79710', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAA176', 'AAAAA95309', 'AAAAAAAAAAA46154', 'AAAAAA66777', 'AAAAAAAAA27249', 'AAAAAAAAAA64777', 'AAAAAAAAAAAAAAAAAAA70104']), (6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (7, [12, 51, 88, 64, 8], ['AAAAAAAAAAAAAAAAAA12591', 'AAAAAAAAAAAAAAAAA50407', 'AAAAAAAAAAAA67946']), (8, [60, 84], ['AAAAAAA81898', 'AAAAAA1059', 'AAAAAAAAAAAA81511', 'AAAAA961', 'AAAAAAAAAAAAAAAA31334', 'AAAAA64741', 'AA6416', 'AAAAAAAAAAAAAAAAAA32918', 'AAAAAAAAAAAAAAAAA50407']), (9, [56, 52, 35, 27, 80, 44, 81, 22], ['AAAAAAAAAAAAAAA73034', 'AAAAAAAAAAAAA7929', 'AAAAAAA66161', 'AA88409', '39557', 'A27153', 'AAAAAAAA9523', 'AAAAAAAAAAA99000']), (10, [71, 5, 45], ['AAAAAAAAAAA21658', 'AAAAAAAAAAAA21089', 'AAA54451', 'AAAAAAAAAAAAAAAAAA54141', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAA21658', 'AAAAAAAAAAA74076', 'AAAAAAAAA27249']), (11, [41, 86, 74, 48, 22, 74, 47, 50], ['AAAAAAAA9523', 'AAAAAAAAAAAA37562', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAAAAAA46154', 'AAAA41702', 'AAAAAAAAAAAAAAAAA764', 'AAAAA62737', '39557']), (12, [17, 99, 18, 52, 91, 72, 0, 43, 96, 23], ['AAAAA33250', 'AAAAAAAAAAAAAAAAAAA85420', 'AAAAAAAAAAA33576']), (13, [3, 52, 34, 23], ['AAAAAA98232', 'AAAA49534', 'AAAAAAAAAAA21658']), (14, [78, 57, 19], ['AAAA8857', 'AAAAAAAAAAAAAAA73034', 'AAAAAAAA81587', 'AAAAAAAAAAAAAAA68526', 'AAAAA75968', 'AAAAAAAAAAAAAA65909', 'AAAAAAAAA10012', 'AAAAAAAAAAAAAA65909']), (15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (16, [14, 63, 85, 11], ['AAAAAA66777']), (17, [7, 10, 81, 85], ['AAAAAA43678', 'AAAAAAA12144', 'AAAAAAAAAAA50956', 'AAAAAAAAAAAAAAAAAAA15356']), (18, [1], ['AAAAAAAAAAA33576', 'AAAAA95309', '64261', 'AAA59323', 'AAAAAAAAAAAAAA95246', '55847', 'AAAAAAAAAAAA67946', 'AAAAAAAAAAAAAAAAAA64374']), (19, [52, 82, 17, 74, 23, 46, 69, 51, 75], ['AAAAAAAAAAAAA73084', 'AAAAA75968', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAAAAA1205', 'A68938']), (20, [72, 89, 70, 51, 54, 37, 8, 49, 79], ['AAAAAA58494']), (21, [2, 8, 65, 10, 5, 79, 43], ['AAAAAAAAAAAAAAAAA88852', 'AAAAAAAAAAAAAAAAAAA91804', 'AAAAA64669', 'AAAAAAAAAAAAAAAA1443', 'AAAAAAAAAAAAAAAA23657', 'AAAAA12179', 'AAAAAAAAAAAAAAAAA88852', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAAAAAAAA41303', 'AAAAAAAAAAAAAAAAAAA85420']), (22, [11, 6, 56, 62, 53, 30], ['AAAAAAAA72908']), (23, [40, 90, 5, 38, 72, 40, 30, 10, 43, 55], ['A6053', 'AAAAAAAAAAA6119', 'AA44673', 'AAAAAAAAAAAAAAAAA764', 'AA17009', 'AAAAA17383', 'AAAAA70514', 'AAAAA33250', 'AAAAA95309', 'AAAAAAAAAAAA37562']), (24, [94, 61, 99, 35, 48], ['AAAAAAAAAAA50956', 'AAAAAAAAAAA15165', 'AAAA85070', 'AAAAAAAAAAAAAAA36627', 'AAAAA961', 'AAAAAAAAAA55219']), (25, [31, 1, 10, 11, 27, 79, 38], ['AAAAAAAAAAAAAAAAAA59334', '45449']), (26, [71, 10, 9, 69, 75], ['47735', 'AAAAAAA21462', 'AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAAAAA91804', 'AAAAAAAAA72121', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAA41597', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA15356', 'AA17009']), (27, [94], ['AA6416', 'A6053', 'AAAAAAA21462', 'AAAAAAA57334', 'AAAAAAAAAAAAAAAAAA12591', 'AA88409', 'AAAAAAAAAAAAA70254']), (28, [14, 33, 6, 34, 14], ['AAAAAAAAAAAAAAA13198', 'AAAAAAAA69452', 'AAAAAAAAAAA82945', 'AAAAAAA12144', 'AAAAAAAAA72121', 'AAAAAAAAAA18601']), (29, [39, 21], ['AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAAAAA38885', 'AAAA85070', 'AAAAAAAAAAAAAAAAAAA70104', 'AAAAA66674', 'AAAAAAAAAAAAA62007', 'AAAAAAAA69452', 'AAAAAAA1242', 'AAAAAAAAAAAAAAAA1729', 'AAAA35194']), (30, [26, 81, 47, 91, 34], ['AAAAAAAAAAAAAAAAAAA70104', 'AAAAAAA80240']), (31, [80, 24, 18, 21, 54], ['AAAAAAAAAAAAAAA13198', 'AAAAAAAAAAAAAAAAAAA70415', 'A27153', 'AAAAAAAAA53663', 'AAAAAAAAAAAAAAAAA50407', 'A68938']), (32, [58, 79, 82, 80, 67, 75, 98, 10, 41], ['AAAAAAAAAAAAAAAAAA61286', 'AAA54451', 'AAAAAAAAAAAAAAAAAAA87527', 'A96617', '51533']), (33, [74, 73], ['A85417', 'AAAAAAA56483', 'AAAAA17383', 'AAAAAAAAAAAAA62159', 'AAAAAAAAAAAA52814', 'AAAAAAAAAAAAA85723', 'AAAAAAAAAAAAAAAAAA55796']), (34, [70, 45], ['AAAAAAAAAAAAAAAAAA71621', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAA55219', 'AAAAAAAA23648', 'AAAAAAAAAA22292', 'AAAAAAA1242']), (35, [23, 40], ['AAAAAAAAAAAA52814', 'AAAA48949', 'AAAAAAAAA34727', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA62179', 'AAAAAAAAAAAAAAA68526', 'AAAAAAA99836', 'AAAAAAAA50094', 'AAAA91194', 'AAAAAAAAAAAAA73084']), (36, [79, 82, 14, 52, 30, 5, 79], ['AAAAAAAAA53663', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAAAAAAAAAAA89194', 'AA88409', 'AAAAAAAAAAAAAAA81326', 'AAAAAAAAAAAAAAAAA63050', 'AAAAAAAAAAAAAAAA33598']), (37, [53, 11, 81, 39, 3, 78, 58, 64, 74], ['AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAA66161', 'AAAAAAAA23648', 'AAAAAAAAAAAAAA10611']), (38, [59, 5, 4, 95, 28], ['AAAAAAAAAAA82945', 'A96617', '47735', 'AAAAA12179', 'AAAAA64669', 'AAAAAA99807', 'AA74433', 'AAAAAAAAAAAAAAAAA59387']), (39, [82, 43, 99, 16, 74], ['AAAAAAAAAAAAAAA67062', 'AAAAAAA57334', 'AAAAAAAAAAAAAA65909', 'A27153', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAAAAAA64777', 'AAAAAAAAAAAA81511', 'AAAAAAAAAAAAAA65909', 'AAAAAAAAAAAAAA28620']), (40, [34], ['AAAAAAAAAAAAAA10611', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAA50956', 'AAAAAAAAAAAAAAAA31334', 'AAAAA70466', 'AAAAAAAA81587', 'AAAAAAA74623']), (41, [19, 26, 63, 12, 93, 73, 27, 94], ['AAAAAAA79710', 'AAAAAAAAAA55219', 'AAAA41702', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAAA71621', 'AAAAAAAAAAAAAAAAA63050', 'AAAAAAA99836', 'AAAAAAAAAAAAAA8666']), (42, [15, 76, 82, 75, 8, 91], ['AAAAAAAAAAA176', 'AAAAAA38063', '45449', 'AAAAAA54032', 'AAAAAAA81898', 'AA6416', 'AAAAAAAAAAAAAAAAAAA62179', '45449', 'AAAAA60038', 'AAAAAAAA81587']), (43, [39, 87, 91, 97, 79, 28], ['AAAAAAAAAAA74076', 'A96617', 'AAAAAAAAAAAAAAAAAAA89194', 'AAAAAAAAAAAAAAAAAA55796', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAA67946']), (44, [40, 58, 68, 29, 54], ['AAAAAAA81898', 'AAAAAA66777', 'AAAAAA98232']), (45, [99, 45], ['AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAAA17075', 'AA88409', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAAAA48038', 'AAAAAAAAAAAAAA10611']), (46, [53, 24], ['AAAAAAAAAAA53908', 'AAAAAA54032', 'AAAAA17383', 'AAAA48949', 'AAAAAAAAAA18601', 'AAAAA64669', '45449', 'AAAAAAAAAAA98051', 'AAAAAAAAAAAAAAAAAA71621']), (47, [98, 23, 64, 12, 75, 61], ['AAA59323', 'AAAAA95309', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAA27249', 'AAAAA17383', 'AAAAAAAAAAAA37562', 'AAAAAA1059', 'A84822', '55847', 'AAAAA70466']), (48, [76, 14], ['AAAAAAAAAAAAA59671', 'AAAAAAAAAAAAAAAAAAA91804', 'AAAAAA66777', 'AAAAAAAAAAAAAAAAAAA89194', 'AAAAAAAAAAAAAAA36627', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAA73084', 'AAAAAAA79710', 'AAAAAAAAAAAAAAA40402', 'AAAAAAAAAAAAAAAAAAA65037']), (49, [56, 5, 54, 37, 49], ['AA21643', 'AAAAAAAAAAA92631', 'AAAAAAAA81587']), (50, [20, 12, 37, 64, 93], ['AAAAAAAAAA5483', 'AAAAAAAAAAAAAAAAAAA1205', 'AA6416', 'AAAAAAAAAAAAAAAAA63050', 'AAAAAAAAAAAAAAAAAA47955']), (51, [47], ['AAAAAAAAAAAAAA96505', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAA95309', 'AAAAAAAA81587', 'AA6416', 'AAAA91194', 'AAAAAA58494', 'AAAAAA1059', 'AAAAAAAA69452']), (52, [89, 0], ['AAAAAAAAAAAAAAAAAA47955', 'AAAAAAA48038', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAAAAAAAAA73084', 'AAAAA70466', 'AAAAAAAAAAAAAAAAA764', 'AAAAAAAAAAA46154', 'AA66862']), (53, [38, 17], ['AAAAAAAAAAA21658']), (54, [70, 47], ['AAAAAAAAAAAAAAAAAA54141', 'AAAAA40681', 'AAAAAAA48038', 'AAAAAAAAAAAAAAAA29150', 'AAAAA41597', 'AAAAAAAAAAAAAAAAAA59334', 'AA15322']), (55, [47, 79, 47, 64, 72, 25, 71, 24, 93], ['AAAAAAAAAAAAAAAAAA55796', 'AAAAA62737']), (56, [33, 7, 60, 54, 93, 90, 77, 85, 39], ['AAAAAAAAAAAAAAAAAA32918', 'AA42406']), (57, [23, 45, 10, 42, 36, 21, 9, 96], ['AAAAAAAAAAAAAAAAAAA70415']), (58, [92], ['AAAAAAAAAAAAAAAA98414', 'AAAAAAAA23648', 'AAAAAAAAAAAAAAAAAA55796', 'AA25381', 'AAAAAAAAAAA6119']), (59, [9, 69, 46, 77], ['39557', 'AAAAAAA89932', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAAAAAAAAAAAAA26540', 'AAA20874', 'AA6416', 'AAAAAAAAAAAAAAAAAA47955']), (60, [62, 2, 59, 38, 89], ['AAAAAAA89932', 'AAAAAAAAAAAAAAAAAAA15356', 'AA99927', 'AA17009', 'AAAAAAAAAAAAAAA35875']), (61, [72, 2, 44, 95, 54, 54, 13], ['AAAAAAAAAAAAAAAAAAA91804']), (62, [83, 72, 29, 73], ['AAAAAAAAAAAAA15097', 'AAAA8857', 'AAAAAAAAAAAA35809', 'AAAAAAAAAAAA52814', 'AAAAAAAAAAAAAAAAAAA38885', 'AAAAAAAAAAAAAAAAAA24183', 'AAAAAA43678', 'A96617']), (63, [11, 4, 61, 87], ['AAAAAAAAA27249', 'AAAAAAAAAAAAAAAAAA32918', 'AAAAAAAAAAAAAAA13198', 'AAA20874', '39557', '51533', 'AAAAAAAAAAA53908', 'AAAAAAAAAAAAAA96505', 'AAAAAAAA78938']), (64, [26, 19, 34, 24, 81, 78], ['A96617', 'AAAAAAAAAAAAAAAAAAA70104', 'A68938', 'AAAAAAAAAAA53908', 'AAAAAAAAAAAAAAA453', 'AA17009', 'AAAAAAA80240']), (65, [61, 5, 76, 59, 17], ['AAAAAA99807', 'AAAAA64741', 'AAAAAAAAAAA53908', 'AA21643', 'AAAAAAAAA10012']), (66, [31, 23, 70, 52, 4, 33, 48, 25], ['AAAAAAAAAAAAAAAAA69675', 'AAAAAAAA50094', 'AAAAAAAAAAA92631', 'AAAA35194', '39557', 'AAAAAAA99836']), (67, [31, 94, 7, 10], ['AAAAAA38063', 'A96617', 'AAAA35194', 'AAAAAAAAAAAA67946']), (68, [90, 43, 38], ['AA75092', 'AAAAAAAAAAAAAAAAA69675', 'AAAAAAAAAAA92631', 'AAAAAAAAA10012', 'AAAAAAAAAAAAA7929', 'AA21643']), (69, [67, 35, 99, 85, 72, 86, 44], ['AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAA50094', 'AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAAAAAAA47955']), (70, [56, 70, 83], ['AAAA41702', 'AAAAAAAAAAA82945', 'AA21643', 'AAAAAAAAAAA99000', 'A27153', 'AA25381', 'AAAAAAAAAAAAAA96505', 'AAAAAAA1242']), (71, [74, 26], ['AAAAAAAAAAA50956', 'AA74433', 'AAAAAAA21462', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAA36627', 'AAAAAAAAAAAAA70254', 'AAAAAAAAAA43419', '39557']), (72, [22, 1, 16, 78, 20, 91, 83], ['47735', 'AAAAAAA56483', 'AAAAAAAAAAAAA93788', 'AA42406', 'AAAAAAAAAAAAA73084', 'AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAA61286', 'AAAAA66674', 'AAAAAAAAAAAAAAAAA50407']), (73, [88, 25, 96, 78, 65, 15, 29, 19], ['AAA54451', 'AAAAAAAAA27249', 'AAAAAAA9228', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAA17383', 'AAAAAAAAAAAAAAAA33598']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (75, [12, 96, 83, 24, 71, 89, 55], ['AAAA48949', 'AAAAAAAA29716', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAAA67946', 'AAAAAAAAAAAAAAAA29150', 'AAA28075', 'AAAAAAAAAAAAAAAAA43052']), (76, [92, 55, 10, 7], ['AAAAAAAAAAAAAAA67062']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (78, [55, 89, 44, 84, 34], ['AAAAAAAAAAA6119', 'AAAAAAAAAAAAAA8666', 'AA99927', 'AA42406', 'AAAAAAA81898', 'AAAAAAA9228', 'AAAAAAAAAAA92631', 'AA21643', 'AAAAAAAAAAAAAA28620']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908']), (80, [74, 89, 44, 80, 0], ['AAAA35194', 'AAAAAAAA79710', 'AAA20874', 'AAAAAAAAAAAAAAAAAAA70104', 'AAAAAAAAAAAAA73084', 'AAAAAAA57334', 'AAAAAAA9228', 'AAAAAAAAAAAAA62007']), (81, [63, 77, 54, 48, 61, 53, 97], ['AAAAAAAAAAAAAAA81326', 'AAAAAAAAAA22292', 'AA25381', 'AAAAAAAAAAA74076', 'AAAAAAA81898', 'AAAAAAAAA72121']), (82, [34, 60, 4, 79, 78, 16, 86, 89, 42, 50], ['AAAAA40681', 'AAAAAAAAAAAAAAAAAA12591', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAAAAAAAAAAA70104']), (83, [14, 10], ['AAAAAAAAAA22292', 'AAAAAAAAAAAAA70254', 'AAAAAAAAAAA6119']), (84, [11, 83, 35, 13, 96, 94], ['AAAAA95309', 'AAAAAAAAAAAAAAAAAA32918', 'AAAAAAAAAAAAAAAAAA24183']), (85, [39, 60], ['AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAA22292', 'AAAAAAA66161', 'AAAAAAA21462', 'AAAAAAAAAAAAAAAAAA12591', '55847', 'AAAAAA98232', 'AAAAAAAAAAA46154']), (86, [33, 81, 72, 74, 45, 36, 82], ['AAAAAAAA81587', 'AAAAAAAAAAAAAA96505', '45449', 'AAAA80176']), (87, [57, 27, 50, 12, 97, 68], ['AAAAAAAAAAAAAAAAA26540', 'AAAAAAAAA10012', 'AAAAAAAAAAAA35809', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAAAAAA82945', 'AAAAAA66777', '31228', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAA96505']), (88, [41, 90, 77, 24, 6, 24], ['AAAA35194', 'AAAA35194', 'AAAAAAA80240', 'AAAAAAAAAAA46154', 'AAAAAA58494', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAAA59334', 'AAAAAAAAAAAAAAAAAAA91804', 'AA74433']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673']), (90, [88, 75], ['AAAAA60038', 'AAAAAAAA23648', 'AAAAAAAAAAA99000', 'AAAA41702', 'AAAAAAAAAAAAA22860', 'AAAAAAAAAAAAAAA68526']), (91, [78], ['AAAAAAAAAAAAA62007', 'AAA99043']), (92, [85, 63, 49, 45], ['AAAAAAA89932', 'AAAAAAAAAAAAA22860', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAAA21089']), (93, [11], ['AAAAAAAAAAA176', 'AAAAAAAAAAAAAA8666', 'AAAAAAAAAAAAAAA453', 'AAAAAAAAAAAAA85723', 'A68938', 'AAAAAAAAAAAAA9821', 'AAAAAAA48038', 'AAAAAAAAAAAAAAAAA59387', 'AA99927', 'AAAAA17383']), (94, [98, 9, 85, 62, 88, 91, 60, 61, 38, 86], ['AAAAAAAA81587', 'AAAAA17383', 'AAAAAAAA81587']), (95, [47, 77], ['AAAAAAAAAAAAAAAAA764', 'AAAAAAAAAAA74076', 'AAAAAAAAAA18107', 'AAAAA40681', 'AAAAAAAAAAAAAAA35875', 'AAAAA60038', 'AAAAAAA56483']), (96, [23, 97, 43], ['AAAAAAAAAA646', 'A87088']), (97, [54, 2, 86, 65], ['47735', 'AAAAAAA99836', 'AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAA98414', 'AAAAAAA56483', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAA39692', 'AA21643']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (99, [37, 86], ['AAAAAAAAAAAAAAAAAA32918', 'AAAAA70514', 'AAAAAAAAA10012', 'AAAAAAAAAAAAAAAAA59387', 'AAAAAAAAAA64777', 'AAAAAAAAAAAAAAAAAAA15356']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523']), (101, [], []), (102, [None], [None])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i && '{}' ORDER BY seqno;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i <@ '{}' ORDER BY seqno;
RESULT:
	[(101, [], [])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i = '{NULL}' ORDER BY seqno;
RESULT:
	[(102, [None], [None])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i @> '{NULL}' ORDER BY seqno;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i && '{NULL}' ORDER BY seqno;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM array_op_test WHERE i <@ '{NULL}' ORDER BY seqno;
RESULT:
	[(101, [], [])]

-----------
QUERY:


SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908}' ORDER BY seqno;
RESULT:
	[(22, [11, 6, 56, 62, 53, 30], ['AAAAAAAA72908']), (45, [99, 45], ['AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAAA17075', 'AA88409', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAAAA48038', 'AAAAAAAAAAAAAA10611']), (72, [22, 1, 16, 78, 20, 91, 83], ['47735', 'AAAAAAA56483', 'AAAAAAAAAAAAA93788', 'AA42406', 'AAAAAAAAAAAAA73084', 'AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAA61286', 'AAAAA66674', 'AAAAAAAAAAAAAAAAA50407']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908'])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908}' ORDER BY seqno;
RESULT:
	[(22, [11, 6, 56, 62, 53, 30], ['AAAAAAAA72908']), (45, [99, 45], ['AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAAA17075', 'AA88409', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAAAA48038', 'AAAAAAAAAAAAAA10611']), (72, [22, 1, 16, 78, 20, 91, 83], ['47735', 'AAAAAAA56483', 'AAAAAAAAAAAAA93788', 'AA42406', 'AAAAAAAAAAAAA73084', 'AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAA61286', 'AAAAA66674', 'AAAAAAAAAAAAAAAAA50407']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908'])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE t @> '{AAAAAAAAAA646}' ORDER BY seqno;
RESULT:
	[(15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908']), (96, [23, 97, 43], ['AAAAAAAAAA646', 'A87088'])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE t && '{AAAAAAAAAA646}' ORDER BY seqno;
RESULT:
	[(15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908']), (96, [23, 97, 43], ['AAAAAAAAAA646', 'A87088'])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE t @> '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno;
RESULT:
	[(79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908'])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE t && '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno;
RESULT:
	[(15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (22, [11, 6, 56, 62, 53, 30], ['AAAAAAAA72908']), (45, [99, 45], ['AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAAA17075', 'AA88409', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAAAA48038', 'AAAAAAAAAAAAAA10611']), (72, [22, 1, 16, 78, 20, 91, 83], ['47735', 'AAAAAAA56483', 'AAAAAAAAAAAAA93788', 'AA42406', 'AAAAAAAAAAAAA73084', 'AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAA61286', 'AAAAA66674', 'AAAAAAAAAAAAAAAAA50407']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908']), (96, [23, 97, 43], ['AAAAAAAAAA646', 'A87088'])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE t <@ '{AAAAAAAA72908,AAAAAAAAAAAAAAAAAAA17075,AA88409,AAAAAAAAAAAAAAAAAA36842,AAAAAAA48038,AAAAAAAAAAAAAA10611}' ORDER BY seqno;
RESULT:
	[(22, [11, 6, 56, 62, 53, 30], ['AAAAAAAA72908']), (45, [99, 45], ['AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAAA17075', 'AA88409', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAAAA48038', 'AAAAAAAAAAAAAA10611']), (101, [], [])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE t = '{}' ORDER BY seqno;
RESULT:
	[(101, [], [])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE t @> '{}' ORDER BY seqno;
RESULT:
	[(1, [92, 75, 71, 52, 64, 83], ['AAAAAAAA44066', 'AAAAAA1059', 'AAAAAAAAAAA176', 'AAAAAAA48038']), (2, [3, 6], ['AAAAAA98232', 'AAAAAAAA79710', 'AAAAAAAAAAAAAAAAA69675', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAA12793']), (3, [37, 64, 95, 43, 3, 41, 13, 30, 11, 43], ['AAAAAAAAAA48845', 'AAAAA75968', 'AAAAA95309', 'AAA54451', 'AAAAAAAAAA22292', 'AAAAAAA99836', 'A96617', 'AA17009', 'AAAAAAAAAAAAAA95246']), (4, [71, 39, 99, 55, 33, 75, 45], ['AAAAAAAAA53663', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAA64777', 'AAA99043', 'AAAAAAAAAAAAAAAAAAA91804', '39557']), (5, [50, 42, 77, 50, 4], ['AAAAAAAAAAAAAAAAA26540', 'AAAAAAA79710', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAA176', 'AAAAA95309', 'AAAAAAAAAAA46154', 'AAAAAA66777', 'AAAAAAAAA27249', 'AAAAAAAAAA64777', 'AAAAAAAAAAAAAAAAAAA70104']), (6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (7, [12, 51, 88, 64, 8], ['AAAAAAAAAAAAAAAAAA12591', 'AAAAAAAAAAAAAAAAA50407', 'AAAAAAAAAAAA67946']), (8, [60, 84], ['AAAAAAA81898', 'AAAAAA1059', 'AAAAAAAAAAAA81511', 'AAAAA961', 'AAAAAAAAAAAAAAAA31334', 'AAAAA64741', 'AA6416', 'AAAAAAAAAAAAAAAAAA32918', 'AAAAAAAAAAAAAAAAA50407']), (9, [56, 52, 35, 27, 80, 44, 81, 22], ['AAAAAAAAAAAAAAA73034', 'AAAAAAAAAAAAA7929', 'AAAAAAA66161', 'AA88409', '39557', 'A27153', 'AAAAAAAA9523', 'AAAAAAAAAAA99000']), (10, [71, 5, 45], ['AAAAAAAAAAA21658', 'AAAAAAAAAAAA21089', 'AAA54451', 'AAAAAAAAAAAAAAAAAA54141', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAA21658', 'AAAAAAAAAAA74076', 'AAAAAAAAA27249']), (11, [41, 86, 74, 48, 22, 74, 47, 50], ['AAAAAAAA9523', 'AAAAAAAAAAAA37562', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAAAAAA46154', 'AAAA41702', 'AAAAAAAAAAAAAAAAA764', 'AAAAA62737', '39557']), (12, [17, 99, 18, 52, 91, 72, 0, 43, 96, 23], ['AAAAA33250', 'AAAAAAAAAAAAAAAAAAA85420', 'AAAAAAAAAAA33576']), (13, [3, 52, 34, 23], ['AAAAAA98232', 'AAAA49534', 'AAAAAAAAAAA21658']), (14, [78, 57, 19], ['AAAA8857', 'AAAAAAAAAAAAAAA73034', 'AAAAAAAA81587', 'AAAAAAAAAAAAAAA68526', 'AAAAA75968', 'AAAAAAAAAAAAAA65909', 'AAAAAAAAA10012', 'AAAAAAAAAAAAAA65909']), (15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (16, [14, 63, 85, 11], ['AAAAAA66777']), (17, [7, 10, 81, 85], ['AAAAAA43678', 'AAAAAAA12144', 'AAAAAAAAAAA50956', 'AAAAAAAAAAAAAAAAAAA15356']), (18, [1], ['AAAAAAAAAAA33576', 'AAAAA95309', '64261', 'AAA59323', 'AAAAAAAAAAAAAA95246', '55847', 'AAAAAAAAAAAA67946', 'AAAAAAAAAAAAAAAAAA64374']), (19, [52, 82, 17, 74, 23, 46, 69, 51, 75], ['AAAAAAAAAAAAA73084', 'AAAAA75968', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAAAAA1205', 'A68938']), (20, [72, 89, 70, 51, 54, 37, 8, 49, 79], ['AAAAAA58494']), (21, [2, 8, 65, 10, 5, 79, 43], ['AAAAAAAAAAAAAAAAA88852', 'AAAAAAAAAAAAAAAAAAA91804', 'AAAAA64669', 'AAAAAAAAAAAAAAAA1443', 'AAAAAAAAAAAAAAAA23657', 'AAAAA12179', 'AAAAAAAAAAAAAAAAA88852', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAAAAAAAA41303', 'AAAAAAAAAAAAAAAAAAA85420']), (22, [11, 6, 56, 62, 53, 30], ['AAAAAAAA72908']), (23, [40, 90, 5, 38, 72, 40, 30, 10, 43, 55], ['A6053', 'AAAAAAAAAAA6119', 'AA44673', 'AAAAAAAAAAAAAAAAA764', 'AA17009', 'AAAAA17383', 'AAAAA70514', 'AAAAA33250', 'AAAAA95309', 'AAAAAAAAAAAA37562']), (24, [94, 61, 99, 35, 48], ['AAAAAAAAAAA50956', 'AAAAAAAAAAA15165', 'AAAA85070', 'AAAAAAAAAAAAAAA36627', 'AAAAA961', 'AAAAAAAAAA55219']), (25, [31, 1, 10, 11, 27, 79, 38], ['AAAAAAAAAAAAAAAAAA59334', '45449']), (26, [71, 10, 9, 69, 75], ['47735', 'AAAAAAA21462', 'AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAAAAA91804', 'AAAAAAAAA72121', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAA41597', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA15356', 'AA17009']), (27, [94], ['AA6416', 'A6053', 'AAAAAAA21462', 'AAAAAAA57334', 'AAAAAAAAAAAAAAAAAA12591', 'AA88409', 'AAAAAAAAAAAAA70254']), (28, [14, 33, 6, 34, 14], ['AAAAAAAAAAAAAAA13198', 'AAAAAAAA69452', 'AAAAAAAAAAA82945', 'AAAAAAA12144', 'AAAAAAAAA72121', 'AAAAAAAAAA18601']), (29, [39, 21], ['AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAAAAA38885', 'AAAA85070', 'AAAAAAAAAAAAAAAAAAA70104', 'AAAAA66674', 'AAAAAAAAAAAAA62007', 'AAAAAAAA69452', 'AAAAAAA1242', 'AAAAAAAAAAAAAAAA1729', 'AAAA35194']), (30, [26, 81, 47, 91, 34], ['AAAAAAAAAAAAAAAAAAA70104', 'AAAAAAA80240']), (31, [80, 24, 18, 21, 54], ['AAAAAAAAAAAAAAA13198', 'AAAAAAAAAAAAAAAAAAA70415', 'A27153', 'AAAAAAAAA53663', 'AAAAAAAAAAAAAAAAA50407', 'A68938']), (32, [58, 79, 82, 80, 67, 75, 98, 10, 41], ['AAAAAAAAAAAAAAAAAA61286', 'AAA54451', 'AAAAAAAAAAAAAAAAAAA87527', 'A96617', '51533']), (33, [74, 73], ['A85417', 'AAAAAAA56483', 'AAAAA17383', 'AAAAAAAAAAAAA62159', 'AAAAAAAAAAAA52814', 'AAAAAAAAAAAAA85723', 'AAAAAAAAAAAAAAAAAA55796']), (34, [70, 45], ['AAAAAAAAAAAAAAAAAA71621', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAA55219', 'AAAAAAAA23648', 'AAAAAAAAAA22292', 'AAAAAAA1242']), (35, [23, 40], ['AAAAAAAAAAAA52814', 'AAAA48949', 'AAAAAAAAA34727', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA62179', 'AAAAAAAAAAAAAAA68526', 'AAAAAAA99836', 'AAAAAAAA50094', 'AAAA91194', 'AAAAAAAAAAAAA73084']), (36, [79, 82, 14, 52, 30, 5, 79], ['AAAAAAAAA53663', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAAAAAAAAAAA89194', 'AA88409', 'AAAAAAAAAAAAAAA81326', 'AAAAAAAAAAAAAAAAA63050', 'AAAAAAAAAAAAAAAA33598']), (37, [53, 11, 81, 39, 3, 78, 58, 64, 74], ['AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAA66161', 'AAAAAAAA23648', 'AAAAAAAAAAAAAA10611']), (38, [59, 5, 4, 95, 28], ['AAAAAAAAAAA82945', 'A96617', '47735', 'AAAAA12179', 'AAAAA64669', 'AAAAAA99807', 'AA74433', 'AAAAAAAAAAAAAAAAA59387']), (39, [82, 43, 99, 16, 74], ['AAAAAAAAAAAAAAA67062', 'AAAAAAA57334', 'AAAAAAAAAAAAAA65909', 'A27153', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAAAAAA64777', 'AAAAAAAAAAAA81511', 'AAAAAAAAAAAAAA65909', 'AAAAAAAAAAAAAA28620']), (40, [34], ['AAAAAAAAAAAAAA10611', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAA50956', 'AAAAAAAAAAAAAAAA31334', 'AAAAA70466', 'AAAAAAAA81587', 'AAAAAAA74623']), (41, [19, 26, 63, 12, 93, 73, 27, 94], ['AAAAAAA79710', 'AAAAAAAAAA55219', 'AAAA41702', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAAA71621', 'AAAAAAAAAAAAAAAAA63050', 'AAAAAAA99836', 'AAAAAAAAAAAAAA8666']), (42, [15, 76, 82, 75, 8, 91], ['AAAAAAAAAAA176', 'AAAAAA38063', '45449', 'AAAAAA54032', 'AAAAAAA81898', 'AA6416', 'AAAAAAAAAAAAAAAAAAA62179', '45449', 'AAAAA60038', 'AAAAAAAA81587']), (43, [39, 87, 91, 97, 79, 28], ['AAAAAAAAAAA74076', 'A96617', 'AAAAAAAAAAAAAAAAAAA89194', 'AAAAAAAAAAAAAAAAAA55796', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAA67946']), (44, [40, 58, 68, 29, 54], ['AAAAAAA81898', 'AAAAAA66777', 'AAAAAA98232']), (45, [99, 45], ['AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAAA17075', 'AA88409', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAAAA48038', 'AAAAAAAAAAAAAA10611']), (46, [53, 24], ['AAAAAAAAAAA53908', 'AAAAAA54032', 'AAAAA17383', 'AAAA48949', 'AAAAAAAAAA18601', 'AAAAA64669', '45449', 'AAAAAAAAAAA98051', 'AAAAAAAAAAAAAAAAAA71621']), (47, [98, 23, 64, 12, 75, 61], ['AAA59323', 'AAAAA95309', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAA27249', 'AAAAA17383', 'AAAAAAAAAAAA37562', 'AAAAAA1059', 'A84822', '55847', 'AAAAA70466']), (48, [76, 14], ['AAAAAAAAAAAAA59671', 'AAAAAAAAAAAAAAAAAAA91804', 'AAAAAA66777', 'AAAAAAAAAAAAAAAAAAA89194', 'AAAAAAAAAAAAAAA36627', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAA73084', 'AAAAAAA79710', 'AAAAAAAAAAAAAAA40402', 'AAAAAAAAAAAAAAAAAAA65037']), (49, [56, 5, 54, 37, 49], ['AA21643', 'AAAAAAAAAAA92631', 'AAAAAAAA81587']), (50, [20, 12, 37, 64, 93], ['AAAAAAAAAA5483', 'AAAAAAAAAAAAAAAAAAA1205', 'AA6416', 'AAAAAAAAAAAAAAAAA63050', 'AAAAAAAAAAAAAAAAAA47955']), (51, [47], ['AAAAAAAAAAAAAA96505', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAA95309', 'AAAAAAAA81587', 'AA6416', 'AAAA91194', 'AAAAAA58494', 'AAAAAA1059', 'AAAAAAAA69452']), (52, [89, 0], ['AAAAAAAAAAAAAAAAAA47955', 'AAAAAAA48038', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAAAAAAAAA73084', 'AAAAA70466', 'AAAAAAAAAAAAAAAAA764', 'AAAAAAAAAAA46154', 'AA66862']), (53, [38, 17], ['AAAAAAAAAAA21658']), (54, [70, 47], ['AAAAAAAAAAAAAAAAAA54141', 'AAAAA40681', 'AAAAAAA48038', 'AAAAAAAAAAAAAAAA29150', 'AAAAA41597', 'AAAAAAAAAAAAAAAAAA59334', 'AA15322']), (55, [47, 79, 47, 64, 72, 25, 71, 24, 93], ['AAAAAAAAAAAAAAAAAA55796', 'AAAAA62737']), (56, [33, 7, 60, 54, 93, 90, 77, 85, 39], ['AAAAAAAAAAAAAAAAAA32918', 'AA42406']), (57, [23, 45, 10, 42, 36, 21, 9, 96], ['AAAAAAAAAAAAAAAAAAA70415']), (58, [92], ['AAAAAAAAAAAAAAAA98414', 'AAAAAAAA23648', 'AAAAAAAAAAAAAAAAAA55796', 'AA25381', 'AAAAAAAAAAA6119']), (59, [9, 69, 46, 77], ['39557', 'AAAAAAA89932', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAAAAAAAAAAAAA26540', 'AAA20874', 'AA6416', 'AAAAAAAAAAAAAAAAAA47955']), (60, [62, 2, 59, 38, 89], ['AAAAAAA89932', 'AAAAAAAAAAAAAAAAAAA15356', 'AA99927', 'AA17009', 'AAAAAAAAAAAAAAA35875']), (61, [72, 2, 44, 95, 54, 54, 13], ['AAAAAAAAAAAAAAAAAAA91804']), (62, [83, 72, 29, 73], ['AAAAAAAAAAAAA15097', 'AAAA8857', 'AAAAAAAAAAAA35809', 'AAAAAAAAAAAA52814', 'AAAAAAAAAAAAAAAAAAA38885', 'AAAAAAAAAAAAAAAAAA24183', 'AAAAAA43678', 'A96617']), (63, [11, 4, 61, 87], ['AAAAAAAAA27249', 'AAAAAAAAAAAAAAAAAA32918', 'AAAAAAAAAAAAAAA13198', 'AAA20874', '39557', '51533', 'AAAAAAAAAAA53908', 'AAAAAAAAAAAAAA96505', 'AAAAAAAA78938']), (64, [26, 19, 34, 24, 81, 78], ['A96617', 'AAAAAAAAAAAAAAAAAAA70104', 'A68938', 'AAAAAAAAAAA53908', 'AAAAAAAAAAAAAAA453', 'AA17009', 'AAAAAAA80240']), (65, [61, 5, 76, 59, 17], ['AAAAAA99807', 'AAAAA64741', 'AAAAAAAAAAA53908', 'AA21643', 'AAAAAAAAA10012']), (66, [31, 23, 70, 52, 4, 33, 48, 25], ['AAAAAAAAAAAAAAAAA69675', 'AAAAAAAA50094', 'AAAAAAAAAAA92631', 'AAAA35194', '39557', 'AAAAAAA99836']), (67, [31, 94, 7, 10], ['AAAAAA38063', 'A96617', 'AAAA35194', 'AAAAAAAAAAAA67946']), (68, [90, 43, 38], ['AA75092', 'AAAAAAAAAAAAAAAAA69675', 'AAAAAAAAAAA92631', 'AAAAAAAAA10012', 'AAAAAAAAAAAAA7929', 'AA21643']), (69, [67, 35, 99, 85, 72, 86, 44], ['AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAA50094', 'AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAAAAAAA47955']), (70, [56, 70, 83], ['AAAA41702', 'AAAAAAAAAAA82945', 'AA21643', 'AAAAAAAAAAA99000', 'A27153', 'AA25381', 'AAAAAAAAAAAAAA96505', 'AAAAAAA1242']), (71, [74, 26], ['AAAAAAAAAAA50956', 'AA74433', 'AAAAAAA21462', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAA36627', 'AAAAAAAAAAAAA70254', 'AAAAAAAAAA43419', '39557']), (72, [22, 1, 16, 78, 20, 91, 83], ['47735', 'AAAAAAA56483', 'AAAAAAAAAAAAA93788', 'AA42406', 'AAAAAAAAAAAAA73084', 'AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAA61286', 'AAAAA66674', 'AAAAAAAAAAAAAAAAA50407']), (73, [88, 25, 96, 78, 65, 15, 29, 19], ['AAA54451', 'AAAAAAAAA27249', 'AAAAAAA9228', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAA17383', 'AAAAAAAAAAAAAAAA33598']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (75, [12, 96, 83, 24, 71, 89, 55], ['AAAA48949', 'AAAAAAAA29716', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAAA67946', 'AAAAAAAAAAAAAAAA29150', 'AAA28075', 'AAAAAAAAAAAAAAAAA43052']), (76, [92, 55, 10, 7], ['AAAAAAAAAAAAAAA67062']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (78, [55, 89, 44, 84, 34], ['AAAAAAAAAAA6119', 'AAAAAAAAAAAAAA8666', 'AA99927', 'AA42406', 'AAAAAAA81898', 'AAAAAAA9228', 'AAAAAAAAAAA92631', 'AA21643', 'AAAAAAAAAAAAAA28620']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908']), (80, [74, 89, 44, 80, 0], ['AAAA35194', 'AAAAAAAA79710', 'AAA20874', 'AAAAAAAAAAAAAAAAAAA70104', 'AAAAAAAAAAAAA73084', 'AAAAAAA57334', 'AAAAAAA9228', 'AAAAAAAAAAAAA62007']), (81, [63, 77, 54, 48, 61, 53, 97], ['AAAAAAAAAAAAAAA81326', 'AAAAAAAAAA22292', 'AA25381', 'AAAAAAAAAAA74076', 'AAAAAAA81898', 'AAAAAAAAA72121']), (82, [34, 60, 4, 79, 78, 16, 86, 89, 42, 50], ['AAAAA40681', 'AAAAAAAAAAAAAAAAAA12591', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAAAAAAAAAAA70104']), (83, [14, 10], ['AAAAAAAAAA22292', 'AAAAAAAAAAAAA70254', 'AAAAAAAAAAA6119']), (84, [11, 83, 35, 13, 96, 94], ['AAAAA95309', 'AAAAAAAAAAAAAAAAAA32918', 'AAAAAAAAAAAAAAAAAA24183']), (85, [39, 60], ['AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAA22292', 'AAAAAAA66161', 'AAAAAAA21462', 'AAAAAAAAAAAAAAAAAA12591', '55847', 'AAAAAA98232', 'AAAAAAAAAAA46154']), (86, [33, 81, 72, 74, 45, 36, 82], ['AAAAAAAA81587', 'AAAAAAAAAAAAAA96505', '45449', 'AAAA80176']), (87, [57, 27, 50, 12, 97, 68], ['AAAAAAAAAAAAAAAAA26540', 'AAAAAAAAA10012', 'AAAAAAAAAAAA35809', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAAAAAA82945', 'AAAAAA66777', '31228', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAA96505']), (88, [41, 90, 77, 24, 6, 24], ['AAAA35194', 'AAAA35194', 'AAAAAAA80240', 'AAAAAAAAAAA46154', 'AAAAAA58494', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAAA59334', 'AAAAAAAAAAAAAAAAAAA91804', 'AA74433']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673']), (90, [88, 75], ['AAAAA60038', 'AAAAAAAA23648', 'AAAAAAAAAAA99000', 'AAAA41702', 'AAAAAAAAAAAAA22860', 'AAAAAAAAAAAAAAA68526']), (91, [78], ['AAAAAAAAAAAAA62007', 'AAA99043']), (92, [85, 63, 49, 45], ['AAAAAAA89932', 'AAAAAAAAAAAAA22860', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAAA21089']), (93, [11], ['AAAAAAAAAAA176', 'AAAAAAAAAAAAAA8666', 'AAAAAAAAAAAAAAA453', 'AAAAAAAAAAAAA85723', 'A68938', 'AAAAAAAAAAAAA9821', 'AAAAAAA48038', 'AAAAAAAAAAAAAAAAA59387', 'AA99927', 'AAAAA17383']), (94, [98, 9, 85, 62, 88, 91, 60, 61, 38, 86], ['AAAAAAAA81587', 'AAAAA17383', 'AAAAAAAA81587']), (95, [47, 77], ['AAAAAAAAAAAAAAAAA764', 'AAAAAAAAAAA74076', 'AAAAAAAAAA18107', 'AAAAA40681', 'AAAAAAAAAAAAAAA35875', 'AAAAA60038', 'AAAAAAA56483']), (96, [23, 97, 43], ['AAAAAAAAAA646', 'A87088']), (97, [54, 2, 86, 65], ['47735', 'AAAAAAA99836', 'AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAA98414', 'AAAAAAA56483', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAA39692', 'AA21643']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (99, [37, 86], ['AAAAAAAAAAAAAAAAAA32918', 'AAAAA70514', 'AAAAAAAAA10012', 'AAAAAAAAAAAAAAAAA59387', 'AAAAAAAAAA64777', 'AAAAAAAAAAAAAAAAAAA15356']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523']), (101, [], []), (102, [None], [None])]

-----------
QUERY:

SELECT * FROM array_op_test WHERE t && '{}' ORDER BY seqno;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM array_op_test WHERE t <@ '{}' ORDER BY seqno;
RESULT:
	[(101, [], [])]

-----------
QUERY:


-- array casts
SELECT ARRAY[1,2,3]::text[]::int[]::float8[] AS "{1,2,3}";
RESULT:
	[([1.0, 2.0, 3.0],)]

-----------
QUERY:

SELECT pg_typeof(ARRAY[1,2,3]::text[]::int[]::float8[]) AS "double precision[]";
RESULT:
	[('double precision[]',)]

-----------
QUERY:

SELECT ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[] AS "{{a,bc},{def,hijk}}";
RESULT:
	[([['a', 'bc'], ['def', 'hijk']],)]

-----------
QUERY:

SELECT pg_typeof(ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[]) AS "character varying[]";
RESULT:
	[('character varying[]',)]

-----------
QUERY:

SELECT CAST(ARRAY[[[[[['a','bb','ccc']]]]]] as text[]) as "{{{{{{a,bb,ccc}}}}}}";
RESULT:
	[([[[[[['a', 'bb', 'ccc']]]]]],)]

-----------
QUERY:

SELECT NULL::text[]::int[] AS "NULL";
RESULT:
	[(None,)]

-----------
QUERY:


-- scalar op any/all (array)
select 33 = any ('{1,2,3}');
RESULT:
	[(False,)]

-----------
QUERY:

select 33 = any ('{1,2,33}');
RESULT:
	[(True,)]

-----------
QUERY:

select 33 = all ('{1,2,33}');
RESULT:
	[(False,)]

-----------
QUERY:

select 33 >= all ('{1,2,33}');
RESULT:
	[(True,)]

-----------
QUERY:

-- boundary cases
select null::int >= all ('{1,2,33}');
RESULT:
	[(None,)]

-----------
QUERY:

select null::int >= all ('{}');
RESULT:
	[(True,)]

-----------
QUERY:

select null::int >= any ('{}');
RESULT:
	[(False,)]

-----------
QUERY:

-- cross-datatype
select 33.4 = any (array[1,2,3]);
RESULT:
	[(False,)]

-----------
QUERY:

select 33.4 > all (array[1,2,3]);
RESULT:
	[(True,)]

-----------
QUERY:

-- errors
select 33 * any ('{1,2,3}');
RESULT:
	ERROR - op ANY/ALL (array) requires operator to yield boolean
LINE 3: select 33 * any ('{1,2,3}');
                  ^


-----------
QUERY:

select 33 * any (44);
RESULT:
	ERROR - op ANY/ALL (array) requires array on right side
LINE 2: select 33 * any (44);
                  ^


-----------
QUERY:

-- nulls
select 33 = any (null::int[]);
RESULT:
	[(None,)]

-----------
QUERY:

select null::int = any ('{1,2,3}');
RESULT:
	[(None,)]

-----------
QUERY:

select 33 = any ('{1,null,3}');
RESULT:
	[(None,)]

-----------
QUERY:

select 33 = any ('{1,null,33}');
RESULT:
	[(True,)]

-----------
QUERY:

select 33 = all (null::int[]);
RESULT:
	[(None,)]

-----------
QUERY:

select null::int = all ('{1,2,3}');
RESULT:
	[(None,)]

-----------
QUERY:

select 33 = all ('{1,null,3}');
RESULT:
	[(False,)]

-----------
QUERY:

select 33 = all ('{33,null,33}');
RESULT:
	[(None,)]

-----------
QUERY:

-- nulls later in the bitmap
SELECT -1 != ALL(ARRAY(SELECT NULLIF(g.i, 900) FROM generate_series(1,1000) g(i)));
RESULT:
	[(None,)]

-----------
QUERY:


-- test indexes on arrays
create temp table arr_tbl (f1 int[] unique);
RESULT:
	[]

-----------
QUERY:

insert into arr_tbl values ('{1,2,3}');
RESULT:
	[]

-----------
QUERY:

insert into arr_tbl values ('{1,2}');
RESULT:
	[]

-----------
QUERY:

-- failure expected:
insert into arr_tbl values ('{1,2,3}');
RESULT:
	ERROR - duplicate key value violates unique constraint "arr_tbl_f1_key"
DETAIL:  Key (f1)=({1,2,3}) already exists.


-----------
QUERY:

insert into arr_tbl values ('{2,3,4}');
RESULT:
	[]

-----------
QUERY:

insert into arr_tbl values ('{1,5,3}');
RESULT:
	[]

-----------
QUERY:

insert into arr_tbl values ('{1,2,10}');
RESULT:
	[]

-----------
QUERY:


set enable_seqscan to off;
RESULT:
	[]

-----------
QUERY:

set enable_bitmapscan to off;
RESULT:
	[]

-----------
QUERY:

select * from arr_tbl where f1 > '{1,2,3}' and f1 <= '{1,5,3}';
RESULT:
	[([1, 2, 10],), ([1, 5, 3],)]

-----------
QUERY:

select * from arr_tbl where f1 >= '{1,2,3}' and f1 < '{1,5,3}';
RESULT:
	[([1, 2, 3],), ([1, 2, 10],)]

-----------
QUERY:


-- test ON CONFLICT DO UPDATE with arrays
create temp table arr_pk_tbl (pk int4 primary key, f1 int[]);
RESULT:
	[]

-----------
QUERY:

insert into arr_pk_tbl values (1, '{1,2,3}');
RESULT:
	[]

-----------
QUERY:

insert into arr_pk_tbl values (1, '{3,4,5}') on conflict (pk)
  do update set f1[1] = excluded.f1[1], f1[3] = excluded.f1[3]
  returning pk, f1;
RESULT:
	[(1, [3, 2, 5])]

-----------
QUERY:

insert into arr_pk_tbl(pk, f1[1:2]) values (1, '{6,7,8}') on conflict (pk)
  do update set f1[1] = excluded.f1[1],
    f1[2] = excluded.f1[2],
    f1[3] = excluded.f1[3]
  returning pk, f1;
RESULT:
	[(1, [6, 7, None])]

-----------
QUERY:


-- note: if above selects don/* REPLACED */''t produce the expected tuple order,
-- then you didn/* REPLACED */''t get an indexscan plan, and something is busted.
reset enable_seqscan;
RESULT:
	[]

-----------
QUERY:

reset enable_bitmapscan;
RESULT:
	[]

-----------
QUERY:


-- test subscript overflow detection

-- The normal error message includes a platform-dependent limit,
-- so suppress it to avoid needing multiple expected-files.
-- \set VERBOSITY sqlstate

insert into arr_pk_tbl values(10, '[-2147483648:-2147483647]={1,2}');
RESULT:
	[]

-----------
QUERY:

update arr_pk_tbl set f1[2147483647] = 42 where pk = 10;
RESULT:
	ERROR - array size exceeds the maximum allowed (134217727)


-----------
QUERY:

update arr_pk_tbl set f1[2147483646:2147483647] = array[4,2] where pk = 10;
RESULT:
	ERROR - array size exceeds the maximum allowed (134217727)


-----------
QUERY:


-- also exercise the expanded-array case
do $$ declare a int[];
begin
  a := '[-2147483648:-2147483647]={1,2}'::int[];
  a[2147483647] := 42;
end $$;
RESULT:
	ERROR - array size exceeds the maximum allowed (134217727)
CONTEXT:  PL/pgSQL function inline_code_block line 4 at assignment


-----------
QUERY:


-- \set VERBOSITY default

-- test [not] (like|ilike) (any|all) (...)
select 'foo' like any (array['%a', '%o']);
RESULT:
	[(True,)]

-----------
QUERY:
 -- t
select 'foo' like any (array['%a', '%b']);
RESULT:
	[(False,)]

-----------
QUERY:
 -- f
select 'foo' like all (array['f%', '%o']);
RESULT:
	[(True,)]

-----------
QUERY:
 -- t
select 'foo' like all (array['f%', '%b']);
RESULT:
	[(False,)]

-----------
QUERY:
 -- f
select 'foo' not like any (array['%a', '%b']);
RESULT:
	[(True,)]

-----------
QUERY:
 -- t
select 'foo' not like all (array['%a', '%o']);
RESULT:
	[(False,)]

-----------
QUERY:
 -- f
select 'foo' ilike any (array['%A', '%O']);
RESULT:
	[(True,)]

-----------
QUERY:
 -- t
select 'foo' ilike all (array['F%', '%O']);
RESULT:
	[(True,)]

-----------
QUERY:
 -- t

--
-- General array parser tests
--

-- none of the following should be accepted
select '{{1,{2}},{2,3}}'::text[];
RESULT:
	ERROR - malformed array literal: "{{1,{2}},{2,3}}"
LINE 8: select '{{1,{2}},{2,3}}'::text[];
               ^
DETAIL:  Multidimensional arrays must have sub-arrays with matching dimensions.


-----------
QUERY:

select E'{{1,2},\\{2,3}}'::text[];
RESULT:
	ERROR - malformed array literal: "{{1,2},\{2,3}}"
LINE 2: select E'{{1,2},\\{2,3}}'::text[];
               ^
DETAIL:  Multidimensional arrays must have sub-arrays with matching dimensions.


-----------
QUERY:

select '{"a"b}'::text[];
RESULT:
	ERROR - malformed array literal: "{"a"b}"
LINE 2: select '{"a"b}'::text[];
               ^
DETAIL:  Incorrectly quoted array element.


-----------
QUERY:

select '{a"b"}'::text[];
RESULT:
	ERROR - malformed array literal: "{a"b"}"
LINE 2: select '{a"b"}'::text[];
               ^
DETAIL:  Incorrectly quoted array element.


-----------
QUERY:

select '{"a""b"}'::text[];
RESULT:
	ERROR - malformed array literal: "{"a""b"}"
LINE 2: select '{"a""b"}'::text[];
               ^
DETAIL:  Incorrectly quoted array element.


-----------
QUERY:

select '{{"1 2" x},{3}}'::text[];
RESULT:
	ERROR - malformed array literal: "{{"1 2" x},{3}}"
LINE 2: select '{{"1 2" x},{3}}'::text[];
               ^
DETAIL:  Incorrectly quoted array element.


-----------
QUERY:

select '{{"1 2"} x,{3}}'::text[];
RESULT:
	ERROR - malformed array literal: "{{"1 2"} x,{3}}"
LINE 2: select '{{"1 2"} x,{3}}'::text[];
               ^
DETAIL:  Unexpected array element.


-----------
QUERY:

select '{}}'::text[];
RESULT:
	ERROR - malformed array literal: "{}}"
LINE 2: select '{}}'::text[];
               ^
DETAIL:  Junk after closing right brace.


-----------
QUERY:

select '{ }}'::text[];
RESULT:
	ERROR - malformed array literal: "{ }}"
LINE 2: select '{ }}'::text[];
               ^
DETAIL:  Junk after closing right brace.


-----------
QUERY:

select '}{'::text[];
RESULT:
	ERROR - malformed array literal: "}{"
LINE 2: select '}{'::text[];
               ^
DETAIL:  Array value must start with "{" or dimension information.


-----------
QUERY:

select '{foo{}}'::text[];
RESULT:
	ERROR - malformed array literal: "{foo{}}"
LINE 2: select '{foo{}}'::text[];
               ^
DETAIL:  Unexpected "{" character.


-----------
QUERY:

select '{"foo"{}}'::text[];
RESULT:
	ERROR - malformed array literal: "{"foo"{}}"
LINE 2: select '{"foo"{}}'::text[];
               ^
DETAIL:  Unexpected "{" character.


-----------
QUERY:

select '{foo,,bar}'::text[];
RESULT:
	ERROR - malformed array literal: "{foo,,bar}"
LINE 2: select '{foo,,bar}'::text[];
               ^
DETAIL:  Unexpected "," character.


-----------
QUERY:

select '{{1},{{2}}}'::text[];
RESULT:
	ERROR - malformed array literal: "{{1},{{2}}}"
LINE 2: select '{{1},{{2}}}'::text[];
               ^
DETAIL:  Multidimensional arrays must have sub-arrays with matching dimensions.


-----------
QUERY:

select '{{{1}},{2}}'::text[];
RESULT:
	ERROR - malformed array literal: "{{{1}},{2}}"
LINE 2: select '{{{1}},{2}}'::text[];
               ^
DETAIL:  Multidimensional arrays must have sub-arrays with matching dimensions.


-----------
QUERY:

select '{{},{{}}}'::text[];
RESULT:
	ERROR - malformed array literal: "{{},{{}}}"
LINE 2: select '{{},{{}}}'::text[];
               ^
DETAIL:  Multidimensional arrays must have sub-arrays with matching dimensions.


-----------
QUERY:

select '{{{}},{}}'::text[];
RESULT:
	ERROR - malformed array literal: "{{{}},{}}"
LINE 2: select '{{{}},{}}'::text[];
               ^
DETAIL:  Multidimensional arrays must have sub-arrays with matching dimensions.


-----------
QUERY:

select '{{1},{}}'::text[];
RESULT:
	ERROR - malformed array literal: "{{1},{}}"
LINE 2: select '{{1},{}}'::text[];
               ^
DETAIL:  Multidimensional arrays must have sub-arrays with matching dimensions.


-----------
QUERY:

select '{{},{1}}'::text[];
RESULT:
	ERROR - malformed array literal: "{{},{1}}"
LINE 2: select '{{},{1}}'::text[];
               ^
DETAIL:  Multidimensional arrays must have sub-arrays with matching dimensions.


-----------
QUERY:

select '[1:0]={}'::int[];
RESULT:
	ERROR - upper bound cannot be less than lower bound
LINE 2: select '[1:0]={}'::int[];
               ^


-----------
QUERY:

select '[2147483646:2147483647]={1,2}'::int[];
RESULT:
	ERROR - array upper bound is too large: 2147483647
LINE 2: select '[2147483646:2147483647]={1,2}'::int[];
               ^


-----------
QUERY:

select '[1:-1]={}'::int[];
RESULT:
	ERROR - upper bound cannot be less than lower bound
LINE 2: select '[1:-1]={}'::int[];
               ^


-----------
QUERY:

select '[2]={1}'::int[];
RESULT:
	ERROR - malformed array literal: "[2]={1}"
LINE 2: select '[2]={1}'::int[];
               ^
DETAIL:  Specified array dimensions do not match array contents.


-----------
QUERY:

select '[1:]={1}'::int[];
RESULT:
	ERROR - malformed array literal: "[1:]={1}"
LINE 2: select '[1:]={1}'::int[];
               ^
DETAIL:  Missing array dimension value.


-----------
QUERY:

select '[:1]={1}'::int[];
RESULT:
	ERROR - malformed array literal: "[:1]={1}"
LINE 2: select '[:1]={1}'::int[];
               ^
DETAIL:  "[" must introduce explicitly-specified array dimensions.


-----------
QUERY:

select array[];
RESULT:
	ERROR - cannot determine type of empty array
LINE 2: select array[];
               ^
HINT:  Explicitly cast to the desired type, for example ARRAY[]::integer[].


-----------
QUERY:

select '{{1,},{1},}'::text[];
RESULT:
	ERROR - malformed array literal: "{{1,},{1},}"
LINE 2: select '{{1,},{1},}'::text[];
               ^
DETAIL:  Unexpected "}" character.


-----------
QUERY:

select '{{1,},{1}}'::text[];
RESULT:
	ERROR - malformed array literal: "{{1,},{1}}"
LINE 2: select '{{1,},{1}}'::text[];
               ^
DETAIL:  Unexpected "}" character.


-----------
QUERY:

select '{{1,}}'::text[];
RESULT:
	ERROR - malformed array literal: "{{1,}}"
LINE 2: select '{{1,}}'::text[];
               ^
DETAIL:  Unexpected "}" character.


-----------
QUERY:

select '{1,}'::text[];
RESULT:
	ERROR - malformed array literal: "{1,}"
LINE 2: select '{1,}'::text[];
               ^
DETAIL:  Unexpected "}" character.


-----------
QUERY:

select '[21474836488:21474836489]={1,2}'::int[];
RESULT:
	ERROR - array bound is out of integer range
LINE 2: select '[21474836488:21474836489]={1,2}'::int[];
               ^


-----------
QUERY:

select '[-2147483649:-2147483648]={1,2}'::int[];
RESULT:
	ERROR - array bound is out of integer range
LINE 2: select '[-2147483649:-2147483648]={1,2}'::int[];
               ^


-----------
QUERY:

-- none of the above should be accepted

-- all of the following should be accepted
select '{}'::text[];
RESULT:
	[([],)]

-----------
QUERY:

select '{{},{}}'::text[];
RESULT:
	[([],)]

-----------
QUERY:

select '{{{1,2,3,4},{2,3,4,5}},{{3,4,5,6},{4,5,6,7}}}'::text[];
RESULT:
	[([[['1', '2', '3', '4'], ['2', '3', '4', '5']], [['3', '4', '5', '6'], ['4', '5', '6', '7']]],)]

-----------
QUERY:

select '{null,n\ull,"null"}'::text[];
RESULT:
	[([None, 'null', 'null'],)]

-----------
QUERY:

select '{ ab\c , "ab\"c" }'::text[];
RESULT:
	[(['abc', 'ab"c'],)]

-----------
QUERY:

select '{0 second  ,0 second}'::interval[];
RESULT:
	[([datetime.timedelta(0), datetime.timedelta(0)],)]

-----------
QUERY:

select '{ { "," } , { 3 } }'::text[];
RESULT:
	[([[','], ['3']],)]

-----------
QUERY:

select '  {   {  "  0 second  "   ,  0 second  }   }'::text[];
RESULT:
	[([['  0 second  ', '0 second']],)]

-----------
QUERY:

select '{
           0 second,
           @ 1 hour @ 42 minutes @ 20 seconds
         }'::interval[];
RESULT:
	[([datetime.timedelta(0), datetime.timedelta(seconds=6140)],)]

-----------
QUERY:

select array[]::text[];
RESULT:
	[([],)]

-----------
QUERY:

select '[2]={1,7}'::int[];
RESULT:
	[([1, 7],)]

-----------
QUERY:

select '[0:1]={1.1,2.2}'::float8[];
RESULT:
	[([1.1, 2.2],)]

-----------
QUERY:

select '[2147483646:2147483646]={1}'::int[];
RESULT:
	[([1],)]

-----------
QUERY:

select '[-2147483648:-2147483647]={1,2}'::int[];
RESULT:
	[([1, 2],)]

-----------
QUERY:

-- all of the above should be accepted

-- tests for array aggregates
CREATE TEMP TABLE arraggtest ( f1 INT[], f2 TEXT[][], f3 FLOAT[]);
RESULT:
	[]

-----------
QUERY:


INSERT INTO arraggtest (f1, f2, f3) VALUES
('{1,2,3,4}','{{grey,red},{blue,blue}}','{1.6, 0.0}');
RESULT:
	[]

-----------
QUERY:

INSERT INTO arraggtest (f1, f2, f3) VALUES
('{1,2,3}','{{grey,red},{grey,blue}}','{1.6}');
RESULT:
	[]

-----------
QUERY:

SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
RESULT:
	[([1, 2, 3, 4], [1, 2, 3], [['grey', 'red'], ['grey', 'blue']], [['grey', 'red'], ['blue', 'blue']], [1.6, 0.0], [1.6])]

-----------
QUERY:


INSERT INTO arraggtest (f1, f2, f3) VALUES
('{3,3,2,4,5,6}','{{white,yellow},{pink,orange}}','{2.1,3.3,1.8,1.7,1.6}');
RESULT:
	[]

-----------
QUERY:

SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
RESULT:
	[([3, 3, 2, 4, 5, 6], [1, 2, 3], [['white', 'yellow'], ['pink', 'orange']], [['grey', 'red'], ['blue', 'blue']], [2.1, 3.3, 1.8, 1.7, 1.6], [1.6])]

-----------
QUERY:


INSERT INTO arraggtest (f1, f2, f3) VALUES
('{2}','{{black,red},{green,orange}}','{1.6,2.2,2.6,0.4}');
RESULT:
	[]

-----------
QUERY:

SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
RESULT:
	[([3, 3, 2, 4, 5, 6], [1, 2, 3], [['white', 'yellow'], ['pink', 'orange']], [['black', 'red'], ['green', 'orange']], [2.1, 3.3, 1.8, 1.7, 1.6], [1.6])]

-----------
QUERY:


INSERT INTO arraggtest (f1, f2, f3) VALUES
('{4,2,6,7,8,1}','{{red},{black},{purple},{blue},{blue}}',NULL);
RESULT:
	[]

-----------
QUERY:

SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
RESULT:
	[([4, 2, 6, 7, 8, 1], [1, 2, 3], [['white', 'yellow'], ['pink', 'orange']], [['black', 'red'], ['green', 'orange']], [2.1, 3.3, 1.8, 1.7, 1.6], [1.6])]

-----------
QUERY:


INSERT INTO arraggtest (f1, f2, f3) VALUES
('{}','{{pink,white,blue,red,grey,orange}}','{2.1,1.87,1.4,2.2}');
RESULT:
	[]

-----------
QUERY:

SELECT max(f1), min(f1), max(f2), min(f2), max(f3), min(f3) FROM arraggtest;
RESULT:
	[([4, 2, 6, 7, 8, 1], [], [['white', 'yellow'], ['pink', 'orange']], [['black', 'red'], ['green', 'orange']], [2.1, 3.3, 1.8, 1.7, 1.6], [1.6])]

-----------
QUERY:


-- A few simple tests for arrays of composite types

create type comptype as (f1 int, f2 text);
RESULT:
	[]

-----------
QUERY:


create table comptable (c1 comptype, c2 comptype[]);
RESULT:
	[]

-----------
QUERY:


-- XXX would like to not have to specify row() construct types here ...
insert into comptable
  values (row(1,'foo'), array[row(2,'bar')::comptype, row(3,'baz')::comptype]);
RESULT:
	[]

-----------
QUERY:


-- check that implicitly named array type _comptype isn/* REPLACED */''t a problem
create type _comptype as enum('fooey');
RESULT:
	[]

-----------
QUERY:


select * from comptable;
RESULT:
	[('(1,foo)', '{"(2,bar)","(3,baz)"}')]

-----------
QUERY:

select c2[2].f2 from comptable;
RESULT:
	[('baz',)]

-----------
QUERY:


drop type _comptype;
RESULT:
	[]

-----------
QUERY:

drop table comptable;
RESULT:
	[]

-----------
QUERY:

drop type comptype;
RESULT:
	[]

-----------
QUERY:


create or replace function unnest1(anyarray)
returns setof anyelement as $$
select $1[s] from generate_subscripts($1,1) g(s);
$$ language sql immutable;
RESULT:
	[]

-----------
QUERY:


create or replace function unnest2(anyarray)
returns setof anyelement as $$
select $1[s1][s2] from generate_subscripts($1,1) g1(s1),
                   generate_subscripts($1,2) g2(s2);
$$ language sql immutable;
RESULT:
	[]

-----------
QUERY:


select * from unnest1(array[1,2,3]);
RESULT:
	[(1,), (2,), (3,)]

-----------
QUERY:

select * from unnest2(array[[1,2,3],[4,5,6]]);
RESULT:
	[(1,), (2,), (3,), (4,), (5,), (6,)]

-----------
QUERY:


drop function unnest1(anyarray);
RESULT:
	[]

-----------
QUERY:

drop function unnest2(anyarray);
RESULT:
	[]

-----------
QUERY:


select array_fill(null::integer, array[3,3],array[2,2]);
RESULT:
	ERROR - array does not start with '{'

-----------
QUERY:

select array_fill(null::integer, array[3,3]);
RESULT:
	[([[None, None, None], [None, None, None], [None, None, None]],)]

-----------
QUERY:

select array_fill(null::text, array[3,3],array[2,2]);
RESULT:
	ERROR - array does not start with '{'

-----------
QUERY:

select array_fill(null::text, array[3,3]);
RESULT:
	[([[None, None, None], [None, None, None], [None, None, None]],)]

-----------
QUERY:

select array_fill(7, array[3,3],array[2,2]);
RESULT:
	ERROR - array does not start with '{'

-----------
QUERY:

select array_fill(7, array[3,3]);
RESULT:
	[([[7, 7, 7], [7, 7, 7], [7, 7, 7]],)]

-----------
QUERY:

select array_fill('juhu'::text, array[3,3],array[2,2]);
RESULT:
	ERROR - array does not start with '{'

-----------
QUERY:

select array_fill('juhu'::text, array[3,3]);
RESULT:
	[([['juhu', 'juhu', 'juhu'], ['juhu', 'juhu', 'juhu'], ['juhu', 'juhu', 'juhu']],)]

-----------
QUERY:

select a, a = '{}' as is_eq, array_dims(a)
  from (select array_fill(42, array[0]) as a) ss;
RESULT:
	[([], True, None)]

-----------
QUERY:

select a, a = '{}' as is_eq, array_dims(a)
  from (select array_fill(42, '{}') as a) ss;
RESULT:
	[([], True, None)]

-----------
QUERY:

select a, a = '{}' as is_eq, array_dims(a)
  from (select array_fill(42, '{}', '{}') as a) ss;
RESULT:
	[([], True, None)]

-----------
QUERY:

-- raise exception
select array_fill(1, null, array[2,2]);
RESULT:
	ERROR - dimension array or low bound array cannot be null


-----------
QUERY:

select array_fill(1, array[2,2], null);
RESULT:
	ERROR - dimension array or low bound array cannot be null


-----------
QUERY:

select array_fill(1, array[2,2], '{}');
RESULT:
	ERROR - wrong number of array subscripts
DETAIL:  Low bound array has different size than dimensions array.


-----------
QUERY:

select array_fill(1, array[3,3], array[1,1,1]);
RESULT:
	ERROR - wrong number of array subscripts
DETAIL:  Low bound array has different size than dimensions array.


-----------
QUERY:

select array_fill(1, array[1,2,null]);
RESULT:
	ERROR - dimension values cannot be null


-----------
QUERY:

select array_fill(1, array[[1,2],[3,4]]);
RESULT:
	ERROR - wrong number of array subscripts
DETAIL:  Dimension array must be one dimensional.


-----------
QUERY:


select string_to_array('1|2|3', '|');
RESULT:
	[(['1', '2', '3'],)]

-----------
QUERY:

select string_to_array('1|2|3|', '|');
RESULT:
	[(['1', '2', '3', ''],)]

-----------
QUERY:

select string_to_array('1||2|3||', '||');
RESULT:
	[(['1', '2|3', ''],)]

-----------
QUERY:

select string_to_array('1|2|3', '');
RESULT:
	[(['1|2|3'],)]

-----------
QUERY:

select string_to_array('', '|');
RESULT:
	[([],)]

-----------
QUERY:

select string_to_array('1|2|3', NULL);
RESULT:
	[(['1', '|', '2', '|', '3'],)]

-----------
QUERY:

select string_to_array(NULL, '|') IS NULL;
RESULT:
	[(True,)]

-----------
QUERY:

select string_to_array('abc', '');
RESULT:
	[(['abc'],)]

-----------
QUERY:

select string_to_array('abc', '', 'abc');
RESULT:
	[([None],)]

-----------
QUERY:

select string_to_array('abc', ',');
RESULT:
	[(['abc'],)]

-----------
QUERY:

select string_to_array('abc', ',', 'abc');
RESULT:
	[([None],)]

-----------
QUERY:

select string_to_array('1,2,3,4,,6', ',');
RESULT:
	[(['1', '2', '3', '4', '', '6'],)]

-----------
QUERY:

select string_to_array('1,2,3,4,,6', ',', '');
RESULT:
	[(['1', '2', '3', '4', None, '6'],)]

-----------
QUERY:

select string_to_array('1,2,3,4,*,6', ',', '*');
RESULT:
	[(['1', '2', '3', '4', None, '6'],)]

-----------
QUERY:


select v, v is null as "is null" from string_to_table('1|2|3', '|') g(v);
RESULT:
	[('1', False), ('2', False), ('3', False)]

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1|2|3|', '|') g(v);
RESULT:
	[('1', False), ('2', False), ('3', False), ('', False)]

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1||2|3||', '||') g(v);
RESULT:
	[('1', False), ('2|3', False), ('', False)]

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1|2|3', '') g(v);
RESULT:
	[('1|2|3', False)]

-----------
QUERY:

select v, v is null as "is null" from string_to_table('', '|') g(v);
RESULT:
	[]

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1|2|3', NULL) g(v);
RESULT:
	[('1', False), ('|', False), ('2', False), ('|', False), ('3', False)]

-----------
QUERY:

select v, v is null as "is null" from string_to_table(NULL, '|') g(v);
RESULT:
	[]

-----------
QUERY:

select v, v is null as "is null" from string_to_table('abc', '') g(v);
RESULT:
	[('abc', False)]

-----------
QUERY:

select v, v is null as "is null" from string_to_table('abc', '', 'abc') g(v);
RESULT:
	[(None, True)]

-----------
QUERY:

select v, v is null as "is null" from string_to_table('abc', ',') g(v);
RESULT:
	[('abc', False)]

-----------
QUERY:

select v, v is null as "is null" from string_to_table('abc', ',', 'abc') g(v);
RESULT:
	[(None, True)]

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1,2,3,4,,6', ',') g(v);
RESULT:
	[('1', False), ('2', False), ('3', False), ('4', False), ('', False), ('6', False)]

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1,2,3,4,,6', ',', '') g(v);
RESULT:
	[('1', False), ('2', False), ('3', False), ('4', False), (None, True), ('6', False)]

-----------
QUERY:

select v, v is null as "is null" from string_to_table('1,2,3,4,*,6', ',', '*') g(v);
RESULT:
	[('1', False), ('2', False), ('3', False), ('4', False), (None, True), ('6', False)]

-----------
QUERY:


select array_to_string(NULL::int4[], ',') IS NULL;
RESULT:
	[(True,)]

-----------
QUERY:

select array_to_string('{}'::int4[], ',');
RESULT:
	[('',)]

-----------
QUERY:

select array_to_string(array[1,2,3,4,NULL,6], ',');
RESULT:
	[('1,2,3,4,6',)]

-----------
QUERY:

select array_to_string(array[1,2,3,4,NULL,6], ',', '*');
RESULT:
	[('1,2,3,4,*,6',)]

-----------
QUERY:

select array_to_string(array[1,2,3,4,NULL,6], NULL);
RESULT:
	[(None,)]

-----------
QUERY:

select array_to_string(array[1,2,3,4,NULL,6], ',', NULL);
RESULT:
	[('1,2,3,4,6',)]

-----------
QUERY:


select array_to_string(string_to_array('1|2|3', '|'), '|');
RESULT:
	[('1|2|3',)]

-----------
QUERY:


select array_length(array[1,2,3], 1);
RESULT:
	[(3,)]

-----------
QUERY:

select array_length(array[[1,2,3], [4,5,6]], 0);
RESULT:
	[(None,)]

-----------
QUERY:

select array_length(array[[1,2,3], [4,5,6]], 1);
RESULT:
	[(2,)]

-----------
QUERY:

select array_length(array[[1,2,3], [4,5,6]], 2);
RESULT:
	[(3,)]

-----------
QUERY:

select array_length(array[[1,2,3], [4,5,6]], 3);
RESULT:
	[(None,)]

-----------
QUERY:


select cardinality(NULL::int[]);
RESULT:
	[(None,)]

-----------
QUERY:

select cardinality('{}'::int[]);
RESULT:
	[(0,)]

-----------
QUERY:

select cardinality(array[1,2,3]);
RESULT:
	[(3,)]

-----------
QUERY:

select cardinality('[2:4]={5,6,7}'::int[]);
RESULT:
	[(3,)]

-----------
QUERY:

select cardinality('{{1,2}}'::int[]);
RESULT:
	[(2,)]

-----------
QUERY:

select cardinality('{{1,2},{3,4},{5,6}}'::int[]);
RESULT:
	[(6,)]

-----------
QUERY:

select cardinality('{{{1,9},{5,6}},{{2,3},{3,4}}}'::int[]);
RESULT:
	[(8,)]

-----------
QUERY:


-- array_agg(anynonarray)
select array_agg(unique1) from (select unique1 from tenk1 where unique1 < 15 order by unique1) ss;
RESULT:
	[([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],)]

-----------
QUERY:

select array_agg(ten) from (select ten from tenk1 where unique1 < 15 order by unique1) ss;
RESULT:
	[([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4],)]

-----------
QUERY:

select array_agg(nullif(ten, 4)) from (select ten from tenk1 where unique1 < 15 order by unique1) ss;
RESULT:
	[([0, 1, 2, 3, None, 5, 6, 7, 8, 9, 0, 1, 2, 3, None],)]

-----------
QUERY:

select array_agg(unique1) from tenk1 where unique1 < -15;
RESULT:
	[(None,)]

-----------
QUERY:


-- array_agg(anyarray)
select array_agg(ar)
  from (values ('{1,2}'::int[]), ('{3,4}'::int[])) v(ar);
RESULT:
	[([[1, 2], [3, 4]],)]

-----------
QUERY:

select array_agg(distinct ar order by ar desc)
  from (select array[i / 2] from generate_series(1,10) a(i)) b(ar);
RESULT:
	[([[5], [4], [3], [2], [1], [0]],)]

-----------
QUERY:

select array_agg(ar)
  from (select array_agg(array[i, i+1, i-1])
        from generate_series(1,2) a(i)) b(ar);
RESULT:
	[([[[1, 2, 0], [2, 3, 1]]],)]

-----------
QUERY:

select array_agg(array[i+1.2, i+1.3, i+1.4]) from generate_series(1,3) g(i);
RESULT:
	[([[Decimal('2.2'), Decimal('2.3'), Decimal('2.4')], [Decimal('3.2'), Decimal('3.3'), Decimal('3.4')], [Decimal('4.2'), Decimal('4.3'), Decimal('4.4')]],)]

-----------
QUERY:

select array_agg(array['Hello', i::text]) from generate_series(9,11) g(i);
RESULT:
	[([['Hello', '9'], ['Hello', '10'], ['Hello', '11']],)]

-----------
QUERY:

select array_agg(array[i, nullif(i, 3), i+1]) from generate_series(1,4) g(i);
RESULT:
	[([[1, 1, 2], [2, 2, 3], [3, None, 4], [4, 4, 5]],)]

-----------
QUERY:

-- errors
select array_agg('{}'::int[]) from generate_series(1,2);
RESULT:
	ERROR - cannot accumulate empty arrays


-----------
QUERY:

select array_agg(null::int[]) from generate_series(1,2);
RESULT:
	ERROR - cannot accumulate null arrays


-----------
QUERY:

select array_agg(ar)
  from (values ('{1,2}'::int[]), ('{3}'::int[])) v(ar);
RESULT:
	ERROR - cannot accumulate arrays of different dimensionality


-----------
QUERY:


select unnest(array[1,2,3]);
RESULT:
	[(1,), (2,), (3,)]

-----------
QUERY:

select * from unnest(array[1,2,3]);
RESULT:
	[(1,), (2,), (3,)]

-----------
QUERY:

select unnest(array[1,2,3,4.5]::float8[]);
RESULT:
	[(1.0,), (2.0,), (3.0,), (4.5,)]

-----------
QUERY:

select unnest(array[1,2,3,4.5]::numeric[]);
RESULT:
	[(Decimal('1'),), (Decimal('2'),), (Decimal('3'),), (Decimal('4.5'),)]

-----------
QUERY:

select unnest(array[1,2,3,null,4,null,null,5,6]);
RESULT:
	[(1,), (2,), (3,), (None,), (4,), (None,), (None,), (5,), (6,)]

-----------
QUERY:

select unnest(array[1,2,3,null,4,null,null,5,6]::text[]);
RESULT:
	[('1',), ('2',), ('3',), (None,), ('4',), (None,), (None,), ('5',), ('6',)]

-----------
QUERY:

select abs(unnest(array[1,2,null,-3]));
RESULT:
	[(1,), (2,), (None,), (3,)]

-----------
QUERY:

select array_remove(array[1,2,2,3], 2);
RESULT:
	[([1, 3],)]

-----------
QUERY:

select array_remove(array[1,2,2,3], 5);
RESULT:
	[([1, 2, 2, 3],)]

-----------
QUERY:

select array_remove(array[1,NULL,NULL,3], NULL);
RESULT:
	[([1, 3],)]

-----------
QUERY:

select array_remove(array['A','CC','D','C','RR'], 'RR');
RESULT:
	[(['A', 'CC', 'D', 'C'],)]

-----------
QUERY:

select array_remove(array[1.0, 2.1, 3.3], 1);
RESULT:
	[([Decimal('2.1'), Decimal('3.3')],)]

-----------
QUERY:

select array_remove('{{1,2,2},{1,4,3}}', 2);
RESULT:
	ERROR - removing elements from multidimensional arrays is not supported


-----------
QUERY:
 -- not allowed
select array_remove(array['X','X','X'], 'X') = '{}';
RESULT:
	[(True,)]

-----------
QUERY:

select array_replace(array[1,2,5,4],5,3);
RESULT:
	[([1, 2, 3, 4],)]

-----------
QUERY:

select array_replace(array[1,2,5,4],5,NULL);
RESULT:
	[([1, 2, None, 4],)]

-----------
QUERY:

select array_replace(array[1,2,NULL,4,NULL],NULL,5);
RESULT:
	[([1, 2, 5, 4, 5],)]

-----------
QUERY:

select array_replace(array['A','B','DD','B'],'B','CC');
RESULT:
	[(['A', 'CC', 'DD', 'CC'],)]

-----------
QUERY:

select array_replace(array[1,NULL,3],NULL,NULL);
RESULT:
	[([1, None, 3],)]

-----------
QUERY:

select array_replace(array['AB',NULL,'CDE'],NULL,'12');
RESULT:
	[(['AB', '12', 'CDE'],)]

-----------
QUERY:


-- array(select array-value ...)
select array(select array[i,i/2] from generate_series(1,5) i);
RESULT:
	[([[1, 0], [2, 1], [3, 1], [4, 2], [5, 2]],)]

-----------
QUERY:

select array(select array['Hello', i::text] from generate_series(9,11) i);
RESULT:
	[([['Hello', '9'], ['Hello', '10'], ['Hello', '11']],)]

-----------
QUERY:


-- Insert/update on a column that is array of composite

create temp table t1 (f1 int8_tbl[]);
RESULT:
	[]

-----------
QUERY:

insert into t1 (f1[5].q1) values(42);
RESULT:
	[]

-----------
QUERY:

select * from t1;
RESULT:
	[('[5:5]={"(42,)"}',)]

-----------
QUERY:

update t1 set f1[5].q2 = 43;
RESULT:
	[]

-----------
QUERY:

select * from t1;
RESULT:
	[('[5:5]={"(42,43)"}',)]

-----------
QUERY:


-- Check that arrays of composites are safely detoasted when needed

create temp table src (f1 text);
RESULT:
	[]

-----------
QUERY:

insert into src
  select string_agg(random()::text,'') from generate_series(1,10000);
RESULT:
	[]

-----------
QUERY:

create type textandtext as (c1 text, c2 text);
RESULT:
	[]

-----------
QUERY:

create temp table dest (f1 textandtext[]);
RESULT:
	[]

-----------
QUERY:

insert into dest select array[row(f1,f1)::textandtext] from src;
RESULT:
	[]

-----------
QUERY:

select length(fipshash((f1[1]).c2)) from dest;
RESULT:
	[(32,)]

-----------
QUERY:

delete from src;
RESULT:
	[]

-----------
QUERY:

select length(fipshash((f1[1]).c2)) from dest;
RESULT:
	[(32,)]

-----------
QUERY:

truncate table src;
RESULT:
	[]

-----------
QUERY:

drop table src;
RESULT:
	[]

-----------
QUERY:

select length(fipshash((f1[1]).c2)) from dest;
RESULT:
	[(32,)]

-----------
QUERY:

drop table dest;
RESULT:
	[]

-----------
QUERY:

drop type textandtext;
RESULT:
	[]

-----------
QUERY:


-- Tests for polymorphic-array form of width_bucket()

-- this exercises the varwidth and float8 code paths
SELECT
    op,
    width_bucket(op::numeric, ARRAY[1, 3, 5, 10.0]::numeric[]) AS wb_n1,
    width_bucket(op::numeric, ARRAY[0, 5.5, 9.99]::numeric[]) AS wb_n2,
    width_bucket(op::numeric, ARRAY[-6, -5, 2.0]::numeric[]) AS wb_n3,
    width_bucket(op::float8, ARRAY[1, 3, 5, 10.0]::float8[]) AS wb_f1,
    width_bucket(op::float8, ARRAY[0, 5.5, 9.99]::float8[]) AS wb_f2,
    width_bucket(op::float8, ARRAY[-6, -5, 2.0]::float8[]) AS wb_f3
FROM (VALUES
  (-5.2),
  (-0.0000000001),
  (0.000000000001),
  (1),
  (1.99999999999999),
  (2),
  (2.00000000000001),
  (3),
  (4),
  (4.5),
  (5),
  (5.5),
  (6),
  (7),
  (8),
  (9),
  (9.99999999999999),
  (10),
  (10.0000000000001)
) v(op);
RESULT:
	[(Decimal('-5.2'), 0, 0, 1, 0, 0, 1), (Decimal('-1E-10'), 0, 0, 2, 0, 0, 2), (Decimal('1E-12'), 0, 1, 2, 0, 1, 2), (Decimal('1'), 1, 1, 2, 1, 1, 2), (Decimal('1.99999999999999'), 1, 1, 2, 1, 1, 2), (Decimal('2'), 1, 1, 3, 1, 1, 3), (Decimal('2.00000000000001'), 1, 1, 3, 1, 1, 3), (Decimal('3'), 2, 1, 3, 2, 1, 3), (Decimal('4'), 2, 1, 3, 2, 1, 3), (Decimal('4.5'), 2, 1, 3, 2, 1, 3), (Decimal('5'), 3, 1, 3, 3, 1, 3), (Decimal('5.5'), 3, 2, 3, 3, 2, 3), (Decimal('6'), 3, 2, 3, 3, 2, 3), (Decimal('7'), 3, 2, 3, 3, 2, 3), (Decimal('8'), 3, 2, 3, 3, 2, 3), (Decimal('9'), 3, 2, 3, 3, 2, 3), (Decimal('9.99999999999999'), 3, 3, 3, 3, 3, 3), (Decimal('10'), 4, 3, 3, 4, 3, 3), (Decimal('10.0000000000001'), 4, 3, 3, 4, 3, 3)]

-----------
QUERY:


-- ensure float8 path handles NaN properly
SELECT
    op,
    width_bucket(op, ARRAY[1, 3, 9, 'NaN', 'NaN']::float8[]) AS wb
FROM (VALUES
  (-5.2::float8),
  (4::float8),
  (77::float8),
  ('NaN'::float8)
) v(op);
RESULT:
	[(-5.2, 0), (4.0, 2), (77.0, 3), (nan, 5)]

-----------
QUERY:


-- these exercise the generic fixed-width code path
SELECT
    op,
    width_bucket(op, ARRAY[1, 3, 5, 10]) AS wb_1
FROM generate_series(0,11) as op;
RESULT:
	[(0, 0), (1, 1), (2, 1), (3, 2), (4, 2), (5, 3), (6, 3), (7, 3), (8, 3), (9, 3), (10, 4), (11, 4)]

-----------
QUERY:


SELECT width_bucket(now(),
                    array['yesterday', 'today', 'tomorrow']::timestamptz[]);
RESULT:
	[(2,)]

-----------
QUERY:


-- corner cases
SELECT width_bucket(5, ARRAY[3]);
RESULT:
	[(1,)]

-----------
QUERY:

SELECT width_bucket(5, '{}');
RESULT:
	[(0,)]

-----------
QUERY:


-- error cases
SELECT width_bucket('5'::text, ARRAY[3, 4]::integer[]);
RESULT:
	ERROR - function width_bucket(text, integer[]) does not exist
LINE 4: SELECT width_bucket('5'::text, ARRAY[3, 4]::integer[]);
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT width_bucket(5, ARRAY[3, 4, NULL]);
RESULT:
	ERROR - thresholds array must not contain NULLs


-----------
QUERY:

SELECT width_bucket(5, ARRAY[ARRAY[1, 2], ARRAY[3, 4]]);
RESULT:
	ERROR - thresholds must be one-dimensional array


-----------
QUERY:


-- trim_array

SELECT arr, trim_array(arr, 2)
FROM
(VALUES ('{1,2,3,4,5,6}'::bigint[]),
        ('{1,2}'),
        ('[10:16]={1,2,3,4,5,6,7}'),
        ('[-15:-10]={1,2,3,4,5,6}'),
        ('{{1,10},{2,20},{3,30},{4,40}}')) v(arr);
RESULT:
	[([1, 2, 3, 4, 5, 6], [1, 2, 3, 4]), ([1, 2], []), ([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5]), ([1, 2, 3, 4, 5, 6], [1, 2, 3, 4]), ([[1, 10], [2, 20], [3, 30], [4, 40]], [[1, 10], [2, 20]])]

-----------
QUERY:


SELECT trim_array(ARRAY[1, 2, 3], -1);
RESULT:
	ERROR - number of elements to trim must be between 0 and 3


-----------
QUERY:
 -- fail
SELECT trim_array(ARRAY[1, 2, 3], 10);
RESULT:
	ERROR - number of elements to trim must be between 0 and 3


-----------
QUERY:
 -- fail
SELECT trim_array(ARRAY[]::int[], 1);
RESULT:
	ERROR - number of elements to trim must be between 0 and 0


-----------
QUERY:
 -- fail

-- array_shuffle
SELECT array_shuffle('{1,2,3,4,5,6}'::int[]) <@ '{1,2,3,4,5,6}';
RESULT:
	[(True,)]

-----------
QUERY:

SELECT array_shuffle('{1,2,3,4,5,6}'::int[]) @> '{1,2,3,4,5,6}';
RESULT:
	[(True,)]

-----------
QUERY:

SELECT array_dims(array_shuffle('[-1:2][2:3]={{1,2},{3,NULL},{5,6},{7,8}}'::int[]));
RESULT:
	[('[-1:2][2:3]',)]

-----------
QUERY:

SELECT array_dims(array_shuffle('{{{1,2},{3,NULL}},{{5,6},{7,8}},{{9,10},{11,12}}}'::int[]));
RESULT:
	[('[1:3][1:2][1:2]',)]

-----------
QUERY:


-- array_sample
SELECT array_sample('{1,2,3,4,5,6}'::int[], 3) <@ '{1,2,3,4,5,6}';
RESULT:
	[(True,)]

-----------
QUERY:

SELECT array_length(array_sample('{1,2,3,4,5,6}'::int[], 3), 1);
RESULT:
	[(3,)]

-----------
QUERY:

SELECT array_dims(array_sample('[-1:2][2:3]={{1,2},{3,NULL},{5,6},{7,8}}'::int[], 3));
RESULT:
	[('[1:3][2:3]',)]

-----------
QUERY:

SELECT array_dims(array_sample('{{{1,2},{3,NULL}},{{5,6},{7,8}},{{9,10},{11,12}}}'::int[], 2));
RESULT:
	[('[1:2][1:2][1:2]',)]

-----------
QUERY:

SELECT array_sample('{1,2,3,4,5,6}'::int[], -1);
RESULT:
	ERROR - sample size must be between 0 and 6


-----------
QUERY:
 -- fail
SELECT array_sample('{1,2,3,4,5,6}'::int[], 7);
RESULT:
	ERROR - sample size must be between 0 and 6


-----------
QUERY:
 --fail

RESULT:
	ERROR - can't execute an empty query
