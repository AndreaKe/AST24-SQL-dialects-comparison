Guest DBMS identified: postgres
-----------
QUERY:
--
-- BIT types
--

--
-- Build tables for testing
--

CREATE TABLE BIT_TABLE(b BIT(11));
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:


INSERT INTO BIT_TABLE VALUES (B'10');
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:
 -- too short
INSERT INTO BIT_TABLE VALUES (B'00000000000');
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

INSERT INTO BIT_TABLE VALUES (B'11011000000');
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

INSERT INTO BIT_TABLE VALUES (B'01010101010');
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

INSERT INTO BIT_TABLE VALUES (B'101011111010');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- too long
--INSERT INTO BIT_TABLE VALUES (/* REPLACED */''X554/* REPLACED */'') /* REPLACED */,
--INSERT INTO BIT_TABLE VALUES (/* REPLACED */''X555/* REPLACED */'') /* REPLACED */,

SELECT * FROM BIT_TABLE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CREATE TABLE VARBIT_TABLE(v BIT VARYING(11));
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


INSERT INTO VARBIT_TABLE VALUES (B'');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO VARBIT_TABLE VALUES (B'0');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO VARBIT_TABLE VALUES (B'010101');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO VARBIT_TABLE VALUES (B'01010101010');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO VARBIT_TABLE VALUES (B'101011111010');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- too long
--INSERT INTO VARBIT_TABLE VALUES (/* REPLACED */''X554/* REPLACED */'') /* REPLACED */,
--INSERT INTO VARBIT_TABLE VALUES (/* REPLACED */''X555/* REPLACED */'') /* REPLACED */,
SELECT * FROM VARBIT_TABLE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- Literals with syntax errors
SELECT b' 0';
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

SELECT b'0 ';
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

SELECT x' 0';
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

SELECT x'0 ';
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:


-- Concatenation
SELECT v, b, (v || b) AS concat
       FROM BIT_TABLE, VARBIT_TABLE
       ORDER BY 3;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- Length
SELECT b, length(b) AS lb
       FROM BIT_TABLE;
RESULT: [duckdb: ERROR, mySQL: DIFFERENT]

-----------
QUERY:

SELECT v, length(v) AS lv
       FROM VARBIT_TABLE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- Substring
SELECT b,
       SUBSTRING(b FROM 2 FOR 4) AS sub_2_4,
       SUBSTRING(b FROM 7 FOR 13) AS sub_7_13,
       SUBSTRING(b FROM 6) AS sub_6
       FROM BIT_TABLE;
RESULT: [duckdb: ERROR, mySQL: DIFFERENT]

-----------
QUERY:

SELECT v,
       SUBSTRING(v FROM 2 FOR 4) AS sub_2_4,
       SUBSTRING(v FROM 7 FOR 13) AS sub_7_13,
       SUBSTRING(v FROM 6) AS sub_6
       FROM VARBIT_TABLE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- test overflow cases
SELECT SUBSTRING('01010101'::bit(8) FROM 2 FOR 2147483646) AS "1010101";
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT SUBSTRING('01010101'::bit(8) FROM -10 FOR 2147483646) AS "01010101";
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT SUBSTRING('01010101'::bit(8) FROM -10 FOR -2147483646) AS "error";
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

SELECT SUBSTRING('01010101'::varbit FROM 2 FOR 2147483646) AS "1010101";
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT SUBSTRING('01010101'::varbit FROM -10 FOR 2147483646) AS "01010101";
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT SUBSTRING('01010101'::varbit FROM -10 FOR -2147483646) AS "error";
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


--- Bit operations
DROP TABLE varbit_table;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

CREATE TABLE varbit_table (a BIT VARYING(16), b BIT VARYING(16));
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

COPY varbit_table FROM stdin;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

X0F	X10
X1F	X11
X2F	X12
X3F	X13
X8F	X04
X000F	X0010
X0123	XFFFF
X2468	X2468
XFA50	X05AF
X1234	XFFF5
\.

SELECT a, b, ~a AS "~ a", a & b AS "a & b",
       a | b AS "a | b", a # b AS "a # b" FROM varbit_table;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

SELECT a,b,a<b AS "a<b",a<=b AS "a<=b",a=b AS "a=b",
        a>=b AS "a>=b",a>b AS "a>b",a<>b AS "a<>b" FROM varbit_table;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT a,a<<4 AS "a<<4",b,b>>2 AS "b>>2" FROM varbit_table;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DROP TABLE varbit_table;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


--- Bit operations
DROP TABLE bit_table;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

CREATE TABLE bit_table (a BIT(16), b BIT(16));
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

COPY bit_table FROM stdin;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

X0F00	X1000
X1F00	X1100
X2F00	X1200
X3F00	X1300
X8F00	X0400
X000F	X0010
X0123	XFFFF
X2468	X2468
XFA50	X05AF
X1234	XFFF5
\.

SELECT a,b,~a AS "~ a",a & b AS "a & b",
	a|b AS "a | b", a # b AS "a # b" FROM bit_table;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

SELECT a,b,a<b AS "a<b",a<=b AS "a<=b",a=b AS "a=b",
        a>=b AS "a>=b",a>b AS "a>b",a<>b AS "a<>b" FROM bit_table;
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

SELECT a,a<<4 AS "a<<4",b,b>>2 AS "b>>2" FROM bit_table;
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:


DROP TABLE bit_table;
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:



-- The following should fail
select B'001' & B'10';
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:

select B'0111' | B'011';
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:

select B'0010' # B'011101';
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:


-- More position tests, checking all the boundary cases
SELECT POSITION(B'1010' IN B'0000101');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
   -- 0
SELECT POSITION(B'1010' IN B'00001010');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
  -- 5
SELECT POSITION(B'1010' IN B'00000101');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
  -- 0
SELECT POSITION(B'1010' IN B'000001010');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
  -- 6

SELECT POSITION(B'' IN B'00001010');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
  -- 1
SELECT POSITION(B'0' IN B'');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
  -- 0
SELECT POSITION(B'' IN B'');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
  -- 0
SELECT POSITION(B'101101' IN B'001011011011011000');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
  -- 3
SELECT POSITION(B'10110110' IN B'001011011011010');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
  -- 3
SELECT POSITION(B'1011011011011' IN B'001011011011011');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
  -- 3
SELECT POSITION(B'1011011011011' IN B'00001011011011011');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
  -- 5

SELECT POSITION(B'11101011' IN B'11101011');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- 1
SELECT POSITION(B'11101011' IN B'011101011');
RESULT: [duckdb: DIFFERENT, mySQL: SAME]

-----------
QUERY:
 -- 2
SELECT POSITION(B'11101011' IN B'00011101011');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
 -- 4
SELECT POSITION(B'11101011' IN B'0000011101011');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
 -- 6

SELECT POSITION(B'111010110' IN B'111010110');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- 1
SELECT POSITION(B'111010110' IN B'0111010110');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
 -- 2
SELECT POSITION(B'111010110' IN B'000111010110');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
 -- 4
SELECT POSITION(B'111010110' IN B'00000111010110');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
 -- 6

SELECT POSITION(B'111010110' IN B'11101011');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- 0
SELECT POSITION(B'111010110' IN B'011101011');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- 0
SELECT POSITION(B'111010110' IN B'00011101011');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- 0
SELECT POSITION(B'111010110' IN B'0000011101011');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- 0

SELECT POSITION(B'111010110' IN B'111010110');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- 1
SELECT POSITION(B'111010110' IN B'0111010110');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
 -- 2
SELECT POSITION(B'111010110' IN B'000111010110');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
 -- 4
SELECT POSITION(B'111010110' IN B'00000111010110');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
 -- 6

SELECT POSITION(B'111010110' IN B'000001110101111101011');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- 0
SELECT POSITION(B'111010110' IN B'0000001110101111101011');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- 0
SELECT POSITION(B'111010110' IN B'000000001110101111101011');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- 0
SELECT POSITION(B'111010110' IN B'00000000001110101111101011');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- 0

SELECT POSITION(B'111010110' IN B'0000011101011111010110');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
 -- 14
SELECT POSITION(B'111010110' IN B'00000011101011111010110');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
 -- 15
SELECT POSITION(B'111010110' IN B'0000000011101011111010110');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
 -- 17
SELECT POSITION(B'111010110' IN B'000000000011101011111010110');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
 -- 19

SELECT POSITION(B'000000000011101011111010110' IN B'000000000011101011111010110');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- 1
SELECT POSITION(B'00000000011101011111010110' IN B'000000000011101011111010110');
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:
 -- 2
SELECT POSITION(B'0000000000011101011111010110' IN B'000000000011101011111010110');
RESULT: [duckdb: SAME, mySQL: DIFFERENT]

-----------
QUERY:
 -- 0


-- Shifting

CREATE TABLE BIT_SHIFT_TABLE(b BIT(16));
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

INSERT INTO BIT_SHIFT_TABLE VALUES (B'1101100000000000');
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

INSERT INTO BIT_SHIFT_TABLE SELECT b>>1 FROM BIT_SHIFT_TABLE;
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

INSERT INTO BIT_SHIFT_TABLE SELECT b>>2 FROM BIT_SHIFT_TABLE;
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

INSERT INTO BIT_SHIFT_TABLE SELECT b>>4 FROM BIT_SHIFT_TABLE;
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

INSERT INTO BIT_SHIFT_TABLE SELECT b>>8 FROM BIT_SHIFT_TABLE;
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

SELECT POSITION(B'1101' IN b),
       POSITION(B'11011' IN b),
       b
       FROM BIT_SHIFT_TABLE ;
RESULT: [duckdb: ERROR, mySQL: DIFFERENT]

-----------
QUERY:

SELECT b, b >> 1 AS bsr, b << 1 AS bsl
       FROM BIT_SHIFT_TABLE ;
RESULT: [duckdb: ERROR, mySQL: DIFFERENT]

-----------
QUERY:

SELECT b, b >> 8 AS bsr8, b << 8 AS bsl8
       FROM BIT_SHIFT_TABLE ;
RESULT: [duckdb: ERROR, mySQL: DIFFERENT]

-----------
QUERY:

SELECT b::bit(15), b::bit(15) >> 1 AS bsr, b::bit(15) << 1 AS bsl
       FROM BIT_SHIFT_TABLE ;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT b::bit(15), b::bit(15) >> 8 AS bsr8, b::bit(15) << 8 AS bsl8
       FROM BIT_SHIFT_TABLE ;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:



CREATE TABLE VARBIT_SHIFT_TABLE(v BIT VARYING(20));
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO VARBIT_SHIFT_TABLE VALUES (B'11011');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO VARBIT_SHIFT_TABLE SELECT CAST(v || B'0' AS BIT VARYING(6)) >>1 FROM VARBIT_SHIFT_TABLE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO VARBIT_SHIFT_TABLE SELECT CAST(v || B'00' AS BIT VARYING(8)) >>2 FROM VARBIT_SHIFT_TABLE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO VARBIT_SHIFT_TABLE SELECT CAST(v || B'0000' AS BIT VARYING(12)) >>4 FROM VARBIT_SHIFT_TABLE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO VARBIT_SHIFT_TABLE SELECT CAST(v || B'00000000' AS BIT VARYING(20)) >>8 FROM VARBIT_SHIFT_TABLE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT POSITION(B'1101' IN v),
       POSITION(B'11011' IN v),
       v
       FROM VARBIT_SHIFT_TABLE ;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT v, v >> 1 AS vsr, v << 1 AS vsl
       FROM VARBIT_SHIFT_TABLE ;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT v, v >> 8 AS vsr8, v << 8 AS vsl8
       FROM VARBIT_SHIFT_TABLE ;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DROP TABLE BIT_SHIFT_TABLE;
RESULT: [duckdb: ERROR, mySQL: SAME]

-----------
QUERY:

DROP TABLE VARBIT_SHIFT_TABLE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- Get/Set bit
SELECT get_bit(B'0101011000100', 10);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT set_bit(B'0101011000100100', 15, 1);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT set_bit(B'0101011000100100', 16, 1);
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
	-- fail

-- Overlay
SELECT overlay(B'0101011100' placing '001' from 2 for 3);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT overlay(B'0101011100' placing '101' from 6);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT overlay(B'0101011100' placing '001' from 11);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT overlay(B'0101011100' placing '001' from 20);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- bit_count
SELECT bit_count(B'0101011100'::bit(10));
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT bit_count(B'1111111111'::bit(10));
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- This table is intentionally left around to exercise pg_dump/pg_upgrade
CREATE TABLE bit_defaults(
  b1 bit(4) DEFAULT '1001',
  b2 bit(4) DEFAULT B'0101',
  b3 bit varying(5) DEFAULT '1001',
  b4 bit varying(5) DEFAULT B'0101'
);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

-- \d bit_defaults
INSERT INTO bit_defaults DEFAULT VALUES;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

TABLE bit_defaults;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- test non-error-throwing API for some core types
SELECT pg_input_is_valid('01010001', 'bit(10)');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('01010001', 'bit(10)');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('01010Z01', 'bit(8)');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('01010Z01', 'bit(8)');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('x01010Z01', 'bit(32)');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('x01010Z01', 'bit(32)');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


SELECT pg_input_is_valid('01010Z01', 'varbit');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('01010Z01', 'varbit');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('x01010Z01', 'varbit');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('x01010Z01', 'varbit');
RESULT: [duckdb: ERROR, mySQL: ERROR]
=========================================
Summary for test case bit/test.sql of postgres
=========================================

=================
Results for duckdb
SAME: 30 queries, which is 23.44%
DIFFERENT: 21 queries, which is 16.41%
ERROR: 77 queries, which is 60.16%

=================
Results for mySQL
SAME: 45 queries, which is 35.16%
DIFFERENT: 26 queries, which is 20.31%
ERROR: 57 queries, which is 44.53%
