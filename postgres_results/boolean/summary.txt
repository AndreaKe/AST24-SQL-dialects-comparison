Guest DBMS identified: postgres
-----------
QUERY:
--
-- BOOLEAN
--

--
-- sanity check - if this fails go insane!
--
SELECT 1 AS one;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:



-- ******************testing built-in type bool********************

-- check bool input syntax

SELECT true AS true;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT false AS false;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT bool 't' AS true;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT bool '   f           ' AS false;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT bool 'true' AS true;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT bool 'test' AS error;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT bool 'false' AS false;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT bool 'foo' AS error;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT bool 'y' AS true;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT bool 'yes' AS true;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT bool 'yeah' AS error;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT bool 'n' AS false;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT bool 'no' AS false;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT bool 'nay' AS error;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT bool 'on' AS true;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT bool 'off' AS false;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT bool 'of' AS false;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT bool 'o' AS error;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT bool 'on_' AS error;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT bool 'off_' AS error;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT bool '1' AS true;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT bool '11' AS error;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT bool '0' AS false;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT bool '000' AS error;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT bool '' AS error;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Also try it with non-error-throwing API
SELECT pg_input_is_valid('true', 'bool');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('asdf', 'bool');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('junk', 'bool');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- and, or, not in qualifications

SELECT bool 't' or bool 'f' AS true;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT bool 't' and bool 'f' AS false;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT not bool 'f' AS true;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT bool 't' = bool 'f' AS false;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT bool 't' <> bool 'f' AS true;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT bool 't' > bool 'f' AS true;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT bool 't' >= bool 'f' AS true;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT bool 'f' < bool 't' AS true;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT bool 'f' <= bool 't' AS true;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- explicit casts to/from text
SELECT 'TrUe'::text::boolean AS true, 'fAlse'::text::boolean AS false;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT '    true   '::text::boolean AS true,
       '     FALSE'::text::boolean AS false;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT true::boolean::text AS true, false::boolean::text AS false;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT '  tru e '::text::boolean AS invalid;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
    -- error
SELECT ''::text::boolean AS invalid;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
            -- error

CREATE TABLE BOOLTBL1 (f1 bool);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


INSERT INTO BOOLTBL1 (f1) VALUES (bool 't');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


INSERT INTO BOOLTBL1 (f1) VALUES (bool 'True');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


INSERT INTO BOOLTBL1 (f1) VALUES (bool 'true');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:



-- BOOLTBL1 should be full of true/* REPLACED */ ''s at this point
SELECT BOOLTBL1.* FROM BOOLTBL1;
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:



SELECT BOOLTBL1.*
   FROM BOOLTBL1
   WHERE f1 = bool 'true';
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:



SELECT BOOLTBL1.*
   FROM BOOLTBL1
   WHERE f1 <> bool 'false';
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT BOOLTBL1.*
   FROM BOOLTBL1
   WHERE booleq(bool 'false', f1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


INSERT INTO BOOLTBL1 (f1) VALUES (bool 'f');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT BOOLTBL1.*
   FROM BOOLTBL1
   WHERE f1 = bool 'false';
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:



CREATE TABLE BOOLTBL2 (f1 bool);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


INSERT INTO BOOLTBL2 (f1) VALUES (bool 'f');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


INSERT INTO BOOLTBL2 (f1) VALUES (bool 'false');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


INSERT INTO BOOLTBL2 (f1) VALUES (bool 'False');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


INSERT INTO BOOLTBL2 (f1) VALUES (bool 'FALSE');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- This is now an invalid expression
-- For pre-v6.3 this evaluated to false - thomas 1997-10-23
INSERT INTO BOOLTBL2 (f1)
   VALUES (bool 'XXX');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- BOOLTBL2 should be full of false/* REPLACED */ ''s at this point
SELECT BOOLTBL2.* FROM BOOLTBL2;
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:



SELECT BOOLTBL1.*, BOOLTBL2.*
   FROM BOOLTBL1, BOOLTBL2
   WHERE BOOLTBL2.f1 <> BOOLTBL1.f1;
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:



SELECT BOOLTBL1.*, BOOLTBL2.*
   FROM BOOLTBL1, BOOLTBL2
   WHERE boolne(BOOLTBL2.f1,BOOLTBL1.f1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:



SELECT BOOLTBL1.*, BOOLTBL2.*
   FROM BOOLTBL1, BOOLTBL2
   WHERE BOOLTBL2.f1 = BOOLTBL1.f1 and BOOLTBL1.f1 = bool 'false';
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:



SELECT BOOLTBL1.*, BOOLTBL2.*
   FROM BOOLTBL1, BOOLTBL2
   WHERE BOOLTBL2.f1 = BOOLTBL1.f1 or BOOLTBL1.f1 = bool 'true'
   ORDER BY BOOLTBL1.f1, BOOLTBL2.f1;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


--
-- SQL syntax
-- Try all combinations to ensure that we get nothing when we expect nothing
-- - thomas 2000-01-04
--

SELECT f1
   FROM BOOLTBL1
   WHERE f1 IS TRUE;
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:


SELECT f1
   FROM BOOLTBL1
   WHERE f1 IS NOT FALSE;
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:


SELECT f1
   FROM BOOLTBL1
   WHERE f1 IS FALSE;
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:


SELECT f1
   FROM BOOLTBL1
   WHERE f1 IS NOT TRUE;
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:


SELECT f1
   FROM BOOLTBL2
   WHERE f1 IS TRUE;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT f1
   FROM BOOLTBL2
   WHERE f1 IS NOT FALSE;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT f1
   FROM BOOLTBL2
   WHERE f1 IS FALSE;
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:


SELECT f1
   FROM BOOLTBL2
   WHERE f1 IS NOT TRUE;
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:


--
-- Tests for BooleanTest
--
CREATE TABLE BOOLTBL3 (d text, b bool, o int);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO BOOLTBL3 (d, b, o) VALUES ('true', true, 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO BOOLTBL3 (d, b, o) VALUES ('false', false, 2);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO BOOLTBL3 (d, b, o) VALUES ('null', null, 3);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT
    d,
    b IS TRUE AS istrue,
    b IS NOT TRUE AS isnottrue,
    b IS FALSE AS isfalse,
    b IS NOT FALSE AS isnotfalse,
    b IS UNKNOWN AS isunknown,
    b IS NOT UNKNOWN AS isnotunknown
FROM booltbl3 ORDER BY o;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:



-- Test to make sure short-circuiting and NULL handling is
-- correct. Use a table as source to prevent constant simplification
-- from interfering.
CREATE TABLE booltbl4(isfalse bool, istrue bool, isnul bool);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO booltbl4 VALUES (false, true, null);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- \pset null /* REPLACED */ ''(null)/* REPLACED */ ''

-- AND expression need to return null if there/* REPLACED */ ''s any nulls and not all
-- of the value are true
SELECT istrue AND isnul AND istrue FROM booltbl4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT istrue AND istrue AND isnul FROM booltbl4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT isnul AND istrue AND istrue FROM booltbl4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT isfalse AND isnul AND istrue FROM booltbl4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT istrue AND isfalse AND isnul FROM booltbl4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT isnul AND istrue AND isfalse FROM booltbl4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- OR expression need to return null if there/* REPLACED */ ''s any nulls and none
-- of the value is true
SELECT isfalse OR isnul OR isfalse FROM booltbl4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT isfalse OR isfalse OR isnul FROM booltbl4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT isnul OR isfalse OR isfalse FROM booltbl4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT isfalse OR isnul OR istrue FROM booltbl4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT istrue OR isfalse OR isnul FROM booltbl4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT isnul OR istrue OR isfalse FROM booltbl4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Casts
SELECT 0::boolean;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 1::boolean;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 2::boolean;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:



--
-- Clean up
-- Many tables are retained by the regression test, but these do not seem
--  particularly useful so just get rid of them for now.
--  - thomas 1997-11-30
--

DROP TABLE  BOOLTBL1;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


DROP TABLE  BOOLTBL2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


DROP TABLE  BOOLTBL3;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


DROP TABLE  BOOLTBL4;
RESULT: [duckdb: SAME, mysql: ERROR]


=========================================
Summary for test case boolean/test.sql of postgres
=========================================

=================
Results for duckdb
SAME      :	84 queries	85.71%
DIFFERENT :	0 queries	0.00%
ERROR     :	14 queries	14.29%

=================
Results for mysql
SAME      :	39 queries	39.80%
DIFFERENT :	9 queries	9.18%
ERROR     :	50 queries	51.02%
Guest results are identical to expected results