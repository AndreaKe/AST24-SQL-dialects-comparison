Guest DBMS identified: postgres
-----------
QUERY:
--
-- CASE
-- Test the case statement
--

CREATE TABLE CASE_TBL (
  i integer,
  f double precision
);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


CREATE TABLE CASE2_TBL (
  i integer,
  j integer
);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


INSERT INTO CASE_TBL VALUES (1, 10.1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO CASE_TBL VALUES (2, 20.2);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO CASE_TBL VALUES (3, -30.3);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO CASE_TBL VALUES (4, NULL);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


INSERT INTO CASE2_TBL VALUES (1, -1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO CASE2_TBL VALUES (2, -2);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO CASE2_TBL VALUES (3, -3);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO CASE2_TBL VALUES (2, -4);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO CASE2_TBL VALUES (1, NULL);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO CASE2_TBL VALUES (NULL, -6);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


--
-- Simplest examples without tables
--

SELECT '3' AS "One",
  CASE
    WHEN 1 < 2 THEN 3
  END AS "Simple WHEN";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT '<NULL>' AS "One",
  CASE
    WHEN 1 > 2 THEN 3
  END AS "Simple default";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT '3' AS "One",
  CASE
    WHEN 1 < 2 THEN 3
    ELSE 4
  END AS "Simple ELSE";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT '4' AS "One",
  CASE
    WHEN 1 > 2 THEN 3
    ELSE 4
  END AS "ELSE default";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT '6' AS "One",
  CASE
    WHEN 1 > 2 THEN 3
    WHEN 4 < 5 THEN 6
    ELSE 7
  END AS "Two WHEN with default";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:



SELECT '7' AS "None",
   CASE WHEN random() < 0 THEN 1
   END AS "NULL on no matches";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- Constant-expression folding shouldn/* REPLACED */ ''t evaluate unreachable subexpressions
SELECT CASE WHEN 1=0 THEN 1/0 WHEN 1=1 THEN 1 ELSE 2/0 END;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT CASE 1 WHEN 0 THEN 1/0 WHEN 1 THEN 1 ELSE 2/0 END;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- However we do not currently suppress folding of potentially
-- reachable subexpressions
SELECT CASE WHEN i > 100 THEN 1/0 ELSE 0 END FROM case_tbl;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:


-- Test for cases involving untyped literals in test expression
SELECT CASE 'a' WHEN 'a' THEN 1 ELSE 2 END;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


--
-- Examples of targets involving tables
--

SELECT
  CASE
    WHEN i >= 3 THEN i
  END AS ">= 3 or Null"
  FROM CASE_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT
  CASE WHEN i >= 3 THEN (i + i)
       ELSE i
  END AS "Simplest Math"
  FROM CASE_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT i AS "Value",
  CASE WHEN (i < 0) THEN 'small'
       WHEN (i = 0) THEN 'zero'
       WHEN (i = 1) THEN 'one'
       WHEN (i = 2) THEN 'two'
       ELSE 'big'
  END AS "Category"
  FROM CASE_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT
  CASE WHEN ((i < 0) or (i < 0)) THEN 'small'
       WHEN ((i = 0) or (i = 0)) THEN 'zero'
       WHEN ((i = 1) or (i = 1)) THEN 'one'
       WHEN ((i = 2) or (i = 2)) THEN 'two'
       ELSE 'big'
  END AS "Category"
  FROM CASE_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


--
-- Examples of qualifications involving tables
--

--
-- NULLIF() and COALESCE()
-- Shorthand forms for typical CASE constructs
--  defined in the SQL standard.
--

SELECT * FROM CASE_TBL WHERE COALESCE(f,i) = 4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT * FROM CASE_TBL WHERE NULLIF(f,i) = 2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT COALESCE(a.f, b.i, b.j)
  FROM CASE_TBL a, CASE2_TBL b;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT *
  FROM CASE_TBL a, CASE2_TBL b
  WHERE COALESCE(a.f, b.i, b.j) = 2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT NULLIF(a.i,b.i) AS "NULLIF(a.i,b.i)",
  NULLIF(b.i, 4) AS "NULLIF(b.i,4)"
  FROM CASE_TBL a, CASE2_TBL b;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT *
  FROM CASE_TBL a, CASE2_TBL b
  WHERE COALESCE(f,b.i) = 2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Tests for constant subexpression simplification

explain (costs off)
SELECT * FROM CASE_TBL WHERE NULLIF(1, 2) = 2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


explain (costs off)
SELECT * FROM CASE_TBL WHERE NULLIF(1, 1) IS NOT NULL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


explain (costs off)
SELECT * FROM CASE_TBL WHERE NULLIF(1, null) = 2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- Examples of updates involving tables
--

UPDATE CASE_TBL
  SET i = CASE WHEN i >= 3 THEN (- i)
                ELSE (2 * i) END;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT * FROM CASE_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


UPDATE CASE_TBL
  SET i = CASE WHEN i >= 2 THEN (2 * i)
                ELSE (3 * i) END;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT * FROM CASE_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


UPDATE CASE_TBL
  SET i = CASE WHEN b.i >= 2 THEN (2 * j)
                ELSE (3 * j) END
  FROM CASE2_TBL b
  WHERE j = -CASE_TBL.i;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT * FROM CASE_TBL;
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:


--
-- Nested CASE expressions
--

-- This test exercises a bug caused by aliasing econtext->caseValue_isNull
-- with the isNull argument of the inner CASE/* REPLACED */ ''s CaseExpr evaluation.  After
-- evaluating the vol(null) expression in the inner CASE/* REPLACED */ ''s second WHEN-clause,
-- the isNull flag for the case test value incorrectly became true, causing
-- the third WHEN-clause not to match.  The volatile function calls are needed
-- to prevent constant-folding in the planner, which would hide the bug.

-- Wrap this in a single transaction so the transient /* REPLACED */ ''=/* REPLACED */ '' operator doesn/* REPLACED */ ''t
-- cause problems in concurrent sessions
BEGIN;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


CREATE FUNCTION vol(text) returns text as
  'begin return $1;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 end' language plpgsql volatile;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT CASE
  (CASE vol('bar')
    WHEN 'foo' THEN 'it was foo!'
    WHEN vol(null) THEN 'null input'
    WHEN 'bar' THEN 'it was bar!' END
  )
  WHEN 'it was foo!' THEN 'foo recognized'
  WHEN 'it was bar!' THEN 'bar recognized'
  ELSE 'unrecognized' END;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- In this case, we can/* REPLACED */ ''t inline the SQL function without confusing things.
CREATE DOMAIN foodomain AS text;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


CREATE FUNCTION volfoo(text) returns foodomain as
  'begin return $1::foodomain;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 end' language plpgsql volatile;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


CREATE FUNCTION inline_eq(foodomain, foodomain) returns boolean as
  'SELECT CASE $2::text WHEN $1::text THEN true ELSE false END' language sql;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


CREATE OPERATOR = (procedure = inline_eq,
                   leftarg = foodomain, rightarg = foodomain);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT CASE volfoo('bar') WHEN 'foo'::foodomain THEN 'is foo' ELSE 'is not foo' END;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


ROLLBACK;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Test multiple evaluation of a CASE arg that is a read/write object (#14472)
-- Wrap this in a single transaction so the transient /* REPLACED */ ''=/* REPLACED */ '' operator doesn/* REPLACED */ ''t
-- cause problems in concurrent sessions
BEGIN;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


CREATE DOMAIN arrdomain AS int[];
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


CREATE FUNCTION make_ad(int,int) returns arrdomain as
  'declare x arrdomain;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

   begin
     x := array[$1,$2];
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

     return x;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

   end' language plpgsql volatile;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


CREATE FUNCTION ad_eq(arrdomain, arrdomain) returns boolean as
  'begin return array_eq($1, $2);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 end' language plpgsql;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


CREATE OPERATOR = (procedure = ad_eq,
                   leftarg = arrdomain, rightarg = arrdomain);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT CASE make_ad(1,2)
  WHEN array[2,4]::arrdomain THEN 'wrong'
  WHEN array[2,5]::arrdomain THEN 'still wrong'
  WHEN array[1,2]::arrdomain THEN 'right'
  END;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


ROLLBACK;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Test interaction of CASE with ArrayCoerceExpr (bug #15471)
BEGIN;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


CREATE TYPE casetestenum AS ENUM ('e', 'f', 'g');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT
  CASE 'foo'::text
    WHEN 'foo' THEN ARRAY['a', 'b', 'c', 'd'] || enum_range(NULL::casetestenum)::text[]
    ELSE ARRAY['x', 'y']
    END;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


ROLLBACK;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


--
-- Clean up
--

DROP TABLE CASE_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

DROP TABLE CASE2_TBL;
RESULT: [duckdb: SAME, mysql: SAME]


=========================================
Summary for test case case/test.sql of postgres
=========================================

=================
Results for duckdb
SAME: 64 queries, which is 92.75%
DIFFERENT: 0 queries, which is 0.00%
ERROR: 5 queries, which is 7.25%

=================
Results for mysql
SAME: 60 queries, which is 86.96%
DIFFERENT: 1 queries, which is 1.45%
ERROR: 8 queries, which is 11.59%
