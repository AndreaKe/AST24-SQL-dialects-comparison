Guest DBMS identified: postgres
-----------
QUERY:
--
-- Create access method tests
--

-- Make gist2 over gisthandler. In fact, it would be a synonym to gist.
CREATE ACCESS METHOD gist2 TYPE INDEX HANDLER gisthandler;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Verify return type checks for handlers
CREATE ACCESS METHOD bogus TYPE INDEX HANDLER int4in;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

CREATE ACCESS METHOD bogus TYPE INDEX HANDLER heap_tableam_handler;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:



-- Try to create gist2 index on fast_emp4000: fail because opclass doesn/* REPLACED */ ''t exist
CREATE INDEX grect2ind2 ON fast_emp4000 USING gist2 (home_base);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Make operator class for boxes using gist2
CREATE OPERATOR CLASS box_ops DEFAULT
	FOR TYPE box USING gist2 AS
	OPERATOR 1	<<,
	OPERATOR 2	&<,
	OPERATOR 3	&&,
	OPERATOR 4	&>,
	OPERATOR 5	>>,
	OPERATOR 6	~=,
	OPERATOR 7	@>,
	OPERATOR 8	<@,
	OPERATOR 9	&<|,
	OPERATOR 10	<<|,
	OPERATOR 11	|>>,
	OPERATOR 12	|&>,
	FUNCTION 1	gist_box_consistent(internal, box, smallint, oid, internal),
	FUNCTION 2	gist_box_union(internal, internal),
	-- don/* REPLACED */ ''t need compress, decompress, or fetch functions
	FUNCTION 5	gist_box_penalty(internal, internal, internal),
	FUNCTION 6	gist_box_picksplit(internal, internal),
	FUNCTION 7	gist_box_same(box, box, internal);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Create gist2 index on fast_emp4000
CREATE INDEX grect2ind2 ON fast_emp4000 USING gist2 (home_base);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Now check the results from plain indexscan /* REPLACED */ , temporarily drop existing
-- index grect2ind to ensure it doesn/* REPLACED */ ''t capture the plan
BEGIN;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

DROP INDEX grect2ind;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SET enable_seqscan = OFF;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SET enable_indexscan = ON;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SET enable_bitmapscan = OFF;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT * FROM fast_emp4000
    WHERE home_base <@ '(200,200),(2000,1000)'::box
    ORDER BY (home_base[0])[0];
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM fast_emp4000
    WHERE home_base <@ '(200,200),(2000,1000)'::box
    ORDER BY (home_base[0])[0];
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM fast_emp4000 WHERE home_base && '(1000,1000,0,0)'::box;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT count(*) FROM fast_emp4000 WHERE home_base && '(1000,1000,0,0)'::box;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM fast_emp4000 WHERE home_base IS NULL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT count(*) FROM fast_emp4000 WHERE home_base IS NULL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


ROLLBACK;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Try to drop access method: fail because of dependent objects
DROP ACCESS METHOD gist2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Drop access method cascade
-- To prevent a (rare) deadlock against autovacuum,
-- we must lock the table that owns the index that will be dropped
BEGIN;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

LOCK TABLE fast_emp4000;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

DROP ACCESS METHOD gist2 CASCADE;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

COMMIT;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:



--
-- Test table access methods
--

-- prevent empty values
SET default_table_access_method = '';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- prevent nonexistent values
SET default_table_access_method = 'I do not exist AM';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- prevent setting it to an index AM
SET default_table_access_method = 'btree';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:



-- Create a heap2 table am handler with heapam handler
CREATE ACCESS METHOD heap2 TYPE TABLE HANDLER heap_tableam_handler;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Verify return type checks for handlers
CREATE ACCESS METHOD bogus TYPE TABLE HANDLER int4in;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

CREATE ACCESS METHOD bogus TYPE TABLE HANDLER bthandler;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT amname, amhandler, amtype FROM pg_am where amtype = 't' ORDER BY 1, 2;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:



-- First create tables employing the new AM using USING

-- plain CREATE TABLE
CREATE TABLE tableam_tbl_heap2(f1 int) USING heap2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

INSERT INTO tableam_tbl_heap2 VALUES(1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT f1 FROM tableam_tbl_heap2 ORDER BY f1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- CREATE TABLE AS
CREATE TABLE tableam_tblas_heap2 USING heap2 AS SELECT * FROM tableam_tbl_heap2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT f1 FROM tableam_tbl_heap2 ORDER BY f1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- SELECT INTO doesn/* REPLACED */ ''t support USING
SELECT INTO tableam_tblselectinto_heap2 USING heap2 FROM tableam_tbl_heap2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- CREATE VIEW doesn/* REPLACED */ ''t support USING
CREATE VIEW tableam_view_heap2 USING heap2 AS SELECT * FROM tableam_tbl_heap2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- CREATE SEQUENCE doesn/* REPLACED */ ''t support USING
CREATE SEQUENCE tableam_seq_heap2 USING heap2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- CREATE MATERIALIZED VIEW does support USING
CREATE MATERIALIZED VIEW tableam_tblmv_heap2 USING heap2 AS SELECT * FROM tableam_tbl_heap2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT f1 FROM tableam_tblmv_heap2 ORDER BY f1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- CREATE TABLE ..  PARTITION BY doesn/* REPLACED */ ''t not support USING
CREATE TABLE tableam_parted_heap2 (a text, b int) PARTITION BY list (a) USING heap2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


CREATE TABLE tableam_parted_heap2 (a text, b int) PARTITION BY list (a);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- new partitions will inherit from the current default, rather the partition root
SET default_table_access_method = 'heap';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

CREATE TABLE tableam_parted_a_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('a');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SET default_table_access_method = 'heap2';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

CREATE TABLE tableam_parted_b_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('b');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

RESET default_table_access_method;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- but the method can be explicitly specified
CREATE TABLE tableam_parted_c_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('c') USING heap;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

CREATE TABLE tableam_parted_d_heap2 PARTITION OF tableam_parted_heap2 FOR VALUES IN ('d') USING heap2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- List all objects in AM
SELECT
    pc.relkind,
    pa.amname,
    CASE WHEN relkind = 't' THEN
        (SELECT 'toast for ' || relname::regclass FROM pg_class pcm WHERE pcm.reltoastrelid = pc.oid)
    ELSE
        relname::regclass::text
    END COLLATE "C" AS relname
FROM pg_class AS pc,
    pg_am AS pa
WHERE pa.oid = pc.relam
   AND pa.amname = 'heap2'
ORDER BY 3, 1, 2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Show dependencies onto AM - there shouldn/* REPLACED */ ''t be any for toast
SELECT pg_describe_object(classid,objid,objsubid) AS obj
FROM pg_depend, pg_am
WHERE pg_depend.refclassid = 'pg_am'::regclass
    AND pg_am.oid = pg_depend.refobjid
    AND pg_am.amname = 'heap2'
ORDER BY classid, objid, objsubid;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- ALTER TABLE SET ACCESS METHOD
CREATE TABLE heaptable USING heap AS
  SELECT a, repeat(a::text, 100) FROM generate_series(1,9) AS a;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT amname FROM pg_class c, pg_am am
  WHERE c.relam = am.oid AND c.oid = 'heaptable'::regclass;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- Switching to heap2 adds new dependency entry to the AM.
ALTER TABLE heaptable SET ACCESS METHOD heap2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT pg_describe_object(classid, objid, objsubid) as obj,
       pg_describe_object(refclassid, refobjid, refobjsubid) as objref,
       deptype
  FROM pg_depend
  WHERE classid = 'pg_class'::regclass AND
        objid = 'heaptable'::regclass
  ORDER BY 1, 2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- Switching to heap should not have a dependency entry to the AM.
ALTER TABLE heaptable SET ACCESS METHOD heap;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT pg_describe_object(classid, objid, objsubid) as obj,
       pg_describe_object(refclassid, refobjid, refobjsubid) as objref,
       deptype
  FROM pg_depend
  WHERE classid = 'pg_class'::regclass AND
        objid = 'heaptable'::regclass
  ORDER BY 1, 2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

ALTER TABLE heaptable SET ACCESS METHOD heap2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT amname FROM pg_class c, pg_am am
  WHERE c.relam = am.oid AND c.oid = 'heaptable'::regclass;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT COUNT(a), COUNT(1) FILTER(WHERE a=1) FROM heaptable;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- DEFAULT access method
BEGIN;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SET LOCAL default_table_access_method TO heap2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

ALTER TABLE heaptable SET ACCESS METHOD DEFAULT;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT amname FROM pg_class c, pg_am am
  WHERE c.relam = am.oid AND c.oid = 'heaptable'::regclass;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SET LOCAL default_table_access_method TO heap;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

ALTER TABLE heaptable SET ACCESS METHOD DEFAULT;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT amname FROM pg_class c, pg_am am
  WHERE c.relam = am.oid AND c.oid = 'heaptable'::regclass;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

ROLLBACK;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- ALTER MATERIALIZED VIEW SET ACCESS METHOD
CREATE MATERIALIZED VIEW heapmv USING heap AS SELECT * FROM heaptable;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT amname FROM pg_class c, pg_am am
  WHERE c.relam = am.oid AND c.oid = 'heapmv'::regclass;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

ALTER MATERIALIZED VIEW heapmv SET ACCESS METHOD heap2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT amname FROM pg_class c, pg_am am
  WHERE c.relam = am.oid AND c.oid = 'heapmv'::regclass;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT COUNT(a), COUNT(1) FILTER(WHERE a=1) FROM heapmv;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- No support for multiple subcommands
ALTER TABLE heaptable SET ACCESS METHOD heap, SET ACCESS METHOD heap2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

ALTER TABLE heaptable SET ACCESS METHOD DEFAULT, SET ACCESS METHOD heap2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

ALTER MATERIALIZED VIEW heapmv SET ACCESS METHOD heap, SET ACCESS METHOD heap2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

DROP MATERIALIZED VIEW heapmv;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

DROP TABLE heaptable;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- No support for partitioned tables.
CREATE TABLE am_partitioned(x INT, y INT)
  PARTITION BY hash (x);
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

ALTER TABLE am_partitioned SET ACCESS METHOD heap2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

DROP TABLE am_partitioned;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:


-- Second, create objects in the new AM by changing the default AM
BEGIN;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SET LOCAL default_table_access_method = 'heap2';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- following tests should all respect the default AM
CREATE TABLE tableam_tbl_heapx(f1 int);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

CREATE TABLE tableam_tblas_heapx AS SELECT * FROM tableam_tbl_heapx;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT INTO tableam_tblselectinto_heapx FROM tableam_tbl_heapx;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

CREATE MATERIALIZED VIEW tableam_tblmv_heapx USING heap2 AS SELECT * FROM tableam_tbl_heapx;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

CREATE TABLE tableam_parted_heapx (a text, b int) PARTITION BY list (a);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

CREATE TABLE tableam_parted_1_heapx PARTITION OF tableam_parted_heapx FOR VALUES IN ('a', 'b');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- but an explicitly set AM overrides it
CREATE TABLE tableam_parted_2_heapx PARTITION OF tableam_parted_heapx FOR VALUES IN ('c', 'd') USING heap;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- sequences, views and foreign servers shouldn/* REPLACED */ ''t have an AM
CREATE VIEW tableam_view_heapx AS SELECT * FROM tableam_tbl_heapx;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

CREATE SEQUENCE tableam_seq_heapx;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

CREATE FOREIGN DATA WRAPPER fdw_heap2 VALIDATOR postgresql_fdw_validator;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

CREATE SERVER fs_heap2 FOREIGN DATA WRAPPER fdw_heap2 ;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

CREATE FOREIGN table tableam_fdw_heapx () SERVER fs_heap2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Verify that new AM was used for tables, matviews, but not for sequences, views and fdws
SELECT
    pc.relkind,
    pa.amname,
    CASE WHEN relkind = 't' THEN
        (SELECT 'toast for ' || relname::regclass FROM pg_class pcm WHERE pcm.reltoastrelid = pc.oid)
    ELSE
        relname::regclass::text
    END COLLATE "C" AS relname
FROM pg_class AS pc
    LEFT JOIN pg_am AS pa ON (pa.oid = pc.relam)
WHERE pc.relname LIKE 'tableam_%_heapx'
ORDER BY 3, 1, 2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- don/* REPLACED */ ''t want to keep those tables, nor the default
ROLLBACK;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Third, check that we can neither create a table using a nonexistent
-- AM, nor using an index AM
CREATE TABLE i_am_a_failure() USING "";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

CREATE TABLE i_am_a_failure() USING i_do_not_exist_am;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

CREATE TABLE i_am_a_failure() USING "I do not exist AM";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

CREATE TABLE i_am_a_failure() USING "btree";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Drop table access method, which fails as objects depends on it
DROP ACCESS METHOD heap2;
RESULT: [duckdb: SAME, mysql: SAME]
=========================================
Summary for test case create_am/test.sql of postgres
=========================================

=================
Results for duckdb
SAME: 34 queries, which is 33.33%
DIFFERENT: 1 queries, which is 0.98%
ERROR: 67 queries, which is 65.69%

=================
Results for mysql
SAME: 35 queries, which is 34.31%
DIFFERENT: 0 queries, which is 0.00%
ERROR: 67 queries, which is 65.69%
