
-----------
QUERY:
--
-- Enum tests
--

CREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');
RESULT:
	[]

-----------
QUERY:


--
-- Did it create the right number of rows?
--
SELECT COUNT(*) FROM pg_enum WHERE enumtypid = 'rainbow'::regtype;
RESULT:
	[(6,)]

-----------
QUERY:


--
-- I/O functions
--
SELECT 'red'::rainbow;
RESULT:
	[('red',)]

-----------
QUERY:

SELECT 'mauve'::rainbow;
RESULT:
	ERROR - invalid input value for enum rainbow: "mauve"
LINE 2: SELECT 'mauve'::rainbow;
               ^


-----------
QUERY:


-- Also try it with non-error-throwing API
SELECT pg_input_is_valid('red', 'rainbow');
RESULT:
	[(True,)]

-----------
QUERY:

SELECT pg_input_is_valid('mauve', 'rainbow');
RESULT:
	[(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('mauve', 'rainbow');
RESULT:
	[('invalid input value for enum rainbow: "mauve"', None, None, '22P02')]

-----------
QUERY:

-- \x
SELECT * FROM pg_input_error_info(repeat('too_long', 32), 'rainbow');
RESULT:
	[('invalid input value for enum rainbow: "too_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_longtoo_long"', None, None, '22P02')]

-----------
QUERY:

-- \x

--
-- adding new values
--

CREATE TYPE planets AS ENUM ( 'venus', 'earth', 'mars' );
RESULT:
	[]

-----------
QUERY:


SELECT enumlabel, enumsortorder
FROM pg_enum
WHERE enumtypid = 'planets'::regtype
ORDER BY 2;
RESULT:
	[('venus', 1.0), ('earth', 2.0), ('mars', 3.0)]

-----------
QUERY:


ALTER TYPE planets ADD VALUE 'uranus';
RESULT:
	[]

-----------
QUERY:


SELECT enumlabel, enumsortorder
FROM pg_enum
WHERE enumtypid = 'planets'::regtype
ORDER BY 2;
RESULT:
	[('venus', 1.0), ('earth', 2.0), ('mars', 3.0), ('uranus', 4.0)]

-----------
QUERY:


ALTER TYPE planets ADD VALUE 'mercury' BEFORE 'venus';
RESULT:
	[]

-----------
QUERY:

ALTER TYPE planets ADD VALUE 'saturn' BEFORE 'uranus';
RESULT:
	[]

-----------
QUERY:

ALTER TYPE planets ADD VALUE 'jupiter' AFTER 'mars';
RESULT:
	[]

-----------
QUERY:

ALTER TYPE planets ADD VALUE 'neptune' AFTER 'uranus';
RESULT:
	[]

-----------
QUERY:


SELECT enumlabel, enumsortorder
FROM pg_enum
WHERE enumtypid = 'planets'::regtype
ORDER BY 2;
RESULT:
	[('mercury', 0.0), ('venus', 1.0), ('earth', 2.0), ('mars', 3.0), ('jupiter', 3.25), ('saturn', 3.5), ('uranus', 4.0), ('neptune', 5.0)]

-----------
QUERY:


SELECT enumlabel, enumsortorder
FROM pg_enum
WHERE enumtypid = 'planets'::regtype
ORDER BY enumlabel::planets;
RESULT:
	[('mercury', 0.0), ('venus', 1.0), ('earth', 2.0), ('mars', 3.0), ('jupiter', 3.25), ('saturn', 3.5), ('uranus', 4.0), ('neptune', 5.0)]

-----------
QUERY:


-- errors for adding labels
ALTER TYPE planets ADD VALUE
  'plutoplutoplutoplutoplutoplutoplutoplutoplutoplutoplutoplutoplutopluto';
RESULT:
	ERROR - invalid enum label "plutoplutoplutoplutoplutoplutoplutoplutoplutoplutoplutoplutoplutopluto"
DETAIL:  Labels must be 63 bytes or less.


-----------
QUERY:


ALTER TYPE planets ADD VALUE 'pluto' AFTER 'zeus';
RESULT:
	ERROR - "zeus" is not an existing enum label


-----------
QUERY:


-- if not exists tests

--  existing value gives error
ALTER TYPE planets ADD VALUE 'mercury';
RESULT:
	ERROR - enum label "mercury" already exists


-----------
QUERY:


-- unless IF NOT EXISTS is specified
ALTER TYPE planets ADD VALUE IF NOT EXISTS 'mercury';
RESULT:
	[]

-----------
QUERY:


-- should be neptune, not mercury
SELECT enum_last(NULL::planets);
RESULT:
	[('neptune',)]

-----------
QUERY:


ALTER TYPE planets ADD VALUE IF NOT EXISTS 'pluto';
RESULT:
	[]

-----------
QUERY:


-- should be pluto, i.e. the new value
SELECT enum_last(NULL::planets);
RESULT:
	[('pluto',)]

-----------
QUERY:


--
-- Test inserting so many values that we have to renumber
--

create type insenum as enum ('L1', 'L2');
RESULT:
	[]

-----------
QUERY:


alter type insenum add value 'i1' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i2' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i3' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i4' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i5' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i6' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i7' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i8' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i9' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i10' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i11' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i12' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i13' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i14' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i15' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i16' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i17' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i18' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i19' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i20' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i21' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i22' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i23' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i24' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i25' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i26' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i27' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i28' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i29' before 'L2';
RESULT:
	[]

-----------
QUERY:

alter type insenum add value 'i30' before 'L2';
RESULT:
	[]

-----------
QUERY:


-- The exact values of enumsortorder will now depend on the local properties
-- of float4, but in any reasonable implementation we should get at least
-- 20 splits before having to renumber /* REPLACED */ , so only hide values > 20.

SELECT enumlabel,
       case when enumsortorder > 20 then null else enumsortorder end as so
FROM pg_enum
WHERE enumtypid = 'insenum'::regtype
ORDER BY enumsortorder;
RESULT:
	[('L1', 1.0), ('i1', 2.0), ('i2', 3.0), ('i3', 4.0), ('i4', 5.0), ('i5', 6.0), ('i6', 7.0), ('i7', 8.0), ('i8', 9.0), ('i9', 10.0), ('i10', 11.0), ('i11', 12.0), ('i12', 13.0), ('i13', 14.0), ('i14', 15.0), ('i15', 16.0), ('i16', 17.0), ('i17', 18.0), ('i18', 19.0), ('i19', 20.0), ('i20', None), ('i21', None), ('i22', None), ('i23', None), ('i24', None), ('i25', None), ('i26', None), ('i27', None), ('i28', None), ('i29', None), ('i30', None), ('L2', None)]

-----------
QUERY:


--
-- Basic table creation, row selection
--
CREATE TABLE enumtest (col rainbow);
RESULT:
	[]

-----------
QUERY:

INSERT INTO enumtest values ('red'), ('orange'), ('yellow'), ('green');
RESULT:
	[]

-----------
QUERY:

COPY enumtest FROM stdin;
RESULT:
	ERROR - function missing required argument 'table' (pos 2)

-----------
QUERY:

blue
purple
-- \.
SELECT * FROM enumtest;
RESULT:
	ERROR - syntax error at or near "blue"
LINE 2: blue
        ^


-----------
QUERY:


--
-- Operators, no index
--
SELECT * FROM enumtest WHERE col = 'orange';
RESULT:
	[('orange',)]

-----------
QUERY:

SELECT * FROM enumtest WHERE col <> 'orange' ORDER BY col;
RESULT:
	[('red',), ('yellow',), ('green',)]

-----------
QUERY:

SELECT * FROM enumtest WHERE col > 'yellow' ORDER BY col;
RESULT:
	[('green',)]

-----------
QUERY:

SELECT * FROM enumtest WHERE col >= 'yellow' ORDER BY col;
RESULT:
	[('yellow',), ('green',)]

-----------
QUERY:

SELECT * FROM enumtest WHERE col < 'green' ORDER BY col;
RESULT:
	[('red',), ('orange',), ('yellow',)]

-----------
QUERY:

SELECT * FROM enumtest WHERE col <= 'green' ORDER BY col;
RESULT:
	[('red',), ('orange',), ('yellow',), ('green',)]

-----------
QUERY:


--
-- Cast to/from text
--
SELECT 'red'::rainbow::text || 'hithere';
RESULT:
	[('redhithere',)]

-----------
QUERY:

SELECT 'red'::text::rainbow = 'red'::rainbow;
RESULT:
	[(True,)]

-----------
QUERY:


--
-- Aggregates
--
SELECT min(col) FROM enumtest;
RESULT:
	[('red',)]

-----------
QUERY:

SELECT max(col) FROM enumtest;
RESULT:
	[('green',)]

-----------
QUERY:

SELECT max(col) FROM enumtest WHERE col < 'green';
RESULT:
	[('yellow',)]

-----------
QUERY:


--
-- Index tests, force use of index
--
SET enable_seqscan = off;
RESULT:
	[]

-----------
QUERY:

SET enable_bitmapscan = off;
RESULT:
	[]

-----------
QUERY:


--
-- Btree index / opclass with the various operators
--
CREATE UNIQUE INDEX enumtest_btree ON enumtest USING btree (col);
RESULT:
	[]

-----------
QUERY:

SELECT * FROM enumtest WHERE col = 'orange';
RESULT:
	[('orange',)]

-----------
QUERY:

SELECT * FROM enumtest WHERE col <> 'orange' ORDER BY col;
RESULT:
	[('red',), ('yellow',), ('green',)]

-----------
QUERY:

SELECT * FROM enumtest WHERE col > 'yellow' ORDER BY col;
RESULT:
	[('green',)]

-----------
QUERY:

SELECT * FROM enumtest WHERE col >= 'yellow' ORDER BY col;
RESULT:
	[('yellow',), ('green',)]

-----------
QUERY:

SELECT * FROM enumtest WHERE col < 'green' ORDER BY col;
RESULT:
	[('red',), ('orange',), ('yellow',)]

-----------
QUERY:

SELECT * FROM enumtest WHERE col <= 'green' ORDER BY col;
RESULT:
	[('red',), ('orange',), ('yellow',), ('green',)]

-----------
QUERY:

SELECT min(col) FROM enumtest;
RESULT:
	[('red',)]

-----------
QUERY:

SELECT max(col) FROM enumtest;
RESULT:
	[('green',)]

-----------
QUERY:

SELECT max(col) FROM enumtest WHERE col < 'green';
RESULT:
	[('yellow',)]

-----------
QUERY:

DROP INDEX enumtest_btree;
RESULT:
	[]

-----------
QUERY:


--
-- Hash index / opclass with the = operator
--
CREATE INDEX enumtest_hash ON enumtest USING hash (col);
RESULT:
	[]

-----------
QUERY:

SELECT * FROM enumtest WHERE col = 'orange';
RESULT:
	[('orange',)]

-----------
QUERY:

DROP INDEX enumtest_hash;
RESULT:
	[]

-----------
QUERY:


--
-- End index tests
--
RESET enable_seqscan;
RESULT:
	[]

-----------
QUERY:

RESET enable_bitmapscan;
RESULT:
	[]

-----------
QUERY:


--
-- Domains over enums
--
CREATE DOMAIN rgb AS rainbow CHECK (VALUE IN ('red', 'green', 'blue'));
RESULT:
	[]

-----------
QUERY:

SELECT 'red'::rgb;
RESULT:
	[('red',)]

-----------
QUERY:

SELECT 'purple'::rgb;
RESULT:
	ERROR - value for domain rgb violates check constraint "rgb_check"


-----------
QUERY:

SELECT 'purple'::rainbow::rgb;
RESULT:
	ERROR - value for domain rgb violates check constraint "rgb_check"


-----------
QUERY:

DROP DOMAIN rgb;
RESULT:
	[]

-----------
QUERY:


--
-- Arrays
--
SELECT '{red,green,blue}'::rainbow[];
RESULT:
	[('{red,green,blue}',)]

-----------
QUERY:

SELECT ('{red,green,blue}'::rainbow[])[2];
RESULT:
	[('green',)]

-----------
QUERY:

SELECT 'red' = ANY ('{red,green,blue}'::rainbow[]);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT 'yellow' = ANY ('{red,green,blue}'::rainbow[]);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT 'red' = ALL ('{red,green,blue}'::rainbow[]);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT 'red' = ALL ('{red,red}'::rainbow[]);
RESULT:
	[(True,)]

-----------
QUERY:


--
-- Support functions
--
SELECT enum_first(NULL::rainbow);
RESULT:
	[('red',)]

-----------
QUERY:

SELECT enum_last('green'::rainbow);
RESULT:
	[('purple',)]

-----------
QUERY:

SELECT enum_range(NULL::rainbow);
RESULT:
	[('{red,orange,yellow,green,blue,purple}',)]

-----------
QUERY:

SELECT enum_range('orange'::rainbow, 'green'::rainbow);
RESULT:
	[('{orange,yellow,green}',)]

-----------
QUERY:

SELECT enum_range(NULL, 'green'::rainbow);
RESULT:
	[('{red,orange,yellow,green}',)]

-----------
QUERY:

SELECT enum_range('orange'::rainbow, NULL);
RESULT:
	[('{orange,yellow,green,blue,purple}',)]

-----------
QUERY:

SELECT enum_range(NULL::rainbow, NULL);
RESULT:
	[('{red,orange,yellow,green,blue,purple}',)]

-----------
QUERY:


--
-- User functions, can/* REPLACED */ ''t test perl/python etc here since may not be compiled.
--
CREATE FUNCTION echo_me(anyenum) RETURNS text AS $$
BEGIN
RETURN $1::text || 'omg';
END
$$ LANGUAGE plpgsql;
RESULT:
	[]

-----------
QUERY:

SELECT echo_me('red'::rainbow);
RESULT:
	[('redomg',)]

-----------
QUERY:

--
-- Concrete function should override generic one
--
CREATE FUNCTION echo_me(rainbow) RETURNS text AS $$
BEGIN
RETURN $1::text || 'wtf';
END
$$ LANGUAGE plpgsql;
RESULT:
	[]

-----------
QUERY:

SELECT echo_me('red'::rainbow);
RESULT:
	[('redwtf',)]

-----------
QUERY:

--
-- If we drop the original generic one, we don/* REPLACED */ ''t have to qualify the type
-- anymore, since there/* REPLACED */ ''s only one match
--
DROP FUNCTION echo_me(anyenum);
RESULT:
	[]

-----------
QUERY:

SELECT echo_me('red');
RESULT:
	[('redwtf',)]

-----------
QUERY:

DROP FUNCTION echo_me(rainbow);
RESULT:
	[]

-----------
QUERY:


--
-- RI triggers on enum types
--
CREATE TABLE enumtest_parent (id rainbow PRIMARY KEY);
RESULT:
	[]

-----------
QUERY:

CREATE TABLE enumtest_child (parent rainbow REFERENCES enumtest_parent);
RESULT:
	[]

-----------
QUERY:

INSERT INTO enumtest_parent VALUES ('red');
RESULT:
	[]

-----------
QUERY:

INSERT INTO enumtest_child VALUES ('red');
RESULT:
	[]

-----------
QUERY:

INSERT INTO enumtest_child VALUES ('blue');
RESULT:
	ERROR - insert or update on table "enumtest_child" violates foreign key constraint "enumtest_child_parent_fkey"
DETAIL:  Key (parent)=(blue) is not present in table "enumtest_parent".


-----------
QUERY:
  -- fail
DELETE FROM enumtest_parent;
RESULT:
	ERROR - update or delete on table "enumtest_parent" violates foreign key constraint "enumtest_child_parent_fkey" on table "enumtest_child"
DETAIL:  Key (id)=(red) is still referenced from table "enumtest_child".


-----------
QUERY:
  -- fail
--
-- cross-type RI should fail
--
CREATE TYPE bogus AS ENUM('good', 'bad', 'ugly');
RESULT:
	[]

-----------
QUERY:

CREATE TABLE enumtest_bogus_child(parent bogus REFERENCES enumtest_parent);
RESULT:
	ERROR - foreign key constraint "enumtest_bogus_child_parent_fkey" cannot be implemented
DETAIL:  Key columns "parent" and "id" are of incompatible types: bogus and rainbow.


-----------
QUERY:

DROP TYPE bogus;
RESULT:
	[]

-----------
QUERY:


-- check renaming a value
ALTER TYPE rainbow RENAME VALUE 'red' TO 'crimson';
RESULT:
	[]

-----------
QUERY:

SELECT enumlabel, enumsortorder
FROM pg_enum
WHERE enumtypid = 'rainbow'::regtype
ORDER BY 2;
RESULT:
	[('crimson', 1.0), ('orange', 2.0), ('yellow', 3.0), ('green', 4.0), ('blue', 5.0), ('purple', 6.0)]

-----------
QUERY:

-- check that renaming a non-existent value fails
ALTER TYPE rainbow RENAME VALUE 'red' TO 'crimson';
RESULT:
	ERROR - "red" is not an existing enum label


-----------
QUERY:

-- check that renaming to an existent value fails
ALTER TYPE rainbow RENAME VALUE 'blue' TO 'green';
RESULT:
	ERROR - enum label "green" already exists


-----------
QUERY:


--
-- check transactional behaviour of ALTER TYPE ... ADD VALUE
--
CREATE TYPE bogus AS ENUM('good');
RESULT:
	[]

-----------
QUERY:


-- check that we can add new values to existing enums in a transaction
-- but we can/* REPLACED */ ''t use them
BEGIN;
RESULT:
	[]

-----------
QUERY:

ALTER TYPE bogus ADD VALUE 'new';
RESULT:
	[]

-----------
QUERY:

SAVEPOINT x;
RESULT:
	[]

-----------
QUERY:

SELECT 'new'::bogus;
RESULT:
	ERROR - unsafe use of new value "new" of enum type bogus
LINE 2: SELECT 'new'::bogus;
               ^
HINT:  New enum values must be committed before they can be used.


-----------
QUERY:
  -- unsafe
ROLLBACK TO x;
RESULT:
	[]

-----------
QUERY:

SELECT enum_first(null::bogus);
RESULT:
	[('good',)]

-----------
QUERY:
  -- safe
SELECT enum_last(null::bogus);
RESULT:
	ERROR - unsafe use of new value "new" of enum type bogus
HINT:  New enum values must be committed before they can be used.


-----------
QUERY:
  -- unsafe
ROLLBACK TO x;
RESULT:
	[]

-----------
QUERY:

SELECT enum_range(null::bogus);
RESULT:
	ERROR - unsafe use of new value "new" of enum type bogus
HINT:  New enum values must be committed before they can be used.


-----------
QUERY:
  -- unsafe
ROLLBACK TO x;
RESULT:
	[]

-----------
QUERY:

COMMIT;
RESULT:
	[]

-----------
QUERY:

SELECT 'new'::bogus;
RESULT:
	[('new',)]

-----------
QUERY:
  -- now safe
SELECT enumlabel, enumsortorder
FROM pg_enum
WHERE enumtypid = 'bogus'::regtype
ORDER BY 2;
RESULT:
	[('good', 1.0), ('new', 2.0)]

-----------
QUERY:


-- check that we recognize the case where the enum already existed but was
-- modified in the current txn /* REPLACED */ , this should not be considered safe
BEGIN;
RESULT:
	[]

-----------
QUERY:

ALTER TYPE bogus RENAME TO bogon;
RESULT:
	[]

-----------
QUERY:

ALTER TYPE bogon ADD VALUE 'bad';
RESULT:
	[]

-----------
QUERY:

SELECT 'bad'::bogon;
RESULT:
	ERROR - unsafe use of new value "bad" of enum type bogon
LINE 2: SELECT 'bad'::bogon;
               ^
HINT:  New enum values must be committed before they can be used.


-----------
QUERY:

ROLLBACK;
RESULT:
	[]

-----------
QUERY:


-- but a renamed value is safe to use later in same transaction
BEGIN;
RESULT:
	[]

-----------
QUERY:

ALTER TYPE bogus RENAME VALUE 'good' to 'bad';
RESULT:
	[]

-----------
QUERY:

SELECT 'bad'::bogus;
RESULT:
	[('bad',)]

-----------
QUERY:

ROLLBACK;
RESULT:
	[]

-----------
QUERY:


DROP TYPE bogus;
RESULT:
	[]

-----------
QUERY:


-- check that values created during CREATE TYPE can be used in any case
BEGIN;
RESULT:
	[]

-----------
QUERY:

CREATE TYPE bogus AS ENUM('good','bad','ugly');
RESULT:
	[]

-----------
QUERY:

ALTER TYPE bogus RENAME TO bogon;
RESULT:
	[]

-----------
QUERY:

select enum_range(null::bogon);
RESULT:
	[('{good,bad,ugly}',)]

-----------
QUERY:

ROLLBACK;
RESULT:
	[]

-----------
QUERY:


-- ideally, we/* REPLACED */ ''d allow this usage /* REPLACED */ , but it requires keeping track of whether
-- the enum type was created in the current transaction, which is expensive
BEGIN;
RESULT:
	[]

-----------
QUERY:

CREATE TYPE bogus AS ENUM('good');
RESULT:
	[]

-----------
QUERY:

ALTER TYPE bogus RENAME TO bogon;
RESULT:
	[]

-----------
QUERY:

ALTER TYPE bogon ADD VALUE 'bad';
RESULT:
	[]

-----------
QUERY:

ALTER TYPE bogon ADD VALUE 'ugly';
RESULT:
	[]

-----------
QUERY:

select enum_range(null::bogon);
RESULT:
	ERROR - unsafe use of new value "bad" of enum type bogon
HINT:  New enum values must be committed before they can be used.


-----------
QUERY:
  -- fails
ROLLBACK;
RESULT:
	[]

-----------
QUERY:


--
-- Cleanup
--
DROP TABLE enumtest_child;
RESULT:
	[]

-----------
QUERY:

DROP TABLE enumtest_parent;
RESULT:
	[]

-----------
QUERY:

DROP TABLE enumtest;
RESULT:
	[]

-----------
QUERY:

DROP TYPE rainbow;
RESULT:
	[]

-----------
QUERY:


--
-- Verify properly cleaned up
--
SELECT COUNT(*) FROM pg_type WHERE typname = 'rainbow';
RESULT:
	[(0,)]

-----------
QUERY:

SELECT * FROM pg_enum WHERE NOT EXISTS
  (SELECT 1 FROM pg_type WHERE pg_type.oid = enumtypid);
RESULT:
	[]
