
-----------
QUERY:
--
-- expression evaluation tests that don/* REPLACED */ ''t fit into a more specific file
--

--
-- Tests for SQLValueFunction
--


-- current_date  (always matches because of transactional behaviour)
SELECT date(now())::text = current_date::text;
RESULT:
	ERROR - Catalog Error: Scalar Function with name date does not exist!
Did you mean "age"?

-----------
QUERY:



-- current_time / localtime
SELECT now()::timetz::text = current_time::text;
RESULT:
	[(False,)]

-----------
QUERY:

SELECT now()::timetz(4)::text = current_time(4)::text;
RESULT:
	ERROR - Parser Error: Type TIME WITH TIME ZONE does not support any modifiers!

-----------
QUERY:

SELECT now()::time::text = localtime::text;
RESULT:
	ERROR - Conversion Error: Unimplemented type for cast (TIMESTAMP WITH TIME ZONE -> TIME)

-----------
QUERY:

SELECT now()::time(3)::text = localtime(3)::text;
RESULT:
	ERROR - Parser Error: Type TIME does not support any modifiers!

-----------
QUERY:


-- current_time[stamp]/ localtime[stamp] (always matches because of transactional behaviour)
SELECT current_timestamp = NOW();
RESULT:
	[(True,)]

-----------
QUERY:

-- precision
SELECT length(current_timestamp::text) >= length(current_timestamp(0)::text);
RESULT:
	ERROR - Catalog Error: Scalar Function with name current_timestamp does not exist!
Did you mean "get_current_timestamp"?

-----------
QUERY:

-- localtimestamp
SELECT now()::timestamp::text = localtimestamp::text;
RESULT:
	[(True,)]

-----------
QUERY:

-- precision overflow
SELECT current_time = current_time(7);
RESULT:
	ERROR - Catalog Error: Scalar Function with name current_time does not exist!
Did you mean "current_date"?

-----------
QUERY:

SELECT current_timestamp = current_timestamp(7);
RESULT:
	ERROR - Catalog Error: Scalar Function with name current_timestamp does not exist!
Did you mean "get_current_timestamp"?

-----------
QUERY:

SELECT localtime = localtime(7);
RESULT:
	ERROR - Catalog Error: Scalar Function with name localtime does not exist!
Did you mean "lcase"?

-----------
QUERY:

SELECT localtimestamp = localtimestamp(7);
RESULT:
	ERROR - Catalog Error: Scalar Function with name localtimestamp does not exist!
Did you mean "to_timestamp"?

-----------
QUERY:


-- current_role/user/user is tested in rolenames.sql

-- current database / catalog
SELECT current_catalog = current_database();
RESULT:
	[(True,)]

-----------
QUERY:


-- current_schema
SELECT current_schema;
RESULT:
	[('main',)]

-----------
QUERY:

SET search_path = 'notme';
RESULT:
	ERROR - Catalog Error: SET search_path: No catalog + schema named "notme" found.

-----------
QUERY:

SELECT current_schema;
RESULT:
	[('main',)]

-----------
QUERY:

SET search_path = 'pg_catalog';
RESULT:
	[]

-----------
QUERY:

SELECT current_schema;
RESULT:
	ERROR - Binder Error: Maximum recursion depth exceeded (Maximum: 128) while binding "current_schema()"

-----------
QUERY:

RESET search_path;
RESULT:
	[]

-----------
QUERY:



--
-- Test parsing of a no-op cast to a type with unspecified typmod
--
begin;
RESULT:
	[]

-----------
QUERY:


create table numeric_tbl (f1 numeric(18,3), f2 numeric);
RESULT:
	[]

-----------
QUERY:


create view numeric_view as
  select
    f1, f1::numeric(16,4) as f1164, f1::numeric as f1n,
    f2, f2::numeric(16,4) as f2164, f2::numeric as f2n
  from numeric_tbl;
RESULT:
	[]

-----------
QUERY:


-- \d+ numeric_view

explain (verbose, costs off) select * from numeric_view;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: verbose

-----------
QUERY:


-- bpchar, lacking planner support for its length coercion function,
-- could behave differently

create table bpchar_tbl (f1 character(16) unique, f2 bpchar);
RESULT:
	[]

-----------
QUERY:


create view bpchar_view as
  select
    f1, f1::character(14) as f114, f1::bpchar as f1n,
    f2, f2::character(14) as f214, f2::bpchar as f2n
  from bpchar_tbl;
RESULT:
	[]

-----------
QUERY:


-- \d+ bpchar_view

explain (verbose, costs off) select * from bpchar_view
  where f1::bpchar = 'foo';
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: verbose

-----------
QUERY:


rollback;
RESULT:
	[]

-----------
QUERY:



--
-- Ordinarily, IN/NOT IN can be converted to a ScalarArrayOpExpr
-- with a suitably-chosen array type.
--
explain (verbose, costs off)
select random() IN (1, 4, 8.0);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: verbose

-----------
QUERY:

explain (verbose, costs off)
select random()::int IN (1, 4, 8.0);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: verbose

-----------
QUERY:

-- However, if there/* REPLACED */ ''s not a common supertype for the IN elements,
-- we should instead try to produce /* REPLACED */ ''x = v1 OR x = v2 OR .../* REPLACED */ ''.
-- In most cases that/* REPLACED */ ''ll fail for lack of all the requisite = operators,
-- but it can succeed sometimes.  So this should complain about lack of
-- an = operator, not about cast failure.
select '(0,0)'::point in ('(0,0,0,0)'::box, point(0,0));
RESULT:
	ERROR - Catalog Error: Type with name point does not exist!
Did you mean "int"?

-----------
QUERY:



--
-- Tests for ScalarArrayOpExpr with a hashfn
--

-- create a stable function so that the tests below are not
-- evaluated using the planner/* REPLACED */ ''s constant folding.
begin;
RESULT:
	[]

-----------
QUERY:


create function return_int_input(int) returns int as $$
begin
	return $1;
end;
$$ language plpgsql stable;
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


create function return_text_input(text) returns text as $$
begin
	return $1;
end;
$$ language plpgsql stable;
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1);
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

-----------
QUERY:

select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, null);
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

-----------
QUERY:

select return_int_input(1) in (null, null, null, null, null, null, null, null, null, null, null);
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

-----------
QUERY:

select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1, null);
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

-----------
QUERY:

select return_int_input(null::int) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1);
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

-----------
QUERY:

select return_int_input(null::int) in (10, 9, 2, 8, 3, 7, 4, 6, 5, null);
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

-----------
QUERY:

select return_text_input('a') in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j');
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_text_input does not exist!
Did you mean "exp"?

-----------
QUERY:

-- NOT IN
select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1);
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

-----------
QUERY:

select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 0);
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

-----------
QUERY:

select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 2, null);
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

-----------
QUERY:

select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1, null);
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

-----------
QUERY:

select return_int_input(1) not in (null, null, null, null, null, null, null, null, null, null, null);
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

-----------
QUERY:

select return_int_input(null::int) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1);
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

-----------
QUERY:

select return_int_input(null::int) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, null);
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

-----------
QUERY:

select return_text_input('a') not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j');
RESULT:
	ERROR - Catalog Error: Scalar Function with name return_text_input does not exist!
Did you mean "exp"?

-----------
QUERY:


rollback;
RESULT:
	[]

-----------
QUERY:


-- Test with non-strict equality function.
-- We need to create our own type for this.

begin;
RESULT:
	[]

-----------
QUERY:


create type myint;
RESULT:
	ERROR - Parser Error: syntax error at or near ";"

-----------
QUERY:

create function myintin(cstring) returns myint strict immutable language
  internal as 'int4in';
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:

create function myintout(myint) returns cstring strict immutable language
  internal as 'int4out';
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:

create function myinthash(myint) returns integer strict immutable language
  internal as 'hashint4';
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


create type myint (input = myintin, output = myintout, like = int4);
RESULT:
	ERROR - Parser Error: syntax error at or near "("

-----------
QUERY:


create cast (int4 as myint) without function;
RESULT:
	ERROR - Parser Error: syntax error at or near "cast"

-----------
QUERY:

create cast (myint as int4) without function;
RESULT:
	ERROR - Parser Error: syntax error at or near "cast"

-----------
QUERY:


create function myinteq(myint, myint) returns bool as $$
begin
  if $1 is null and $2 is null then
    return true;
  else
    return $1::int = $2::int;
  end if;
end;
$$ language plpgsql immutable;
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


create function myintne(myint, myint) returns bool as $$
begin
  return not myinteq($1, $2);
end;
$$ language plpgsql immutable;
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


create operator = (
  leftarg    = myint,
  rightarg   = myint,
  commutator = =,
  negator    = <>,
  procedure  = myinteq,
  restrict   = eqsel,
  join       = eqjoinsel,
  merges
);
RESULT:
	ERROR - Parser Error: syntax error at or near "operator"

-----------
QUERY:


create operator <> (
  leftarg    = myint,
  rightarg   = myint,
  commutator = <>,
  negator    = =,
  procedure  = myintne,
  restrict   = eqsel,
  join       = eqjoinsel,
  merges
);
RESULT:
	ERROR - Parser Error: syntax error at or near "operator"

-----------
QUERY:


create operator class myint_ops
default for type myint using hash as
  operator    1   =  (myint, myint),
  function    1   myinthash(myint);
RESULT:
	ERROR - Parser Error: syntax error at or near "operator"

-----------
QUERY:


create table inttest (a myint);
RESULT:
	ERROR - Catalog Error: Type with name myint does not exist!
Did you mean "int"?

-----------
QUERY:

insert into inttest values(1::myint),(null);
RESULT:
	ERROR - Catalog Error: Table with name inttest does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:


-- try an array with enough elements to cause hashing
select * from inttest where a in (1::myint,2::myint,3::myint,4::myint,5::myint,6::myint,7::myint,8::myint,9::myint, null);
RESULT:
	ERROR - Catalog Error: Table with name inttest does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

select * from inttest where a not in (1::myint,2::myint,3::myint,4::myint,5::myint,6::myint,7::myint,8::myint,9::myint, null);
RESULT:
	ERROR - Catalog Error: Table with name inttest does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

select * from inttest where a not in (0::myint,2::myint,3::myint,4::myint,5::myint,6::myint,7::myint,8::myint,9::myint, null);
RESULT:
	ERROR - Catalog Error: Table with name inttest does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

-- ensure the result matched with the non-hashed version.  We simply remove
-- some array elements so that we don/* REPLACED */ ''t reach the hashing threshold.
select * from inttest where a in (1::myint,2::myint,3::myint,4::myint,5::myint, null);
RESULT:
	ERROR - Catalog Error: Table with name inttest does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

select * from inttest where a not in (1::myint,2::myint,3::myint,4::myint,5::myint, null);
RESULT:
	ERROR - Catalog Error: Table with name inttest does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

select * from inttest where a not in (0::myint,2::myint,3::myint,4::myint,5::myint, null);
RESULT:
	ERROR - Catalog Error: Table with name inttest does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:


rollback;
RESULT:
	[]
