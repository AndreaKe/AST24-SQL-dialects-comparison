--
-- expression evaluation tests that don''t fit into a more specific file
--

--
-- Tests for SQLValueFunction
--


-- current_date  (always matches because of transactional behaviour)
SELECT date(now())::text = current_date::text
ERROR: --
-- expression evaluation tests that don''t fit into a more specific file
--

--
-- Tests for SQLValueFunction
--


-- current_date  (always matches because of transactional behaviour)
SELECT date(now())::text = current_date::text

Catalog Error: Scalar Function with name date does not exist!
Did you mean "age"?



-- current_time / localtime
SELECT now()::timetz::text = current_time::text
RESULT: 
	[(False,)]

SELECT now()::timetz(4)::text = current_time(4)::text
ERROR: 
SELECT now()::timetz(4)::text = current_time(4)::text

Parser Error: Type TIME WITH TIME ZONE does not support any modifiers!

SELECT now()::time::text = localtime::text
ERROR: 
SELECT now()::time::text = localtime::text

Conversion Error: Unimplemented type for cast (TIMESTAMP WITH TIME ZONE -> TIME)

SELECT now()::time(3)::text = localtime(3)::text
ERROR: 
SELECT now()::time(3)::text = localtime(3)::text

Parser Error: Type TIME does not support any modifiers!


-- current_time[stamp]/ localtime[stamp] (always matches because of transactional behaviour)
SELECT current_timestamp = NOW()
RESULT: 
	[(True,)]

-- precision
SELECT length(current_timestamp::text) >= length(current_timestamp(0)::text)
ERROR: 
-- precision
SELECT length(current_timestamp::text) >= length(current_timestamp(0)::text)

Catalog Error: Scalar Function with name current_timestamp does not exist!
Did you mean "get_current_timestamp"?

-- localtimestamp
SELECT now()::timestamp::text = localtimestamp::text
RESULT: 
	[(True,)]

-- precision overflow
SELECT current_time = current_time(7)
ERROR: 
-- precision overflow
SELECT current_time = current_time(7)

Catalog Error: Scalar Function with name current_time does not exist!
Did you mean "current_date"?

SELECT current_timestamp = current_timestamp(7)
ERROR: 
SELECT current_timestamp = current_timestamp(7)

Catalog Error: Scalar Function with name current_timestamp does not exist!
Did you mean "get_current_timestamp"?

SELECT localtime = localtime(7)
ERROR: 
SELECT localtime = localtime(7)

Catalog Error: Scalar Function with name localtime does not exist!
Did you mean "lcase"?

SELECT localtimestamp = localtimestamp(7)
ERROR: 
SELECT localtimestamp = localtimestamp(7)

Catalog Error: Scalar Function with name localtimestamp does not exist!
Did you mean "to_timestamp"?


-- current_role/user/user is tested in rolenames.sql

-- current database / catalog
SELECT current_catalog = current_database()
RESULT: 
	[(True,)]


-- current_schema
SELECT current_schema
RESULT: 
	[('main',)]

SET search_path = 'notme'
ERROR: 
SET search_path = 'notme'

Catalog Error: SET search_path: No catalog + schema named "notme" found.

SELECT current_schema
RESULT: 
	[('main',)]

SET search_path = 'pg_catalog'

SELECT current_schema
ERROR: 
SELECT current_schema

Binder Error: Maximum recursion depth exceeded (Maximum: 128) while binding "current_schema()"

RESET search_path



--
-- Test parsing of a no-op cast to a type with unspecified typmod
--
begin


create table numeric_tbl (f1 numeric(18,3), f2 numeric)


create view numeric_view as
  select
    f1, f1::numeric(16,4) as f1164, f1::numeric as f1n,
    f2, f2::numeric(16,4) as f2164, f2::numeric as f2n
  from numeric_tbl


-- \d+ numeric_view

explain (verbose, costs off) select * from numeric_view
ERROR: 

-- \d+ numeric_view

explain (verbose, costs off) select * from numeric_view

Not implemented Error: Unimplemented explain type: verbose


-- bpchar, lacking planner support for its length coercion function,
-- could behave differently

create table bpchar_tbl (f1 character(16) unique, f2 bpchar)


create view bpchar_view as
  select
    f1, f1::character(14) as f114, f1::bpchar as f1n,
    f2, f2::character(14) as f214, f2::bpchar as f2n
  from bpchar_tbl


-- \d+ bpchar_view

explain (verbose, costs off) select * from bpchar_view
  where f1::bpchar = 'foo'
ERROR: 

-- \d+ bpchar_view

explain (verbose, costs off) select * from bpchar_view
  where f1::bpchar = 'foo'

Not implemented Error: Unimplemented explain type: verbose


rollback



--
-- Ordinarily, IN/NOT IN can be converted to a ScalarArrayOpExpr
-- with a suitably-chosen array type.
--
explain (verbose, costs off)
select random() IN (1, 4, 8.0)
ERROR: 


--
-- Ordinarily, IN/NOT IN can be converted to a ScalarArrayOpExpr
-- with a suitably-chosen array type.
--
explain (verbose, costs off)
select random() IN (1, 4, 8.0)

Not implemented Error: Unimplemented explain type: verbose

explain (verbose, costs off)
select random()::int IN (1, 4, 8.0)
ERROR: 
explain (verbose, costs off)
select random()::int IN (1, 4, 8.0)

Not implemented Error: Unimplemented explain type: verbose

-- However, if there''s not a common supertype for the IN elements,
-- we should instead try to produce ''x = v1 OR x = v2 OR ...''.
-- In most cases that''ll fail for lack of all the requisite = operators,
-- but it can succeed sometimes.  So this should complain about lack of
-- an = operator, not about cast failure.
select '(0,0)'::point in ('(0,0,0,0)'::box, point(0,0))
ERROR: 
-- However, if there''s not a common supertype for the IN elements,
-- we should instead try to produce ''x = v1 OR x = v2 OR ...''.
-- In most cases that''ll fail for lack of all the requisite = operators,
-- but it can succeed sometimes.  So this should complain about lack of
-- an = operator, not about cast failure.
select '(0,0)'::point in ('(0,0,0,0)'::box, point(0,0))

Catalog Error: Type with name point does not exist!
Did you mean "int"?



--
-- Tests for ScalarArrayOpExpr with a hashfn
--

-- create a stable function so that the tests below are not
-- evaluated using the planner''s constant folding.
begin


create function return_int_input(int) returns int as $$
begin
	return $1;
end;
$$ language plpgsql stable
ERROR: 

create function return_int_input(int) returns int as $$
begin
	return $1;
end;
$$ language plpgsql stable

Parser Error: syntax error at or near "returns"


create function return_text_input(text) returns text as $$
begin
	return $1;
end;
$$ language plpgsql stable
ERROR: 

create function return_text_input(text) returns text as $$
begin
	return $1;
end;
$$ language plpgsql stable

Parser Error: syntax error at or near "returns"


select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1)
ERROR: 

select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1)

Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, null)
ERROR: 
select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, null)

Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

select return_int_input(1) in (null, null, null, null, null, null, null, null, null, null, null)
ERROR: 
select return_int_input(1) in (null, null, null, null, null, null, null, null, null, null, null)

Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1, null)
ERROR: 
select return_int_input(1) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1, null)

Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

select return_int_input(null::int) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1)
ERROR: 
select return_int_input(null::int) in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1)

Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

select return_int_input(null::int) in (10, 9, 2, 8, 3, 7, 4, 6, 5, null)
ERROR: 
select return_int_input(null::int) in (10, 9, 2, 8, 3, 7, 4, 6, 5, null)

Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

select return_text_input('a') in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
ERROR: 
select return_text_input('a') in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')

Catalog Error: Scalar Function with name return_text_input does not exist!
Did you mean "exp"?

-- NOT IN
select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1)
ERROR: 
-- NOT IN
select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1)

Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 0)
ERROR: 
select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 0)

Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 2, null)
ERROR: 
select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 2, null)

Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1, null)
ERROR: 
select return_int_input(1) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1, null)

Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

select return_int_input(1) not in (null, null, null, null, null, null, null, null, null, null, null)
ERROR: 
select return_int_input(1) not in (null, null, null, null, null, null, null, null, null, null, null)

Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

select return_int_input(null::int) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1)
ERROR: 
select return_int_input(null::int) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, 1)

Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

select return_int_input(null::int) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, null)
ERROR: 
select return_int_input(null::int) not in (10, 9, 2, 8, 3, 7, 4, 6, 5, null)

Catalog Error: Scalar Function with name return_int_input does not exist!
Did you mean "regr_intercept"?

select return_text_input('a') not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
ERROR: 
select return_text_input('a') not in ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')

Catalog Error: Scalar Function with name return_text_input does not exist!
Did you mean "exp"?


rollback


-- Test with non-strict equality function.
-- We need to create our own type for this.

begin


create type myint
ERROR: 

create type myint

Parser Error: syntax error at end of input

create function myintin(cstring) returns myint strict immutable language
  internal as 'int4in'
ERROR: 
create function myintin(cstring) returns myint strict immutable language
  internal as 'int4in'

Parser Error: syntax error at or near "returns"

create function myintout(myint) returns cstring strict immutable language
  internal as 'int4out'
ERROR: 
create function myintout(myint) returns cstring strict immutable language
  internal as 'int4out'

Parser Error: syntax error at or near "returns"

create function myinthash(myint) returns integer strict immutable language
  internal as 'hashint4'
ERROR: 
create function myinthash(myint) returns integer strict immutable language
  internal as 'hashint4'

Parser Error: syntax error at or near "returns"


create type myint (input = myintin, output = myintout, like = int4)
ERROR: 

create type myint (input = myintin, output = myintout, like = int4)

Parser Error: syntax error at or near "("


create cast (int4 as myint) without function
ERROR: 

create cast (int4 as myint) without function

Parser Error: syntax error at or near "cast"

create cast (myint as int4) without function
ERROR: 
create cast (myint as int4) without function

Parser Error: syntax error at or near "cast"


create function myinteq(myint, myint) returns bool as $$
begin
  if $1 is null and $2 is null then
    return true;
  else
    return $1::int = $2::int;
  end if;
end;
$$ language plpgsql immutable
ERROR: 

create function myinteq(myint, myint) returns bool as $$
begin
  if $1 is null and $2 is null then
    return true;
  else
    return $1::int = $2::int;
  end if;
end;
$$ language plpgsql immutable

Parser Error: syntax error at or near "returns"


create function myintne(myint, myint) returns bool as $$
begin
  return not myinteq($1, $2);
end;
$$ language plpgsql immutable
ERROR: 

create function myintne(myint, myint) returns bool as $$
begin
  return not myinteq($1, $2);
end;
$$ language plpgsql immutable

Parser Error: syntax error at or near "returns"


create operator = (
  leftarg    = myint,
  rightarg   = myint,
  commutator = =,
  negator    = <>,
  procedure  = myinteq,
  restrict   = eqsel,
  join       = eqjoinsel,
  merges
)
ERROR: 

create operator = (
  leftarg    = myint,
  rightarg   = myint,
  commutator = =,
  negator    = <>,
  procedure  = myinteq,
  restrict   = eqsel,
  join       = eqjoinsel,
  merges
)

Parser Error: syntax error at or near "operator"


create operator <> (
  leftarg    = myint,
  rightarg   = myint,
  commutator = <>,
  negator    = =,
  procedure  = myintne,
  restrict   = eqsel,
  join       = eqjoinsel,
  merges
)
ERROR: 

create operator <> (
  leftarg    = myint,
  rightarg   = myint,
  commutator = <>,
  negator    = =,
  procedure  = myintne,
  restrict   = eqsel,
  join       = eqjoinsel,
  merges
)

Parser Error: syntax error at or near "operator"


create operator class myint_ops
default for type myint using hash as
  operator    1   =  (myint, myint),
  function    1   myinthash(myint)
ERROR: 

create operator class myint_ops
default for type myint using hash as
  operator    1   =  (myint, myint),
  function    1   myinthash(myint)

Parser Error: syntax error at or near "operator"


create table inttest (a myint)
ERROR: 

create table inttest (a myint)

Catalog Error: Type with name myint does not exist!
Did you mean "int"?

insert into inttest values(1::myint),(null)
ERROR: 
insert into inttest values(1::myint),(null)

Catalog Error: Table with name inttest does not exist!
Did you mean "INT2_TBL"?


-- try an array with enough elements to cause hashing
select * from inttest where a in (1::myint,2::myint,3::myint,4::myint,5::myint,6::myint,7::myint,8::myint,9::myint, null)
ERROR: 

-- try an array with enough elements to cause hashing
select * from inttest where a in (1::myint,2::myint,3::myint,4::myint,5::myint,6::myint,7::myint,8::myint,9::myint, null)

Catalog Error: Table with name inttest does not exist!
Did you mean "INT2_TBL"?

select * from inttest where a not in (1::myint,2::myint,3::myint,4::myint,5::myint,6::myint,7::myint,8::myint,9::myint, null)
ERROR: 
select * from inttest where a not in (1::myint,2::myint,3::myint,4::myint,5::myint,6::myint,7::myint,8::myint,9::myint, null)

Catalog Error: Table with name inttest does not exist!
Did you mean "INT2_TBL"?

select * from inttest where a not in (0::myint,2::myint,3::myint,4::myint,5::myint,6::myint,7::myint,8::myint,9::myint, null)
ERROR: 
select * from inttest where a not in (0::myint,2::myint,3::myint,4::myint,5::myint,6::myint,7::myint,8::myint,9::myint, null)

Catalog Error: Table with name inttest does not exist!
Did you mean "INT2_TBL"?

-- ensure the result matched with the non-hashed version.  We simply remove
-- some array elements so that we don''t reach the hashing threshold.
select * from inttest where a in (1::myint,2::myint,3::myint,4::myint,5::myint, null)
ERROR: 
-- ensure the result matched with the non-hashed version.  We simply remove
-- some array elements so that we don''t reach the hashing threshold.
select * from inttest where a in (1::myint,2::myint,3::myint,4::myint,5::myint, null)

Catalog Error: Table with name inttest does not exist!
Did you mean "INT2_TBL"?

select * from inttest where a not in (1::myint,2::myint,3::myint,4::myint,5::myint, null)
ERROR: 
select * from inttest where a not in (1::myint,2::myint,3::myint,4::myint,5::myint, null)

Catalog Error: Table with name inttest does not exist!
Did you mean "INT2_TBL"?

select * from inttest where a not in (0::myint,2::myint,3::myint,4::myint,5::myint, null)
ERROR: 
select * from inttest where a not in (0::myint,2::myint,3::myint,4::myint,5::myint, null)

Catalog Error: Table with name inttest does not exist!
Did you mean "INT2_TBL"?


rollback


