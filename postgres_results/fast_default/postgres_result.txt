--
-- ALTER TABLE ADD COLUMN DEFAULT test
--

SET search_path = fast_default

CREATE SCHEMA fast_default

CREATE TABLE m(id OID)

INSERT INTO m VALUES (NULL::OID)


CREATE FUNCTION set(tabname name) RETURNS VOID
AS $$
BEGIN
  UPDATE m
  SET id = (SELECT c.relfilenode
            FROM pg_class AS c, pg_namespace AS s
            WHERE c.relname = tabname
                AND c.relnamespace = s.oid
                AND s.nspname = 'fast_default');
END;
$$ LANGUAGE 'plpgsql'


CREATE FUNCTION comp() RETURNS TEXT
AS $$
BEGIN
  RETURN (SELECT CASE
               WHEN m.id = c.relfilenode THEN 'Unchanged'
               ELSE 'Rewritten'
               END
           FROM m, pg_class AS c, pg_namespace AS s
           WHERE c.relname = 't'
               AND c.relnamespace = s.oid
               AND s.nspname = 'fast_default');
END;
$$ LANGUAGE 'plpgsql'


CREATE FUNCTION log_rewrite() RETURNS event_trigger
LANGUAGE plpgsql as
$func$

declare
   this_schema text
ProgrammingError: 

CREATE FUNCTION log_rewrite() RETURNS event_trigger
LANGUAGE plpgsql as
$func$

declare
   this_schema text

unterminated dollar-quoted string at or near "$func$

declare
   this_schema text
"
LINE 5: $func$
        ^


begin
    select into this_schema relnamespace::regnamespace::text
    from pg_class
    where oid = pg_event_trigger_table_rewrite_oid()
ProgrammingError: 
begin
    select into this_schema relnamespace::regnamespace::text
    from pg_class
    where oid = pg_event_trigger_table_rewrite_oid()

syntax error at or near "select"
LINE 3:     select into this_schema relnamespace::regnamespace::text
            ^


    if this_schema = 'fast_default'
    then
        RAISE NOTICE 'rewriting table % for reason %',
          pg_event_trigger_table_rewrite_oid()::regclass,
          pg_event_trigger_table_rewrite_reason()
ProgrammingError: 
    if this_schema = 'fast_default'
    then
        RAISE NOTICE 'rewriting table % for reason %',
          pg_event_trigger_table_rewrite_oid()::regclass,
          pg_event_trigger_table_rewrite_reason()

syntax error at or near "if"
LINE 2:     if this_schema = 'fast_default'
            ^


    end if
ProgrammingError: 
    end if

syntax error at or near "if"
LINE 2:     end if
                ^


end

$func$
ProgrammingError: 
$func$

unterminated dollar-quoted string at or near "$func$
"
LINE 2: $func$
        ^



CREATE TABLE has_volatile AS
SELECT * FROM generate_series(1,10) id



CREATE EVENT TRIGGER has_volatile_rewrite
                  ON table_rewrite
   EXECUTE PROCEDURE log_rewrite()
ProgrammingError: 


CREATE EVENT TRIGGER has_volatile_rewrite
                  ON table_rewrite
   EXECUTE PROCEDURE log_rewrite()

function log_rewrite() does not exist



-- only the last of these should trigger a rewrite
ALTER TABLE has_volatile ADD col1 int

ALTER TABLE has_volatile ADD col2 int DEFAULT 1

ALTER TABLE has_volatile ADD col3 timestamptz DEFAULT current_timestamp

ALTER TABLE has_volatile ADD col4 int DEFAULT (random() * 10000)::int




-- Test a large sample of different datatypes
CREATE TABLE T(pk INT NOT NULL PRIMARY KEY, c_int INT DEFAULT 1)


SELECT set('t')
RESULT: 
	[('',)]


INSERT INTO T VALUES (1), (2)


ALTER TABLE T ADD COLUMN c_bpchar BPCHAR(5) DEFAULT 'hello',
              ALTER COLUMN c_int SET DEFAULT 2


INSERT INTO T VALUES (3), (4)



ALTER TABLE T ADD COLUMN c_text TEXT  DEFAULT 'world',
              ALTER COLUMN c_bpchar SET DEFAULT 'dog'


INSERT INTO T VALUES (5), (6)


ALTER TABLE T ADD COLUMN c_date DATE DEFAULT '2016-06-02',
              ALTER COLUMN c_text SET DEFAULT 'cat'


INSERT INTO T VALUES (7), (8)


ALTER TABLE T ADD COLUMN c_timestamp TIMESTAMP DEFAULT '2016-09-01 12:00:00',
              ADD COLUMN c_timestamp_null TIMESTAMP,
              ALTER COLUMN c_date SET DEFAULT '2010-01-01'


INSERT INTO T VALUES (9), (10)


ALTER TABLE T ADD COLUMN c_array TEXT[]
                  DEFAULT '{"This", "is", "the", "real", "world"}',
              ALTER COLUMN c_timestamp SET DEFAULT '1970-12-31 11:12:13',
              ALTER COLUMN c_timestamp_null SET DEFAULT '2016-09-29 12:00:00'


INSERT INTO T VALUES (11), (12)


ALTER TABLE T ADD COLUMN c_small SMALLINT DEFAULT -5,
              ADD COLUMN c_small_null SMALLINT,
              ALTER COLUMN c_array
                  SET DEFAULT '{"This", "is", "no", "fantasy"}'


INSERT INTO T VALUES (13), (14)


ALTER TABLE T ADD COLUMN c_big BIGINT DEFAULT 180000000000018,
              ALTER COLUMN c_small SET DEFAULT 9,
              ALTER COLUMN c_small_null SET DEFAULT 13


INSERT INTO T VALUES (15), (16)


ALTER TABLE T ADD COLUMN c_num NUMERIC DEFAULT 1.00000000001,
              ALTER COLUMN c_big SET DEFAULT -9999999999999999


INSERT INTO T VALUES (17), (18)


ALTER TABLE T ADD COLUMN c_time TIME DEFAULT '12:00:00',
              ALTER COLUMN c_num SET DEFAULT 2.000000000000002


INSERT INTO T VALUES (19), (20)


ALTER TABLE T ADD COLUMN c_interval INTERVAL DEFAULT '1 day',
              ALTER COLUMN c_time SET DEFAULT '23:59:59'


INSERT INTO T VALUES (21), (22)


ALTER TABLE T ADD COLUMN c_hugetext TEXT DEFAULT repeat('abcdefg',1000),
              ALTER COLUMN c_interval SET DEFAULT '3 hours'


INSERT INTO T VALUES (23), (24)


ALTER TABLE T ALTER COLUMN c_interval DROP DEFAULT,
              ALTER COLUMN c_hugetext SET DEFAULT repeat('poiuyt', 1000)


INSERT INTO T VALUES (25), (26)


ALTER TABLE T ALTER COLUMN c_bpchar    DROP DEFAULT,
              ALTER COLUMN c_date      DROP DEFAULT,
              ALTER COLUMN c_text      DROP DEFAULT,
              ALTER COLUMN c_timestamp DROP DEFAULT,
              ALTER COLUMN c_array     DROP DEFAULT,
              ALTER COLUMN c_small     DROP DEFAULT,
              ALTER COLUMN c_big       DROP DEFAULT,
              ALTER COLUMN c_num       DROP DEFAULT,
              ALTER COLUMN c_time      DROP DEFAULT,
              ALTER COLUMN c_hugetext  DROP DEFAULT


INSERT INTO T VALUES (27), (28)


SELECT pk, c_int, c_bpchar, c_text, c_date, c_timestamp,
       c_timestamp_null, c_array, c_small, c_small_null,
       c_big, c_num, c_time, c_interval,
       c_hugetext = repeat('abcdefg',1000) as c_hugetext_origdef,
       c_hugetext = repeat('poiuyt', 1000) as c_hugetext_newdef
FROM T ORDER BY pk
RESULT: 
	[(1, 1, 'hello', 'world', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (2, 1, 'hello', 'world', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (3, 2, 'hello', 'world', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (4, 2, 'hello', 'world', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (5, 2, 'dog  ', 'world', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (6, 2, 'dog  ', 'world', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (7, 2, 'dog  ', 'cat', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (8, 2, 'dog  ', 'cat', datetime.date(2016, 6, 2), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (9, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (10, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(2016, 9, 1, 12, 0), None, ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (11, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (12, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'the', 'real', 'world'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (13, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (14, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], -5, None, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (15, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (16, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, 180000000000018, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (17, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (18, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('1.00000000001'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (19, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (20, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(12, 0), datetime.timedelta(days=1), True, False), (21, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(23, 59, 59), datetime.timedelta(days=1), True, False), (22, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(23, 59, 59), datetime.timedelta(days=1), True, False), (23, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(23, 59, 59), datetime.timedelta(seconds=10800), True, False), (24, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(23, 59, 59), datetime.timedelta(seconds=10800), True, False), (25, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(23, 59, 59), None, False, True), (26, 2, 'dog  ', 'cat', datetime.date(2010, 1, 1), datetime.datetime(1970, 12, 31, 11, 12, 13), datetime.datetime(2016, 9, 29, 12, 0), ['This', 'is', 'no', 'fantasy'], 9, 13, -9999999999999999, Decimal('2.000000000000002'), datetime.time(23, 59, 59), None, False, True), (27, 2, None, None, None, None, datetime.datetime(2016, 9, 29, 12, 0), None, None, 13, None, None, None, None, None, None), (28, 2, None, None, None, None, datetime.datetime(2016, 9, 29, 12, 0), None, None, 13, None, None, None, None, None, None)]


SELECT comp()
RESULT: 
	[('Unchanged',)]


DROP TABLE T


-- Test expressions in the defaults
CREATE OR REPLACE FUNCTION foo(a INT) RETURNS TEXT AS $$
DECLARE res TEXT := '';
        i INT;
BEGIN
  i := 0;
  WHILE (i < a) LOOP
    res := res || chr(ascii('a') + i);
    i := i + 1;
  END LOOP;
  RETURN res;
END; $$ LANGUAGE PLPGSQL STABLE


CREATE TABLE T(pk INT NOT NULL PRIMARY KEY, c_int INT DEFAULT LENGTH(foo(6)))


SELECT set('t')
RESULT: 
	[('',)]


INSERT INTO T VALUES (1), (2)


ALTER TABLE T ADD COLUMN c_bpchar BPCHAR(5) DEFAULT foo(4),
              ALTER COLUMN c_int SET DEFAULT LENGTH(foo(8))


INSERT INTO T VALUES (3), (4)


ALTER TABLE T ADD COLUMN c_text TEXT  DEFAULT foo(6),
              ALTER COLUMN c_bpchar SET DEFAULT foo(3)


INSERT INTO T VALUES (5), (6)


ALTER TABLE T ADD COLUMN c_date DATE
                  DEFAULT '2016-06-02'::DATE  + LENGTH(foo(10)),
              ALTER COLUMN c_text SET DEFAULT foo(12)


INSERT INTO T VALUES (7), (8)


ALTER TABLE T ADD COLUMN c_timestamp TIMESTAMP
                  DEFAULT '2016-09-01'::DATE + LENGTH(foo(10)),
              ALTER COLUMN c_date
                  SET DEFAULT '2010-01-01'::DATE - LENGTH(foo(4))


INSERT INTO T VALUES (9), (10)


ALTER TABLE T ADD COLUMN c_array TEXT[]
                  DEFAULT ('{"This", "is", "' || foo(4) ||
                           '","the", "real", "world"}')::TEXT[],
              ALTER COLUMN c_timestamp
                  SET DEFAULT '1970-12-31'::DATE + LENGTH(foo(30))


INSERT INTO T VALUES (11), (12)


ALTER TABLE T ALTER COLUMN c_int DROP DEFAULT,
              ALTER COLUMN c_array
                  SET DEFAULT ('{"This", "is", "' || foo(1) ||
                               '", "fantasy"}')::text[]


INSERT INTO T VALUES (13), (14)


ALTER TABLE T ALTER COLUMN c_bpchar    DROP DEFAULT,
              ALTER COLUMN c_date      DROP DEFAULT,
              ALTER COLUMN c_text      DROP DEFAULT,
              ALTER COLUMN c_timestamp DROP DEFAULT,
              ALTER COLUMN c_array     DROP DEFAULT


INSERT INTO T VALUES (15), (16)


SELECT * FROM T
RESULT: 
	[(1, 6, 'abcd ', 'abcdef', datetime.date(2016, 6, 12), datetime.datetime(2016, 9, 11, 0, 0), ['This', 'is', 'abcd', 'the', 'real', 'world']), (2, 6, 'abcd ', 'abcdef', datetime.date(2016, 6, 12), datetime.datetime(2016, 9, 11, 0, 0), ['This', 'is', 'abcd', 'the', 'real', 'world']), (3, 8, 'abcd ', 'abcdef', datetime.date(2016, 6, 12), datetime.datetime(2016, 9, 11, 0, 0), ['This', 'is', 'abcd', 'the', 'real', 'world']), (4, 8, 'abcd ', 'abcdef', datetime.date(2016, 6, 12), datetime.datetime(2016, 9, 11, 0, 0), ['This', 'is', 'abcd', 'the', 'real', 'world']), (5, 8, 'abc  ', 'abcdef', datetime.date(2016, 6, 12), datetime.datetime(2016, 9, 11, 0, 0), ['This', 'is', 'abcd', 'the', 'real', 'world']), (6, 8, 'abc  ', 'abcdef', datetime.date(2016, 6, 12), datetime.datetime(2016, 9, 11, 0, 0), ['This', 'is', 'abcd', 'the', 'real', 'world']), (7, 8, 'abc  ', 'abcdefghijkl', datetime.date(2016, 6, 12), datetime.datetime(2016, 9, 11, 0, 0), ['This', 'is', 'abcd', 'the', 'real', 'world']), (8, 8, 'abc  ', 'abcdefghijkl', datetime.date(2016, 6, 12), datetime.datetime(2016, 9, 11, 0, 0), ['This', 'is', 'abcd', 'the', 'real', 'world']), (9, 8, 'abc  ', 'abcdefghijkl', datetime.date(2009, 12, 28), datetime.datetime(2016, 9, 11, 0, 0), ['This', 'is', 'abcd', 'the', 'real', 'world']), (10, 8, 'abc  ', 'abcdefghijkl', datetime.date(2009, 12, 28), datetime.datetime(2016, 9, 11, 0, 0), ['This', 'is', 'abcd', 'the', 'real', 'world']), (11, 8, 'abc  ', 'abcdefghijkl', datetime.date(2009, 12, 28), datetime.datetime(1971, 1, 30, 0, 0), ['This', 'is', 'abcd', 'the', 'real', 'world']), (12, 8, 'abc  ', 'abcdefghijkl', datetime.date(2009, 12, 28), datetime.datetime(1971, 1, 30, 0, 0), ['This', 'is', 'abcd', 'the', 'real', 'world']), (13, None, 'abc  ', 'abcdefghijkl', datetime.date(2009, 12, 28), datetime.datetime(1971, 1, 30, 0, 0), ['This', 'is', 'a', 'fantasy']), (14, None, 'abc  ', 'abcdefghijkl', datetime.date(2009, 12, 28), datetime.datetime(1971, 1, 30, 0, 0), ['This', 'is', 'a', 'fantasy']), (15, None, None, None, None, None, None), (16, None, None, None, None, None, None)]


SELECT comp()
RESULT: 
	[('Unchanged',)]


DROP TABLE T


DROP FUNCTION foo(INT)


-- Fall back to full rewrite for volatile expressions
CREATE TABLE T(pk INT NOT NULL PRIMARY KEY)


INSERT INTO T VALUES (1)


SELECT set('t')
RESULT: 
	[('',)]


-- now() is stable, because it returns the transaction timestamp
ALTER TABLE T ADD COLUMN c1 TIMESTAMP DEFAULT now()


SELECT comp()
RESULT: 
	[('Unchanged',)]


-- clock_timestamp() is volatile
ALTER TABLE T ADD COLUMN c2 TIMESTAMP DEFAULT clock_timestamp()


SELECT comp()
RESULT: 
	[('Rewritten',)]


-- check that we notice insertion of a volatile default argument
CREATE FUNCTION foolme(timestamptz DEFAULT clock_timestamp())
  RETURNS timestamptz
  IMMUTABLE AS 'select $1' LANGUAGE sql

ALTER TABLE T ADD COLUMN c3 timestamptz DEFAULT foolme()


SELECT attname, atthasmissing, attmissingval FROM pg_attribute
  WHERE attrelid = 't'::regclass AND attnum > 0
  ORDER BY attnum
RESULT: 
	[('pk', False, None), ('c1', False, None), ('c2', False, None), ('c3', False, None)]


DROP TABLE T

DROP FUNCTION foolme(timestamptz)


-- Simple querie
CREATE TABLE T (pk INT NOT NULL PRIMARY KEY)


SELECT set('t')
RESULT: 
	[('',)]


INSERT INTO T SELECT * FROM generate_series(1, 10) a


ALTER TABLE T ADD COLUMN c_bigint BIGINT NOT NULL DEFAULT -1


INSERT INTO T SELECT b, b - 10 FROM generate_series(11, 20) a(b)


ALTER TABLE T ADD COLUMN c_text TEXT DEFAULT 'hello'


INSERT INTO T SELECT b, b - 10, (b + 10)::text FROM generate_series(21, 30) a(b)


-- WHERE clause
SELECT c_bigint, c_text FROM T WHERE c_bigint = -1 LIMIT 1
RESULT: 
	[(-1, 'hello')]


EXPLAIN (VERBOSE TRUE, COSTS FALSE)
SELECT c_bigint, c_text FROM T WHERE c_bigint = -1 LIMIT 1
RESULT: 
	[('Limit',), ('  Output: c_bigint, c_text',), ('  ->  Seq Scan on fast_default.t',), ('        Output: c_bigint, c_text',), ("        Filter: (t.c_bigint = '-1'::integer)",)]


SELECT c_bigint, c_text FROM T WHERE c_text = 'hello' LIMIT 1
RESULT: 
	[(-1, 'hello')]


EXPLAIN (VERBOSE TRUE, COSTS FALSE) SELECT c_bigint, c_text FROM T WHERE c_text = 'hello' LIMIT 1
RESULT: 
	[('Limit',), ('  Output: c_bigint, c_text',), ('  ->  Seq Scan on fast_default.t',), ('        Output: c_bigint, c_text',), ("        Filter: (t.c_text = 'hello'::text)",)]



-- COALESCE
SELECT COALESCE(c_bigint, pk), COALESCE(c_text, pk::text)
FROM T
ORDER BY pk LIMIT 10
RESULT: 
	[(-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello'), (-1, 'hello')]


-- Aggregate function
SELECT SUM(c_bigint), MAX(c_text COLLATE "C" ), MIN(c_text COLLATE "C") FROM T
RESULT: 
	[(Decimal('200'), 'hello', '31')]


-- ORDER BY
SELECT * FROM T ORDER BY c_bigint, c_text, pk LIMIT 10
RESULT: 
	[(1, -1, 'hello'), (2, -1, 'hello'), (3, -1, 'hello'), (4, -1, 'hello'), (5, -1, 'hello'), (6, -1, 'hello'), (7, -1, 'hello'), (8, -1, 'hello'), (9, -1, 'hello'), (10, -1, 'hello')]


EXPLAIN (VERBOSE TRUE, COSTS FALSE)
SELECT * FROM T ORDER BY c_bigint, c_text, pk LIMIT 10
RESULT: 
	[('Limit',), ('  Output: pk, c_bigint, c_text',), ('  ->  Sort',), ('        Output: pk, c_bigint, c_text',), ('        Sort Key: t.c_bigint, t.c_text, t.pk',), ('        ->  Seq Scan on fast_default.t',), ('              Output: pk, c_bigint, c_text',)]


-- LIMIT
SELECT * FROM T WHERE c_bigint > -1 ORDER BY c_bigint, c_text, pk LIMIT 10
RESULT: 
	[(11, 1, 'hello'), (12, 2, 'hello'), (13, 3, 'hello'), (14, 4, 'hello'), (15, 5, 'hello'), (16, 6, 'hello'), (17, 7, 'hello'), (18, 8, 'hello'), (19, 9, 'hello'), (20, 10, 'hello')]


EXPLAIN (VERBOSE TRUE, COSTS FALSE)
SELECT * FROM T WHERE c_bigint > -1 ORDER BY c_bigint, c_text, pk LIMIT 10
RESULT: 
	[('Limit',), ('  Output: pk, c_bigint, c_text',), ('  ->  Sort',), ('        Output: pk, c_bigint, c_text',), ('        Sort Key: t.c_bigint, t.c_text, t.pk',), ('        ->  Seq Scan on fast_default.t',), ('              Output: pk, c_bigint, c_text',), ("              Filter: (t.c_bigint > '-1'::integer)",)]


--  DELETE with RETURNING
DELETE FROM T WHERE pk BETWEEN 10 AND 20 RETURNING *
RESULT: 
	[(10, -1, 'hello'), (11, 1, 'hello'), (12, 2, 'hello'), (13, 3, 'hello'), (14, 4, 'hello'), (15, 5, 'hello'), (16, 6, 'hello'), (17, 7, 'hello'), (18, 8, 'hello'), (19, 9, 'hello'), (20, 10, 'hello')]

EXPLAIN (VERBOSE TRUE, COSTS FALSE)
DELETE FROM T WHERE pk BETWEEN 10 AND 20 RETURNING *
RESULT: 
	[('Delete on fast_default.t',), ('  Output: pk, c_bigint, c_text',), ('  ->  Bitmap Heap Scan on fast_default.t',), ('        Output: ctid',), ('        Recheck Cond: ((t.pk >= 10) AND (t.pk <= 20))',), ('        ->  Bitmap Index Scan on t_pkey',), ('              Index Cond: ((t.pk >= 10) AND (t.pk <= 20))',)]


-- UPDATE
UPDATE T SET c_text = '"' || c_text || '"'  WHERE pk < 10

SELECT * FROM T WHERE c_text LIKE '"%"' ORDER BY PK
RESULT: 
	[(1, -1, '"hello"'), (2, -1, '"hello"'), (3, -1, '"hello"'), (4, -1, '"hello"'), (5, -1, '"hello"'), (6, -1, '"hello"'), (7, -1, '"hello"'), (8, -1, '"hello"'), (9, -1, '"hello"')]


SELECT comp()
RESULT: 
	[('Unchanged',)]


DROP TABLE T



-- Combine with other DDL
CREATE TABLE T(pk INT NOT NULL PRIMARY KEY)


SELECT set('t')
RESULT: 
	[('',)]


INSERT INTO T VALUES (1), (2)


ALTER TABLE T ADD COLUMN c_int INT NOT NULL DEFAULT -1


INSERT INTO T VALUES (3), (4)


ALTER TABLE T ADD COLUMN c_text TEXT DEFAULT 'Hello'


INSERT INTO T VALUES (5), (6)


ALTER TABLE T ALTER COLUMN c_text SET DEFAULT 'world',
              ALTER COLUMN c_int  SET DEFAULT 1


INSERT INTO T VALUES (7), (8)


SELECT * FROM T ORDER BY pk
RESULT: 
	[(1, -1, 'Hello'), (2, -1, 'Hello'), (3, -1, 'Hello'), (4, -1, 'Hello'), (5, -1, 'Hello'), (6, -1, 'Hello'), (7, 1, 'world'), (8, 1, 'world')]


-- Add an index
CREATE INDEX i ON T(c_int, c_text)


SELECT c_text FROM T WHERE c_int = -1
RESULT: 
	[('Hello',), ('Hello',), ('Hello',), ('Hello',), ('Hello',), ('Hello',)]


SELECT comp()
RESULT: 
	[('Unchanged',)]


-- query to exercise expand_tuple function
CREATE TABLE t1 AS
SELECT 1::int AS a , 2::int AS b
FROM generate_series(1,20) q


ALTER TABLE t1 ADD COLUMN c text


SELECT a,
       stddev(cast((SELECT sum(1) FROM generate_series(1,20) x) AS float4))
          OVER (PARTITION BY a,b,c ORDER BY b)
       AS z
FROM t1
RESULT: 
	[(1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0), (1, 0.0)]


DROP TABLE T


-- test that we account for missing columns without defaults correctly
-- in expand_tuple, and that rows are correctly expanded for triggers

CREATE FUNCTION test_trigger()
RETURNS trigger
LANGUAGE plpgsql
AS $$

begin
    raise notice 'old tuple: %', to_json(OLD)::text;
    if TG_OP = 'DELETE'
    then
       return OLD;
    else
       return NEW;
    end if;
end;

$$


-- 2 new columns, both have defaults
CREATE TABLE t (id serial PRIMARY KEY, a int, b int, c int)

INSERT INTO t (a,b,c) VALUES (1,2,3)

ALTER TABLE t ADD COLUMN x int NOT NULL DEFAULT 4

ALTER TABLE t ADD COLUMN y int NOT NULL DEFAULT 5

CREATE TRIGGER a BEFORE UPDATE ON t FOR EACH ROW EXECUTE PROCEDURE test_trigger()

SELECT * FROM t
RESULT: 
	[(1, 1, 2, 3, 4, 5)]

UPDATE t SET y = 2

SELECT * FROM t
RESULT: 
	[(1, 1, 2, 3, 4, 2)]

DROP TABLE t


-- 2 new columns, first has default
CREATE TABLE t (id serial PRIMARY KEY, a int, b int, c int)

INSERT INTO t (a,b,c) VALUES (1,2,3)

ALTER TABLE t ADD COLUMN x int NOT NULL DEFAULT 4

ALTER TABLE t ADD COLUMN y int

CREATE TRIGGER a BEFORE UPDATE ON t FOR EACH ROW EXECUTE PROCEDURE test_trigger()

SELECT * FROM t
RESULT: 
	[(1, 1, 2, 3, 4, None)]

UPDATE t SET y = 2

SELECT * FROM t
RESULT: 
	[(1, 1, 2, 3, 4, 2)]

DROP TABLE t


-- 2 new columns, second has default
CREATE TABLE t (id serial PRIMARY KEY, a int, b int, c int)

INSERT INTO t (a,b,c) VALUES (1,2,3)

ALTER TABLE t ADD COLUMN x int

ALTER TABLE t ADD COLUMN y int NOT NULL DEFAULT 5

CREATE TRIGGER a BEFORE UPDATE ON t FOR EACH ROW EXECUTE PROCEDURE test_trigger()

SELECT * FROM t
RESULT: 
	[(1, 1, 2, 3, None, 5)]

UPDATE t SET y = 2

SELECT * FROM t
RESULT: 
	[(1, 1, 2, 3, None, 2)]

DROP TABLE t


-- 2 new columns, neither has default
CREATE TABLE t (id serial PRIMARY KEY, a int, b int, c int)

INSERT INTO t (a,b,c) VALUES (1,2,3)

ALTER TABLE t ADD COLUMN x int

ALTER TABLE t ADD COLUMN y int

CREATE TRIGGER a BEFORE UPDATE ON t FOR EACH ROW EXECUTE PROCEDURE test_trigger()

SELECT * FROM t
RESULT: 
	[(1, 1, 2, 3, None, None)]

UPDATE t SET y = 2

SELECT * FROM t
RESULT: 
	[(1, 1, 2, 3, None, 2)]

DROP TABLE t


-- same as last 4 tests but here the last original column has a NULL value
-- 2 new columns, both have defaults
CREATE TABLE t (id serial PRIMARY KEY, a int, b int, c int)

INSERT INTO t (a,b,c) VALUES (1,2,NULL)

ALTER TABLE t ADD COLUMN x int NOT NULL DEFAULT 4

ALTER TABLE t ADD COLUMN y int NOT NULL DEFAULT 5

CREATE TRIGGER a BEFORE UPDATE ON t FOR EACH ROW EXECUTE PROCEDURE test_trigger()

SELECT * FROM t
RESULT: 
	[(1, 1, 2, None, 4, 5)]

UPDATE t SET y = 2

SELECT * FROM t
RESULT: 
	[(1, 1, 2, None, 4, 2)]

DROP TABLE t


-- 2 new columns, first has default
CREATE TABLE t (id serial PRIMARY KEY, a int, b int, c int)

INSERT INTO t (a,b,c) VALUES (1,2,NULL)

ALTER TABLE t ADD COLUMN x int NOT NULL DEFAULT 4

ALTER TABLE t ADD COLUMN y int

CREATE TRIGGER a BEFORE UPDATE ON t FOR EACH ROW EXECUTE PROCEDURE test_trigger()

SELECT * FROM t
RESULT: 
	[(1, 1, 2, None, 4, None)]

UPDATE t SET y = 2

SELECT * FROM t
RESULT: 
	[(1, 1, 2, None, 4, 2)]

DROP TABLE t


-- 2 new columns, second has default
CREATE TABLE t (id serial PRIMARY KEY, a int, b int, c int)

INSERT INTO t (a,b,c) VALUES (1,2,NULL)

ALTER TABLE t ADD COLUMN x int

ALTER TABLE t ADD COLUMN y int NOT NULL DEFAULT 5

CREATE TRIGGER a BEFORE UPDATE ON t FOR EACH ROW EXECUTE PROCEDURE test_trigger()

SELECT * FROM t
RESULT: 
	[(1, 1, 2, None, None, 5)]

UPDATE t SET y = 2

SELECT * FROM t
RESULT: 
	[(1, 1, 2, None, None, 2)]

DROP TABLE t


-- 2 new columns, neither has default
CREATE TABLE t (id serial PRIMARY KEY, a int, b int, c int)

INSERT INTO t (a,b,c) VALUES (1,2,NULL)

ALTER TABLE t ADD COLUMN x int

ALTER TABLE t ADD COLUMN y int

CREATE TRIGGER a BEFORE UPDATE ON t FOR EACH ROW EXECUTE PROCEDURE test_trigger()

SELECT * FROM t
RESULT: 
	[(1, 1, 2, None, None, None)]

UPDATE t SET y = 2

SELECT * FROM t
RESULT: 
	[(1, 1, 2, None, None, 2)]

DROP TABLE t


-- make sure expanded tuple has correct self pointer
-- it will be required by the RI trigger doing the cascading delete

CREATE TABLE leader (a int PRIMARY KEY, b int)

CREATE TABLE follower (a int REFERENCES leader ON DELETE CASCADE, b int)

INSERT INTO leader VALUES (1, 1), (2, 2)

ALTER TABLE leader ADD c int

ALTER TABLE leader DROP c

DELETE FROM leader


-- check that ALTER TABLE ... ALTER TYPE does the right thing

CREATE TABLE vtype( a integer)

INSERT INTO vtype VALUES (1)

ALTER TABLE vtype ADD COLUMN b DOUBLE PRECISION DEFAULT 0.2

ALTER TABLE vtype ADD COLUMN c BOOLEAN DEFAULT true

SELECT * FROM vtype
RESULT: 
	[(1, 0.2, True)]

ALTER TABLE vtype
      ALTER b TYPE text USING b::text,
      ALTER c TYPE text USING c::text

SELECT * FROM vtype
RESULT: 
	[(1, '0.2', 'true')]


-- also check the case that doesn''t rewrite the table

CREATE TABLE vtype2 (a int)

INSERT INTO vtype2 VALUES (1)

ALTER TABLE vtype2 ADD COLUMN b varchar(10) DEFAULT 'xxx'

ALTER TABLE vtype2 ALTER COLUMN b SET DEFAULT 'yyy'

INSERT INTO vtype2 VALUES (2)


ALTER TABLE vtype2 ALTER COLUMN b TYPE varchar(20) USING b::varchar(20)

SELECT * FROM vtype2
RESULT: 
	[(1, 'xxx'), (2, 'yyy')]



-- Ensure that defaults are checked when evaluating whether HOT update
-- is possible, this was broken for a while:
-- https://postgr.es/m/20190202133521.ylauh3ckqa7colzj%40alap3.anarazel.de
BEGIN

CREATE TABLE t()

INSERT INTO t DEFAULT VALUES

ALTER TABLE t ADD COLUMN a int DEFAULT 1

CREATE INDEX ON t(a)

-- set column with a default 1 to NULL, due to a bug that wasn''t
-- noticed has heap_getattr buggily returned NULL for default columns
UPDATE t SET a = NULL


-- verify that index and non-index scans show the same result
SET LOCAL enable_seqscan = true

SELECT * FROM t WHERE a IS NULL
RESULT: 
	[(None,)]

SET LOCAL enable_seqscan = false

SELECT * FROM t WHERE a IS NULL
RESULT: 
	[(None,)]

ROLLBACK


-- verify that a default set on a non-plain table doesn''t set a missing
-- value on the attribute
CREATE FOREIGN DATA WRAPPER dummy

CREATE SERVER s0 FOREIGN DATA WRAPPER dummy

CREATE FOREIGN TABLE ft1 (c1 integer NOT NULL) SERVER s0

ALTER FOREIGN TABLE ft1 ADD COLUMN c8 integer DEFAULT 0

ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE char(10)

SELECT count(*)
  FROM pg_attribute
  WHERE attrelid = 'ft1'::regclass AND
    (attmissingval IS NOT NULL OR atthasmissing)
RESULT: 
	[(0,)]


-- cleanup
DROP FOREIGN TABLE ft1

DROP SERVER s0

DROP FOREIGN DATA WRAPPER dummy

DROP TABLE vtype

DROP TABLE vtype2

DROP TABLE follower

DROP TABLE leader

DROP FUNCTION test_trigger()

DROP TABLE t1

DROP FUNCTION set(name)

DROP FUNCTION comp()

DROP TABLE m

DROP TABLE has_volatile

DROP EVENT TRIGGER has_volatile_rewrite
ProgrammingError: 
DROP EVENT TRIGGER has_volatile_rewrite

event trigger "has_volatile_rewrite" does not exist


DROP FUNCTION log_rewrite
ProgrammingError: 
DROP FUNCTION log_rewrite

could not find a function named "log_rewrite"


DROP SCHEMA fast_default


-- Leave a table with an active fast default in place, for pg_upgrade testing
set search_path = public

create table has_fast_default(f1 int)

insert into has_fast_default values(1)

alter table has_fast_default add column f2 int default 42

table has_fast_default
RESULT: 
	[(1, 42)]


