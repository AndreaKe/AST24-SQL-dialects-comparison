
-----------
QUERY:
--
-- FLOAT4
--

CREATE TABLE FLOAT4_TBL (f1  float4);
RESULT:
	[]

-----------
QUERY:


INSERT INTO FLOAT4_TBL(f1) VALUES ('    0.0');
RESULT:
	[]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('1004.30   ');
RESULT:
	[]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('     -34.84    ');
RESULT:
	[]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('1.2345678901234e+20');
RESULT:
	[]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('1.2345678901234e-20');
RESULT:
	[]

-----------
QUERY:


-- test for over and under flow
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70');
RESULT:
	ERROR - "10e70" is out of range for type real
LINE 4: INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70');
RESULT:
	ERROR - "-10e70" is out of range for type real
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70');
RESULT:
	ERROR - "10e-70" is out of range for type real
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70');
RESULT:
	ERROR - "-10e-70" is out of range for type real
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70');
                                           ^


-----------
QUERY:


INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70'::float8);
RESULT:
	ERROR - value out of range: overflow


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70'::float8);
RESULT:
	ERROR - value out of range: overflow


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70'::float8);
RESULT:
	ERROR - value out of range: underflow


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70'::float8);
RESULT:
	ERROR - value out of range: underflow


-----------
QUERY:


INSERT INTO FLOAT4_TBL(f1) VALUES ('10e400');
RESULT:
	ERROR - "10e400" is out of range for type real
LINE 3: INSERT INTO FLOAT4_TBL(f1) VALUES ('10e400');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e400');
RESULT:
	ERROR - "-10e400" is out of range for type real
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e400');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-400');
RESULT:
	ERROR - "10e-400" is out of range for type real
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-400');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-400');
RESULT:
	ERROR - "-10e-400" is out of range for type real
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-400');
                                           ^


-----------
QUERY:


-- bad input
INSERT INTO FLOAT4_TBL(f1) VALUES ('');
RESULT:
	ERROR - invalid input syntax for type real: ""
LINE 4: INSERT INTO FLOAT4_TBL(f1) VALUES ('');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('       ');
RESULT:
	ERROR - invalid input syntax for type real: "       "
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('       ');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('xyz');
RESULT:
	ERROR - invalid input syntax for type real: "xyz"
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('xyz');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('5.0.0');
RESULT:
	ERROR - invalid input syntax for type real: "5.0.0"
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('5.0.0');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('5 . 0');
RESULT:
	ERROR - invalid input syntax for type real: "5 . 0"
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('5 . 0');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('5.   0');
RESULT:
	ERROR - invalid input syntax for type real: "5.   0"
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('5.   0');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('     - 3.0');
RESULT:
	ERROR - invalid input syntax for type real: "     - 3.0"
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('     - 3.0');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('123            5');
RESULT:
	ERROR - invalid input syntax for type real: "123            5"
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('123            5');
                                           ^


-----------
QUERY:


-- Also try it with non-error-throwing API
SELECT pg_input_is_valid('34.5', 'float4');
RESULT:
	[(True,)]

-----------
QUERY:

SELECT pg_input_is_valid('xyz', 'float4');
RESULT:
	[(False,)]

-----------
QUERY:

SELECT pg_input_is_valid('1e400', 'float4');
RESULT:
	[(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('1e400', 'float4');
RESULT:
	[('"1e400" is out of range for type real', None, None, '22003')]

-----------
QUERY:


-- special inputs
SELECT 'NaN'::float4;
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT 'nan'::float4;
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT '   NAN  '::float4;
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT 'infinity'::float4;
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT '          -INFINiTY   '::float4;
RESULT:
	[(-inf,)]

-----------
QUERY:

-- bad special inputs
SELECT 'N A N'::float4;
RESULT:
	ERROR - invalid input syntax for type real: "N A N"
LINE 3: SELECT 'N A N'::float4;
               ^


-----------
QUERY:

SELECT 'NaN x'::float4;
RESULT:
	ERROR - invalid input syntax for type real: "NaN x"
LINE 2: SELECT 'NaN x'::float4;
               ^


-----------
QUERY:

SELECT ' INFINITY    x'::float4;
RESULT:
	ERROR - invalid input syntax for type real: " INFINITY    x"
LINE 2: SELECT ' INFINITY    x'::float4;
               ^


-----------
QUERY:


SELECT 'Infinity'::float4 + 100.0;
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT 'Infinity'::float4 / 'Infinity'::float4;
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT '42'::float4 / 'Infinity'::float4;
RESULT:
	[(0.0,)]

-----------
QUERY:

SELECT 'nan'::float4 / 'nan'::float4;
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT 'nan'::float4 / '0'::float4;
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT 'nan'::numeric::float4;
RESULT:
	[(nan,)]

-----------
QUERY:


SELECT * FROM FLOAT4_TBL;
RESULT:
	[(0.0,), (1004.3,), (-34.84,), (1.2345679e+20,), (1.2345679e-20,)]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE f.f1 <> '1004.3';
RESULT:
	[(0.0,), (-34.84,), (1.2345679e+20,), (1.2345679e-20,)]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE f.f1 = '1004.3';
RESULT:
	[(1004.3,)]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE '1004.3' > f.f1;
RESULT:
	[(0.0,), (-34.84,), (1.2345679e-20,)]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE  f.f1 < '1004.3';
RESULT:
	[(0.0,), (-34.84,), (1.2345679e-20,)]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE '1004.3' >= f.f1;
RESULT:
	[(0.0,), (1004.3,), (-34.84,), (1.2345679e-20,)]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE  f.f1 <= '1004.3';
RESULT:
	[(0.0,), (1004.3,), (-34.84,), (1.2345679e-20,)]

-----------
QUERY:


SELECT f.f1, f.f1 * '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	[(1004.3, -10043.0), (1.2345679e+20, -1.2345678e+21), (1.2345679e-20, -1.2345678e-19)]

-----------
QUERY:


SELECT f.f1, f.f1 + '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	[(1004.3, 994.3), (1.2345679e+20, 1.2345679e+20), (1.2345679e-20, -10.0)]

-----------
QUERY:


SELECT f.f1, f.f1 / '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	[(1004.3, -100.43), (1.2345679e+20, -1.2345679e+19), (1.2345679e-20, -1.2345679e-21)]

-----------
QUERY:


SELECT f.f1, f.f1 - '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	[(1004.3, 1014.3), (1.2345679e+20, 1.2345679e+20), (1.2345679e-20, 10.0)]

-----------
QUERY:


-- test divide by zero
SELECT f.f1 / '0.0' from FLOAT4_TBL f;
RESULT:
	ERROR - division by zero


-----------
QUERY:


SELECT * FROM FLOAT4_TBL;
RESULT:
	[(0.0,), (1004.3,), (-34.84,), (1.2345679e+20,), (1.2345679e-20,)]

-----------
QUERY:


-- test the unary float4abs operator
SELECT f.f1, @f.f1 AS abs_f1 FROM FLOAT4_TBL f;
RESULT:
	[(0.0, 0.0), (1004.3, 1004.3), (-34.84, 34.84), (1.2345679e+20, 1.2345679e+20), (1.2345679e-20, 1.2345679e-20)]

-----------
QUERY:


UPDATE FLOAT4_TBL
   SET f1 = FLOAT4_TBL.f1 * '-1'
   WHERE FLOAT4_TBL.f1 > '0.0';
RESULT:
	[]

-----------
QUERY:


SELECT * FROM FLOAT4_TBL;
RESULT:
	[(0.0,), (-34.84,), (-1004.3,), (-1.2345679e+20,), (-1.2345679e-20,)]

-----------
QUERY:


-- test edge-case coercions to integer
SELECT '32767.4'::float4::int2;
RESULT:
	[(32767,)]

-----------
QUERY:

SELECT '32767.6'::float4::int2;
RESULT:
	ERROR - smallint out of range


-----------
QUERY:

SELECT '-32768.4'::float4::int2;
RESULT:
	[(-32768,)]

-----------
QUERY:

SELECT '-32768.6'::float4::int2;
RESULT:
	ERROR - smallint out of range


-----------
QUERY:

SELECT '2147483520'::float4::int4;
RESULT:
	[(2147483520,)]

-----------
QUERY:

SELECT '2147483647'::float4::int4;
RESULT:
	ERROR - integer out of range


-----------
QUERY:

SELECT '-2147483648.5'::float4::int4;
RESULT:
	[(-2147483648,)]

-----------
QUERY:

SELECT '-2147483900'::float4::int4;
RESULT:
	ERROR - integer out of range


-----------
QUERY:

SELECT '9223369837831520256'::float4::int8;
RESULT:
	[(9223369837831520256,)]

-----------
QUERY:

SELECT '9223372036854775807'::float4::int8;
RESULT:
	ERROR - bigint out of range


-----------
QUERY:

SELECT '-9223372036854775808.5'::float4::int8;
RESULT:
	[(-9223372036854775808,)]

-----------
QUERY:

SELECT '-9223380000000000000'::float4::int8;
RESULT:
	ERROR - bigint out of range


-----------
QUERY:


-- Test for correct input rounding in edge cases.
-- These lists are from Paxson 1991, excluding subnormals and
-- inputs of over 9 sig. digits.

SELECT float4send('5e-20'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('67e14'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('985e15'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('55895e-16'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('7038531e-32'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('702990899e-20'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:


SELECT float4send('3e-23'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('57e18'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('789e-35'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('2539e-18'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('76173e28'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('887745e-11'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('5382571e-37'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('82381273e-35'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('750486563e-38'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:


-- Test that the smallest possible normalized input value inputs
-- correctly, either in 9-significant-digit or shortest-decimal
-- format.
--
-- exact val is             1.1754943508...
-- shortest val is          1.1754944000
-- midpoint to next val is  1.1754944208...

SELECT float4send('1.17549435e-38'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:

SELECT float4send('1.1754944e-38'::float4);
RESULT:
	[(<memory at 0x75e4a8bd5e40>,)]

-----------
QUERY:


-- test output (and round-trip safety) of various values.
-- To ensure we/* REPLACED */''re testing what we think we/* REPLACED */''re testing, start with
-- float values specified by bit patterns (as a useful side effect,
-- this means we/* REPLACED */''ll fail on non-IEEE platforms).

create type xfloat4;
RESULT:
	[]

-----------
QUERY:

create function xfloat4in(cstring) returns xfloat4 immutable strict
  language internal as 'int4in';
RESULT:
	[]

-----------
QUERY:

create function xfloat4out(xfloat4) returns cstring immutable strict
  language internal as 'int4out';
RESULT:
	[]

-----------
QUERY:

create type xfloat4 (input = xfloat4in, output = xfloat4out, like = float4);
RESULT:
	[]

-----------
QUERY:

create cast (xfloat4 as float4) without function;
RESULT:
	[]

-----------
QUERY:

create cast (float4 as xfloat4) without function;
RESULT:
	[]

-----------
QUERY:

create cast (xfloat4 as integer) without function;
RESULT:
	[]

-----------
QUERY:

create cast (integer as xfloat4) without function;
RESULT:
	[]

-----------
QUERY:


-- float4: seeeeeee emmmmmmm mmmmmmmm mmmmmmmm

-- we don/* REPLACED */''t care to assume the platform/* REPLACED */''s strtod() handles subnormals
-- correctly /* REPLACED */, those are /* REPLACED */''use at your own risk/* REPLACED */''. However we do test
-- subnormal outputs, since those are under our control.

with testdata(bits) as (values
  -- small subnormals
  (x'00000001'),
  (x'00000002'), (x'00000003'),
  (x'00000010'), (x'00000011'), (x'00000100'), (x'00000101'),
  (x'00004000'), (x'00004001'), (x'00080000'), (x'00080001'),
  -- stress values
  (x'0053c4f4'),  -- 7693e-42
  (x'006c85c4'),  -- 996622e-44
  (x'0041ca76'),  -- 60419369e-46
  (x'004b7678'),  -- 6930161142e-48
  -- taken from upstream testsuite
  (x'00000007'),
  (x'00424fe2'),
  -- borderline between subnormal and normal
  (x'007ffff0'), (x'007ffff1'), (x'007ffffe'), (x'007fffff'))
select float4send(flt) as ibits,
       flt
  from (select bits::integer::xfloat4::float4 as flt
          from testdata
	offset 0) s;
RESULT:
	[(<memory at 0x75e4a8bd7a00>, 1e-45), (<memory at 0x75e4a8bd6ec0>, 3e-45), (<memory at 0x75e4a8bd7b80>, 4e-45), (<memory at 0x75e4a8bd7ac0>, 2.2e-44), (<memory at 0x75e4a8bd5f00>, 2.4e-44), (<memory at 0x75e4a8bd7880>, 3.59e-43), (<memory at 0x75e4a8bd7400>, 3.6e-43), (<memory at 0x75e4a8bd7e80>, 2.2959e-41), (<memory at 0x75e4a8bd6500>, 2.296e-41), (<memory at 0x75e4a8bd6b00>, 7.34684e-40), (<memory at 0x75e4a8bd6140>, 7.34685e-40), (<memory at 0x75e4a8bd6440>, 7.693e-39), (<memory at 0x75e4a8bd6080>, 9.96622e-39), (<memory at 0x75e4a8bd6bc0>, 6.041937e-39), (<memory at 0x75e4a8bd62c0>, 6.930161e-39), (<memory at 0x75e4a8bd6200>, 1e-44), (<memory at 0x75e4a8bd74c0>, 6.0898e-39), (<memory at 0x75e4a8bd7280>, 1.1754921e-38), (<memory at 0x75e4a8bd68c0>, 1.1754922e-38), (<memory at 0x75e4a8bd5840>, 1.1754941e-38), (<memory at 0x75e4a8bd7c40>, 1.1754942e-38)]

-----------
QUERY:


with testdata(bits) as (values
  (x'00000000'),
  -- smallest normal values
  (x'00800000'), (x'00800001'), (x'00800004'), (x'00800005'),
  (x'00800006'),
  -- small normal values chosen for short vs. long output
  (x'008002f1'), (x'008002f2'), (x'008002f3'),
  (x'00800e17'), (x'00800e18'), (x'00800e19'),
  -- assorted values (random mantissae)
  (x'01000001'), (x'01102843'), (x'01a52c98'),
  (x'0219c229'), (x'02e4464d'), (x'037343c1'), (x'03a91b36'),
  (x'047ada65'), (x'0496fe87'), (x'0550844f'), (x'05999da3'),
  (x'060ea5e2'), (x'06e63c45'), (x'07f1e548'), (x'0fc5282b'),
  (x'1f850283'), (x'2874a9d6'),
  -- values around 5e-08
  (x'3356bf94'), (x'3356bf95'), (x'3356bf96'),
  -- around 1e-07
  (x'33d6bf94'), (x'33d6bf95'), (x'33d6bf96'),
  -- around 3e-07 .. 1e-04
  (x'34a10faf'), (x'34a10fb0'), (x'34a10fb1'),
  (x'350637bc'), (x'350637bd'), (x'350637be'),
  (x'35719786'), (x'35719787'), (x'35719788'),
  (x'358637bc'), (x'358637bd'), (x'358637be'),
  (x'36a7c5ab'), (x'36a7c5ac'), (x'36a7c5ad'),
  (x'3727c5ab'), (x'3727c5ac'), (x'3727c5ad'),
  -- format crossover at 1e-04
  (x'38d1b714'), (x'38d1b715'), (x'38d1b716'),
  (x'38d1b717'), (x'38d1b718'), (x'38d1b719'),
  (x'38d1b71a'), (x'38d1b71b'), (x'38d1b71c'),
  (x'38d1b71d'),
  --
  (x'38dffffe'), (x'38dfffff'), (x'38e00000'),
  (x'38efffff'), (x'38f00000'), (x'38f00001'),
  (x'3a83126e'), (x'3a83126f'), (x'3a831270'),
  (x'3c23d709'), (x'3c23d70a'), (x'3c23d70b'),
  (x'3dcccccc'), (x'3dcccccd'), (x'3dccccce'),
  -- chosen to need 9 digits for 3dcccd70
  (x'3dcccd6f'), (x'3dcccd70'), (x'3dcccd71'),
  --
  (x'3effffff'), (x'3f000000'), (x'3f000001'),
  (x'3f333332'), (x'3f333333'), (x'3f333334'),
  -- approach 1.0 with increasing numbers of 9s
  (x'3f666665'), (x'3f666666'), (x'3f666667'),
  (x'3f7d70a3'), (x'3f7d70a4'), (x'3f7d70a5'),
  (x'3f7fbe76'), (x'3f7fbe77'), (x'3f7fbe78'),
  (x'3f7ff971'), (x'3f7ff972'), (x'3f7ff973'),
  (x'3f7fff57'), (x'3f7fff58'), (x'3f7fff59'),
  (x'3f7fffee'), (x'3f7fffef'),
  -- values very close to 1
  (x'3f7ffff0'), (x'3f7ffff1'), (x'3f7ffff2'),
  (x'3f7ffff3'), (x'3f7ffff4'), (x'3f7ffff5'),
  (x'3f7ffff6'), (x'3f7ffff7'), (x'3f7ffff8'),
  (x'3f7ffff9'), (x'3f7ffffa'), (x'3f7ffffb'),
  (x'3f7ffffc'), (x'3f7ffffd'), (x'3f7ffffe'),
  (x'3f7fffff'),
  (x'3f800000'),
  (x'3f800001'), (x'3f800002'), (x'3f800003'),
  (x'3f800004'), (x'3f800005'), (x'3f800006'),
  (x'3f800007'), (x'3f800008'), (x'3f800009'),
  -- values 1 to 1.1
  (x'3f80000f'), (x'3f800010'), (x'3f800011'),
  (x'3f800012'), (x'3f800013'), (x'3f800014'),
  (x'3f800017'), (x'3f800018'), (x'3f800019'),
  (x'3f80001a'), (x'3f80001b'), (x'3f80001c'),
  (x'3f800029'), (x'3f80002a'), (x'3f80002b'),
  (x'3f800053'), (x'3f800054'), (x'3f800055'),
  (x'3f800346'), (x'3f800347'), (x'3f800348'),
  (x'3f8020c4'), (x'3f8020c5'), (x'3f8020c6'),
  (x'3f8147ad'), (x'3f8147ae'), (x'3f8147af'),
  (x'3f8ccccc'), (x'3f8ccccd'), (x'3f8cccce'),
  --
  (x'3fc90fdb'), -- pi/2
  (x'402df854'), -- e
  (x'40490fdb'), -- pi
  --
  (x'409fffff'), (x'40a00000'), (x'40a00001'),
  (x'40afffff'), (x'40b00000'), (x'40b00001'),
  (x'411fffff'), (x'41200000'), (x'41200001'),
  (x'42c7ffff'), (x'42c80000'), (x'42c80001'),
  (x'4479ffff'), (x'447a0000'), (x'447a0001'),
  (x'461c3fff'), (x'461c4000'), (x'461c4001'),
  (x'47c34fff'), (x'47c35000'), (x'47c35001'),
  (x'497423ff'), (x'49742400'), (x'49742401'),
  (x'4b18967f'), (x'4b189680'), (x'4b189681'),
  (x'4cbebc1f'), (x'4cbebc20'), (x'4cbebc21'),
  (x'4e6e6b27'), (x'4e6e6b28'), (x'4e6e6b29'),
  (x'501502f8'), (x'501502f9'), (x'501502fa'),
  (x'51ba43b6'), (x'51ba43b7'), (x'51ba43b8'),
  -- stress values
  (x'1f6c1e4a'),  -- 5e-20
  (x'59be6cea'),  -- 67e14
  (x'5d5ab6c4'),  -- 985e15
  (x'2cc4a9bd'),  -- 55895e-16
  (x'15ae43fd'),  -- 7038531e-32
  (x'2cf757ca'),  -- 702990899e-20
  (x'665ba998'),  -- 25933168707e13
  (x'743c3324'),  -- 596428896559e20
  -- exercise fixed-point memmoves
  (x'47f1205a'),
  (x'4640e6ae'),
  (x'449a5225'),
  (x'42f6e9d5'),
  (x'414587dd'),
  (x'3f9e064b'),
  -- these cases come from the upstream/* REPLACED */''s testsuite
  -- BoundaryRoundEven
  (x'4c000004'),
  (x'50061c46'),
  (x'510006a8'),
  -- ExactValueRoundEven
  (x'48951f84'),
  (x'45fd1840'),
  -- LotsOfTrailingZeros
  (x'39800000'),
  (x'3b200000'),
  (x'3b900000'),
  (x'3bd00000'),
  -- Regression
  (x'63800000'),
  (x'4b000000'),
  (x'4b800000'),
  (x'4c000001'),
  (x'4c800b0d'),
  (x'00d24584'),
  (x'00d90b88'),
  (x'45803f34'),
  (x'4f9f24f7'),
  (x'3a8722c3'),
  (x'5c800041'),
  (x'15ae43fd'),
  (x'5d4cccfb'),
  (x'4c800001'),
  (x'57800ed8'),
  (x'5f000000'),
  (x'700000f0'),
  (x'5f23e9ac'),
  (x'5e9502f9'),
  (x'5e8012b1'),
  (x'3c000028'),
  (x'60cde861'),
  (x'03aa2a50'),
  (x'43480000'),
  (x'4c000000'),
  -- LooksLikePow5
  (x'5D1502F9'),
  (x'5D9502F9'),
  (x'5E1502F9'),
  -- OutputLength
  (x'3f99999a'),
  (x'3f9d70a4'),
  (x'3f9df3b6'),
  (x'3f9e0419'),
  (x'3f9e0610'),
  (x'3f9e064b'),
  (x'3f9e0651'),
  (x'03d20cfe')
)
select float4send(flt) as ibits,
       flt,
       flt::text::float4 as r_flt,
       float4send(flt::text::float4) as obits,
       float4send(flt::text::float4) = float4send(flt) as correct
  from (select bits::integer::xfloat4::float4 as flt
          from testdata
	offset 0) s;
RESULT:
	[(<memory at 0x75e4a8bd7a00>, 0.0, 0.0, <memory at 0x75e4a8bd6ec0>, True), (<memory at 0x75e4a8bd7b80>, 1.1754944e-38, 1.1754944e-38, <memory at 0x75e4a8bd7ac0>, True), (<memory at 0x75e4a8bd5f00>, 1.1754945e-38, 1.1754945e-38, <memory at 0x75e4a8bd7880>, True), (<memory at 0x75e4a8bd7400>, 1.1754949e-38, 1.1754949e-38, <memory at 0x75e4a8bd7e80>, True), (<memory at 0x75e4a8bd6500>, 1.175495e-38, 1.175495e-38, <memory at 0x75e4a8bd6b00>, True), (<memory at 0x75e4a8bd6140>, 1.1754952e-38, 1.1754952e-38, <memory at 0x75e4a8bd6440>, True), (<memory at 0x75e4a8bd6080>, 1.1755999e-38, 1.1755999e-38, <memory at 0x75e4a8bd6bc0>, True), (<memory at 0x75e4a8bd62c0>, 1.1756e-38, 1.1756e-38, <memory at 0x75e4a8bd6200>, True), (<memory at 0x75e4a8bd74c0>, 1.1756001e-38, 1.1756001e-38, <memory at 0x75e4a8bd7280>, True), (<memory at 0x75e4a8bd68c0>, 1.1759998e-38, 1.1759998e-38, <memory at 0x75e4a8bd5840>, True), (<memory at 0x75e4a8bd7c40>, 1.176e-38, 1.176e-38, <memory at 0x75e4a8bd5b40>, True), (<memory at 0x75e4a8bd65c0>, 1.1760001e-38, 1.1760001e-38, <memory at 0x75e4a8bd59c0>, True), (<memory at 0x75e4a8bd5a80>, 2.350989e-38, 2.350989e-38, <memory at 0x75e4a8bd5600>, True), (<memory at 0x75e4a8bd71c0>, 2.647751e-38, 2.647751e-38, <memory at 0x75e4a8bd5900>, True), (<memory at 0x75e4a8bd7340>, 6.0675416e-38, 6.0675416e-38, <memory at 0x75e4a8bd77c0>, True), (<memory at 0x75e4a8bd5c00>, 1.1296386e-37, 1.1296386e-37, <memory at 0x75e4a8bd56c0>, True), (<memory at 0x75e4a8bd5cc0>, 3.354194e-37, 3.354194e-37, <memory at 0x75e4a8bd5d80>, True), (<memory at 0x75e4a8bd5540>, 7.148906e-37, 7.148906e-37, <memory at 0x75e4a8bd6c80>, True), (<memory at 0x75e4a8bd6e00>, 9.939175e-37, 9.939175e-37, <memory at 0x75e4a8bd6d40>, True), (<memory at 0x75e4a8bd5fc0>, 2.948764e-36, 2.948764e-36, <memory at 0x75e4a8bd7940>, True), (<memory at 0x75e4a8bd6f80>, 3.5498577e-36, 3.5498577e-36, <memory at 0x75e4a8bd7040>, True), (<memory at 0x75e4a8bd7100>, 9.804414e-36, 9.804414e-36, <memory at 0x75e4a8bd5780>, True), (<memory at 0x75e4a8bd5480>, 1.4445957e-35, 1.4445957e-35, <memory at 0x75e4a8bd7d00>, True), (<memory at 0x75e4a8bd6a40>, 2.6829103e-35, 2.6829103e-35, <memory at 0x75e4a8bd6740>, True), (<memory at 0x75e4a8bd6800>, 8.660494e-35, 8.660494e-35, <memory at 0x75e4a8bd7700>, True), (<memory at 0x75e4a8bd7640>, 3.639641e-34, 3.639641e-34, <memory at 0x75e487d61d80>, True), (<memory at 0x75e487d60b80>, 1.9441172e-29, 1.9441172e-29, <memory at 0x75e487d62140>, True), (<memory at 0x75e487d61000>, 5.6331846e-20, 5.6331846e-20, <memory at 0x75e487d60f40>, True), (<memory at 0x75e487d60940>, 1.3581548e-14, 1.3581548e-14, <memory at 0x75e487d62440>, True), (<memory at 0x75e487d62500>, 4.9999997e-08, 4.9999997e-08, <memory at 0x75e487d61fc0>, True), (<memory at 0x75e487d622c0>, 5e-08, 5e-08, <memory at 0x75e487d62380>, True), (<memory at 0x75e487d625c0>, 5.0000004e-08, 5.0000004e-08, <memory at 0x75e487d62680>, True), (<memory at 0x75e487d62740>, 9.9999994e-08, 9.9999994e-08, <memory at 0x75e487d62800>, True), (<memory at 0x75e487d628c0>, 1e-07, 1e-07, <memory at 0x75e487d62980>, True), (<memory at 0x75e487d62a40>, 1.0000001e-07, 1.0000001e-07, <memory at 0x75e487d62b00>, True), (<memory at 0x75e487d62bc0>, 2.9999998e-07, 2.9999998e-07, <memory at 0x75e487d62c80>, True), (<memory at 0x75e487d61e40>, 3e-07, 3e-07, <memory at 0x75e487d604c0>, True), (<memory at 0x75e487d60340>, 3.0000004e-07, 3.0000004e-07, <memory at 0x75e487d607c0>, True), (<memory at 0x75e487d60400>, 4.9999994e-07, 4.9999994e-07, <memory at 0x75e487d60580>, True), (<memory at 0x75e487d60280>, 5e-07, 5e-07, <memory at 0x75e487d60ac0>, True), (<memory at 0x75e487d60640>, 5.0000006e-07, 5.0000006e-07, <memory at 0x75e487d61480>, True), (<memory at 0x75e487d63dc0>, 8.999999e-07, 8.999999e-07, <memory at 0x75e487d61240>, True), (<memory at 0x75e487d63880>, 9e-07, 9e-07, <memory at 0x75e487d63700>, True), (<memory at 0x75e487d616c0>, 9.0000003e-07, 9.0000003e-07, <memory at 0x75e487d63f40>, True), (<memory at 0x75e487d61f00>, 9.999999e-07, 9.999999e-07, <memory at 0x75e487d631c0>, True), (<memory at 0x75e487d62f80>, 1e-06, 1e-06, <memory at 0x75e487d63d00>, True), (<memory at 0x75e487d60700>, 1.0000001e-06, 1.0000001e-06, <memory at 0x75e487d637c0>, True), (<memory at 0x75e487d63ac0>, 4.9999994e-06, 4.9999994e-06, <memory at 0x75e487d62200>, True), (<memory at 0x75e487d61780>, 5e-06, 5e-06, <memory at 0x75e487d63340>, True), (<memory at 0x75e487d63400>, 5.0000003e-06, 5.0000003e-06, <memory at 0x75e487d61cc0>, True), (<memory at 0x75e487d63280>, 9.999999e-06, 9.999999e-06, <memory at 0x75e487d613c0>, True), (<memory at 0x75e487d63b80>, 1e-05, 1e-05, <memory at 0x75e480520700>, True), (<memory at 0x75e480520b80>, 1.0000001e-05, 1.0000001e-05, <memory at 0x75e480520640>, True), (<memory at 0x75e480520940>, 9.9999976e-05, 9.9999976e-05, <memory at 0x75e480520d00>, True), (<memory at 0x75e480520880>, 9.999998e-05, 9.999998e-05, <memory at 0x75e480520f40>, True), (<memory at 0x75e480520e80>, 9.999999e-05, 9.999999e-05, <memory at 0x75e480521000>, True), (<memory at 0x75e480521180>, 0.0001, 0.0001, <memory at 0x75e480520580>, True), (<memory at 0x75e480521f00>, 0.000100000005, 0.000100000005, <memory at 0x75e4805210c0>, True), (<memory at 0x75e4805213c0>, 0.00010000001, 0.00010000001, <memory at 0x75e480520a00>, True), (<memory at 0x75e480522ec0>, 0.00010000002, 0.00010000002, <memory at 0x75e480522680>, True), (<memory at 0x75e480522800>, 0.00010000003, 0.00010000003, <memory at 0x75e480522080>, True), (<memory at 0x75e480522500>, 0.000100000034, 0.000100000034, <memory at 0x75e480522140>, True), (<memory at 0x75e480522380>, 0.00010000004, 0.00010000004, <memory at 0x75e480522440>, True), (<memory at 0x75e480522200>, 0.00010681151, 0.00010681151, <memory at 0x75e4805225c0>, True), (<memory at 0x75e480522740>, 0.000106811516, 0.000106811516, <memory at 0x75e4805228c0>, True), (<memory at 0x75e480522980>, 0.00010681152, 0.00010681152, <memory at 0x75e480522a40>, True), (<memory at 0x75e480522b00>, 0.00011444091, 0.00011444091, <memory at 0x75e480522bc0>, True), (<memory at 0x75e480522c80>, 0.00011444092, 0.00011444092, <memory at 0x75e480521240>, True), (<memory at 0x75e4805219c0>, 0.000114440925, 0.000114440925, <memory at 0x75e480521300>, True), (<memory at 0x75e480521780>, 0.0009999999, 0.0009999999, <memory at 0x75e480521cc0>, True), (<memory at 0x75e480521840>, 0.001, 0.001, <memory at 0x75e480521b40>, True), (<memory at 0x75e480521c00>, 0.0010000002, 0.0010000002, <memory at 0x75e480521d80>, True), (<memory at 0x75e480521480>, 0.009999999, 0.009999999, <memory at 0x75e4805216c0>, True), (<memory at 0x75e480521600>, 0.01, 0.01, <memory at 0x75e480521900>, True), (<memory at 0x75e480521540>, 0.010000001, 0.010000001, <memory at 0x75e480521a80>, True), (<memory at 0x75e480521e40>, 0.099999994, 0.099999994, <memory at 0x75e4805201c0>, True), (<memory at 0x75e480520280>, 0.1, 0.1, <memory at 0x75e480520040>, True), (<memory at 0x75e480520100>, 0.10000001, 0.10000001, <memory at 0x75e480520340>, True), (<memory at 0x75e480520400>, 0.10000121, 0.10000121, <memory at 0x75e4805204c0>, True), (<memory at 0x75e480523880>, 0.100001216, 0.100001216, <memory at 0x75e480523c40>, True), (<memory at 0x75e480521fc0>, 0.10000122, 0.10000122, <memory at 0x75e4805222c0>, True), (<memory at 0x75e480520c40>, 0.49999997, 0.49999997, <memory at 0x75e480520dc0>, True), (<memory at 0x75e4805207c0>, 0.5, 0.5, <memory at 0x75e480520ac0>, True), (<memory at 0x75e480522d40>, 0.50000006, 0.50000006, <memory at 0x75e480523100>, True), (<memory at 0x75e480522e00>, 0.6999999, 0.6999999, <memory at 0x75e480523040>, True), (<memory at 0x75e480522f80>, 0.7, 0.7, <memory at 0x75e4805231c0>, True), (<memory at 0x75e480523280>, 0.70000005, 0.70000005, <memory at 0x75e480523940>, True), (<memory at 0x75e480523a00>, 0.8999999, 0.8999999, <memory at 0x75e480523f40>, True), (<memory at 0x75e4805237c0>, 0.9, 0.9, <memory at 0x75e480523ac0>, True), (<memory at 0x75e480523b80>, 0.90000004, 0.90000004, <memory at 0x75e480523d00>, True), (<memory at 0x75e480523dc0>, 0.98999995, 0.98999995, <memory at 0x75e480523e80>, True), (<memory at 0x75e480548040>, 0.99, 0.99, <memory at 0x75e480548100>, True), (<memory at 0x75e4805481c0>, 0.99000007, 0.99000007, <memory at 0x75e480548280>, True), (<memory at 0x75e480548340>, 0.99899995, 0.99899995, <memory at 0x75e480548400>, True), (<memory at 0x75e4805484c0>, 0.999, 0.999, <memory at 0x75e480548580>, True), (<memory at 0x75e480548640>, 0.9990001, 0.9990001, <memory at 0x75e480548700>, True), (<memory at 0x75e4805487c0>, 0.9998999, 0.9998999, <memory at 0x75e480548880>, True), (<memory at 0x75e480548940>, 0.9999, 0.9999, <memory at 0x75e480548a00>, True), (<memory at 0x75e480548ac0>, 0.99990004, 0.99990004, <memory at 0x75e480548b80>, True), (<memory at 0x75e480548c40>, 0.9999899, 0.9999899, <memory at 0x75e480548d00>, True), (<memory at 0x75e480548dc0>, 0.99999, 0.99999, <memory at 0x75e480548e80>, True), (<memory at 0x75e480548f40>, 0.99999005, 0.99999005, <memory at 0x75e480549000>, True), (<memory at 0x75e4805490c0>, 0.9999989, 0.9999989, <memory at 0x75e480549180>, True), (<memory at 0x75e480549240>, 0.999999, 0.999999, <memory at 0x75e480549300>, True), (<memory at 0x75e4805493c0>, 0.99999905, 0.99999905, <memory at 0x75e480549480>, True), (<memory at 0x75e480549540>, 0.9999991, 0.9999991, <memory at 0x75e480549600>, True), (<memory at 0x75e4805496c0>, 0.99999917, 0.99999917, <memory at 0x75e480549780>, True), (<memory at 0x75e480549840>, 0.9999992, 0.9999992, <memory at 0x75e480549900>, True), (<memory at 0x75e4805499c0>, 0.9999993, 0.9999993, <memory at 0x75e480549a80>, True), (<memory at 0x75e480549b40>, 0.99999934, 0.99999934, <memory at 0x75e480549c00>, True), (<memory at 0x75e480549cc0>, 0.9999994, 0.9999994, <memory at 0x75e480549d80>, True), (<memory at 0x75e480549e40>, 0.99999946, 0.99999946, <memory at 0x75e480549f00>, True), (<memory at 0x75e480549fc0>, 0.9999995, 0.9999995, <memory at 0x75e48054a080>, True), (<memory at 0x75e48054a140>, 0.9999996, 0.9999996, <memory at 0x75e48054a200>, True), (<memory at 0x75e48054a2c0>, 0.99999964, 0.99999964, <memory at 0x75e48054a380>, True), (<memory at 0x75e48054a440>, 0.9999997, 0.9999997, <memory at 0x75e48054a500>, True), (<memory at 0x75e48054a5c0>, 0.99999976, 0.99999976, <memory at 0x75e48054a680>, True), (<memory at 0x75e48054a740>, 0.9999998, 0.9999998, <memory at 0x75e48054a800>, True), (<memory at 0x75e48054a8c0>, 0.9999999, 0.9999999, <memory at 0x75e48054a980>, True), (<memory at 0x75e48054aa40>, 0.99999994, 0.99999994, <memory at 0x75e48054ab00>, True), (<memory at 0x75e48054abc0>, 1.0, 1.0, <memory at 0x75e48054ac80>, True), (<memory at 0x75e48054ad40>, 1.0000001, 1.0000001, <memory at 0x75e48054ae00>, True), (<memory at 0x75e48054aec0>, 1.0000002, 1.0000002, <memory at 0x75e48054af80>, True), (<memory at 0x75e48054b040>, 1.0000004, 1.0000004, <memory at 0x75e48054b100>, True), (<memory at 0x75e48054b1c0>, 1.0000005, 1.0000005, <memory at 0x75e48054b280>, True), (<memory at 0x75e48054b340>, 1.0000006, 1.0000006, <memory at 0x75e48054b400>, True), (<memory at 0x75e48054b4c0>, 1.0000007, 1.0000007, <memory at 0x75e48054b580>, True), (<memory at 0x75e48054b640>, 1.0000008, 1.0000008, <memory at 0x75e48054b700>, True), (<memory at 0x75e48054b7c0>, 1.000001, 1.000001, <memory at 0x75e48054b880>, True), (<memory at 0x75e48054b940>, 1.0000011, 1.0000011, <memory at 0x75e48054ba00>, True), (<memory at 0x75e48054bac0>, 1.0000018, 1.0000018, <memory at 0x75e48054bb80>, True), (<memory at 0x75e48054bc40>, 1.0000019, 1.0000019, <memory at 0x75e48054bd00>, True), (<memory at 0x75e48054bdc0>, 1.000002, 1.000002, <memory at 0x75e48054be80>, True), (<memory at 0x75e48054bf40>, 1.0000021, 1.0000021, <memory at 0x75e4805c4040>, True), (<memory at 0x75e4805c4100>, 1.0000023, 1.0000023, <memory at 0x75e4805c41c0>, True), (<memory at 0x75e4805c4280>, 1.0000024, 1.0000024, <memory at 0x75e4805c4340>, True), (<memory at 0x75e4805c4400>, 1.0000027, 1.0000027, <memory at 0x75e4805c44c0>, True), (<memory at 0x75e4805c4580>, 1.0000029, 1.0000029, <memory at 0x75e4805c4640>, True), (<memory at 0x75e4805c4700>, 1.000003, 1.000003, <memory at 0x75e4805c47c0>, True), (<memory at 0x75e4805c4880>, 1.0000031, 1.0000031, <memory at 0x75e4805c4940>, True), (<memory at 0x75e4805c4a00>, 1.0000032, 1.0000032, <memory at 0x75e4805c4ac0>, True), (<memory at 0x75e4805c4b80>, 1.0000033, 1.0000033, <memory at 0x75e4805c4c40>, True), (<memory at 0x75e4805c4d00>, 1.0000049, 1.0000049, <memory at 0x75e4805c4dc0>, True), (<memory at 0x75e4805c4e80>, 1.000005, 1.000005, <memory at 0x75e4805c4f40>, True), (<memory at 0x75e4805c5000>, 1.0000051, 1.0000051, <memory at 0x75e4805c50c0>, True), (<memory at 0x75e4805c5180>, 1.0000099, 1.0000099, <memory at 0x75e4805c5240>, True), (<memory at 0x75e4805c5300>, 1.00001, 1.00001, <memory at 0x75e4805c53c0>, True), (<memory at 0x75e4805c5480>, 1.0000101, 1.0000101, <memory at 0x75e4805c5540>, True), (<memory at 0x75e4805c5600>, 1.0000999, 1.0000999, <memory at 0x75e4805c56c0>, True), (<memory at 0x75e4805c5780>, 1.0001, 1.0001, <memory at 0x75e4805c5840>, True), (<memory at 0x75e4805c5900>, 1.0001001, 1.0001001, <memory at 0x75e4805c59c0>, True), (<memory at 0x75e4805c5a80>, 1.0009999, 1.0009999, <memory at 0x75e4805c5b40>, True), (<memory at 0x75e4805c5c00>, 1.001, 1.001, <memory at 0x75e4805c5cc0>, True), (<memory at 0x75e4805c5d80>, 1.0010002, 1.0010002, <memory at 0x75e4805c5e40>, True), (<memory at 0x75e4805c5f00>, 1.0099999, 1.0099999, <memory at 0x75e4805c5fc0>, True), (<memory at 0x75e4805c6080>, 1.01, 1.01, <memory at 0x75e4805c6140>, True), (<memory at 0x75e4805c6200>, 1.0100001, 1.0100001, <memory at 0x75e4805c62c0>, True), (<memory at 0x75e4805c6380>, 1.0999999, 1.0999999, <memory at 0x75e4805c6440>, True), (<memory at 0x75e4805c6500>, 1.1, 1.1, <memory at 0x75e4805c65c0>, True), (<memory at 0x75e4805c6680>, 1.1000001, 1.1000001, <memory at 0x75e4805c6740>, True), (<memory at 0x75e4805c6800>, 1.5707964, 1.5707964, <memory at 0x75e4805c68c0>, True), (<memory at 0x75e4805c6980>, 2.7182817, 2.7182817, <memory at 0x75e4805c6a40>, True), (<memory at 0x75e4805c6b00>, 3.1415927, 3.1415927, <memory at 0x75e4805c6bc0>, True), (<memory at 0x75e4805c6c80>, 4.9999995, 4.9999995, <memory at 0x75e4805c6d40>, True), (<memory at 0x75e4805c6e00>, 5.0, 5.0, <memory at 0x75e4805c6ec0>, True), (<memory at 0x75e4805c6f80>, 5.0000005, 5.0000005, <memory at 0x75e4805c7040>, True), (<memory at 0x75e4805c7100>, 5.4999995, 5.4999995, <memory at 0x75e4805c71c0>, True), (<memory at 0x75e4805c7280>, 5.5, 5.5, <memory at 0x75e4805c7340>, True), (<memory at 0x75e4805c7400>, 5.5000005, 5.5000005, <memory at 0x75e4805c74c0>, True), (<memory at 0x75e4805c7580>, 9.999999, 9.999999, <memory at 0x75e4805c7640>, True), (<memory at 0x75e4805c7700>, 10.0, 10.0, <memory at 0x75e4805c77c0>, True), (<memory at 0x75e4805c7880>, 10.000001, 10.000001, <memory at 0x75e4805c7940>, True), (<memory at 0x75e4805c7a00>, 99.99999, 99.99999, <memory at 0x75e4805c7ac0>, True), (<memory at 0x75e4805c7b80>, 100.0, 100.0, <memory at 0x75e4805c7c40>, True), (<memory at 0x75e4805c7d00>, 100.00001, 100.00001, <memory at 0x75e4805c7dc0>, True), (<memory at 0x75e4805c7e80>, 999.99994, 999.99994, <memory at 0x75e4805c7f40>, True), (<memory at 0x75e48050c040>, 1000.0, 1000.0, <memory at 0x75e48050c100>, True), (<memory at 0x75e48050c1c0>, 1000.00006, 1000.00006, <memory at 0x75e48050c280>, True), (<memory at 0x75e48050c340>, 9999.999, 9999.999, <memory at 0x75e48050c400>, True), (<memory at 0x75e48050c4c0>, 10000.0, 10000.0, <memory at 0x75e48050c580>, True), (<memory at 0x75e48050c640>, 10000.001, 10000.001, <memory at 0x75e48050c700>, True), (<memory at 0x75e48050c7c0>, 99999.99, 99999.99, <memory at 0x75e48050c880>, True), (<memory at 0x75e48050c940>, 100000.0, 100000.0, <memory at 0x75e48050ca00>, True), (<memory at 0x75e48050cac0>, 100000.01, 100000.01, <memory at 0x75e48050cb80>, True), (<memory at 0x75e48050cc40>, 999999.94, 999999.94, <memory at 0x75e48050cd00>, True), (<memory at 0x75e48050cdc0>, 1000000.0, 1000000.0, <memory at 0x75e48050ce80>, True), (<memory at 0x75e48050cf40>, 1000000.06, 1000000.06, <memory at 0x75e48050d000>, True), (<memory at 0x75e48050d0c0>, 9999999.0, 9999999.0, <memory at 0x75e48050d180>, True), (<memory at 0x75e48050d240>, 10000000.0, 10000000.0, <memory at 0x75e48050d300>, True), (<memory at 0x75e48050d3c0>, 10000001.0, 10000001.0, <memory at 0x75e48050d480>, True), (<memory at 0x75e48050d540>, 99999990.0, 99999990.0, <memory at 0x75e48050d600>, True), (<memory at 0x75e48050d6c0>, 100000000.0, 100000000.0, <memory at 0x75e48050d780>, True), (<memory at 0x75e48050d840>, 100000010.0, 100000010.0, <memory at 0x75e48050d900>, True), (<memory at 0x75e48050d9c0>, 999999940.0, 999999940.0, <memory at 0x75e48050da80>, True), (<memory at 0x75e48050db40>, 1000000000.0, 1000000000.0, <memory at 0x75e48050dc00>, True), (<memory at 0x75e48050dcc0>, 1000000060.0, 1000000060.0, <memory at 0x75e48050dd80>, True), (<memory at 0x75e48050de40>, 9999999000.0, 9999999000.0, <memory at 0x75e48050df00>, True), (<memory at 0x75e48050dfc0>, 10000000000.0, 10000000000.0, <memory at 0x75e48050e080>, True), (<memory at 0x75e48050e140>, 10000001000.0, 10000001000.0, <memory at 0x75e48050e200>, True), (<memory at 0x75e48050e2c0>, 99999990000.0, 99999990000.0, <memory at 0x75e48050e380>, True), (<memory at 0x75e48050e440>, 100000000000.0, 100000000000.0, <memory at 0x75e48050e500>, True), (<memory at 0x75e48050e5c0>, 100000010000.0, 100000010000.0, <memory at 0x75e48050e680>, True), (<memory at 0x75e48050e740>, 5e-20, 5e-20, <memory at 0x75e48050e800>, True), (<memory at 0x75e48050e8c0>, 6700000000000000.0, 6700000000000000.0, <memory at 0x75e48050e980>, True), (<memory at 0x75e48050ea40>, 9.85e+17, 9.85e+17, <memory at 0x75e48050eb00>, True), (<memory at 0x75e48050ebc0>, 5.5895e-12, 5.5895e-12, <memory at 0x75e48050ec80>, True), (<memory at 0x75e48050ed40>, 7.038531e-26, 7.038531e-26, <memory at 0x75e48050ee00>, True), (<memory at 0x75e48050eec0>, 7.0299088e-12, 7.0299088e-12, <memory at 0x75e48050ef80>, True), (<memory at 0x75e48050f040>, 2.5933168e+23, 2.5933168e+23, <memory at 0x75e48050f100>, True), (<memory at 0x75e48050f1c0>, 5.9642887e+31, 5.9642887e+31, <memory at 0x75e48050f280>, True), (<memory at 0x75e48050f340>, 123456.7, 123456.7, <memory at 0x75e48050f400>, True), (<memory at 0x75e48050f4c0>, 12345.67, 12345.67, <memory at 0x75e48050f580>, True), (<memory at 0x75e48050f640>, 1234.567, 1234.567, <memory at 0x75e48050f700>, True), (<memory at 0x75e48050f7c0>, 123.4567, 123.4567, <memory at 0x75e48050f880>, True), (<memory at 0x75e48050f940>, 12.34567, 12.34567, <memory at 0x75e48050fa00>, True), (<memory at 0x75e48050fac0>, 1.234567, 1.234567, <memory at 0x75e48050fb80>, True), (<memory at 0x75e48050fc40>, 33554448.0, 33554448.0, <memory at 0x75e48050fd00>, True), (<memory at 0x75e48050fdc0>, 8999999000.0, 8999999000.0, <memory at 0x75e48050fe80>, True), (<memory at 0x75e48050ff40>, 34366718000.0, 34366718000.0, <memory at 0x75e4805e8040>, True), (<memory at 0x75e4805e8100>, 305404.12, 305404.12, <memory at 0x75e4805e81c0>, True), (<memory at 0x75e4805e8280>, 8099.0312, 8099.0312, <memory at 0x75e4805e8340>, True), (<memory at 0x75e4805e8400>, 0.00024414062, 0.00024414062, <memory at 0x75e4805e84c0>, True), (<memory at 0x75e4805e8580>, 0.0024414062, 0.0024414062, <memory at 0x75e4805e8640>, True), (<memory at 0x75e4805e8700>, 0.0043945312, 0.0043945312, <memory at 0x75e4805e87c0>, True), (<memory at 0x75e4805e8880>, 0.0063476562, 0.0063476562, <memory at 0x75e4805e8940>, True), (<memory at 0x75e4805e8a00>, 4.7223665e+21, 4.7223665e+21, <memory at 0x75e4805e8ac0>, True), (<memory at 0x75e4805e8b80>, 8388608.0, 8388608.0, <memory at 0x75e4805e8c40>, True), (<memory at 0x75e4805e8d00>, 16777216.0, 16777216.0, <memory at 0x75e4805e8dc0>, True), (<memory at 0x75e4805e8e80>, 33554436.0, 33554436.0, <memory at 0x75e4805e8f40>, True), (<memory at 0x75e4805e9000>, 67131496.0, 67131496.0, <memory at 0x75e4805e90c0>, True), (<memory at 0x75e4805e9180>, 1.9310392e-38, 1.9310392e-38, <memory at 0x75e4805e9240>, True), (<memory at 0x75e4805e9300>, 1.993244e-38, 1.993244e-38, <memory at 0x75e4805e93c0>, True), (<memory at 0x75e4805e9480>, 4103.9004, 4103.9004, <memory at 0x75e4805e9540>, True), (<memory at 0x75e4805e9600>, 5339999700.0, 5339999700.0, <memory at 0x75e4805e96c0>, True), (<memory at 0x75e4805e9780>, 0.0010310042, 0.0010310042, <memory at 0x75e4805e9840>, True), (<memory at 0x75e4805e9900>, 2.882326e+17, 2.882326e+17, <memory at 0x75e4805e99c0>, True), (<memory at 0x75e4805e9a80>, 7.038531e-26, 7.038531e-26, <memory at 0x75e4805e9b40>, True), (<memory at 0x75e4805e9c00>, 9.223404e+17, 9.223404e+17, <memory at 0x75e4805e9cc0>, True), (<memory at 0x75e4805e9d80>, 67108870.0, 67108870.0, <memory at 0x75e4805e9e40>, True), (<memory at 0x75e4805e9f00>, 281602500000000.0, 281602500000000.0, <memory at 0x75e4805e9fc0>, True), (<memory at 0x75e4805ea080>, 9.223372e+18, 9.223372e+18, <memory at 0x75e4805ea140>, True), (<memory at 0x75e4805ea200>, 1.5846086e+29, 1.5846086e+29, <memory at 0x75e4805ea2c0>, True), (<memory at 0x75e4805ea380>, 1.1811161e+19, 1.1811161e+19, <memory at 0x75e4805ea440>, True), (<memory at 0x75e4805ea500>, 5.368709e+18, 5.368709e+18, <memory at 0x75e4805ea5c0>, True), (<memory at 0x75e4805ea680>, 4.6143166e+18, 4.6143166e+18, <memory at 0x75e4805ea740>, True), (<memory at 0x75e4805ea800>, 0.007812537, 0.007812537, <memory at 0x75e4805ea8c0>, True), (<memory at 0x75e4805ea980>, 1.18697725e+20, 1.18697725e+20, <memory at 0x75e4805eaa40>, True), (<memory at 0x75e4805eab00>, 1.00014165e-36, 1.00014165e-36, <memory at 0x75e4805eabc0>, True), (<memory at 0x75e4805eac80>, 200.0, 200.0, <memory at 0x75e4805ead40>, True), (<memory at 0x75e4805eae00>, 33554432.0, 33554432.0, <memory at 0x75e4805eaec0>, True), (<memory at 0x75e4805eaf80>, 6.7108864e+17, 6.7108864e+17, <memory at 0x75e4805eb040>, True), (<memory at 0x75e4805eb100>, 1.3421773e+18, 1.3421773e+18, <memory at 0x75e4805eb1c0>, True), (<memory at 0x75e4805eb280>, 2.6843546e+18, 2.6843546e+18, <memory at 0x75e4805eb340>, True), (<memory at 0x75e4805eb400>, 1.2, 1.2, <memory at 0x75e4805eb4c0>, True), (<memory at 0x75e4805eb580>, 1.23, 1.23, <memory at 0x75e4805eb640>, True), (<memory at 0x75e4805eb700>, 1.234, 1.234, <memory at 0x75e4805eb7c0>, True), (<memory at 0x75e4805eb880>, 1.2345, 1.2345, <memory at 0x75e4805eb940>, True), (<memory at 0x75e4805eba00>, 1.23456, 1.23456, <memory at 0x75e4805ebac0>, True), (<memory at 0x75e4805ebb80>, 1.234567, 1.234567, <memory at 0x75e4805ebc40>, True), (<memory at 0x75e4805ebd00>, 1.2345678, 1.2345678, <memory at 0x75e4805ebdc0>, True), (<memory at 0x75e4805ebe80>, 1.23456735e-36, 1.23456735e-36, <memory at 0x75e4805ebf40>, True)]

-----------
QUERY:


-- clean up, lest opr_sanity complain
drop type xfloat4 cascade;
RESULT:
	[]
