Guest DBMS identified: postgres
-----------
QUERY:
--
-- FLOAT4
--

CREATE TABLE FLOAT4_TBL (f1  float4);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


INSERT INTO FLOAT4_TBL(f1) VALUES ('    0.0');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('1004.30   ');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('     -34.84    ');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('1.2345678901234e+20');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('1.2345678901234e-20');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- test for over and under flow
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70'::float8);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70'::float8);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70'::float8);
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70'::float8);
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:


INSERT INTO FLOAT4_TBL(f1) VALUES ('10e400');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e400');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-400');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-400');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- bad input
INSERT INTO FLOAT4_TBL(f1) VALUES ('');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('       ');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('xyz');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('5.0.0');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('5 . 0');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('5.   0');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('     - 3.0');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('123            5');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Also try it with non-error-throwing API
SELECT pg_input_is_valid('34.5', 'float4');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('xyz', 'float4');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('1e400', 'float4');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('1e400', 'float4');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- special inputs
SELECT 'NaN'::float4;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 'nan'::float4;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT '   NAN  '::float4;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 'infinity'::float4;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT '          -INFINiTY   '::float4;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

-- bad special inputs
SELECT 'N A N'::float4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'NaN x'::float4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT ' INFINITY    x'::float4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'Infinity'::float4 + 100.0;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 'Infinity'::float4 / 'Infinity'::float4;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT '42'::float4 / 'Infinity'::float4;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 'nan'::float4 / 'nan'::float4;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 'nan'::float4 / '0'::float4;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

SELECT 'nan'::numeric::float4;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT * FROM FLOAT4_TBL;
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE f.f1 <> '1004.3';
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE f.f1 = '1004.3';
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE '1004.3' > f.f1;
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE  f.f1 < '1004.3';
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE '1004.3' >= f.f1;
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE  f.f1 <= '1004.3';
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


SELECT f.f1, f.f1 * '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


SELECT f.f1, f.f1 + '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


SELECT f.f1, f.f1 / '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


SELECT f.f1, f.f1 - '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


-- test divide by zero
SELECT f.f1 / '0.0' from FLOAT4_TBL f;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT * FROM FLOAT4_TBL;
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


-- test the unary float4abs operator
SELECT f.f1, @f.f1 AS abs_f1 FROM FLOAT4_TBL f;
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


UPDATE FLOAT4_TBL
   SET f1 = FLOAT4_TBL.f1 * '-1'
   WHERE FLOAT4_TBL.f1 > '0.0';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT * FROM FLOAT4_TBL;
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


-- test edge-case coercions to integer
SELECT '32767.4'::float4::int2;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT '32767.6'::float4::int2;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT '-32768.4'::float4::int2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT '-32768.6'::float4::int2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT '2147483520'::float4::int4;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT '2147483647'::float4::int4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT '-2147483648.5'::float4::int4;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT '-2147483900'::float4::int4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT '9223369837831520256'::float4::int8;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT '9223372036854775807'::float4::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT '-9223372036854775808.5'::float4::int8;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT '-9223380000000000000'::float4::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- test output (and round-trip safety) of various values.
-- To ensure we/* REPLACED */ ''re testing what we think we/* REPLACED */ ''re testing, start with
-- float values specified by bit patterns (as a useful side effect,
-- this means we/* REPLACED */ ''ll fail on non-IEEE platforms).

create type xfloat4;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create function xfloat4in(cstring) returns xfloat4 immutable strict
  language internal as 'int4in';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create function xfloat4out(xfloat4) returns cstring immutable strict
  language internal as 'int4out';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create type xfloat4 (input = xfloat4in, output = xfloat4out, like = float4);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create cast (xfloat4 as float4) without function;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create cast (float4 as xfloat4) without function;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create cast (xfloat4 as integer) without function;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create cast (integer as xfloat4) without function;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- clean up, lest opr_sanity complain
drop type xfloat4 cascade;
RESULT: [duckdb: ERROR, mysql: ERROR]


=========================================
Summary for test case float4/test.sql of postgres
=========================================

=================
Results for duckdb
SAME: 40 queries, which is 49.38%
DIFFERENT: 14 queries, which is 17.28%
ERROR: 27 queries, which is 33.33%

=================
Results for mysql
SAME: 32 queries, which is 39.51%
DIFFERENT: 14 queries, which is 17.28%
ERROR: 35 queries, which is 43.21%
