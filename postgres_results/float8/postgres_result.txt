
-----------
QUERY:
--
-- FLOAT8
--

--
-- Build a table for testing
-- (This temporarily hides the table created in test_setup.sql)
--

CREATE TEMP TABLE FLOAT8_TBL(f1 float8);
RESULT:
	[]

-----------
QUERY:


INSERT INTO FLOAT8_TBL(f1) VALUES ('    0.0   ');
RESULT:
	[]

-----------
QUERY:

INSERT INTO FLOAT8_TBL(f1) VALUES ('1004.30  ');
RESULT:
	[]

-----------
QUERY:

INSERT INTO FLOAT8_TBL(f1) VALUES ('   -34.84');
RESULT:
	[]

-----------
QUERY:

INSERT INTO FLOAT8_TBL(f1) VALUES ('1.2345678901234e+200');
RESULT:
	[]

-----------
QUERY:

INSERT INTO FLOAT8_TBL(f1) VALUES ('1.2345678901234e-200');
RESULT:
	[]

-----------
QUERY:


-- test for underflow and overflow handling
SELECT '10e400'::float8;
RESULT:
	ERROR - "10e400" is out of range for type double precision
LINE 4: SELECT '10e400'::float8;
               ^


-----------
QUERY:

SELECT '-10e400'::float8;
RESULT:
	ERROR - "-10e400" is out of range for type double precision
LINE 2: SELECT '-10e400'::float8;
               ^


-----------
QUERY:

SELECT '10e-400'::float8;
RESULT:
	ERROR - "10e-400" is out of range for type double precision
LINE 2: SELECT '10e-400'::float8;
               ^


-----------
QUERY:

SELECT '-10e-400'::float8;
RESULT:
	ERROR - "-10e-400" is out of range for type double precision
LINE 2: SELECT '-10e-400'::float8;
               ^


-----------
QUERY:


-- test smallest normalized input
SELECT float8send('2.2250738585072014E-308'::float8);
RESULT:
	[(<memory at 0x75e4a8bd5840>,)]

-----------
QUERY:


-- bad input
INSERT INTO FLOAT8_TBL(f1) VALUES ('');
RESULT:
	ERROR - invalid input syntax for type double precision: ""
LINE 4: INSERT INTO FLOAT8_TBL(f1) VALUES ('');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT8_TBL(f1) VALUES ('     ');
RESULT:
	ERROR - invalid input syntax for type double precision: "     "
LINE 2: INSERT INTO FLOAT8_TBL(f1) VALUES ('     ');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT8_TBL(f1) VALUES ('xyz');
RESULT:
	ERROR - invalid input syntax for type double precision: "xyz"
LINE 2: INSERT INTO FLOAT8_TBL(f1) VALUES ('xyz');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT8_TBL(f1) VALUES ('5.0.0');
RESULT:
	ERROR - invalid input syntax for type double precision: "5.0.0"
LINE 2: INSERT INTO FLOAT8_TBL(f1) VALUES ('5.0.0');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT8_TBL(f1) VALUES ('5 . 0');
RESULT:
	ERROR - invalid input syntax for type double precision: "5 . 0"
LINE 2: INSERT INTO FLOAT8_TBL(f1) VALUES ('5 . 0');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT8_TBL(f1) VALUES ('5.   0');
RESULT:
	ERROR - invalid input syntax for type double precision: "5.   0"
LINE 2: INSERT INTO FLOAT8_TBL(f1) VALUES ('5.   0');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT8_TBL(f1) VALUES ('    - 3');
RESULT:
	ERROR - invalid input syntax for type double precision: "    - 3"
LINE 2: INSERT INTO FLOAT8_TBL(f1) VALUES ('    - 3');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT8_TBL(f1) VALUES ('123           5');
RESULT:
	ERROR - invalid input syntax for type double precision: "123           5"
LINE 2: INSERT INTO FLOAT8_TBL(f1) VALUES ('123           5');
                                           ^


-----------
QUERY:


-- Also try it with non-error-throwing API
SELECT pg_input_is_valid('34.5', 'float8');
RESULT:
	[(True,)]

-----------
QUERY:

SELECT pg_input_is_valid('xyz', 'float8');
RESULT:
	[(False,)]

-----------
QUERY:

SELECT pg_input_is_valid('1e4000', 'float8');
RESULT:
	[(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('1e4000', 'float8');
RESULT:
	[('"1e4000" is out of range for type double precision', None, None, '22003')]

-----------
QUERY:


-- special inputs
SELECT 'NaN'::float8;
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT 'nan'::float8;
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT '   NAN  '::float8;
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT 'infinity'::float8;
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT '          -INFINiTY   '::float8;
RESULT:
	[(-inf,)]

-----------
QUERY:

-- bad special inputs
SELECT 'N A N'::float8;
RESULT:
	ERROR - invalid input syntax for type double precision: "N A N"
LINE 3: SELECT 'N A N'::float8;
               ^


-----------
QUERY:

SELECT 'NaN x'::float8;
RESULT:
	ERROR - invalid input syntax for type double precision: "NaN x"
LINE 2: SELECT 'NaN x'::float8;
               ^


-----------
QUERY:

SELECT ' INFINITY    x'::float8;
RESULT:
	ERROR - invalid input syntax for type double precision: " INFINITY    x"
LINE 2: SELECT ' INFINITY    x'::float8;
               ^


-----------
QUERY:


SELECT 'Infinity'::float8 + 100.0;
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT 'Infinity'::float8 / 'Infinity'::float8;
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT '42'::float8 / 'Infinity'::float8;
RESULT:
	[(0.0,)]

-----------
QUERY:

SELECT 'nan'::float8 / 'nan'::float8;
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT 'nan'::float8 / '0'::float8;
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT 'nan'::numeric::float8;
RESULT:
	[(nan,)]

-----------
QUERY:


SELECT * FROM FLOAT8_TBL;
RESULT:
	[(0.0,), (1004.3,), (-34.84,), (1.2345678901234e+200,), (1.2345678901234e-200,)]

-----------
QUERY:


SELECT f.* FROM FLOAT8_TBL f WHERE f.f1 <> '1004.3';
RESULT:
	[(0.0,), (-34.84,), (1.2345678901234e+200,), (1.2345678901234e-200,)]

-----------
QUERY:


SELECT f.* FROM FLOAT8_TBL f WHERE f.f1 = '1004.3';
RESULT:
	[(1004.3,)]

-----------
QUERY:


SELECT f.* FROM FLOAT8_TBL f WHERE '1004.3' > f.f1;
RESULT:
	[(0.0,), (-34.84,), (1.2345678901234e-200,)]

-----------
QUERY:


SELECT f.* FROM FLOAT8_TBL f WHERE  f.f1 < '1004.3';
RESULT:
	[(0.0,), (-34.84,), (1.2345678901234e-200,)]

-----------
QUERY:


SELECT f.* FROM FLOAT8_TBL f WHERE '1004.3' >= f.f1;
RESULT:
	[(0.0,), (1004.3,), (-34.84,), (1.2345678901234e-200,)]

-----------
QUERY:


SELECT f.* FROM FLOAT8_TBL f WHERE  f.f1 <= '1004.3';
RESULT:
	[(0.0,), (1004.3,), (-34.84,), (1.2345678901234e-200,)]

-----------
QUERY:


SELECT f.f1, f.f1 * '-10' AS x
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	[(1004.3, -10043.0), (1.2345678901234e+200, -1.2345678901234e+201), (1.2345678901234e-200, -1.2345678901234e-199)]

-----------
QUERY:


SELECT f.f1, f.f1 + '-10' AS x
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	[(1004.3, 994.3), (1.2345678901234e+200, 1.2345678901234e+200), (1.2345678901234e-200, -10.0)]

-----------
QUERY:


SELECT f.f1, f.f1 / '-10' AS x
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	[(1004.3, -100.42999999999999), (1.2345678901234e+200, -1.2345678901234e+199), (1.2345678901234e-200, -1.2345678901234e-201)]

-----------
QUERY:


SELECT f.f1, f.f1 - '-10' AS x
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	[(1004.3, 1014.3), (1.2345678901234e+200, 1.2345678901234e+200), (1.2345678901234e-200, 10.0)]

-----------
QUERY:


SELECT f.f1 ^ '2.0' AS square_f1
   FROM FLOAT8_TBL f where f.f1 = '1004.3';
RESULT:
	[(1008618.4899999999,)]

-----------
QUERY:


-- absolute value
SELECT f.f1, @f.f1 AS abs_f1
   FROM FLOAT8_TBL f;
RESULT:
	[(0.0, 0.0), (1004.3, 1004.3), (-34.84, 34.84), (1.2345678901234e+200, 1.2345678901234e+200), (1.2345678901234e-200, 1.2345678901234e-200)]

-----------
QUERY:


-- truncate
SELECT f.f1, trunc(f.f1) AS trunc_f1
   FROM FLOAT8_TBL f;
RESULT:
	[(0.0, 0.0), (1004.3, 1004.0), (-34.84, -34.0), (1.2345678901234e+200, 1.2345678901234e+200), (1.2345678901234e-200, 0.0)]

-----------
QUERY:


-- round
SELECT f.f1, round(f.f1) AS round_f1
   FROM FLOAT8_TBL f;
RESULT:
	[(0.0, 0.0), (1004.3, 1004.0), (-34.84, -35.0), (1.2345678901234e+200, 1.2345678901234e+200), (1.2345678901234e-200, 0.0)]

-----------
QUERY:


-- ceil / ceiling
select ceil(f1) as ceil_f1 from float8_tbl f;
RESULT:
	[(0.0,), (1005.0,), (-34.0,), (1.2345678901234e+200,), (1.0,)]

-----------
QUERY:

select ceiling(f1) as ceiling_f1 from float8_tbl f;
RESULT:
	[(0.0,), (1005.0,), (-34.0,), (1.2345678901234e+200,), (1.0,)]

-----------
QUERY:


-- floor
select floor(f1) as floor_f1 from float8_tbl f;
RESULT:
	[(0.0,), (1004.0,), (-35.0,), (1.2345678901234e+200,), (0.0,)]

-----------
QUERY:


-- sign
select sign(f1) as sign_f1 from float8_tbl f;
RESULT:
	[(0.0,), (1.0,), (-1.0,), (1.0,), (1.0,)]

-----------
QUERY:


-- avoid bit-exact output here because operations may not be bit-exact.
SET extra_float_digits = 0;
RESULT:
	[]

-----------
QUERY:


-- square root
SELECT sqrt(float8 '64') AS eight;
RESULT:
	[(8.0,)]

-----------
QUERY:


SELECT |/ float8 '64' AS eight;
RESULT:
	[(8.0,)]

-----------
QUERY:


SELECT f.f1, |/f.f1 AS sqrt_f1
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	[(1004.3, 31.6906926399535), (1.2345678901234e+200, 1.11111110611109e+100), (1.2345678901234e-200, 1.11111110611109e-100)]

-----------
QUERY:


-- power
SELECT power(float8 '144', float8 '0.5');
RESULT:
	[(12.0,)]

-----------
QUERY:

SELECT power(float8 'NaN', float8 '0.5');
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT power(float8 '144', float8 'NaN');
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT power(float8 'NaN', float8 'NaN');
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT power(float8 '-1', float8 'NaN');
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT power(float8 '1', float8 'NaN');
RESULT:
	[(1.0,)]

-----------
QUERY:

SELECT power(float8 'NaN', float8 '0');
RESULT:
	[(1.0,)]

-----------
QUERY:

SELECT power(float8 'inf', float8 '0');
RESULT:
	[(1.0,)]

-----------
QUERY:

SELECT power(float8 '-inf', float8 '0');
RESULT:
	[(1.0,)]

-----------
QUERY:

SELECT power(float8 '0', float8 'inf');
RESULT:
	[(0.0,)]

-----------
QUERY:

SELECT power(float8 '0', float8 '-inf');
RESULT:
	ERROR - zero raised to a negative power is undefined


-----------
QUERY:

SELECT power(float8 '1', float8 'inf');
RESULT:
	[(1.0,)]

-----------
QUERY:

SELECT power(float8 '1', float8 '-inf');
RESULT:
	[(1.0,)]

-----------
QUERY:

SELECT power(float8 '-1', float8 'inf');
RESULT:
	[(1.0,)]

-----------
QUERY:

SELECT power(float8 '-1', float8 '-inf');
RESULT:
	[(1.0,)]

-----------
QUERY:

SELECT power(float8 '0.1', float8 'inf');
RESULT:
	[(0.0,)]

-----------
QUERY:

SELECT power(float8 '-0.1', float8 'inf');
RESULT:
	[(0.0,)]

-----------
QUERY:

SELECT power(float8 '1.1', float8 'inf');
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT power(float8 '-1.1', float8 'inf');
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT power(float8 '0.1', float8 '-inf');
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT power(float8 '-0.1', float8 '-inf');
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT power(float8 '1.1', float8 '-inf');
RESULT:
	[(0.0,)]

-----------
QUERY:

SELECT power(float8 '-1.1', float8 '-inf');
RESULT:
	[(0.0,)]

-----------
QUERY:

SELECT power(float8 'inf', float8 '-2');
RESULT:
	[(0.0,)]

-----------
QUERY:

SELECT power(float8 'inf', float8 '2');
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT power(float8 'inf', float8 'inf');
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT power(float8 'inf', float8 '-inf');
RESULT:
	[(0.0,)]

-----------
QUERY:

-- Intel/* REPLACED */''s icc misoptimizes the code that controls the sign of this result,
-- even with -mp1.  Pending a fix for that, only test for /* REPLACED */''is it zero/* REPLACED */''.
SELECT power(float8 '-inf', float8 '-2') = '0';
RESULT:
	[(True,)]

-----------
QUERY:

SELECT power(float8 '-inf', float8 '-3');
RESULT:
	[(-0.0,)]

-----------
QUERY:

SELECT power(float8 '-inf', float8 '2');
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT power(float8 '-inf', float8 '3');
RESULT:
	[(-inf,)]

-----------
QUERY:

SELECT power(float8 '-inf', float8 '3.5');
RESULT:
	ERROR - a negative number raised to a non-integer power yields a complex result


-----------
QUERY:

SELECT power(float8 '-inf', float8 'inf');
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT power(float8 '-inf', float8 '-inf');
RESULT:
	[(0.0,)]

-----------
QUERY:


-- take exp of ln(f.f1)
SELECT f.f1, exp(ln(f.f1)) AS exp_ln_f1
   FROM FLOAT8_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	[(1004.3, 1004.3), (1.2345678901234e+200, 1.23456789012338e+200), (1.2345678901234e-200, 1.23456789012339e-200)]

-----------
QUERY:


-- check edge cases for exp
SELECT exp('inf'::float8), exp('-inf'::float8), exp('nan'::float8);
RESULT:
	[(inf, 0.0, nan)]

-----------
QUERY:


-- cube root
SELECT ||/ float8 '27' AS three;
RESULT:
	[(3.0,)]

-----------
QUERY:


SELECT f.f1, ||/f.f1 AS cbrt_f1 FROM FLOAT8_TBL f;
RESULT:
	[(0.0, 0.0), (1004.3, 10.014312837827), (-34.84, -3.26607421344208), (1.2345678901234e+200, 4.97933859234765e+66), (1.2345678901234e-200, 2.3112042409018e-67)]

-----------
QUERY:



SELECT * FROM FLOAT8_TBL;
RESULT:
	[(0.0,), (1004.3,), (-34.84,), (1.2345678901234e+200,), (1.2345678901234e-200,)]

-----------
QUERY:


UPDATE FLOAT8_TBL
   SET f1 = FLOAT8_TBL.f1 * '-1'
   WHERE FLOAT8_TBL.f1 > '0.0';
RESULT:
	[]

-----------
QUERY:


SELECT f.f1 * '1e200' from FLOAT8_TBL f;
RESULT:
	ERROR - value out of range: overflow


-----------
QUERY:


SELECT f.f1 ^ '1e200' from FLOAT8_TBL f;
RESULT:
	ERROR - value out of range: overflow


-----------
QUERY:


SELECT 0 ^ 0 + 0 ^ 1 + 0 ^ 0.0 + 0 ^ 0.5;
RESULT:
	[(2.0,)]

-----------
QUERY:


SELECT ln(f.f1) from FLOAT8_TBL f where f.f1 = '0.0' ;
RESULT:
	ERROR - cannot take logarithm of zero


-----------
QUERY:


SELECT ln(f.f1) from FLOAT8_TBL f where f.f1 < '0.0' ;
RESULT:
	ERROR - cannot take logarithm of a negative number


-----------
QUERY:


SELECT exp(f.f1) from FLOAT8_TBL f;
RESULT:
	ERROR - value out of range: underflow


-----------
QUERY:


SELECT f.f1 / '0.0' from FLOAT8_TBL f;
RESULT:
	ERROR - division by zero


-----------
QUERY:


SELECT * FROM FLOAT8_TBL;
RESULT:
	[(0.0,), (-34.84,), (-1004.3,), (-1.2345678901234e+200,), (-1.2345678901234e-200,)]

-----------
QUERY:


-- hyperbolic functions
-- we run these with extra_float_digits = 0 too, since different platforms
-- tend to produce results that vary in the last place.
SELECT sinh(float8 '1');
RESULT:
	[(1.1752011936438,)]

-----------
QUERY:

SELECT cosh(float8 '1');
RESULT:
	[(1.54308063481524,)]

-----------
QUERY:

SELECT tanh(float8 '1');
RESULT:
	[(0.761594155955765,)]

-----------
QUERY:

SELECT asinh(float8 '1');
RESULT:
	[(0.881373587019543,)]

-----------
QUERY:

SELECT acosh(float8 '2');
RESULT:
	[(1.31695789692482,)]

-----------
QUERY:

SELECT atanh(float8 '0.5');
RESULT:
	[(0.549306144334055,)]

-----------
QUERY:

-- test Inf/NaN cases for hyperbolic functions
SELECT sinh(float8 'infinity');
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT sinh(float8 '-infinity');
RESULT:
	[(-inf,)]

-----------
QUERY:

SELECT sinh(float8 'nan');
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT cosh(float8 'infinity');
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT cosh(float8 '-infinity');
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT cosh(float8 'nan');
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT tanh(float8 'infinity');
RESULT:
	[(1.0,)]

-----------
QUERY:

SELECT tanh(float8 '-infinity');
RESULT:
	[(-1.0,)]

-----------
QUERY:

SELECT tanh(float8 'nan');
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT asinh(float8 'infinity');
RESULT:
	[(inf,)]

-----------
QUERY:

SELECT asinh(float8 '-infinity');
RESULT:
	[(-inf,)]

-----------
QUERY:

SELECT asinh(float8 'nan');
RESULT:
	[(nan,)]

-----------
QUERY:

-- acosh(Inf) should be Inf, but some mingw versions produce NaN, so skip test
-- SELECT acosh(float8 /* REPLACED */''infinity/* REPLACED */'') /* REPLACED */,
SELECT acosh(float8 '-infinity');
RESULT:
	ERROR - input is out of range


-----------
QUERY:

SELECT acosh(float8 'nan');
RESULT:
	[(nan,)]

-----------
QUERY:

SELECT atanh(float8 'infinity');
RESULT:
	ERROR - input is out of range


-----------
QUERY:

SELECT atanh(float8 '-infinity');
RESULT:
	ERROR - input is out of range


-----------
QUERY:

SELECT atanh(float8 'nan');
RESULT:
	[(nan,)]

-----------
QUERY:


-- error functions
-- we run these with extra_float_digits = -1, to get consistently rounded
-- results on all platforms.
SET extra_float_digits = -1;
RESULT:
	[]

-----------
QUERY:

SELECT x,
       erf(x),
       erfc(x)
FROM (VALUES (float8 '-infinity'),
      (-28), (-6), (-3.4), (-2.1), (-1.1), (-0.45),
      (-1.2e-9), (-2.3e-13), (-1.2e-17), (0),
      (1.2e-17), (2.3e-13), (1.2e-9),
      (0.45), (1.1), (2.1), (3.4), (6), (28),
      (float8 'infinity'), (float8 'nan')) AS t(x);
RESULT:
	[(-inf, -1.0, 2.0), (-28.0, -1.0, 2.0), (-6.0, -1.0, 2.0), (-3.4, -0.99999847800664, 1.9999984780066), (-2.1, -0.99702053334367, 1.9970205333437), (-1.1, -0.88020506957408, 1.8802050695741), (-0.45, -0.47548171978692, 1.4754817197869), (-1.2e-09, -1.3540550005146e-09, 1.0000000013541), (-2.3e-13, -2.5952720843197e-13, 1.0000000000003), (-1.2e-17, -1.3540550005146e-17, 1.0), (0.0, 0.0, 1.0), (1.2e-17, 1.3540550005146e-17, 1.0), (2.3e-13, 2.5952720843197e-13, 0.99999999999974), (1.2e-09, 1.3540550005146e-09, 0.99999999864595), (0.45, 0.47548171978692, 0.52451828021308), (1.1, 0.88020506957408, 0.11979493042592), (2.1, 0.99702053334367, 0.002979466656333), (3.4, 0.99999847800664, 1.5219933628623e-06), (6.0, 1.0, 2.1519736712499e-17), (28.0, 1.0, 0.0), (inf, 1.0, 0.0), (nan, nan, nan)]

-----------
QUERY:


RESET extra_float_digits;
RESULT:
	[]

-----------
QUERY:


-- test for over- and underflow
INSERT INTO FLOAT8_TBL(f1) VALUES ('10e400');
RESULT:
	ERROR - "10e400" is out of range for type double precision
LINE 4: INSERT INTO FLOAT8_TBL(f1) VALUES ('10e400');
                                           ^


-----------
QUERY:


INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e400');
RESULT:
	ERROR - "-10e400" is out of range for type double precision
LINE 3: INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e400');
                                           ^


-----------
QUERY:


INSERT INTO FLOAT8_TBL(f1) VALUES ('10e-400');
RESULT:
	ERROR - "10e-400" is out of range for type double precision
LINE 3: INSERT INTO FLOAT8_TBL(f1) VALUES ('10e-400');
                                           ^


-----------
QUERY:


INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e-400');
RESULT:
	ERROR - "-10e-400" is out of range for type double precision
LINE 3: INSERT INTO FLOAT8_TBL(f1) VALUES ('-10e-400');
                                           ^


-----------
QUERY:


DROP TABLE FLOAT8_TBL;
RESULT:
	[]

-----------
QUERY:


-- Check the float8 values exported for use by other tests

SELECT * FROM FLOAT8_TBL;
RESULT:
	[(0.0,), (-34.84,), (-1004.3,), (-1.2345678901234e+200,), (-1.2345678901234e-200,)]

-----------
QUERY:


-- test edge-case coercions to integer
SELECT '32767.4'::float8::int2;
RESULT:
	[(32767,)]

-----------
QUERY:

SELECT '32767.6'::float8::int2;
RESULT:
	ERROR - smallint out of range


-----------
QUERY:

SELECT '-32768.4'::float8::int2;
RESULT:
	[(-32768,)]

-----------
QUERY:

SELECT '-32768.6'::float8::int2;
RESULT:
	ERROR - smallint out of range


-----------
QUERY:

SELECT '2147483647.4'::float8::int4;
RESULT:
	[(2147483647,)]

-----------
QUERY:

SELECT '2147483647.6'::float8::int4;
RESULT:
	ERROR - integer out of range


-----------
QUERY:

SELECT '-2147483648.4'::float8::int4;
RESULT:
	[(-2147483648,)]

-----------
QUERY:

SELECT '-2147483648.6'::float8::int4;
RESULT:
	ERROR - integer out of range


-----------
QUERY:

SELECT '9223372036854773760'::float8::int8;
RESULT:
	[(9223372036854773760,)]

-----------
QUERY:

SELECT '9223372036854775807'::float8::int8;
RESULT:
	ERROR - bigint out of range


-----------
QUERY:

SELECT '-9223372036854775808.5'::float8::int8;
RESULT:
	[(-9223372036854775808,)]

-----------
QUERY:

SELECT '-9223372036854780000'::float8::int8;
RESULT:
	ERROR - bigint out of range


-----------
QUERY:


-- test exact cases for trigonometric functions in degrees

SELECT x,
       sind(x),
       sind(x) IN (-1,-0.5,0,0.5,1) AS sind_exact
FROM (VALUES (0), (30), (90), (150), (180),
      (210), (270), (330), (360)) AS t(x);
RESULT:
	[(0, 0.0, True), (30, 0.5, True), (90, 1.0, True), (150, 0.5, True), (180, 0.0, True), (210, -0.5, True), (270, -1.0, True), (330, -0.5, True), (360, 0.0, True)]

-----------
QUERY:


SELECT x,
       cosd(x),
       cosd(x) IN (-1,-0.5,0,0.5,1) AS cosd_exact
FROM (VALUES (0), (60), (90), (120), (180),
      (240), (270), (300), (360)) AS t(x);
RESULT:
	[(0, 1.0, True), (60, 0.5, True), (90, 0.0, True), (120, -0.5, True), (180, -1.0, True), (240, -0.5, True), (270, 0.0, True), (300, 0.5, True), (360, 1.0, True)]

-----------
QUERY:


SELECT x,
       tand(x),
       tand(x) IN ('-Infinity'::float8,-1,0,
                   1,'Infinity'::float8) AS tand_exact,
       cotd(x),
       cotd(x) IN ('-Infinity'::float8,-1,0,
                   1,'Infinity'::float8) AS cotd_exact
FROM (VALUES (0), (45), (90), (135), (180),
      (225), (270), (315), (360)) AS t(x);
RESULT:
	[(0, 0.0, True, inf, True), (45, 1.0, True, 1.0, True), (90, inf, True, 0.0, True), (135, -1.0, True, -1.0, True), (180, 0.0, True, -inf, True), (225, 1.0, True, 1.0, True), (270, -inf, True, 0.0, True), (315, -1.0, True, -1.0, True), (360, 0.0, True, inf, True)]

-----------
QUERY:


SELECT x,
       asind(x),
       asind(x) IN (-90,-30,0,30,90) AS asind_exact,
       acosd(x),
       acosd(x) IN (0,60,90,120,180) AS acosd_exact
FROM (VALUES (-1), (-0.5), (0), (0.5), (1)) AS t(x);
RESULT:
	[(Decimal('-1'), -90.0, True, 180.0, True), (Decimal('-0.5'), -30.0, True, 120.0, True), (Decimal('0'), 0.0, True, 90.0, True), (Decimal('0.5'), 30.0, True, 60.0, True), (Decimal('1'), 90.0, True, 0.0, True)]

-----------
QUERY:


SELECT x,
       atand(x),
       atand(x) IN (-90,-45,0,45,90) AS atand_exact
FROM (VALUES ('-Infinity'::float8), (-1), (0), (1),
      ('Infinity'::float8)) AS t(x);
RESULT:
	[(-inf, -90.0, True), (-1.0, -45.0, True), (0.0, 0.0, True), (1.0, 45.0, True), (inf, 90.0, True)]

-----------
QUERY:


SELECT x, y,
       atan2d(y, x),
       atan2d(y, x) IN (-90,0,90,180) AS atan2d_exact
FROM (SELECT 10*cosd(a), 10*sind(a)
      FROM generate_series(0, 360, 90) AS t(a)) AS t(x,y);
RESULT:
	[(10.0, 0.0, 0.0, True), (0.0, 10.0, 90.0, True), (-10.0, 0.0, 180.0, True), (0.0, -10.0, -90.0, True), (10.0, 0.0, 0.0, True)]

-----------
QUERY:


--
-- test output (and round-trip safety) of various values.
-- To ensure we/* REPLACED */''re testing what we think we/* REPLACED */''re testing, start with
-- float values specified by bit patterns (as a useful side effect,
-- this means we/* REPLACED */''ll fail on non-IEEE platforms).

create type xfloat8;
RESULT:
	[]

-----------
QUERY:

create function xfloat8in(cstring) returns xfloat8 immutable strict
  language internal as 'int8in';
RESULT:
	[]

-----------
QUERY:

create function xfloat8out(xfloat8) returns cstring immutable strict
  language internal as 'int8out';
RESULT:
	[]

-----------
QUERY:

create type xfloat8 (input = xfloat8in, output = xfloat8out, like = float8);
RESULT:
	[]

-----------
QUERY:

create cast (xfloat8 as float8) without function;
RESULT:
	[]

-----------
QUERY:

create cast (float8 as xfloat8) without function;
RESULT:
	[]

-----------
QUERY:

create cast (xfloat8 as bigint) without function;
RESULT:
	[]

-----------
QUERY:

create cast (bigint as xfloat8) without function;
RESULT:
	[]

-----------
QUERY:


-- float8: seeeeeee eeeeeeee eeeeeeee mmmmmmmm mmmmmmmm(x4)

-- we don/* REPLACED */''t care to assume the platform/* REPLACED */''s strtod() handles subnormals
-- correctly /* REPLACED */, those are /* REPLACED */''use at your own risk/* REPLACED */''. However we do test
-- subnormal outputs, since those are under our control.

with testdata(bits) as (values
  -- small subnormals
  (x'0000000000000001'),
  (x'0000000000000002'), (x'0000000000000003'),
  (x'0000000000001000'), (x'0000000100000000'),
  (x'0000010000000000'), (x'0000010100000000'),
  (x'0000400000000000'), (x'0000400100000000'),
  (x'0000800000000000'), (x'0000800000000001'),
  -- these values taken from upstream testsuite
  (x'00000000000f4240'),
  (x'00000000016e3600'),
  (x'0000008cdcdea440'),
  -- borderline between subnormal and normal
  (x'000ffffffffffff0'), (x'000ffffffffffff1'),
  (x'000ffffffffffffe'), (x'000fffffffffffff'))
select float8send(flt) as ibits,
       flt
  from (select bits::bigint::xfloat8::float8 as flt
          from testdata
	offset 0) s;
RESULT:
	[(<memory at 0x75e4a8bd5900>, 5e-324), (<memory at 0x75e4a8bd74c0>, 1e-323), (<memory at 0x75e4a8bd5b40>, 1.5e-323), (<memory at 0x75e4a8bd5600>, 2.0237e-320), (<memory at 0x75e4a8bd68c0>, 2.121995791e-314), (<memory at 0x75e4a8bd7280>, 5.43230922487e-312), (<memory at 0x75e4a8bd5a80>, 5.45352918278e-312), (<memory at 0x75e4a8bd71c0>, 3.4766779039175e-310), (<memory at 0x75e4a8bd5840>, 3.4768901034966e-310), (<memory at 0x75e4a8bd7340>, 6.953355807835e-310), (<memory at 0x75e4a8bd77c0>, 6.95335580783505e-310), (<memory at 0x75e4a8bd5c00>, 4.940656e-318), (<memory at 0x75e4a8bd56c0>, 1.18575755e-316), (<memory at 0x75e4a8bd5cc0>, 2.989102097996e-312), (<memory at 0x75e4a8bd5d80>, 2.2250738585071935e-308), (<memory at 0x75e4a8bd5540>, 2.225073858507194e-308), (<memory at 0x75e4a8bd6c80>, 2.2250738585072004e-308), (<memory at 0x75e4a8bd6e00>, 2.225073858507201e-308)]

-----------
QUERY:


-- round-trip tests

with testdata(bits) as (values
  (x'0000000000000000'),
  -- smallest normal values
  (x'0010000000000000'), (x'0010000000000001'),
  (x'0010000000000002'), (x'0018000000000000'),
  --
  (x'3ddb7cdfd9d7bdba'), (x'3ddb7cdfd9d7bdbb'), (x'3ddb7cdfd9d7bdbc'),
  (x'3e112e0be826d694'), (x'3e112e0be826d695'), (x'3e112e0be826d696'),
  (x'3e45798ee2308c39'), (x'3e45798ee2308c3a'), (x'3e45798ee2308c3b'),
  (x'3e7ad7f29abcaf47'), (x'3e7ad7f29abcaf48'), (x'3e7ad7f29abcaf49'),
  (x'3eb0c6f7a0b5ed8c'), (x'3eb0c6f7a0b5ed8d'), (x'3eb0c6f7a0b5ed8e'),
  (x'3ee4f8b588e368ef'), (x'3ee4f8b588e368f0'), (x'3ee4f8b588e368f1'),
  (x'3f1a36e2eb1c432c'), (x'3f1a36e2eb1c432d'), (x'3f1a36e2eb1c432e'),
  (x'3f50624dd2f1a9fb'), (x'3f50624dd2f1a9fc'), (x'3f50624dd2f1a9fd'),
  (x'3f847ae147ae147a'), (x'3f847ae147ae147b'), (x'3f847ae147ae147c'),
  (x'3fb9999999999999'), (x'3fb999999999999a'), (x'3fb999999999999b'),
  -- values very close to 1
  (x'3feffffffffffff0'), (x'3feffffffffffff1'), (x'3feffffffffffff2'),
  (x'3feffffffffffff3'), (x'3feffffffffffff4'), (x'3feffffffffffff5'),
  (x'3feffffffffffff6'), (x'3feffffffffffff7'), (x'3feffffffffffff8'),
  (x'3feffffffffffff9'), (x'3feffffffffffffa'), (x'3feffffffffffffb'),
  (x'3feffffffffffffc'), (x'3feffffffffffffd'), (x'3feffffffffffffe'),
  (x'3fefffffffffffff'),
  (x'3ff0000000000000'),
  (x'3ff0000000000001'), (x'3ff0000000000002'), (x'3ff0000000000003'),
  (x'3ff0000000000004'), (x'3ff0000000000005'), (x'3ff0000000000006'),
  (x'3ff0000000000007'), (x'3ff0000000000008'), (x'3ff0000000000009'),
  --
  (x'3ff921fb54442d18'),
  (x'4005bf0a8b14576a'),
  (x'400921fb54442d18'),
  --
  (x'4023ffffffffffff'), (x'4024000000000000'), (x'4024000000000001'),
  (x'4058ffffffffffff'), (x'4059000000000000'), (x'4059000000000001'),
  (x'408f3fffffffffff'), (x'408f400000000000'), (x'408f400000000001'),
  (x'40c387ffffffffff'), (x'40c3880000000000'), (x'40c3880000000001'),
  (x'40f869ffffffffff'), (x'40f86a0000000000'), (x'40f86a0000000001'),
  (x'412e847fffffffff'), (x'412e848000000000'), (x'412e848000000001'),
  (x'416312cfffffffff'), (x'416312d000000000'), (x'416312d000000001'),
  (x'4197d783ffffffff'), (x'4197d78400000000'), (x'4197d78400000001'),
  (x'41cdcd64ffffffff'), (x'41cdcd6500000000'), (x'41cdcd6500000001'),
  (x'4202a05f1fffffff'), (x'4202a05f20000000'), (x'4202a05f20000001'),
  (x'42374876e7ffffff'), (x'42374876e8000000'), (x'42374876e8000001'),
  (x'426d1a94a1ffffff'), (x'426d1a94a2000000'), (x'426d1a94a2000001'),
  (x'42a2309ce53fffff'), (x'42a2309ce5400000'), (x'42a2309ce5400001'),
  (x'42d6bcc41e8fffff'), (x'42d6bcc41e900000'), (x'42d6bcc41e900001'),
  (x'430c6bf52633ffff'), (x'430c6bf526340000'), (x'430c6bf526340001'),
  (x'4341c37937e07fff'), (x'4341c37937e08000'), (x'4341c37937e08001'),
  (x'4376345785d89fff'), (x'4376345785d8a000'), (x'4376345785d8a001'),
  (x'43abc16d674ec7ff'), (x'43abc16d674ec800'), (x'43abc16d674ec801'),
  (x'43e158e460913cff'), (x'43e158e460913d00'), (x'43e158e460913d01'),
  (x'4415af1d78b58c3f'), (x'4415af1d78b58c40'), (x'4415af1d78b58c41'),
  (x'444b1ae4d6e2ef4f'), (x'444b1ae4d6e2ef50'), (x'444b1ae4d6e2ef51'),
  (x'4480f0cf064dd591'), (x'4480f0cf064dd592'), (x'4480f0cf064dd593'),
  (x'44b52d02c7e14af5'), (x'44b52d02c7e14af6'), (x'44b52d02c7e14af7'),
  (x'44ea784379d99db3'), (x'44ea784379d99db4'), (x'44ea784379d99db5'),
  (x'45208b2a2c280290'), (x'45208b2a2c280291'), (x'45208b2a2c280292'),
  --
  (x'7feffffffffffffe'), (x'7fefffffffffffff'),
  -- round to even tests (+ve)
  (x'4350000000000002'),
  (x'4350000000002e06'),
  (x'4352000000000003'),
  (x'4352000000000004'),
  (x'4358000000000003'),
  (x'4358000000000004'),
  (x'435f000000000020'),
  -- round to even tests (-ve)
  (x'c350000000000002'),
  (x'c350000000002e06'),
  (x'c352000000000003'),
  (x'c352000000000004'),
  (x'c358000000000003'),
  (x'c358000000000004'),
  (x'c35f000000000020'),
  -- exercise fixed-point memmoves
  (x'42dc12218377de66'),
  (x'42a674e79c5fe51f'),
  (x'4271f71fb04cb74c'),
  (x'423cbe991a145879'),
  (x'4206fee0e1a9e061'),
  (x'41d26580b487e6b4'),
  (x'419d6f34540ca453'),
  (x'41678c29dcd6e9dc'),
  (x'4132d687e3df217d'),
  (x'40fe240c9fcb68c8'),
  (x'40c81cd6e63c53d3'),
  (x'40934a4584fd0fdc'),
  (x'405edd3c07fb4c93'),
  (x'4028b0fcd32f7076'),
  (x'3ff3c0ca428c59f8'),
  -- these cases come from the upstream/* REPLACED */''s testsuite
  -- LotsOfTrailingZeros)
  (x'3e60000000000000'),
  -- Regression
  (x'c352bd2668e077c4'),
  (x'434018601510c000'),
  (x'43d055dc36f24000'),
  (x'43e052961c6f8000'),
  (x'3ff3c0ca2a5b1d5d'),
  -- LooksLikePow5
  (x'4830f0cf064dd592'),
  (x'4840f0cf064dd592'),
  (x'4850f0cf064dd592'),
  -- OutputLength
  (x'3ff3333333333333'),
  (x'3ff3ae147ae147ae'),
  (x'3ff3be76c8b43958'),
  (x'3ff3c083126e978d'),
  (x'3ff3c0c1fc8f3238'),
  (x'3ff3c0c9539b8887'),
  (x'3ff3c0ca2a5b1d5d'),
  (x'3ff3c0ca4283de1b'),
  (x'3ff3c0ca43db770a'),
  (x'3ff3c0ca428abd53'),
  (x'3ff3c0ca428c1d2b'),
  (x'3ff3c0ca428c51f2'),
  (x'3ff3c0ca428c58fc'),
  (x'3ff3c0ca428c59dd'),
  (x'3ff3c0ca428c59f8'),
  (x'3ff3c0ca428c59fb'),
  -- 32-bit chunking
  (x'40112e0be8047a7d'),
  (x'40112e0be815a889'),
  (x'40112e0be826d695'),
  (x'40112e0be83804a1'),
  (x'40112e0be84932ad'),
  -- MinMaxShift
  (x'0040000000000000'),
  (x'007fffffffffffff'),
  (x'0290000000000000'),
  (x'029fffffffffffff'),
  (x'4350000000000000'),
  (x'435fffffffffffff'),
  (x'1330000000000000'),
  (x'133fffffffffffff'),
  (x'3a6fa7161a4d6e0c')
)
select float8send(flt) as ibits,
       flt,
       flt::text::float8 as r_flt,
       float8send(flt::text::float8) as obits,
       float8send(flt::text::float8) = float8send(flt) as correct
  from (select bits::bigint::xfloat8::float8 as flt
          from testdata
	offset 0) s;
RESULT:
	[(<memory at 0x75e4a8bd5900>, 0.0, 0.0, <memory at 0x75e4a8bd74c0>, True), (<memory at 0x75e4a8bd5b40>, 2.2250738585072014e-308, 2.2250738585072014e-308, <memory at 0x75e4a8bd5600>, True), (<memory at 0x75e4a8bd68c0>, 2.225073858507202e-308, 2.225073858507202e-308, <memory at 0x75e4a8bd7280>, True), (<memory at 0x75e4a8bd5a80>, 2.2250738585072024e-308, 2.2250738585072024e-308, <memory at 0x75e4a8bd71c0>, True), (<memory at 0x75e4a8bd5840>, 3.337610787760802e-308, 3.337610787760802e-308, <memory at 0x75e4a8bd7340>, True), (<memory at 0x75e4a8bd77c0>, 9.999999999999999e-11, 9.999999999999999e-11, <memory at 0x75e4a8bd5c00>, True), (<memory at 0x75e4a8bd56c0>, 1e-10, 1e-10, <memory at 0x75e4a8bd5cc0>, True), (<memory at 0x75e4a8bd5d80>, 1.0000000000000002e-10, 1.0000000000000002e-10, <memory at 0x75e4a8bd5540>, True), (<memory at 0x75e4a8bd6c80>, 9.999999999999999e-10, 9.999999999999999e-10, <memory at 0x75e4a8bd6e00>, True), (<memory at 0x75e4a8bd65c0>, 1e-09, 1e-09, <memory at 0x75e4a8bd6d40>, True), (<memory at 0x75e4a8bd5fc0>, 1.0000000000000003e-09, 1.0000000000000003e-09, <memory at 0x75e4a8bd7940>, True), (<memory at 0x75e4a8bd6f80>, 9.999999999999999e-09, 9.999999999999999e-09, <memory at 0x75e4a8bd7040>, True), (<memory at 0x75e4a8bd7100>, 1e-08, 1e-08, <memory at 0x75e4a8bd5780>, True), (<memory at 0x75e4a8bd5480>, 1.0000000000000002e-08, 1.0000000000000002e-08, <memory at 0x75e4a8bd7d00>, True), (<memory at 0x75e4a8bd6a40>, 9.999999999999998e-08, 9.999999999999998e-08, <memory at 0x75e4a8bd6740>, True), (<memory at 0x75e4a8bd6800>, 1e-07, 1e-07, <memory at 0x75e4a8bd7700>, True), (<memory at 0x75e4a8bd7640>, 1.0000000000000001e-07, 1.0000000000000001e-07, <memory at 0x75e487d61d80>, True), (<memory at 0x75e487d60b80>, 9.999999999999997e-07, 9.999999999999997e-07, <memory at 0x75e487d62140>, True), (<memory at 0x75e487d61000>, 1e-06, 1e-06, <memory at 0x75e487d60f40>, True), (<memory at 0x75e487d60940>, 1.0000000000000002e-06, 1.0000000000000002e-06, <memory at 0x75e487d62440>, True), (<memory at 0x75e487d62500>, 9.999999999999997e-06, 9.999999999999997e-06, <memory at 0x75e487d61fc0>, True), (<memory at 0x75e487d622c0>, 9.999999999999999e-06, 9.999999999999999e-06, <memory at 0x75e487d62380>, True), (<memory at 0x75e487d625c0>, 1e-05, 1e-05, <memory at 0x75e487d62680>, True), (<memory at 0x75e487d62740>, 9.999999999999999e-05, 9.999999999999999e-05, <memory at 0x75e487d62800>, True), (<memory at 0x75e487d628c0>, 0.0001, 0.0001, <memory at 0x75e487d62980>, True), (<memory at 0x75e487d62a40>, 0.00010000000000000002, 0.00010000000000000002, <memory at 0x75e487d62b00>, True), (<memory at 0x75e487d62bc0>, 0.0009999999999999998, 0.0009999999999999998, <memory at 0x75e487d62c80>, True), (<memory at 0x75e487d61e40>, 0.001, 0.001, <memory at 0x75e487d604c0>, True), (<memory at 0x75e487d60340>, 0.0010000000000000002, 0.0010000000000000002, <memory at 0x75e487d607c0>, True), (<memory at 0x75e487d60400>, 0.009999999999999998, 0.009999999999999998, <memory at 0x75e487d60580>, True), (<memory at 0x75e487d60280>, 0.01, 0.01, <memory at 0x75e487d60ac0>, True), (<memory at 0x75e487d60640>, 0.010000000000000002, 0.010000000000000002, <memory at 0x75e487d61480>, True), (<memory at 0x75e487d63dc0>, 0.09999999999999999, 0.09999999999999999, <memory at 0x75e487d61240>, True), (<memory at 0x75e487d63880>, 0.1, 0.1, <memory at 0x75e487d63700>, True), (<memory at 0x75e487d616c0>, 0.10000000000000002, 0.10000000000000002, <memory at 0x75e487d63f40>, True), (<memory at 0x75e487d61f00>, 0.9999999999999982, 0.9999999999999982, <memory at 0x75e487d631c0>, True), (<memory at 0x75e487d62f80>, 0.9999999999999983, 0.9999999999999983, <memory at 0x75e487d63d00>, True), (<memory at 0x75e487d60700>, 0.9999999999999984, 0.9999999999999984, <memory at 0x75e487d637c0>, True), (<memory at 0x75e487d63ac0>, 0.9999999999999986, 0.9999999999999986, <memory at 0x75e487d62200>, True), (<memory at 0x75e487d61780>, 0.9999999999999987, 0.9999999999999987, <memory at 0x75e487d63340>, True), (<memory at 0x75e487d63400>, 0.9999999999999988, 0.9999999999999988, <memory at 0x75e487d61cc0>, True), (<memory at 0x75e487d63280>, 0.9999999999999989, 0.9999999999999989, <memory at 0x75e487d613c0>, True), (<memory at 0x75e487d63b80>, 0.999999999999999, 0.999999999999999, <memory at 0x75e480520700>, True), (<memory at 0x75e480520b80>, 0.9999999999999991, 0.9999999999999991, <memory at 0x75e480520640>, True), (<memory at 0x75e480520940>, 0.9999999999999992, 0.9999999999999992, <memory at 0x75e480520d00>, True), (<memory at 0x75e480520880>, 0.9999999999999993, 0.9999999999999993, <memory at 0x75e480520f40>, True), (<memory at 0x75e480520e80>, 0.9999999999999994, 0.9999999999999994, <memory at 0x75e480521000>, True), (<memory at 0x75e480521180>, 0.9999999999999996, 0.9999999999999996, <memory at 0x75e480520580>, True), (<memory at 0x75e480521f00>, 0.9999999999999997, 0.9999999999999997, <memory at 0x75e4805210c0>, True), (<memory at 0x75e4805213c0>, 0.9999999999999998, 0.9999999999999998, <memory at 0x75e480520a00>, True), (<memory at 0x75e480522ec0>, 0.9999999999999999, 0.9999999999999999, <memory at 0x75e480522680>, True), (<memory at 0x75e480522800>, 1.0, 1.0, <memory at 0x75e480522080>, True), (<memory at 0x75e480522500>, 1.0000000000000002, 1.0000000000000002, <memory at 0x75e480522140>, True), (<memory at 0x75e480522380>, 1.0000000000000004, 1.0000000000000004, <memory at 0x75e480522440>, True), (<memory at 0x75e480522200>, 1.0000000000000007, 1.0000000000000007, <memory at 0x75e4805225c0>, True), (<memory at 0x75e480522740>, 1.0000000000000009, 1.0000000000000009, <memory at 0x75e4805228c0>, True), (<memory at 0x75e480522980>, 1.000000000000001, 1.000000000000001, <memory at 0x75e480522a40>, True), (<memory at 0x75e480522b00>, 1.0000000000000013, 1.0000000000000013, <memory at 0x75e480522bc0>, True), (<memory at 0x75e480522c80>, 1.0000000000000016, 1.0000000000000016, <memory at 0x75e480521240>, True), (<memory at 0x75e4805219c0>, 1.0000000000000018, 1.0000000000000018, <memory at 0x75e480521300>, True), (<memory at 0x75e480521780>, 1.000000000000002, 1.000000000000002, <memory at 0x75e480521cc0>, True), (<memory at 0x75e480521840>, 1.5707963267948966, 1.5707963267948966, <memory at 0x75e480521b40>, True), (<memory at 0x75e480521c00>, 2.7182818284590455, 2.7182818284590455, <memory at 0x75e480521d80>, True), (<memory at 0x75e480521480>, 3.141592653589793, 3.141592653589793, <memory at 0x75e4805216c0>, True), (<memory at 0x75e480521600>, 9.999999999999998, 9.999999999999998, <memory at 0x75e480521900>, True), (<memory at 0x75e480521540>, 10.0, 10.0, <memory at 0x75e480521a80>, True), (<memory at 0x75e480521e40>, 10.000000000000002, 10.000000000000002, <memory at 0x75e4805201c0>, True), (<memory at 0x75e480520280>, 99.99999999999999, 99.99999999999999, <memory at 0x75e480520040>, True), (<memory at 0x75e480520100>, 100.0, 100.0, <memory at 0x75e480520340>, True), (<memory at 0x75e480520400>, 100.00000000000001, 100.00000000000001, <memory at 0x75e4805204c0>, True), (<memory at 0x75e480523880>, 999.9999999999999, 999.9999999999999, <memory at 0x75e480523c40>, True), (<memory at 0x75e480521fc0>, 1000.0, 1000.0, <memory at 0x75e4805222c0>, True), (<memory at 0x75e480520c40>, 1000.0000000000001, 1000.0000000000001, <memory at 0x75e480520dc0>, True), (<memory at 0x75e4805207c0>, 9999.999999999998, 9999.999999999998, <memory at 0x75e480520ac0>, True), (<memory at 0x75e480522d40>, 10000.0, 10000.0, <memory at 0x75e480523100>, True), (<memory at 0x75e480522e00>, 10000.000000000002, 10000.000000000002, <memory at 0x75e480523040>, True), (<memory at 0x75e480522f80>, 99999.99999999999, 99999.99999999999, <memory at 0x75e4805231c0>, True), (<memory at 0x75e480523280>, 100000.0, 100000.0, <memory at 0x75e480523940>, True), (<memory at 0x75e480523a00>, 100000.00000000001, 100000.00000000001, <memory at 0x75e480523f40>, True), (<memory at 0x75e4805237c0>, 999999.9999999999, 999999.9999999999, <memory at 0x75e480523ac0>, True), (<memory at 0x75e480523b80>, 1000000.0, 1000000.0, <memory at 0x75e480523d00>, True), (<memory at 0x75e480523dc0>, 1000000.0000000001, 1000000.0000000001, <memory at 0x75e480523e80>, True), (<memory at 0x75e4805c4040>, 9999999.999999998, 9999999.999999998, <memory at 0x75e4805c4100>, True), (<memory at 0x75e4805c41c0>, 10000000.0, 10000000.0, <memory at 0x75e4805c4280>, True), (<memory at 0x75e4805c4340>, 10000000.000000002, 10000000.000000002, <memory at 0x75e4805c4400>, True), (<memory at 0x75e4805c44c0>, 99999999.99999999, 99999999.99999999, <memory at 0x75e4805c4580>, True), (<memory at 0x75e4805c4640>, 100000000.0, 100000000.0, <memory at 0x75e4805c4700>, True), (<memory at 0x75e4805c47c0>, 100000000.00000001, 100000000.00000001, <memory at 0x75e4805c4880>, True), (<memory at 0x75e4805c4940>, 999999999.9999999, 999999999.9999999, <memory at 0x75e4805c4a00>, True), (<memory at 0x75e4805c4ac0>, 1000000000.0, 1000000000.0, <memory at 0x75e4805c4b80>, True), (<memory at 0x75e4805c4c40>, 1000000000.0000001, 1000000000.0000001, <memory at 0x75e4805c4d00>, True), (<memory at 0x75e4805c4dc0>, 9999999999.999998, 9999999999.999998, <memory at 0x75e4805c4e80>, True), (<memory at 0x75e4805c4f40>, 10000000000.0, 10000000000.0, <memory at 0x75e4805c5000>, True), (<memory at 0x75e4805c50c0>, 10000000000.000002, 10000000000.000002, <memory at 0x75e4805c5180>, True), (<memory at 0x75e4805c5240>, 99999999999.99998, 99999999999.99998, <memory at 0x75e4805c5300>, True), (<memory at 0x75e4805c53c0>, 100000000000.0, 100000000000.0, <memory at 0x75e4805c5480>, True), (<memory at 0x75e4805c5540>, 100000000000.00002, 100000000000.00002, <memory at 0x75e4805c5600>, True), (<memory at 0x75e4805c56c0>, 999999999999.9999, 999999999999.9999, <memory at 0x75e4805c5780>, True), (<memory at 0x75e4805c5840>, 1000000000000.0, 1000000000000.0, <memory at 0x75e4805c5900>, True), (<memory at 0x75e4805c59c0>, 1000000000000.0001, 1000000000000.0001, <memory at 0x75e4805c5a80>, True), (<memory at 0x75e4805c5b40>, 9999999999999.998, 9999999999999.998, <memory at 0x75e4805c5c00>, True), (<memory at 0x75e4805c5cc0>, 10000000000000.0, 10000000000000.0, <memory at 0x75e4805c5d80>, True), (<memory at 0x75e4805c5e40>, 10000000000000.002, 10000000000000.002, <memory at 0x75e4805c5f00>, True), (<memory at 0x75e4805c5fc0>, 99999999999999.98, 99999999999999.98, <memory at 0x75e4805c6080>, True), (<memory at 0x75e4805c6140>, 100000000000000.0, 100000000000000.0, <memory at 0x75e4805c6200>, True), (<memory at 0x75e4805c62c0>, 100000000000000.02, 100000000000000.02, <memory at 0x75e4805c6380>, True), (<memory at 0x75e4805c6440>, 999999999999999.9, 999999999999999.9, <memory at 0x75e4805c6500>, True), (<memory at 0x75e4805c65c0>, 1000000000000000.0, 1000000000000000.0, <memory at 0x75e4805c6680>, True), (<memory at 0x75e4805c6740>, 1000000000000000.1, 1000000000000000.1, <memory at 0x75e4805c6800>, True), (<memory at 0x75e4805c68c0>, 9999999999999998.0, 9999999999999998.0, <memory at 0x75e4805c6980>, True), (<memory at 0x75e4805c6a40>, 1e+16, 1e+16, <memory at 0x75e4805c6b00>, True), (<memory at 0x75e4805c6bc0>, 1.0000000000000002e+16, 1.0000000000000002e+16, <memory at 0x75e4805c6c80>, True), (<memory at 0x75e4805c6d40>, 9.999999999999998e+16, 9.999999999999998e+16, <memory at 0x75e4805c6e00>, True), (<memory at 0x75e4805c6ec0>, 1e+17, 1e+17, <memory at 0x75e4805c6f80>, True), (<memory at 0x75e4805c7040>, 1.0000000000000002e+17, 1.0000000000000002e+17, <memory at 0x75e4805c7100>, True), (<memory at 0x75e4805c71c0>, 9.999999999999999e+17, 9.999999999999999e+17, <memory at 0x75e4805c7280>, True), (<memory at 0x75e4805c7340>, 1e+18, 1e+18, <memory at 0x75e4805c7400>, True), (<memory at 0x75e4805c74c0>, 1.0000000000000001e+18, 1.0000000000000001e+18, <memory at 0x75e4805c7580>, True), (<memory at 0x75e4805c7640>, 9.999999999999998e+18, 9.999999999999998e+18, <memory at 0x75e4805c7700>, True), (<memory at 0x75e4805c77c0>, 1e+19, 1e+19, <memory at 0x75e4805c7880>, True), (<memory at 0x75e4805c7940>, 1.0000000000000002e+19, 1.0000000000000002e+19, <memory at 0x75e4805c7a00>, True), (<memory at 0x75e4805c7ac0>, 9.999999999999998e+19, 9.999999999999998e+19, <memory at 0x75e4805c7b80>, True), (<memory at 0x75e4805c7c40>, 1e+20, 1e+20, <memory at 0x75e4805c7d00>, True), (<memory at 0x75e4805c7dc0>, 1.0000000000000002e+20, 1.0000000000000002e+20, <memory at 0x75e4805c7e80>, True), (<memory at 0x75e4805c7f40>, 9.999999999999999e+20, 9.999999999999999e+20, <memory at 0x75e48050c040>, True), (<memory at 0x75e48050c100>, 1e+21, 1e+21, <memory at 0x75e48050c1c0>, True), (<memory at 0x75e48050c280>, 1.0000000000000001e+21, 1.0000000000000001e+21, <memory at 0x75e48050c340>, True), (<memory at 0x75e48050c400>, 9.999999999999998e+21, 9.999999999999998e+21, <memory at 0x75e48050c4c0>, True), (<memory at 0x75e48050c580>, 1e+22, 1e+22, <memory at 0x75e48050c640>, True), (<memory at 0x75e48050c700>, 1.0000000000000002e+22, 1.0000000000000002e+22, <memory at 0x75e48050c7c0>, True), (<memory at 0x75e48050c880>, 9.999999999999997e+22, 9.999999999999997e+22, <memory at 0x75e48050c940>, True), (<memory at 0x75e48050ca00>, 1e+23, 1e+23, <memory at 0x75e48050cac0>, True), (<memory at 0x75e48050cb80>, 1.0000000000000001e+23, 1.0000000000000001e+23, <memory at 0x75e48050cc40>, True), (<memory at 0x75e48050cd00>, 9.999999999999998e+23, 9.999999999999998e+23, <memory at 0x75e48050cdc0>, True), (<memory at 0x75e48050ce80>, 1e+24, 1e+24, <memory at 0x75e48050cf40>, True), (<memory at 0x75e48050d000>, 1.0000000000000001e+24, 1.0000000000000001e+24, <memory at 0x75e48050d0c0>, True), (<memory at 0x75e48050d180>, 9.999999999999999e+24, 9.999999999999999e+24, <memory at 0x75e48050d240>, True), (<memory at 0x75e48050d300>, 1e+25, 1e+25, <memory at 0x75e48050d3c0>, True), (<memory at 0x75e48050d480>, 1.0000000000000003e+25, 1.0000000000000003e+25, <memory at 0x75e48050d540>, True), (<memory at 0x75e48050d600>, 1.7976931348623155e+308, 1.7976931348623155e+308, <memory at 0x75e48050d6c0>, True), (<memory at 0x75e48050d780>, 1.7976931348623157e+308, 1.7976931348623157e+308, <memory at 0x75e48050d840>, True), (<memory at 0x75e48050d900>, 1.801439850948199e+16, 1.801439850948199e+16, <memory at 0x75e48050d9c0>, True), (<memory at 0x75e48050da80>, 1.801439850952911e+16, 1.801439850952911e+16, <memory at 0x75e48050db40>, True), (<memory at 0x75e48050dc00>, 2.0266198323167244e+16, 2.0266198323167244e+16, <memory at 0x75e48050dcc0>, True), (<memory at 0x75e48050dd80>, 2.026619832316725e+16, 2.026619832316725e+16, <memory at 0x75e48050de40>, True), (<memory at 0x75e48050df00>, 2.7021597764222988e+16, 2.7021597764222988e+16, <memory at 0x75e48050dfc0>, True), (<memory at 0x75e48050e080>, 2.702159776422299e+16, 2.702159776422299e+16, <memory at 0x75e48050e140>, True), (<memory at 0x75e48050e200>, 3.490289711212147e+16, 3.490289711212147e+16, <memory at 0x75e48050e2c0>, True), (<memory at 0x75e48050e380>, -1.801439850948199e+16, -1.801439850948199e+16, <memory at 0x75e48050e440>, True), (<memory at 0x75e48050e500>, -1.801439850952911e+16, -1.801439850952911e+16, <memory at 0x75e48050e5c0>, True), (<memory at 0x75e48050e680>, -2.0266198323167244e+16, -2.0266198323167244e+16, <memory at 0x75e48050e740>, True), (<memory at 0x75e48050e800>, -2.026619832316725e+16, -2.026619832316725e+16, <memory at 0x75e48050e8c0>, True), (<memory at 0x75e48050e980>, -2.7021597764222988e+16, -2.7021597764222988e+16, <memory at 0x75e48050ea40>, True), (<memory at 0x75e48050eb00>, -2.702159776422299e+16, -2.702159776422299e+16, <memory at 0x75e48050ebc0>, True), (<memory at 0x75e48050ec80>, -3.490289711212147e+16, -3.490289711212147e+16, <memory at 0x75e48050ed40>, True), (<memory at 0x75e48050ee00>, 123456789012345.6, 123456789012345.6, <memory at 0x75e48050eec0>, True), (<memory at 0x75e48050ef80>, 12345678901234.56, 12345678901234.56, <memory at 0x75e48050f040>, True), (<memory at 0x75e48050f100>, 1234567890123.456, 1234567890123.456, <memory at 0x75e48050f1c0>, True), (<memory at 0x75e48050f280>, 123456789012.3456, 123456789012.3456, <memory at 0x75e48050f340>, True), (<memory at 0x75e48050f400>, 12345678901.23456, 12345678901.23456, <memory at 0x75e48050f4c0>, True), (<memory at 0x75e48050f580>, 1234567890.123456, 1234567890.123456, <memory at 0x75e48050f640>, True), (<memory at 0x75e48050f700>, 123456789.0123456, 123456789.0123456, <memory at 0x75e48050f7c0>, True), (<memory at 0x75e48050f880>, 12345678.90123456, 12345678.90123456, <memory at 0x75e48050f940>, True), (<memory at 0x75e48050fa00>, 1234567.890123456, 1234567.890123456, <memory at 0x75e48050fac0>, True), (<memory at 0x75e48050fb80>, 123456.7890123456, 123456.7890123456, <memory at 0x75e48050fc40>, True), (<memory at 0x75e48050fd00>, 12345.67890123456, 12345.67890123456, <memory at 0x75e48050fdc0>, True), (<memory at 0x75e48050fe80>, 1234.567890123456, 1234.567890123456, <memory at 0x75e48050ff40>, True), (<memory at 0x75e4805b4040>, 123.4567890123456, 123.4567890123456, <memory at 0x75e4805b4100>, True), (<memory at 0x75e4805b41c0>, 12.34567890123456, 12.34567890123456, <memory at 0x75e4805b4280>, True), (<memory at 0x75e4805b4340>, 1.234567890123456, 1.234567890123456, <memory at 0x75e4805b4400>, True), (<memory at 0x75e4805b44c0>, 2.9802322387695312e-08, 2.9802322387695312e-08, <memory at 0x75e4805b4580>, True), (<memory at 0x75e4805b4640>, -2.109808898695963e+16, -2.109808898695963e+16, <memory at 0x75e4805b4700>, True), (<memory at 0x75e4805b47c0>, 9060801153433600.0, 9060801153433600.0, <memory at 0x75e4805b4880>, True), (<memory at 0x75e4805b4940>, 4.708356024711512e+18, 4.708356024711512e+18, <memory at 0x75e4805b4a00>, True), (<memory at 0x75e4805b4ac0>, 9.409340012568248e+18, 9.409340012568248e+18, <memory at 0x75e4805b4b80>, True), (<memory at 0x75e4805b4c40>, 1.2345678, 1.2345678, <memory at 0x75e4805b4d00>, True), (<memory at 0x75e4805b4dc0>, 5.764607523034235e+39, 5.764607523034235e+39, <memory at 0x75e4805b4e80>, True), (<memory at 0x75e4805b4f40>, 1.152921504606847e+40, 1.152921504606847e+40, <memory at 0x75e4805b5000>, True), (<memory at 0x75e4805b50c0>, 2.305843009213694e+40, 2.305843009213694e+40, <memory at 0x75e4805b5180>, True), (<memory at 0x75e4805b5240>, 1.2, 1.2, <memory at 0x75e4805b5300>, True), (<memory at 0x75e4805b53c0>, 1.23, 1.23, <memory at 0x75e4805b5480>, True), (<memory at 0x75e4805b5540>, 1.234, 1.234, <memory at 0x75e4805b5600>, True), (<memory at 0x75e4805b56c0>, 1.2345, 1.2345, <memory at 0x75e4805b5780>, True), (<memory at 0x75e4805b5840>, 1.23456, 1.23456, <memory at 0x75e4805b5900>, True), (<memory at 0x75e4805b59c0>, 1.234567, 1.234567, <memory at 0x75e4805b5a80>, True), (<memory at 0x75e4805b5b40>, 1.2345678, 1.2345678, <memory at 0x75e4805b5c00>, True), (<memory at 0x75e4805b5cc0>, 1.23456789, 1.23456789, <memory at 0x75e4805b5d80>, True), (<memory at 0x75e4805b5e40>, 1.234567895, 1.234567895, <memory at 0x75e4805b5f00>, True), (<memory at 0x75e4805b5fc0>, 1.2345678901, 1.2345678901, <memory at 0x75e4805b6080>, True), (<memory at 0x75e4805b6140>, 1.23456789012, 1.23456789012, <memory at 0x75e4805b6200>, True), (<memory at 0x75e4805b62c0>, 1.234567890123, 1.234567890123, <memory at 0x75e4805b6380>, True), (<memory at 0x75e4805b6440>, 1.2345678901234, 1.2345678901234, <memory at 0x75e4805b6500>, True), (<memory at 0x75e4805b65c0>, 1.23456789012345, 1.23456789012345, <memory at 0x75e4805b6680>, True), (<memory at 0x75e4805b6740>, 1.234567890123456, 1.234567890123456, <memory at 0x75e4805b6800>, True), (<memory at 0x75e4805b68c0>, 1.2345678901234567, 1.2345678901234567, <memory at 0x75e4805b6980>, True), (<memory at 0x75e4805b6a40>, 4.294967294, 4.294967294, <memory at 0x75e4805b6b00>, True), (<memory at 0x75e4805b6bc0>, 4.294967295, 4.294967295, <memory at 0x75e4805b6c80>, True), (<memory at 0x75e4805b6d40>, 4.294967296, 4.294967296, <memory at 0x75e4805b6e00>, True), (<memory at 0x75e4805b6ec0>, 4.294967297, 4.294967297, <memory at 0x75e4805b6f80>, True), (<memory at 0x75e4805b7040>, 4.294967298, 4.294967298, <memory at 0x75e4805b7100>, True), (<memory at 0x75e4805b71c0>, 1.7800590868057611e-307, 1.7800590868057611e-307, <memory at 0x75e4805b7280>, True), (<memory at 0x75e4805b7340>, 2.8480945388892175e-306, 2.8480945388892175e-306, <memory at 0x75e4805b7400>, True), (<memory at 0x75e4805b74c0>, 2.446494580089078e-296, 2.446494580089078e-296, <memory at 0x75e4805b7580>, True), (<memory at 0x75e4805b7640>, 4.8929891601781557e-296, 4.8929891601781557e-296, <memory at 0x75e4805b7700>, True), (<memory at 0x75e4805b77c0>, 1.8014398509481984e+16, 1.8014398509481984e+16, <memory at 0x75e4805b7880>, True), (<memory at 0x75e4805b7940>, 3.6028797018963964e+16, 3.6028797018963964e+16, <memory at 0x75e4805b7a00>, True), (<memory at 0x75e4805b7ac0>, 2.900835519859558e-216, 2.900835519859558e-216, <memory at 0x75e4805b7b80>, True), (<memory at 0x75e4805b7c40>, 5.801671039719115e-216, 5.801671039719115e-216, <memory at 0x75e4805b7d00>, True), (<memory at 0x75e4805b7dc0>, 3.196104012172126e-27, 3.196104012172126e-27, <memory at 0x75e4805b7e80>, True)]

-----------
QUERY:


-- clean up, lest opr_sanity complain
drop type xfloat8 cascade;
RESULT:
	[]
