--
-- Test foreign-data wrapper and server management.
--

-- directory paths and dlsuffix are passed to us in environment variables
-- \getenv libdir ''/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress''
-- \getenv dlsuffix ''.so''

-- \set regresslib /* REPLACED */ ''/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress'' ''/regress'' /* REPLACED */ ''.so''

CREATE FUNCTION test_fdw_handler()
    RETURNS fdw_handler
    AS /* REPLACED */ '/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress/regress.so', 'test_fdw_handler'
    LANGUAGE C


-- Clean up in case a prior regression run failed

-- Suppress NOTICE messages when roles don''t exist
SET client_min_messages TO 'warning'


DROP ROLE IF EXISTS regress_foreign_data_user, regress_test_role, regress_test_role2, regress_test_role_super, regress_test_indirect, regress_unprivileged_role


RESET client_min_messages


CREATE ROLE regress_foreign_data_user LOGIN SUPERUSER

SET SESSION AUTHORIZATION 'regress_foreign_data_user'


CREATE ROLE regress_test_role

CREATE ROLE regress_test_role2

CREATE ROLE regress_test_role_super SUPERUSER

CREATE ROLE regress_test_indirect

CREATE ROLE regress_unprivileged_role


CREATE FOREIGN DATA WRAPPER dummy

COMMENT ON FOREIGN DATA WRAPPER dummy IS 'useless'

CREATE FOREIGN DATA WRAPPER postgresql VALIDATOR postgresql_fdw_validator


-- At this point we should have 2 built-in wrappers and no servers.
SELECT fdwname, fdwhandler::regproc, fdwvalidator::regproc, fdwoptions FROM pg_foreign_data_wrapper ORDER BY 1, 2, 3
RESULT: 
	[('dummy', '-', '-', None), ('postgresql', '-', 'postgresql_fdw_validator', None)]

SELECT srvname, srvoptions FROM pg_foreign_server
RESULT: 
	[]

SELECT * FROM pg_user_mapping
RESULT: 
	[]


-- CREATE FOREIGN DATA WRAPPER
CREATE FOREIGN DATA WRAPPER foo VALIDATOR bar
ProgrammingError: 

-- CREATE FOREIGN DATA WRAPPER
CREATE FOREIGN DATA WRAPPER foo VALIDATOR bar

function bar(text[], oid) does not exist

            -- ERROR
CREATE FOREIGN DATA WRAPPER foo

-- \dew

CREATE FOREIGN DATA WRAPPER foo
ProgrammingError: 
-- \dew

CREATE FOREIGN DATA WRAPPER foo

foreign-data wrapper "foo" already exists

 -- duplicate
DROP FOREIGN DATA WRAPPER foo

CREATE FOREIGN DATA WRAPPER foo OPTIONS (testing '1')

-- \dew+

DROP FOREIGN DATA WRAPPER foo

CREATE FOREIGN DATA WRAPPER foo OPTIONS (testing '1', testing '2')
ProgrammingError: 
CREATE FOREIGN DATA WRAPPER foo OPTIONS (testing '1', testing '2')

option "testing" provided more than once

   -- ERROR
CREATE FOREIGN DATA WRAPPER foo OPTIONS (testing '1', another '2')

-- \dew+

DROP FOREIGN DATA WRAPPER foo

SET ROLE regress_test_role

CREATE FOREIGN DATA WRAPPER foo
ProgrammingError: 
CREATE FOREIGN DATA WRAPPER foo

permission denied to create foreign-data wrapper "foo"
HINT:  Must be superuser to create a foreign-data wrapper.

 -- ERROR
RESET ROLE

CREATE FOREIGN DATA WRAPPER foo VALIDATOR postgresql_fdw_validator

-- \dew+

-- HANDLER related checks
CREATE FUNCTION invalid_fdw_handler() RETURNS int LANGUAGE SQL AS 'SELECT 1;'

CREATE FOREIGN DATA WRAPPER test_fdw HANDLER invalid_fdw_handler
ProgrammingError: 
CREATE FOREIGN DATA WRAPPER test_fdw HANDLER invalid_fdw_handler

function invalid_fdw_handler must return type fdw_handler

  -- ERROR
CREATE FOREIGN DATA WRAPPER test_fdw HANDLER test_fdw_handler HANDLER invalid_fdw_handler
ProgrammingError:   -- ERROR
CREATE FOREIGN DATA WRAPPER test_fdw HANDLER test_fdw_handler HANDLER invalid_fdw_handler

conflicting or redundant options
LINE 2: ...GN DATA WRAPPER test_fdw HANDLER test_fdw_handler HANDLER in...
                                                             ^

  -- ERROR
CREATE FOREIGN DATA WRAPPER test_fdw HANDLER test_fdw_handler

DROP FOREIGN DATA WRAPPER test_fdw


-- ALTER FOREIGN DATA WRAPPER
ALTER FOREIGN DATA WRAPPER foo OPTIONS (nonexistent 'fdw')
ProgrammingError: 

-- ALTER FOREIGN DATA WRAPPER
ALTER FOREIGN DATA WRAPPER foo OPTIONS (nonexistent 'fdw')

invalid option "nonexistent"
HINT:  There are no valid options in this context.

         -- ERROR

ALTER FOREIGN DATA WRAPPER foo
ProgrammingError:          -- ERROR

ALTER FOREIGN DATA WRAPPER foo

syntax error at end of input
LINE 4: 
        ^

                             -- ERROR
ALTER FOREIGN DATA WRAPPER foo VALIDATOR bar
ProgrammingError:                              -- ERROR
ALTER FOREIGN DATA WRAPPER foo VALIDATOR bar

function bar(text[], oid) does not exist

               -- ERROR
ALTER FOREIGN DATA WRAPPER foo NO VALIDATOR

-- \dew+

ALTER FOREIGN DATA WRAPPER foo OPTIONS (a '1', b '2')

ALTER FOREIGN DATA WRAPPER foo OPTIONS (SET c '4')
ProgrammingError: 
ALTER FOREIGN DATA WRAPPER foo OPTIONS (SET c '4')

option "c" not found

         -- ERROR
ALTER FOREIGN DATA WRAPPER foo OPTIONS (DROP c)
ProgrammingError:          -- ERROR
ALTER FOREIGN DATA WRAPPER foo OPTIONS (DROP c)

option "c" not found

            -- ERROR
ALTER FOREIGN DATA WRAPPER foo OPTIONS (ADD x '1', DROP x)

-- \dew+

ALTER FOREIGN DATA WRAPPER foo OPTIONS (DROP a, SET b '3', ADD c '4')

-- \dew+

ALTER FOREIGN DATA WRAPPER foo OPTIONS (a '2')

ALTER FOREIGN DATA WRAPPER foo OPTIONS (b '4')
ProgrammingError: 
ALTER FOREIGN DATA WRAPPER foo OPTIONS (b '4')

option "b" provided more than once

             -- ERROR
-- \dew+

SET ROLE regress_test_role

ALTER FOREIGN DATA WRAPPER foo OPTIONS (ADD d '5')
ProgrammingError: 
ALTER FOREIGN DATA WRAPPER foo OPTIONS (ADD d '5')

permission denied to alter foreign-data wrapper "foo"
HINT:  Must be superuser to alter a foreign-data wrapper.

         -- ERROR
SET ROLE regress_test_role_super

ALTER FOREIGN DATA WRAPPER foo OPTIONS (ADD d '5')

-- \dew+

ALTER FOREIGN DATA WRAPPER foo OWNER TO regress_test_role
ProgrammingError: 
-- \dew+

ALTER FOREIGN DATA WRAPPER foo OWNER TO regress_test_role

permission denied to change owner of foreign-data wrapper "foo"
HINT:  The owner of a foreign-data wrapper must be a superuser.

  -- ERROR
ALTER FOREIGN DATA WRAPPER foo OWNER TO regress_test_role_super

ALTER ROLE regress_test_role_super NOSUPERUSER

SET ROLE regress_test_role_super

ALTER FOREIGN DATA WRAPPER foo OPTIONS (ADD e '6')
ProgrammingError: 
ALTER FOREIGN DATA WRAPPER foo OPTIONS (ADD e '6')

permission denied to alter foreign-data wrapper "foo"
HINT:  Must be superuser to alter a foreign-data wrapper.

         -- ERROR
RESET ROLE

-- \dew+

ALTER FOREIGN DATA WRAPPER foo RENAME TO foo1

-- \dew+
ALTER FOREIGN DATA WRAPPER foo1 RENAME TO foo


-- HANDLER related checks
ALTER FOREIGN DATA WRAPPER foo HANDLER invalid_fdw_handler
ProgrammingError: 

-- HANDLER related checks
ALTER FOREIGN DATA WRAPPER foo HANDLER invalid_fdw_handler

function invalid_fdw_handler must return type fdw_handler

  -- ERROR
ALTER FOREIGN DATA WRAPPER foo HANDLER test_fdw_handler HANDLER anything
ProgrammingError:   -- ERROR
ALTER FOREIGN DATA WRAPPER foo HANDLER test_fdw_handler HANDLER anything

conflicting or redundant options
LINE 2: ...FOREIGN DATA WRAPPER foo HANDLER test_fdw_handler HANDLER an...
                                                             ^

  -- ERROR
ALTER FOREIGN DATA WRAPPER foo HANDLER test_fdw_handler

DROP FUNCTION invalid_fdw_handler()


-- DROP FOREIGN DATA WRAPPER
DROP FOREIGN DATA WRAPPER nonexistent
ProgrammingError: 

-- DROP FOREIGN DATA WRAPPER
DROP FOREIGN DATA WRAPPER nonexistent

foreign-data wrapper "nonexistent" does not exist

                      -- ERROR
DROP FOREIGN DATA WRAPPER IF EXISTS nonexistent

-- \dew+

DROP ROLE regress_test_role_super
ERROR: 
-- \dew+

DROP ROLE regress_test_role_super

role "regress_test_role_super" cannot be dropped because some objects depend on it
DETAIL:  owner of foreign-data wrapper foo

                          -- ERROR
SET ROLE regress_test_role_super

DROP FOREIGN DATA WRAPPER foo

RESET ROLE

DROP ROLE regress_test_role_super

-- \dew+

CREATE FOREIGN DATA WRAPPER foo

CREATE SERVER s1 FOREIGN DATA WRAPPER foo

COMMENT ON SERVER s1 IS 'foreign server'

CREATE USER MAPPING FOR current_user SERVER s1

CREATE USER MAPPING FOR current_user SERVER s1
ProgrammingError: 
CREATE USER MAPPING FOR current_user SERVER s1

user mapping for "regress_foreign_data_user" already exists for server "s1"

				-- ERROR
CREATE USER MAPPING IF NOT EXISTS FOR current_user SERVER s1
 -- NOTICE
-- \dew+
-- \des+
-- \deu+
DROP FOREIGN DATA WRAPPER foo
ERROR:  -- NOTICE
-- \dew+
-- \des+
-- \deu+
DROP FOREIGN DATA WRAPPER foo

cannot drop foreign-data wrapper foo because other objects depend on it
DETAIL:  server s1 depends on foreign-data wrapper foo
user mapping for regress_foreign_data_user on server s1 depends on server s1
HINT:  Use DROP ... CASCADE to drop the dependent objects too.

                              -- ERROR
SET ROLE regress_test_role

DROP FOREIGN DATA WRAPPER foo CASCADE
ProgrammingError: 
DROP FOREIGN DATA WRAPPER foo CASCADE

must be owner of foreign-data wrapper foo

                      -- ERROR
RESET ROLE

DROP FOREIGN DATA WRAPPER foo CASCADE

-- \dew+
-- \des+
-- \deu+

-- exercise CREATE SERVER
CREATE SERVER s1 FOREIGN DATA WRAPPER foo
ProgrammingError: 
-- \dew+
-- \des+
-- \deu+

-- exercise CREATE SERVER
CREATE SERVER s1 FOREIGN DATA WRAPPER foo

foreign-data wrapper "foo" does not exist

                  -- ERROR
CREATE FOREIGN DATA WRAPPER foo OPTIONS ("test wrapper" 'true')

CREATE SERVER s1 FOREIGN DATA WRAPPER foo

CREATE SERVER s1 FOREIGN DATA WRAPPER foo
ProgrammingError: 
CREATE SERVER s1 FOREIGN DATA WRAPPER foo

server "s1" already exists

                  -- ERROR
CREATE SERVER IF NOT EXISTS s1 FOREIGN DATA WRAPPER foo
	-- No ERROR, just NOTICE
CREATE SERVER s2 FOREIGN DATA WRAPPER foo OPTIONS (host 'a', dbname 'b')

CREATE SERVER s3 TYPE 'oracle' FOREIGN DATA WRAPPER foo

CREATE SERVER s4 TYPE 'oracle' FOREIGN DATA WRAPPER foo OPTIONS (host 'a', dbname 'b')

CREATE SERVER s5 VERSION '15.0' FOREIGN DATA WRAPPER foo

CREATE SERVER s6 VERSION '16.0' FOREIGN DATA WRAPPER foo OPTIONS (host 'a', dbname 'b')

CREATE SERVER s7 TYPE 'oracle' VERSION '17.0' FOREIGN DATA WRAPPER foo OPTIONS (host 'a', dbname 'b')

CREATE SERVER s8 FOREIGN DATA WRAPPER postgresql OPTIONS (foo '1')
ProgrammingError: 
CREATE SERVER s8 FOREIGN DATA WRAPPER postgresql OPTIONS (foo '1')

invalid option "foo"

 -- ERROR
CREATE SERVER s8 FOREIGN DATA WRAPPER postgresql OPTIONS (host 'localhost', dbname 's8db')

-- \des+
SET ROLE regress_test_role

CREATE SERVER t1 FOREIGN DATA WRAPPER foo
ProgrammingError: 
CREATE SERVER t1 FOREIGN DATA WRAPPER foo

permission denied for foreign-data wrapper foo

                 -- ERROR: no usage on FDW
RESET ROLE

GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_role

SET ROLE regress_test_role

CREATE SERVER t1 FOREIGN DATA WRAPPER foo

RESET ROLE

-- \des+

REVOKE USAGE ON FOREIGN DATA WRAPPER foo FROM regress_test_role

GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_indirect

SET ROLE regress_test_role

CREATE SERVER t2 FOREIGN DATA WRAPPER foo
ProgrammingError: 
CREATE SERVER t2 FOREIGN DATA WRAPPER foo

permission denied for foreign-data wrapper foo

                 -- ERROR
RESET ROLE

GRANT regress_test_indirect TO regress_test_role

SET ROLE regress_test_role

CREATE SERVER t2 FOREIGN DATA WRAPPER foo

-- \des+
RESET ROLE

REVOKE regress_test_indirect FROM regress_test_role


-- ALTER SERVER
ALTER SERVER s0
ProgrammingError: 

-- ALTER SERVER
ALTER SERVER s0

syntax error at end of input
LINE 5: 
        ^

                                            -- ERROR
ALTER SERVER s0 OPTIONS (a '1')
ProgrammingError:                                             -- ERROR
ALTER SERVER s0 OPTIONS (a '1')

server "s0" does not exist

                            -- ERROR
ALTER SERVER s1 VERSION '1.0' OPTIONS (servername 's1')

ALTER SERVER s2 VERSION '1.1'

ALTER SERVER s3 OPTIONS ("tns name" 'orcl', port '1521')

GRANT USAGE ON FOREIGN SERVER s1 TO regress_test_role

GRANT USAGE ON FOREIGN SERVER s6 TO regress_test_role2 WITH GRANT OPTION

-- \des+
SET ROLE regress_test_role

ALTER SERVER s1 VERSION '1.1'
ProgrammingError: 
ALTER SERVER s1 VERSION '1.1'

must be owner of foreign server s1

                              -- ERROR
ALTER SERVER s1 OWNER TO regress_test_role
ProgrammingError:                               -- ERROR
ALTER SERVER s1 OWNER TO regress_test_role

must be owner of foreign server s1

                 -- ERROR
RESET ROLE

ALTER SERVER s1 OWNER TO regress_test_role

GRANT regress_test_role2 TO regress_test_role

SET ROLE regress_test_role

ALTER SERVER s1 VERSION '1.1'

ALTER SERVER s1 OWNER TO regress_test_role2
ProgrammingError: 
ALTER SERVER s1 OWNER TO regress_test_role2

permission denied for foreign-data wrapper foo

                -- ERROR
RESET ROLE

ALTER SERVER s8 OPTIONS (foo '1')
ProgrammingError: 
ALTER SERVER s8 OPTIONS (foo '1')

invalid option "foo"

                          -- ERROR option validation
ALTER SERVER s8 OPTIONS (connect_timeout '30', SET dbname 'db1', DROP host)

SET ROLE regress_test_role

ALTER SERVER s1 OWNER TO regress_test_indirect
ProgrammingError: 
ALTER SERVER s1 OWNER TO regress_test_indirect

must be able to SET ROLE "regress_test_indirect"

             -- ERROR
RESET ROLE

GRANT regress_test_indirect TO regress_test_role

SET ROLE regress_test_role

ALTER SERVER s1 OWNER TO regress_test_indirect

RESET ROLE

GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_indirect

SET ROLE regress_test_role

ALTER SERVER s1 OWNER TO regress_test_indirect

RESET ROLE

DROP ROLE regress_test_indirect
ERROR: 
DROP ROLE regress_test_indirect

role "regress_test_indirect" cannot be dropped because some objects depend on it
DETAIL:  privileges for foreign-data wrapper foo
owner of server s1

                            -- ERROR
-- \des+

ALTER SERVER s8 RENAME to s8new

-- \des+
ALTER SERVER s8new RENAME to s8


-- DROP SERVER
DROP SERVER nonexistent
ProgrammingError: 

-- DROP SERVER
DROP SERVER nonexistent

server "nonexistent" does not exist

                                    -- ERROR
DROP SERVER IF EXISTS nonexistent

-- \des
SET ROLE regress_test_role

DROP SERVER s2
ProgrammingError: 
DROP SERVER s2

must be owner of foreign server s2

                                             -- ERROR
DROP SERVER s1

RESET ROLE

-- \des
ALTER SERVER s2 OWNER TO regress_test_role

SET ROLE regress_test_role

DROP SERVER s2

RESET ROLE

-- \des
CREATE USER MAPPING FOR current_user SERVER s3

-- \deu
DROP SERVER s3
ERROR: 
-- \deu
DROP SERVER s3

cannot drop server s3 because other objects depend on it
DETAIL:  user mapping for regress_foreign_data_user on server s3 depends on server s3
HINT:  Use DROP ... CASCADE to drop the dependent objects too.

                                             -- ERROR
DROP SERVER s3 CASCADE

-- \des
-- \deu

-- CREATE USER MAPPING
CREATE USER MAPPING FOR regress_test_missing_role SERVER s1
ProgrammingError: 
-- \des
-- \deu

-- CREATE USER MAPPING
CREATE USER MAPPING FOR regress_test_missing_role SERVER s1

role "regress_test_missing_role" does not exist

  -- ERROR
CREATE USER MAPPING FOR current_user SERVER s1
ProgrammingError:   -- ERROR
CREATE USER MAPPING FOR current_user SERVER s1

server "s1" does not exist

             -- ERROR
CREATE USER MAPPING FOR current_user SERVER s4

CREATE USER MAPPING FOR user SERVER s4
ProgrammingError: 
CREATE USER MAPPING FOR user SERVER s4

user mapping for "regress_foreign_data_user" already exists for server "s4"

                     -- ERROR duplicate
CREATE USER MAPPING FOR public SERVER s4 OPTIONS ("this mapping" 'is public')

CREATE USER MAPPING FOR user SERVER s8 OPTIONS (username 'test', password 'secret')
ProgrammingError: 
CREATE USER MAPPING FOR user SERVER s8 OPTIONS (username 'test', password 'secret')

invalid option "username"
HINT:  Perhaps you meant the option "user".

    -- ERROR
CREATE USER MAPPING FOR user SERVER s8 OPTIONS (user 'test', password 'secret')

ALTER SERVER s5 OWNER TO regress_test_role

ALTER SERVER s6 OWNER TO regress_test_indirect

SET ROLE regress_test_role

CREATE USER MAPPING FOR current_user SERVER s5

CREATE USER MAPPING FOR current_user SERVER s6 OPTIONS (username 'test')

CREATE USER MAPPING FOR current_user SERVER s7
ProgrammingError: 
CREATE USER MAPPING FOR current_user SERVER s7

permission denied for foreign server s7

             -- ERROR
CREATE USER MAPPING FOR public SERVER s8
ProgrammingError:              -- ERROR
CREATE USER MAPPING FOR public SERVER s8

must be owner of foreign server s8

                   -- ERROR
RESET ROLE


ALTER SERVER t1 OWNER TO regress_test_indirect

SET ROLE regress_test_role

CREATE USER MAPPING FOR current_user SERVER t1 OPTIONS (username 'bob', password 'boo')

CREATE USER MAPPING FOR public SERVER t1

RESET ROLE

-- \deu

-- ALTER USER MAPPING
ALTER USER MAPPING FOR regress_test_missing_role SERVER s4 OPTIONS (gotcha 'true')
ProgrammingError: 
-- \deu

-- ALTER USER MAPPING
ALTER USER MAPPING FOR regress_test_missing_role SERVER s4 OPTIONS (gotcha 'true')

role "regress_test_missing_role" does not exist

 -- ERROR
ALTER USER MAPPING FOR user SERVER ss4 OPTIONS (gotcha 'true')
ProgrammingError:  -- ERROR
ALTER USER MAPPING FOR user SERVER ss4 OPTIONS (gotcha 'true')

server "ss4" does not exist

 -- ERROR
ALTER USER MAPPING FOR public SERVER s5 OPTIONS (gotcha 'true')
ProgrammingError:  -- ERROR
ALTER USER MAPPING FOR public SERVER s5 OPTIONS (gotcha 'true')

user mapping for "public" does not exist for server "s5"

            -- ERROR
ALTER USER MAPPING FOR current_user SERVER s8 OPTIONS (username 'test')
ProgrammingError:             -- ERROR
ALTER USER MAPPING FOR current_user SERVER s8 OPTIONS (username 'test')

invalid option "username"
HINT:  Perhaps you meant the option "user".

    -- ERROR
ALTER USER MAPPING FOR current_user SERVER s8 OPTIONS (DROP user, SET password 'public')

SET ROLE regress_test_role

ALTER USER MAPPING FOR current_user SERVER s5 OPTIONS (ADD modified '1')

ALTER USER MAPPING FOR public SERVER s4 OPTIONS (ADD modified '1')
ProgrammingError: 
ALTER USER MAPPING FOR public SERVER s4 OPTIONS (ADD modified '1')

must be owner of foreign server s4

 -- ERROR
ALTER USER MAPPING FOR public SERVER t1 OPTIONS (ADD modified '1')

RESET ROLE

-- \deu+

-- DROP USER MAPPING
DROP USER MAPPING FOR regress_test_missing_role SERVER s4
ProgrammingError: 
-- \deu+

-- DROP USER MAPPING
DROP USER MAPPING FOR regress_test_missing_role SERVER s4

role "regress_test_missing_role" does not exist

  -- ERROR
DROP USER MAPPING FOR user SERVER ss4
ProgrammingError:   -- ERROR
DROP USER MAPPING FOR user SERVER ss4

server "ss4" does not exist


DROP USER MAPPING FOR public SERVER s7
ProgrammingError: 
DROP USER MAPPING FOR public SERVER s7

user mapping for "public" does not exist for server "s7"

                     -- ERROR
DROP USER MAPPING IF EXISTS FOR regress_test_missing_role SERVER s4

DROP USER MAPPING IF EXISTS FOR user SERVER ss4

DROP USER MAPPING IF EXISTS FOR public SERVER s7

CREATE USER MAPPING FOR public SERVER s8

SET ROLE regress_test_role

DROP USER MAPPING FOR public SERVER s8
ProgrammingError: 
DROP USER MAPPING FOR public SERVER s8

must be owner of foreign server s8

                     -- ERROR
RESET ROLE

DROP SERVER s7

-- \deu

-- CREATE FOREIGN TABLE
CREATE SCHEMA foreign_schema

CREATE SERVER s0 FOREIGN DATA WRAPPER dummy

CREATE FOREIGN TABLE ft1 ()
ProgrammingError: 
CREATE FOREIGN TABLE ft1 ()

syntax error at end of input
LINE 3: 
        ^

                                    -- ERROR
CREATE FOREIGN TABLE ft1 () SERVER no_server
ProgrammingError:                                     -- ERROR
CREATE FOREIGN TABLE ft1 () SERVER no_server

server "no_server" does not exist

                   -- ERROR
CREATE FOREIGN TABLE ft1 (
	c1 integer OPTIONS ("param 1" 'val1') PRIMARY KEY,
	c2 text OPTIONS (param2 'val2', param3 'val3'),
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value'); -- ERROR
CREATE TABLE ref_table (id integer PRIMARY KEY);
CREATE FOREIGN TABLE ft1 (
	c1 integer OPTIONS ("param 1" 'val1') REFERENCES ref_table (id),
	c2 text OPTIONS (param2 'val2', param3 'val3'),
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
ERROR:                    -- ERROR
CREATE FOREIGN TABLE ft1 (
	c1 integer OPTIONS ("param 1" 'val1') PRIMARY KEY,
	c2 text OPTIONS (param2 'val2', param3 'val3'),
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value'); -- ERROR
CREATE TABLE ref_table (id integer PRIMARY KEY);
CREATE FOREIGN TABLE ft1 (
	c1 integer OPTIONS ("param 1" 'val1') REFERENCES ref_table (id),
	c2 text OPTIONS (param2 'val2', param3 'val3'),
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')

primary key constraints are not supported on foreign tables
LINE 3:  c1 integer OPTIONS ("param 1" 'val1') PRIMARY KEY,
                                               ^

 -- ERROR
DROP TABLE ref_table
ProgrammingError:  -- ERROR
DROP TABLE ref_table

table "ref_table" does not exist


CREATE FOREIGN TABLE ft1 (
	c1 integer OPTIONS ("param 1" 'val1') NOT NULL,
	c2 text OPTIONS (param2 'val2', param3 'val3'),
	c3 date,
	UNIQUE (c3)
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value'); -- ERROR
CREATE FOREIGN TABLE ft1 (
	c1 integer OPTIONS ("param 1" 'val1') NOT NULL,
	c2 text OPTIONS (param2 'val2', param3 'val3') CHECK (c2 <> ''),
	c3 date,
	CHECK (c3 BETWEEN '1994-01-01'::date AND '1994-01-31'::date)
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
ERROR: 
CREATE FOREIGN TABLE ft1 (
	c1 integer OPTIONS ("param 1" 'val1') NOT NULL,
	c2 text OPTIONS (param2 'val2', param3 'val3'),
	c3 date,
	UNIQUE (c3)
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value'); -- ERROR
CREATE FOREIGN TABLE ft1 (
	c1 integer OPTIONS ("param 1" 'val1') NOT NULL,
	c2 text OPTIONS (param2 'val2', param3 'val3') CHECK (c2 <> ''),
	c3 date,
	CHECK (c3 BETWEEN '1994-01-01'::date AND '1994-01-31'::date)
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')

unique constraints are not supported on foreign tables
LINE 6:  UNIQUE (c3)
         ^


COMMENT ON FOREIGN TABLE ft1 IS 'ft1'
ProgrammingError: 
COMMENT ON FOREIGN TABLE ft1 IS 'ft1'

relation "ft1" does not exist


COMMENT ON COLUMN ft1.c1 IS 'ft1.c1'
ProgrammingError: 
COMMENT ON COLUMN ft1.c1 IS 'ft1.c1'

relation "ft1" does not exist


-- \d+ ft1
-- \det+
CREATE INDEX id_ft1_c2 ON ft1 (c2)
ProgrammingError: 
-- \d+ ft1
-- \det+
CREATE INDEX id_ft1_c2 ON ft1 (c2)

relation "ft1" does not exist

                             -- ERROR
SELECT * FROM ft1
ProgrammingError:                              -- ERROR
SELECT * FROM ft1

relation "ft1" does not exist
LINE 2: SELECT * FROM ft1
                      ^

                                              -- ERROR
EXPLAIN SELECT * FROM ft1
ProgrammingError:                                               -- ERROR
EXPLAIN SELECT * FROM ft1

relation "ft1" does not exist
LINE 2: EXPLAIN SELECT * FROM ft1
                              ^

                                      -- ERROR

CREATE TABLE lt1 (a INT) PARTITION BY RANGE (a)

CREATE FOREIGN TABLE ft_part1
  PARTITION OF lt1 FOR VALUES FROM (0) TO (1000) SERVER s0

CREATE INDEX ON lt1 (a)
                              -- skips partition
CREATE UNIQUE INDEX ON lt1 (a)
ProgrammingError:                               -- skips partition
CREATE UNIQUE INDEX ON lt1 (a)

cannot create unique index on partitioned table "lt1"
DETAIL:  Table "lt1" contains partitions that are foreign tables.

                                 -- ERROR
ALTER TABLE lt1 ADD PRIMARY KEY (a)
ProgrammingError:                                  -- ERROR
ALTER TABLE lt1 ADD PRIMARY KEY (a)

cannot create unique index on partitioned table "lt1"
DETAIL:  Table "lt1" contains partitions that are foreign tables.

                            -- ERROR
DROP TABLE lt1


CREATE TABLE lt1 (a INT) PARTITION BY RANGE (a)

CREATE INDEX ON lt1 (a)

CREATE FOREIGN TABLE ft_part1
  PARTITION OF lt1 FOR VALUES FROM (0) TO (1000) SERVER s0

CREATE FOREIGN TABLE ft_part2 (a INT) SERVER s0

ALTER TABLE lt1 ATTACH PARTITION ft_part2 FOR VALUES FROM (1000) TO (2000)

DROP FOREIGN TABLE ft_part1, ft_part2

CREATE UNIQUE INDEX ON lt1 (a)

ALTER TABLE lt1 ADD PRIMARY KEY (a)

CREATE FOREIGN TABLE ft_part1
  PARTITION OF lt1 FOR VALUES FROM (0) TO (1000) SERVER s0
ProgrammingError: 
CREATE FOREIGN TABLE ft_part1
  PARTITION OF lt1 FOR VALUES FROM (0) TO (1000) SERVER s0

cannot create foreign partition of partitioned table "lt1"
DETAIL:  Table "lt1" contains indexes that are unique.

     -- ERROR
CREATE FOREIGN TABLE ft_part2 (a INT NOT NULL) SERVER s0

ALTER TABLE lt1 ATTACH PARTITION ft_part2
  FOR VALUES FROM (1000) TO (2000)
ProgrammingError: 
ALTER TABLE lt1 ATTACH PARTITION ft_part2
  FOR VALUES FROM (1000) TO (2000)

cannot attach foreign table "ft_part2" as partition of partitioned table "lt1"
DETAIL:  Partitioned table "lt1" contains unique indexes.

                             -- ERROR
DROP TABLE lt1

DROP FOREIGN TABLE ft_part2


CREATE TABLE lt1 (a INT) PARTITION BY RANGE (a)

CREATE INDEX ON lt1 (a)

CREATE TABLE lt1_part1
  PARTITION OF lt1 FOR VALUES FROM (0) TO (1000)
  PARTITION BY RANGE (a)

CREATE FOREIGN TABLE ft_part_1_1
  PARTITION OF lt1_part1 FOR VALUES FROM (0) TO (100) SERVER s0

CREATE FOREIGN TABLE ft_part_1_2 (a INT) SERVER s0

ALTER TABLE lt1_part1 ATTACH PARTITION ft_part_1_2 FOR VALUES FROM (100) TO (200)

CREATE UNIQUE INDEX ON lt1 (a)
ProgrammingError: 
CREATE UNIQUE INDEX ON lt1 (a)

cannot create unique index on partitioned table "lt1"
DETAIL:  Table "lt1" contains partitions that are foreign tables.


ALTER TABLE lt1 ADD PRIMARY KEY (a)
ProgrammingError: 
ALTER TABLE lt1 ADD PRIMARY KEY (a)

cannot create unique index on partitioned table "lt1_part1"
DETAIL:  Table "lt1_part1" contains partitions that are foreign tables.


DROP FOREIGN TABLE ft_part_1_1, ft_part_1_2

CREATE UNIQUE INDEX ON lt1 (a)

ALTER TABLE lt1 ADD PRIMARY KEY (a)

CREATE FOREIGN TABLE ft_part_1_1
  PARTITION OF lt1_part1 FOR VALUES FROM (0) TO (100) SERVER s0
ProgrammingError: 
CREATE FOREIGN TABLE ft_part_1_1
  PARTITION OF lt1_part1 FOR VALUES FROM (0) TO (100) SERVER s0

cannot create foreign partition of partitioned table "lt1_part1"
DETAIL:  Table "lt1_part1" contains indexes that are unique.


CREATE FOREIGN TABLE ft_part_1_2 (a INT NOT NULL) SERVER s0

ALTER TABLE lt1_part1 ATTACH PARTITION ft_part_1_2 FOR VALUES FROM (100) TO (200)
ProgrammingError: 
ALTER TABLE lt1_part1 ATTACH PARTITION ft_part_1_2 FOR VALUES FROM (100) TO (200)

cannot attach foreign table "ft_part_1_2" as partition of partitioned table "lt1_part1"
DETAIL:  Partitioned table "lt1_part1" contains unique indexes.


DROP TABLE lt1

DROP FOREIGN TABLE ft_part_1_2


-- ALTER FOREIGN TABLE
COMMENT ON FOREIGN TABLE ft1 IS 'foreign table'
ProgrammingError: 

-- ALTER FOREIGN TABLE
COMMENT ON FOREIGN TABLE ft1 IS 'foreign table'

relation "ft1" does not exist


COMMENT ON FOREIGN TABLE ft1 IS NULL
ProgrammingError: 
COMMENT ON FOREIGN TABLE ft1 IS NULL

relation "ft1" does not exist


COMMENT ON COLUMN ft1.c1 IS 'foreign column'
ProgrammingError: 
COMMENT ON COLUMN ft1.c1 IS 'foreign column'

relation "ft1" does not exist


COMMENT ON COLUMN ft1.c1 IS NULL
ProgrammingError: 
COMMENT ON COLUMN ft1.c1 IS NULL

relation "ft1" does not exist



ALTER FOREIGN TABLE ft1 ADD COLUMN c4 integer
ProgrammingError: 

ALTER FOREIGN TABLE ft1 ADD COLUMN c4 integer

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ADD COLUMN c5 integer DEFAULT 0
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ADD COLUMN c5 integer DEFAULT 0

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ADD COLUMN c6 integer
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ADD COLUMN c6 integer

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ADD COLUMN c7 integer NOT NULL
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ADD COLUMN c7 integer NOT NULL

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ADD COLUMN c8 integer
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ADD COLUMN c8 integer

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ADD COLUMN c9 integer
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ADD COLUMN c9 integer

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ADD COLUMN c10 integer OPTIONS (p1 'v1')
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ADD COLUMN c10 integer OPTIONS (p1 'v1')

relation "ft1" does not exist



ALTER FOREIGN TABLE ft1 ALTER COLUMN c4 SET DEFAULT 0
ProgrammingError: 

ALTER FOREIGN TABLE ft1 ALTER COLUMN c4 SET DEFAULT 0

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ALTER COLUMN c5 DROP DEFAULT
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ALTER COLUMN c5 DROP DEFAULT

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ALTER COLUMN c6 SET NOT NULL
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ALTER COLUMN c6 SET NOT NULL

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ALTER COLUMN c7 DROP NOT NULL
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ALTER COLUMN c7 DROP NOT NULL

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE char(10) USING '0'
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE char(10) USING '0'

relation "ft1" does not exist

 -- ERROR
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE char(10)
ProgrammingError:  -- ERROR
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE char(10)

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 SET DATA TYPE text
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 SET DATA TYPE text

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ALTER COLUMN xmin OPTIONS (ADD p1 'v1')
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ALTER COLUMN xmin OPTIONS (ADD p1 'v1')

relation "ft1" does not exist

 -- ERROR
ALTER FOREIGN TABLE ft1 ALTER COLUMN c7 OPTIONS (ADD p1 'v1', ADD p2 'v2'),
                        ALTER COLUMN c8 OPTIONS (ADD p1 'v1', ADD p2 'v2')
ProgrammingError:  -- ERROR
ALTER FOREIGN TABLE ft1 ALTER COLUMN c7 OPTIONS (ADD p1 'v1', ADD p2 'v2'),
                        ALTER COLUMN c8 OPTIONS (ADD p1 'v1', ADD p2 'v2')

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 OPTIONS (SET p2 'V2', DROP p1)
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 OPTIONS (SET p2 'V2', DROP p1)

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ALTER COLUMN c1 SET STATISTICS 10000
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ALTER COLUMN c1 SET STATISTICS 10000

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ALTER COLUMN c1 SET (n_distinct = 100)
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ALTER COLUMN c1 SET (n_distinct = 100)

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 SET STATISTICS -1
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 SET STATISTICS -1

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 SET STORAGE PLAIN
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 SET STORAGE PLAIN

relation "ft1" does not exist


-- \d+ ft1
-- can''t change the column type if it''s used elsewhere
CREATE TABLE use_ft1_column_type (x ft1)
ProgrammingError: 
-- \d+ ft1
-- can''t change the column type if it''s used elsewhere
CREATE TABLE use_ft1_column_type (x ft1)

type "ft1" does not exist
LINE 4: CREATE TABLE use_ft1_column_type (x ft1)
                                            ^


ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 SET DATA TYPE integer
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 SET DATA TYPE integer

relation "ft1" does not exist

	-- ERROR
DROP TABLE use_ft1_column_type
ProgrammingError: 	-- ERROR
DROP TABLE use_ft1_column_type

table "use_ft1_column_type" does not exist


ALTER FOREIGN TABLE ft1 ADD PRIMARY KEY (c7)
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ADD PRIMARY KEY (c7)

relation "ft1" does not exist

                   -- ERROR
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c9_check CHECK (c9 < 0) NOT VALID
ProgrammingError:                    -- ERROR
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c9_check CHECK (c9 < 0) NOT VALID

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 ALTER CONSTRAINT ft1_c9_check DEFERRABLE
ProgrammingError: 
ALTER FOREIGN TABLE ft1 ALTER CONSTRAINT ft1_c9_check DEFERRABLE

relation "ft1" does not exist

 -- ERROR
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c9_check
ProgrammingError:  -- ERROR
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c9_check

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 DROP CONSTRAINT no_const
ProgrammingError: 
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT no_const

relation "ft1" does not exist

               -- ERROR
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT IF EXISTS no_const
ProgrammingError:                -- ERROR
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT IF EXISTS no_const

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 OWNER TO regress_test_role
ProgrammingError: 
ALTER FOREIGN TABLE ft1 OWNER TO regress_test_role

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 OPTIONS (DROP delimiter, SET quote '~', ADD escape '@')
ProgrammingError: 
ALTER FOREIGN TABLE ft1 OPTIONS (DROP delimiter, SET quote '~', ADD escape '@')

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 DROP COLUMN no_column
ProgrammingError: 
ALTER FOREIGN TABLE ft1 DROP COLUMN no_column

relation "ft1" does not exist

                  -- ERROR
ALTER FOREIGN TABLE ft1 DROP COLUMN IF EXISTS no_column
ProgrammingError:                   -- ERROR
ALTER FOREIGN TABLE ft1 DROP COLUMN IF EXISTS no_column

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 DROP COLUMN c9
ProgrammingError: 
ALTER FOREIGN TABLE ft1 DROP COLUMN c9

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 SET SCHEMA foreign_schema
ProgrammingError: 
ALTER FOREIGN TABLE ft1 SET SCHEMA foreign_schema

relation "ft1" does not exist


ALTER FOREIGN TABLE ft1 SET TABLESPACE ts
ProgrammingError: 
ALTER FOREIGN TABLE ft1 SET TABLESPACE ts

relation "ft1" does not exist

                      -- ERROR
ALTER FOREIGN TABLE foreign_schema.ft1 RENAME c1 TO foreign_column_1
ProgrammingError:                       -- ERROR
ALTER FOREIGN TABLE foreign_schema.ft1 RENAME c1 TO foreign_column_1

relation "foreign_schema.ft1" does not exist


ALTER FOREIGN TABLE foreign_schema.ft1 RENAME TO foreign_table_1
ProgrammingError: 
ALTER FOREIGN TABLE foreign_schema.ft1 RENAME TO foreign_table_1

relation "foreign_schema.ft1" does not exist


-- \d foreign_schema.foreign_table_1

-- alter noexisting table
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c4 integer

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c6 integer

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c7 integer NOT NULL

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c8 integer

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c9 integer

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c10 integer OPTIONS (p1 'v1')


ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c6 SET NOT NULL

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c7 DROP NOT NULL

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c8 TYPE char(10)

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c8 SET DATA TYPE text

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c7 OPTIONS (ADD p1 'v1', ADD p2 'v2'),
                        ALTER COLUMN c8 OPTIONS (ADD p1 'v1', ADD p2 'v2')

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c8 OPTIONS (SET p2 'V2', DROP p1)


ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 DROP CONSTRAINT IF EXISTS no_const

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 DROP CONSTRAINT ft1_c1_check

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 OWNER TO regress_test_role

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 OPTIONS (DROP delimiter, SET quote '~', ADD escape '@')

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 DROP COLUMN IF EXISTS no_column

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 DROP COLUMN c9

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 SET SCHEMA foreign_schema

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 RENAME c1 TO foreign_column_1

ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 RENAME TO foreign_table_1


-- Information schema

SELECT * FROM information_schema.foreign_data_wrappers ORDER BY 1, 2
RESULT: 
	[('regression', 'dummy', 'regress_foreign_data_user', None, 'c'), ('regression', 'foo', 'regress_foreign_data_user', None, 'c'), ('regression', 'postgresql', 'regress_foreign_data_user', None, 'c')]

SELECT * FROM information_schema.foreign_data_wrapper_options ORDER BY 1, 2, 3
RESULT: 
	[('regression', 'foo', 'test wrapper', 'true')]

SELECT * FROM information_schema.foreign_servers ORDER BY 1, 2
RESULT: 
	[('regression', 's0', 'regression', 'dummy', None, None, 'regress_foreign_data_user'), ('regression', 's4', 'regression', 'foo', 'oracle', None, 'regress_foreign_data_user'), ('regression', 's5', 'regression', 'foo', None, '15.0', 'regress_test_role'), ('regression', 's6', 'regression', 'foo', None, '16.0', 'regress_test_indirect'), ('regression', 's8', 'regression', 'postgresql', None, None, 'regress_foreign_data_user'), ('regression', 't1', 'regression', 'foo', None, None, 'regress_test_indirect'), ('regression', 't2', 'regression', 'foo', None, None, 'regress_test_role')]

SELECT * FROM information_schema.foreign_server_options ORDER BY 1, 2, 3
RESULT: 
	[('regression', 's4', 'dbname', 'b'), ('regression', 's4', 'host', 'a'), ('regression', 's6', 'dbname', 'b'), ('regression', 's6', 'host', 'a'), ('regression', 's8', 'connect_timeout', '30'), ('regression', 's8', 'dbname', 'db1')]

SELECT * FROM information_schema.user_mappings ORDER BY lower(authorization_identifier), 2, 3
RESULT: 
	[('PUBLIC', 'regression', 's4'), ('PUBLIC', 'regression', 's8'), ('PUBLIC', 'regression', 't1'), ('regress_foreign_data_user', 'regression', 's4'), ('regress_foreign_data_user', 'regression', 's8'), ('regress_test_role', 'regression', 's5'), ('regress_test_role', 'regression', 's6'), ('regress_test_role', 'regression', 't1')]

SELECT * FROM information_schema.user_mapping_options ORDER BY lower(authorization_identifier), 2, 3, 4
RESULT: 
	[('PUBLIC', 'regression', 's4', 'this mapping', 'is public'), ('PUBLIC', 'regression', 't1', 'modified', '1'), ('regress_foreign_data_user', 'regression', 's8', 'password', 'public'), ('regress_test_role', 'regression', 's5', 'modified', '1'), ('regress_test_role', 'regression', 's6', 'username', 'test'), ('regress_test_role', 'regression', 't1', 'password', 'boo'), ('regress_test_role', 'regression', 't1', 'username', 'bob')]

SELECT * FROM information_schema.usage_privileges WHERE object_type LIKE 'FOREIGN%' AND object_name IN ('s6', 'foo') ORDER BY 1, 2, 3, 4, 5
RESULT: 
	[('regress_foreign_data_user', 'regress_foreign_data_user', 'regression', '', 'foo', 'FOREIGN DATA WRAPPER', 'USAGE', 'YES'), ('regress_foreign_data_user', 'regress_test_indirect', 'regression', '', 'foo', 'FOREIGN DATA WRAPPER', 'USAGE', 'NO'), ('regress_test_indirect', 'regress_test_indirect', 'regression', '', 's6', 'FOREIGN SERVER', 'USAGE', 'YES'), ('regress_test_indirect', 'regress_test_role2', 'regression', '', 's6', 'FOREIGN SERVER', 'USAGE', 'YES')]

SELECT * FROM information_schema.role_usage_grants WHERE object_type LIKE 'FOREIGN%' AND object_name IN ('s6', 'foo') ORDER BY 1, 2, 3, 4, 5
RESULT: 
	[('regress_foreign_data_user', 'regress_foreign_data_user', 'regression', '', 'foo', 'FOREIGN DATA WRAPPER', 'USAGE', 'YES'), ('regress_foreign_data_user', 'regress_test_indirect', 'regression', '', 'foo', 'FOREIGN DATA WRAPPER', 'USAGE', 'NO'), ('regress_test_indirect', 'regress_test_indirect', 'regression', '', 's6', 'FOREIGN SERVER', 'USAGE', 'YES'), ('regress_test_indirect', 'regress_test_role2', 'regression', '', 's6', 'FOREIGN SERVER', 'USAGE', 'YES')]

SELECT * FROM information_schema.foreign_tables ORDER BY 1, 2, 3
RESULT: 
	[]

SELECT * FROM information_schema.foreign_table_options ORDER BY 1, 2, 3, 4
RESULT: 
	[]

SET ROLE regress_test_role

SELECT * FROM information_schema.user_mapping_options ORDER BY 1, 2, 3, 4
RESULT: 
	[('PUBLIC', 'regression', 't1', 'modified', '1'), ('regress_test_role', 'regression', 's5', 'modified', '1'), ('regress_test_role', 'regression', 's6', 'username', 'test'), ('regress_test_role', 'regression', 't1', 'password', 'boo'), ('regress_test_role', 'regression', 't1', 'username', 'bob')]

SELECT * FROM information_schema.usage_privileges WHERE object_type LIKE 'FOREIGN%' AND object_name IN ('s6', 'foo') ORDER BY 1, 2, 3, 4, 5
RESULT: 
	[('regress_foreign_data_user', 'regress_test_indirect', 'regression', '', 'foo', 'FOREIGN DATA WRAPPER', 'USAGE', 'NO'), ('regress_test_indirect', 'regress_test_indirect', 'regression', '', 's6', 'FOREIGN SERVER', 'USAGE', 'YES'), ('regress_test_indirect', 'regress_test_role2', 'regression', '', 's6', 'FOREIGN SERVER', 'USAGE', 'YES')]

SELECT * FROM information_schema.role_usage_grants WHERE object_type LIKE 'FOREIGN%' AND object_name IN ('s6', 'foo') ORDER BY 1, 2, 3, 4, 5
RESULT: 
	[('regress_foreign_data_user', 'regress_test_indirect', 'regression', '', 'foo', 'FOREIGN DATA WRAPPER', 'USAGE', 'NO'), ('regress_test_indirect', 'regress_test_indirect', 'regression', '', 's6', 'FOREIGN SERVER', 'USAGE', 'YES'), ('regress_test_indirect', 'regress_test_role2', 'regression', '', 's6', 'FOREIGN SERVER', 'USAGE', 'YES')]

DROP USER MAPPING FOR current_user SERVER t1

SET ROLE regress_test_role2

SELECT * FROM information_schema.user_mapping_options ORDER BY 1, 2, 3, 4
RESULT: 
	[('regress_test_role', 'regression', 's6', 'username', None)]

RESET ROLE



-- has_foreign_data_wrapper_privilege
SELECT has_foreign_data_wrapper_privilege('regress_test_role',
    (SELECT oid FROM pg_foreign_data_wrapper WHERE fdwname='foo'), 'USAGE')
RESULT: 
	[(True,)]

SELECT has_foreign_data_wrapper_privilege('regress_test_role', 'foo', 'USAGE')
RESULT: 
	[(True,)]

SELECT has_foreign_data_wrapper_privilege(
    (SELECT oid FROM pg_roles WHERE rolname='regress_test_role'),
    (SELECT oid FROM pg_foreign_data_wrapper WHERE fdwname='foo'), 'USAGE')
RESULT: 
	[(True,)]

SELECT has_foreign_data_wrapper_privilege(
    (SELECT oid FROM pg_foreign_data_wrapper WHERE fdwname='foo'), 'USAGE')
RESULT: 
	[(True,)]

SELECT has_foreign_data_wrapper_privilege(
    (SELECT oid FROM pg_roles WHERE rolname='regress_test_role'), 'foo', 'USAGE')
RESULT: 
	[(True,)]

SELECT has_foreign_data_wrapper_privilege('foo', 'USAGE')
RESULT: 
	[(True,)]

GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_role

SELECT has_foreign_data_wrapper_privilege('regress_test_role', 'foo', 'USAGE')
RESULT: 
	[(True,)]


-- has_server_privilege
SELECT has_server_privilege('regress_test_role',
    (SELECT oid FROM pg_foreign_server WHERE srvname='s8'), 'USAGE')
RESULT: 
	[(False,)]

SELECT has_server_privilege('regress_test_role', 's8', 'USAGE')
RESULT: 
	[(False,)]

SELECT has_server_privilege(
    (SELECT oid FROM pg_roles WHERE rolname='regress_test_role'),
    (SELECT oid FROM pg_foreign_server WHERE srvname='s8'), 'USAGE')
RESULT: 
	[(False,)]

SELECT has_server_privilege(
    (SELECT oid FROM pg_foreign_server WHERE srvname='s8'), 'USAGE')
RESULT: 
	[(True,)]

SELECT has_server_privilege(
    (SELECT oid FROM pg_roles WHERE rolname='regress_test_role'), 's8', 'USAGE')
RESULT: 
	[(False,)]

SELECT has_server_privilege('s8', 'USAGE')
RESULT: 
	[(True,)]

GRANT USAGE ON FOREIGN SERVER s8 TO regress_test_role

SELECT has_server_privilege('regress_test_role', 's8', 'USAGE')
RESULT: 
	[(True,)]

REVOKE USAGE ON FOREIGN SERVER s8 FROM regress_test_role


GRANT USAGE ON FOREIGN SERVER s4 TO regress_test_role

DROP USER MAPPING FOR public SERVER s4

ALTER SERVER s6 OPTIONS (DROP host, DROP dbname)

ALTER USER MAPPING FOR regress_test_role SERVER s6 OPTIONS (DROP username)

ALTER FOREIGN DATA WRAPPER foo VALIDATOR postgresql_fdw_validator


-- Privileges
SET ROLE regress_unprivileged_role

CREATE FOREIGN DATA WRAPPER foobar
ProgrammingError: 
CREATE FOREIGN DATA WRAPPER foobar

permission denied to create foreign-data wrapper "foobar"
HINT:  Must be superuser to create a foreign-data wrapper.

                             -- ERROR
ALTER FOREIGN DATA WRAPPER foo OPTIONS (gotcha 'true')
ProgrammingError:                              -- ERROR
ALTER FOREIGN DATA WRAPPER foo OPTIONS (gotcha 'true')

permission denied to alter foreign-data wrapper "foo"
HINT:  Must be superuser to alter a foreign-data wrapper.

         -- ERROR
ALTER FOREIGN DATA WRAPPER foo OWNER TO regress_unprivileged_role
ProgrammingError:          -- ERROR
ALTER FOREIGN DATA WRAPPER foo OWNER TO regress_unprivileged_role

permission denied to change owner of foreign-data wrapper "foo"
HINT:  Must be superuser to change owner of a foreign-data wrapper.

 -- ERROR
DROP FOREIGN DATA WRAPPER foo
ProgrammingError:  -- ERROR
DROP FOREIGN DATA WRAPPER foo

must be owner of foreign-data wrapper foo

                                  -- ERROR
GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_role
ProgrammingError:                                   -- ERROR
GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_role

permission denied for foreign-data wrapper foo

   -- ERROR
CREATE SERVER s9 FOREIGN DATA WRAPPER foo
ProgrammingError:    -- ERROR
CREATE SERVER s9 FOREIGN DATA WRAPPER foo

permission denied for foreign-data wrapper foo

                      -- ERROR
ALTER SERVER s4 VERSION '0.5'
ProgrammingError:                       -- ERROR
ALTER SERVER s4 VERSION '0.5'

must be owner of foreign server s4

                                  -- ERROR
ALTER SERVER s4 OWNER TO regress_unprivileged_role
ProgrammingError:                                   -- ERROR
ALTER SERVER s4 OWNER TO regress_unprivileged_role

must be owner of foreign server s4

             -- ERROR
DROP SERVER s4
ProgrammingError:              -- ERROR
DROP SERVER s4

must be owner of foreign server s4

                                                 -- ERROR
GRANT USAGE ON FOREIGN SERVER s4 TO regress_test_role
ProgrammingError:                                                  -- ERROR
GRANT USAGE ON FOREIGN SERVER s4 TO regress_test_role

permission denied for foreign server s4

          -- ERROR
CREATE USER MAPPING FOR public SERVER s4
ProgrammingError:           -- ERROR
CREATE USER MAPPING FOR public SERVER s4

must be owner of foreign server s4

                       -- ERROR
ALTER USER MAPPING FOR regress_test_role SERVER s6 OPTIONS (gotcha 'true')
ProgrammingError:                        -- ERROR
ALTER USER MAPPING FOR regress_test_role SERVER s6 OPTIONS (gotcha 'true')

must be owner of foreign server s6

 -- ERROR
DROP USER MAPPING FOR regress_test_role SERVER s6
ProgrammingError:  -- ERROR
DROP USER MAPPING FOR regress_test_role SERVER s6

must be owner of foreign server s6

              -- ERROR
RESET ROLE


GRANT USAGE ON FOREIGN DATA WRAPPER postgresql TO regress_unprivileged_role

GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_unprivileged_role WITH GRANT OPTION

SET ROLE regress_unprivileged_role

CREATE FOREIGN DATA WRAPPER foobar
ProgrammingError: 
CREATE FOREIGN DATA WRAPPER foobar

permission denied to create foreign-data wrapper "foobar"
HINT:  Must be superuser to create a foreign-data wrapper.

                             -- ERROR
ALTER FOREIGN DATA WRAPPER foo OPTIONS (gotcha 'true')
ProgrammingError:                              -- ERROR
ALTER FOREIGN DATA WRAPPER foo OPTIONS (gotcha 'true')

permission denied to alter foreign-data wrapper "foo"
HINT:  Must be superuser to alter a foreign-data wrapper.

         -- ERROR
DROP FOREIGN DATA WRAPPER foo
ProgrammingError:          -- ERROR
DROP FOREIGN DATA WRAPPER foo

must be owner of foreign-data wrapper foo

                                  -- ERROR
GRANT USAGE ON FOREIGN DATA WRAPPER postgresql TO regress_test_role
 -- WARNING
GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_role

CREATE SERVER s9 FOREIGN DATA WRAPPER postgresql

ALTER SERVER s6 VERSION '0.5'
ProgrammingError: 
ALTER SERVER s6 VERSION '0.5'

must be owner of foreign server s6

                                  -- ERROR
DROP SERVER s6
ProgrammingError:                                   -- ERROR
DROP SERVER s6

must be owner of foreign server s6

                                                 -- ERROR
GRANT USAGE ON FOREIGN SERVER s6 TO regress_test_role
ProgrammingError:                                                  -- ERROR
GRANT USAGE ON FOREIGN SERVER s6 TO regress_test_role

permission denied for foreign server s6

          -- ERROR
GRANT USAGE ON FOREIGN SERVER s9 TO regress_test_role

CREATE USER MAPPING FOR public SERVER s6
ProgrammingError: 
CREATE USER MAPPING FOR public SERVER s6

must be owner of foreign server s6

                       -- ERROR
CREATE USER MAPPING FOR public SERVER s9

ALTER USER MAPPING FOR regress_test_role SERVER s6 OPTIONS (gotcha 'true')
ProgrammingError: 
ALTER USER MAPPING FOR regress_test_role SERVER s6 OPTIONS (gotcha 'true')

must be owner of foreign server s6

 -- ERROR
DROP USER MAPPING FOR regress_test_role SERVER s6
ProgrammingError:  -- ERROR
DROP USER MAPPING FOR regress_test_role SERVER s6

must be owner of foreign server s6

              -- ERROR
RESET ROLE


REVOKE USAGE ON FOREIGN DATA WRAPPER foo FROM regress_unprivileged_role
ERROR: 

REVOKE USAGE ON FOREIGN DATA WRAPPER foo FROM regress_unprivileged_role

dependent privileges exist
HINT:  Use CASCADE to revoke them too.

 -- ERROR
REVOKE USAGE ON FOREIGN DATA WRAPPER foo FROM regress_unprivileged_role CASCADE

SET ROLE regress_unprivileged_role

GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_role
ProgrammingError: 
GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_role

permission denied for foreign-data wrapper foo

   -- ERROR
CREATE SERVER s10 FOREIGN DATA WRAPPER foo
ProgrammingError:    -- ERROR
CREATE SERVER s10 FOREIGN DATA WRAPPER foo

permission denied for foreign-data wrapper foo

                     -- ERROR
ALTER SERVER s9 VERSION '1.1'

GRANT USAGE ON FOREIGN SERVER s9 TO regress_test_role

CREATE USER MAPPING FOR current_user SERVER s9

DROP SERVER s9 CASCADE

RESET ROLE

CREATE SERVER s9 FOREIGN DATA WRAPPER foo

GRANT USAGE ON FOREIGN SERVER s9 TO regress_unprivileged_role

SET ROLE regress_unprivileged_role

ALTER SERVER s9 VERSION '1.2'
ProgrammingError: 
ALTER SERVER s9 VERSION '1.2'

must be owner of foreign server s9

                                  -- ERROR
GRANT USAGE ON FOREIGN SERVER s9 TO regress_test_role
          -- WARNING
CREATE USER MAPPING FOR current_user SERVER s9

DROP SERVER s9 CASCADE
ProgrammingError: 
DROP SERVER s9 CASCADE

must be owner of foreign server s9

                                         -- ERROR

-- Check visibility of user mapping data
SET ROLE regress_test_role

CREATE SERVER s10 FOREIGN DATA WRAPPER foo

CREATE USER MAPPING FOR public SERVER s10 OPTIONS (user 'secret')

CREATE USER MAPPING FOR regress_unprivileged_role SERVER s10 OPTIONS (user 'secret')

-- owner of server can see some option fields
-- \deu+
RESET ROLE

-- superuser can see all option fields
-- \deu+
-- unprivileged user cannot see any option field
SET ROLE regress_unprivileged_role

-- \deu+
RESET ROLE

DROP SERVER s10 CASCADE


-- Triggers
CREATE FUNCTION dummy_trigger() RETURNS TRIGGER AS $$
  BEGIN
    RETURN NULL;
  END
$$ language plpgsql


CREATE TRIGGER trigtest_before_stmt BEFORE INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH STATEMENT
EXECUTE PROCEDURE dummy_trigger()
ProgrammingError: 

CREATE TRIGGER trigtest_before_stmt BEFORE INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH STATEMENT
EXECUTE PROCEDURE dummy_trigger()

relation "foreign_schema.foreign_table_1" does not exist



CREATE TRIGGER trigtest_after_stmt AFTER INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH STATEMENT
EXECUTE PROCEDURE dummy_trigger()
ProgrammingError: 

CREATE TRIGGER trigtest_after_stmt AFTER INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH STATEMENT
EXECUTE PROCEDURE dummy_trigger()

relation "foreign_schema.foreign_table_1" does not exist



CREATE TRIGGER trigtest_after_stmt_tt AFTER INSERT OR UPDATE OR DELETE -- ERROR
ON foreign_schema.foreign_table_1
REFERENCING NEW TABLE AS new_table
FOR EACH STATEMENT
EXECUTE PROCEDURE dummy_trigger()
ProgrammingError: 

CREATE TRIGGER trigtest_after_stmt_tt AFTER INSERT OR UPDATE OR DELETE -- ERROR
ON foreign_schema.foreign_table_1
REFERENCING NEW TABLE AS new_table
FOR EACH STATEMENT
EXECUTE PROCEDURE dummy_trigger()

relation "foreign_schema.foreign_table_1" does not exist



CREATE TRIGGER trigtest_before_row BEFORE INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH ROW
EXECUTE PROCEDURE dummy_trigger()
ProgrammingError: 

CREATE TRIGGER trigtest_before_row BEFORE INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH ROW
EXECUTE PROCEDURE dummy_trigger()

relation "foreign_schema.foreign_table_1" does not exist



CREATE TRIGGER trigtest_after_row AFTER INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH ROW
EXECUTE PROCEDURE dummy_trigger()
ProgrammingError: 

CREATE TRIGGER trigtest_after_row AFTER INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH ROW
EXECUTE PROCEDURE dummy_trigger()

relation "foreign_schema.foreign_table_1" does not exist



CREATE CONSTRAINT TRIGGER trigtest_constraint AFTER INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH ROW
EXECUTE PROCEDURE dummy_trigger()
ProgrammingError: 

CREATE CONSTRAINT TRIGGER trigtest_constraint AFTER INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH ROW
EXECUTE PROCEDURE dummy_trigger()

relation "foreign_schema.foreign_table_1" does not exist



ALTER FOREIGN TABLE foreign_schema.foreign_table_1
	DISABLE TRIGGER trigtest_before_stmt
ProgrammingError: 

ALTER FOREIGN TABLE foreign_schema.foreign_table_1
	DISABLE TRIGGER trigtest_before_stmt

relation "foreign_schema.foreign_table_1" does not exist


ALTER FOREIGN TABLE foreign_schema.foreign_table_1
	ENABLE TRIGGER trigtest_before_stmt
ProgrammingError: 
ALTER FOREIGN TABLE foreign_schema.foreign_table_1
	ENABLE TRIGGER trigtest_before_stmt

relation "foreign_schema.foreign_table_1" does not exist



DROP TRIGGER trigtest_before_stmt ON foreign_schema.foreign_table_1
ProgrammingError: 

DROP TRIGGER trigtest_before_stmt ON foreign_schema.foreign_table_1

relation "foreign_schema.foreign_table_1" does not exist


DROP TRIGGER trigtest_before_row ON foreign_schema.foreign_table_1
ProgrammingError: 
DROP TRIGGER trigtest_before_row ON foreign_schema.foreign_table_1

relation "foreign_schema.foreign_table_1" does not exist


DROP TRIGGER trigtest_after_stmt ON foreign_schema.foreign_table_1
ProgrammingError: 
DROP TRIGGER trigtest_after_stmt ON foreign_schema.foreign_table_1

relation "foreign_schema.foreign_table_1" does not exist


DROP TRIGGER trigtest_after_row ON foreign_schema.foreign_table_1
ProgrammingError: 
DROP TRIGGER trigtest_after_row ON foreign_schema.foreign_table_1

relation "foreign_schema.foreign_table_1" does not exist



DROP FUNCTION dummy_trigger()


-- Table inheritance
CREATE TABLE fd_pt1 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
)

CREATE FOREIGN TABLE ft2 () INHERITS (fd_pt1)
  SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value');
-- \d+ fd_pt1
-- \d+ ft2
DROP FOREIGN TABLE ft2;
-- \d+ fd_pt1
CREATE FOREIGN TABLE ft2 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')

-- \d+ ft2
ALTER FOREIGN TABLE ft2 INHERIT fd_pt1

-- \d+ fd_pt1
-- \d+ ft2
CREATE TABLE ct3() INHERITS(ft2)

CREATE FOREIGN TABLE ft3 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
) INHERITS(ft2)
  SERVER s0

-- \d+ ft2
-- \d+ ct3
-- \d+ ft3

-- add attributes recursively
ALTER TABLE fd_pt1 ADD COLUMN c4 integer

ALTER TABLE fd_pt1 ADD COLUMN c5 integer DEFAULT 0

ALTER TABLE fd_pt1 ADD COLUMN c6 integer

ALTER TABLE fd_pt1 ADD COLUMN c7 integer NOT NULL

ALTER TABLE fd_pt1 ADD COLUMN c8 integer

-- \d+ fd_pt1
-- \d+ ft2
-- \d+ ct3
-- \d+ ft3

-- alter attributes recursively
ALTER TABLE fd_pt1 ALTER COLUMN c4 SET DEFAULT 0

ALTER TABLE fd_pt1 ALTER COLUMN c5 DROP DEFAULT

ALTER TABLE fd_pt1 ALTER COLUMN c6 SET NOT NULL

ALTER TABLE fd_pt1 ALTER COLUMN c7 DROP NOT NULL

ALTER TABLE fd_pt1 ALTER COLUMN c8 TYPE char(10) USING '0'
ProgrammingError: 
ALTER TABLE fd_pt1 ALTER COLUMN c8 TYPE char(10) USING '0'

"ft2" is not a table

        -- ERROR
ALTER TABLE fd_pt1 ALTER COLUMN c8 TYPE char(10)

ALTER TABLE fd_pt1 ALTER COLUMN c8 SET DATA TYPE text

ALTER TABLE fd_pt1 ALTER COLUMN c1 SET STATISTICS 10000

ALTER TABLE fd_pt1 ALTER COLUMN c1 SET (n_distinct = 100)

ALTER TABLE fd_pt1 ALTER COLUMN c8 SET STATISTICS -1

ALTER TABLE fd_pt1 ALTER COLUMN c8 SET STORAGE EXTERNAL

-- \d+ fd_pt1
-- \d+ ft2

-- drop attributes recursively
ALTER TABLE fd_pt1 DROP COLUMN c4

ALTER TABLE fd_pt1 DROP COLUMN c5

ALTER TABLE fd_pt1 DROP COLUMN c6

ALTER TABLE fd_pt1 DROP COLUMN c7

ALTER TABLE fd_pt1 DROP COLUMN c8

-- \d+ fd_pt1
-- \d+ ft2

-- add constraints recursively
ALTER TABLE fd_pt1 ADD CONSTRAINT fd_pt1chk1 CHECK (c1 > 0) NO INHERIT

ALTER TABLE fd_pt1 ADD CONSTRAINT fd_pt1chk2 CHECK (c2 <> '')

-- connoinherit should be true for NO INHERIT constraint
SELECT relname, conname, contype, conislocal, coninhcount, connoinherit
  FROM pg_class AS pc JOIN pg_constraint AS pgc ON (conrelid = pc.oid)
  WHERE pc.relname = 'fd_pt1'
  ORDER BY 1,2
RESULT: 
	[('fd_pt1', 'fd_pt1_c1_not_null', 'n', True, 0, False), ('fd_pt1', 'fd_pt1chk1', 'c', True, 0, True), ('fd_pt1', 'fd_pt1chk2', 'c', True, 0, False)]

-- child does not inherit NO INHERIT constraints
-- \d+ fd_pt1
-- \d+ ft2
DROP FOREIGN TABLE ft2
ERROR: 
-- child does not inherit NO INHERIT constraints
-- \d+ fd_pt1
-- \d+ ft2
DROP FOREIGN TABLE ft2

cannot drop foreign table ft2 because other objects depend on it
DETAIL:  table ct3 depends on foreign table ft2
foreign table ft3 depends on foreign table ft2
HINT:  Use DROP ... CASCADE to drop the dependent objects too.

 -- ERROR
DROP FOREIGN TABLE ft2 CASCADE

CREATE FOREIGN TABLE ft2 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value');
-- child must have parent''s INHERIT constraints
ALTER FOREIGN TABLE ft2 INHERIT fd_pt1;                            -- ERROR
ALTER FOREIGN TABLE ft2 ADD CONSTRAINT fd_pt1chk2 CHECK (c2 <> '');
ALTER FOREIGN TABLE ft2 INHERIT fd_pt1;
-- child does not inherit NO INHERIT constraints
-- \d+ fd_pt1
-- \d+ ft2

-- drop constraints recursively
ALTER TABLE fd_pt1 DROP CONSTRAINT fd_pt1chk1 CASCADE;
ALTER TABLE fd_pt1 DROP CONSTRAINT fd_pt1chk2 CASCADE;

-- NOT VALID case
INSERT INTO fd_pt1 VALUES (1, 'fd_pt1'::text, '1994-01-01'::date);
ALTER TABLE fd_pt1 ADD CONSTRAINT fd_pt1chk3 CHECK (c2 <> '') NOT VALID;
-- \d+ fd_pt1
-- \d+ ft2
-- VALIDATE CONSTRAINT need do nothing on foreign tables
ALTER TABLE fd_pt1 VALIDATE CONSTRAINT fd_pt1chk3;
-- \d+ fd_pt1
-- \d+ ft2

-- changes name of an attribute recursively
ALTER TABLE fd_pt1 RENAME COLUMN c1 TO f1;
ALTER TABLE fd_pt1 RENAME COLUMN c2 TO f2;
ALTER TABLE fd_pt1 RENAME COLUMN c3 TO f3;
-- changes name of a constraint recursively
ALTER TABLE fd_pt1 RENAME CONSTRAINT fd_pt1chk3 TO f2_check;
-- \d+ fd_pt1
-- \d+ ft2

DROP TABLE fd_pt1 CASCADE;

-- IMPORT FOREIGN SCHEMA
IMPORT FOREIGN SCHEMA s1 FROM SERVER s9 INTO public; -- ERROR
IMPORT FOREIGN SCHEMA s1 LIMIT TO (t1) FROM SERVER s9 INTO public; --ERROR
IMPORT FOREIGN SCHEMA s1 EXCEPT (t1) FROM SERVER s9 INTO public; -- ERROR
IMPORT FOREIGN SCHEMA s1 EXCEPT (t1, t2) FROM SERVER s9 INTO public
OPTIONS (option1 'value1', option2 'value2'); -- ERROR

-- DROP FOREIGN TABLE
DROP FOREIGN TABLE no_table;                                    -- ERROR
DROP FOREIGN TABLE IF EXISTS no_table;
DROP FOREIGN TABLE foreign_schema.foreign_table_1;

-- REASSIGN OWNED/DROP OWNED of foreign objects
REASSIGN OWNED BY regress_test_role TO regress_test_role2;
DROP OWNED BY regress_test_role2;
DROP OWNED BY regress_test_role2 CASCADE;

-- Foreign partition DDL stuff
CREATE TABLE fd_pt2 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
) PARTITION BY LIST (c1);
CREATE FOREIGN TABLE fd_pt2_1 PARTITION OF fd_pt2 FOR VALUES IN (1)
  SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
ProgrammingError: 
CREATE FOREIGN TABLE ft2 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value');
-- child must have parent''s INHERIT constraints
ALTER FOREIGN TABLE ft2 INHERIT fd_pt1;                            -- ERROR
ALTER FOREIGN TABLE ft2 ADD CONSTRAINT fd_pt1chk2 CHECK (c2 <> '');
ALTER FOREIGN TABLE ft2 INHERIT fd_pt1;
-- child does not inherit NO INHERIT constraints
-- \d+ fd_pt1
-- \d+ ft2

-- drop constraints recursively
ALTER TABLE fd_pt1 DROP CONSTRAINT fd_pt1chk1 CASCADE;
ALTER TABLE fd_pt1 DROP CONSTRAINT fd_pt1chk2 CASCADE;

-- NOT VALID case
INSERT INTO fd_pt1 VALUES (1, 'fd_pt1'::text, '1994-01-01'::date);
ALTER TABLE fd_pt1 ADD CONSTRAINT fd_pt1chk3 CHECK (c2 <> '') NOT VALID;
-- \d+ fd_pt1
-- \d+ ft2
-- VALIDATE CONSTRAINT need do nothing on foreign tables
ALTER TABLE fd_pt1 VALIDATE CONSTRAINT fd_pt1chk3;
-- \d+ fd_pt1
-- \d+ ft2

-- changes name of an attribute recursively
ALTER TABLE fd_pt1 RENAME COLUMN c1 TO f1;
ALTER TABLE fd_pt1 RENAME COLUMN c2 TO f2;
ALTER TABLE fd_pt1 RENAME COLUMN c3 TO f3;
-- changes name of a constraint recursively
ALTER TABLE fd_pt1 RENAME CONSTRAINT fd_pt1chk3 TO f2_check;
-- \d+ fd_pt1
-- \d+ ft2

DROP TABLE fd_pt1 CASCADE;

-- IMPORT FOREIGN SCHEMA
IMPORT FOREIGN SCHEMA s1 FROM SERVER s9 INTO public; -- ERROR
IMPORT FOREIGN SCHEMA s1 LIMIT TO (t1) FROM SERVER s9 INTO public; --ERROR
IMPORT FOREIGN SCHEMA s1 EXCEPT (t1) FROM SERVER s9 INTO public; -- ERROR
IMPORT FOREIGN SCHEMA s1 EXCEPT (t1, t2) FROM SERVER s9 INTO public
OPTIONS (option1 'value1', option2 'value2'); -- ERROR

-- DROP FOREIGN TABLE
DROP FOREIGN TABLE no_table;                                    -- ERROR
DROP FOREIGN TABLE IF EXISTS no_table;
DROP FOREIGN TABLE foreign_schema.foreign_table_1;

-- REASSIGN OWNED/DROP OWNED of foreign objects
REASSIGN OWNED BY regress_test_role TO regress_test_role2;
DROP OWNED BY regress_test_role2;
DROP OWNED BY regress_test_role2 CASCADE;

-- Foreign partition DDL stuff
CREATE TABLE fd_pt2 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
) PARTITION BY LIST (c1);
CREATE FOREIGN TABLE fd_pt2_1 PARTITION OF fd_pt2 FOR VALUES IN (1)
  SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')

child table is missing constraint "fd_pt1chk2"


-- \d+ fd_pt2
-- \d+ fd_pt2_1

-- partition cannot have additional columns
DROP FOREIGN TABLE fd_pt2_1
ProgrammingError: 
-- \d+ fd_pt2
-- \d+ fd_pt2_1

-- partition cannot have additional columns
DROP FOREIGN TABLE fd_pt2_1

foreign table "fd_pt2_1" does not exist


CREATE FOREIGN TABLE fd_pt2_1 (
	c1 integer NOT NULL,
	c2 text,
	c3 date,
	c4 char
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value');
-- \d+ fd_pt2_1
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1);       -- ERROR

DROP FOREIGN TABLE fd_pt2_1;
-- \d+ fd_pt2
CREATE FOREIGN TABLE fd_pt2_1 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
ProgrammingError: 
CREATE FOREIGN TABLE fd_pt2_1 (
	c1 integer NOT NULL,
	c2 text,
	c3 date,
	c4 char
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value');
-- \d+ fd_pt2_1
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1);       -- ERROR

DROP FOREIGN TABLE fd_pt2_1;
-- \d+ fd_pt2
CREATE FOREIGN TABLE fd_pt2_1 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')

relation "fd_pt2" does not exist


-- \d+ fd_pt2_1
-- no attach partition validation occurs for foreign tables
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)
ProgrammingError: 
-- \d+ fd_pt2_1
-- no attach partition validation occurs for foreign tables
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)

relation "fd_pt2" does not exist


-- \d+ fd_pt2
-- \d+ fd_pt2_1

-- cannot add column to a partition
ALTER TABLE fd_pt2_1 ADD c4 char
ProgrammingError: 
-- \d+ fd_pt2
-- \d+ fd_pt2_1

-- cannot add column to a partition
ALTER TABLE fd_pt2_1 ADD c4 char

relation "fd_pt2_1" does not exist



-- ok to have a partition''s own constraints though
ALTER TABLE fd_pt2_1 ALTER c3 SET NOT NULL
ProgrammingError: 

-- ok to have a partition''s own constraints though
ALTER TABLE fd_pt2_1 ALTER c3 SET NOT NULL

relation "fd_pt2_1" does not exist


ALTER TABLE fd_pt2_1 ADD CONSTRAINT p21chk CHECK (c2 <> '')
ProgrammingError: 
ALTER TABLE fd_pt2_1 ADD CONSTRAINT p21chk CHECK (c2 <> '')

relation "fd_pt2_1" does not exist


-- \d+ fd_pt2
-- \d+ fd_pt2_1

-- cannot drop inherited NOT NULL constraint from a partition
ALTER TABLE fd_pt2_1 ALTER c1 DROP NOT NULL
ProgrammingError: 
-- \d+ fd_pt2
-- \d+ fd_pt2_1

-- cannot drop inherited NOT NULL constraint from a partition
ALTER TABLE fd_pt2_1 ALTER c1 DROP NOT NULL

relation "fd_pt2_1" does not exist



-- partition must have parent''s constraints
ALTER TABLE fd_pt2 DETACH PARTITION fd_pt2_1
ProgrammingError: 

-- partition must have parent''s constraints
ALTER TABLE fd_pt2 DETACH PARTITION fd_pt2_1

relation "fd_pt2" does not exist


ALTER TABLE fd_pt2 ALTER c2 SET NOT NULL
ProgrammingError: 
ALTER TABLE fd_pt2 ALTER c2 SET NOT NULL

relation "fd_pt2" does not exist


-- \d+ fd_pt2
-- \d+ fd_pt2_1
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)
ProgrammingError: 
-- \d+ fd_pt2
-- \d+ fd_pt2_1
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)

relation "fd_pt2" does not exist

       -- ERROR
ALTER FOREIGN TABLE fd_pt2_1 ALTER c2 SET NOT NULL
ProgrammingError:        -- ERROR
ALTER FOREIGN TABLE fd_pt2_1 ALTER c2 SET NOT NULL

relation "fd_pt2_1" does not exist


ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)
ProgrammingError: 
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)

relation "fd_pt2" does not exist



ALTER TABLE fd_pt2 DETACH PARTITION fd_pt2_1
ProgrammingError: 

ALTER TABLE fd_pt2 DETACH PARTITION fd_pt2_1

relation "fd_pt2" does not exist


ALTER TABLE fd_pt2 ADD CONSTRAINT fd_pt2chk1 CHECK (c1 > 0)
ProgrammingError: 
ALTER TABLE fd_pt2 ADD CONSTRAINT fd_pt2chk1 CHECK (c1 > 0)

relation "fd_pt2" does not exist


-- \d+ fd_pt2
-- \d+ fd_pt2_1
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)
ProgrammingError: 
-- \d+ fd_pt2
-- \d+ fd_pt2_1
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)

relation "fd_pt2" does not exist

       -- ERROR
ALTER FOREIGN TABLE fd_pt2_1 ADD CONSTRAINT fd_pt2chk1 CHECK (c1 > 0)
ProgrammingError:        -- ERROR
ALTER FOREIGN TABLE fd_pt2_1 ADD CONSTRAINT fd_pt2chk1 CHECK (c1 > 0)

relation "fd_pt2_1" does not exist


ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)
ProgrammingError: 
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)

relation "fd_pt2" does not exist



DROP FOREIGN TABLE fd_pt2_1
ProgrammingError: 

DROP FOREIGN TABLE fd_pt2_1

foreign table "fd_pt2_1" does not exist


DROP TABLE fd_pt2
ProgrammingError: 
DROP TABLE fd_pt2

table "fd_pt2" does not exist



-- foreign table cannot be part of partition tree made of temporary
-- relations.
CREATE TEMP TABLE temp_parted (a int) PARTITION BY LIST (a)

CREATE FOREIGN TABLE foreign_part PARTITION OF temp_parted DEFAULT
  SERVER s0
ProgrammingError: 
CREATE FOREIGN TABLE foreign_part PARTITION OF temp_parted DEFAULT
  SERVER s0

cannot create a permanent relation as partition of temporary relation "temp_parted"

  -- ERROR
CREATE FOREIGN TABLE foreign_part (a int) SERVER s0

ALTER TABLE temp_parted ATTACH PARTITION foreign_part DEFAULT
ProgrammingError: 
ALTER TABLE temp_parted ATTACH PARTITION foreign_part DEFAULT

cannot attach a permanent relation as partition of temporary relation "temp_parted"

  -- ERROR
DROP FOREIGN TABLE foreign_part

DROP TABLE temp_parted


-- Cleanup
DROP SCHEMA foreign_schema CASCADE

DROP ROLE regress_test_role
ERROR: 
DROP ROLE regress_test_role

role "regress_test_role" cannot be dropped because some objects depend on it
DETAIL:  privileges for foreign-data wrapper foo
privileges for server s4
owner of server s5
owner of server t2
owner of user mapping for regress_test_role on server s5
owner of user mapping for regress_test_role on server s6

                                -- ERROR
DROP SERVER t1 CASCADE

DROP USER MAPPING FOR regress_test_role SERVER s6

DROP FOREIGN DATA WRAPPER foo CASCADE

DROP SERVER s8 CASCADE

DROP ROLE regress_test_indirect

DROP ROLE regress_test_role

DROP ROLE regress_unprivileged_role
ERROR: 
DROP ROLE regress_unprivileged_role

role "regress_unprivileged_role" cannot be dropped because some objects depend on it
DETAIL:  privileges for foreign-data wrapper postgresql

                        -- ERROR
REVOKE ALL ON FOREIGN DATA WRAPPER postgresql FROM regress_unprivileged_role

DROP ROLE regress_unprivileged_role

DROP ROLE regress_test_role2

DROP FOREIGN DATA WRAPPER postgresql CASCADE

DROP FOREIGN DATA WRAPPER dummy CASCADE

\c
DROP ROLE regress_foreign_data_user
ProgrammingError: 
\c
DROP ROLE regress_foreign_data_user

syntax error at or near "\"
LINE 2: \c
        ^



-- At this point we should have no wrappers, no servers, and no mappings.
SELECT fdwname, fdwhandler, fdwvalidator, fdwoptions FROM pg_foreign_data_wrapper
RESULT: 
	[]

SELECT srvname, srvoptions FROM pg_foreign_server
RESULT: 
	[]

SELECT * FROM pg_user_mapping
RESULT: 
	[]


