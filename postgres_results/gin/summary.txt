Guest DBMS identified: postgres
-----------
QUERY:
--
-- Test GIN indexes.
--
-- There are other tests to test different GIN opclasses. This is for testing
-- GIN itself.

-- Create and populate a test table with a GIN index.
create table gin_test_tbl(i int4[]) with (autovacuum_enabled = off);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

create index gin_test_idx on gin_test_tbl using gin (i)
  with (fastupdate = on, gin_pending_list_limit = 4096);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into gin_test_tbl select array[1, 2, g] from generate_series(1, 20000) g;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into gin_test_tbl select array[1, 3, g] from generate_series(1, 1000) g;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select gin_clean_pending_list('gin_test_idx')>10 as many;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:
 -- flush the fastupdate buffers

insert into gin_test_tbl select array[3, 1, g] from generate_series(1, 1000) g;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


vacuum gin_test_tbl;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:
 -- flush the fastupdate buffers

select gin_clean_pending_list('gin_test_idx');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:
 -- nothing to flush

-- Test vacuuming
delete from gin_test_tbl where i @> array[2];
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

vacuum gin_test_tbl;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- Disable fastupdate, and do more insertions. With fastupdate enabled, most
-- insertions (by flushing the list pages) cause page splits. Without
-- fastupdate, we get more churn in the GIN data leaf pages, and exercise the
-- recompression codepaths.
alter index gin_test_idx set (fastupdate = off);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


insert into gin_test_tbl select array[1, 2, g] from generate_series(1, 1000) g;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into gin_test_tbl select array[1, 3, g] from generate_series(1, 1000) g;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


delete from gin_test_tbl where i @> array[2];
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

vacuum gin_test_tbl;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- Test for /* REPLACED */ ''rare && frequent/* REPLACED */ '' searches
explain (costs off)
select count(*) from gin_test_tbl where i @> array[1, 999];
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select count(*) from gin_test_tbl where i @> array[1, 999];
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


-- Very weak test for gin_fuzzy_search_limit
set gin_fuzzy_search_limit = 1000;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


explain (costs off)
select count(*) > 0 as ok from gin_test_tbl where i @> array[1];
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select count(*) > 0 as ok from gin_test_tbl where i @> array[1];
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


reset gin_fuzzy_search_limit;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Test optimization of empty queries
create temp table t_gin_test_tbl(i int4[], j int4[]);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

create index on t_gin_test_tbl using gin (i, j);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into t_gin_test_tbl
values
  (null,    null),
  ('{}',    null),
  ('{1}',   null),
  ('{1,2}', null),
  (null,    '{}'),
  (null,    '{10}'),
  ('{1,2}', '{10}'),
  ('{2}',   '{10}'),
  ('{1,3}', '{}'),
  ('{1,1}', '{10}');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


set enable_seqscan = off;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

explain (costs off)
select * from t_gin_test_tbl where array[0] <@ i;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select * from t_gin_test_tbl where array[0] <@ i;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

select * from t_gin_test_tbl where array[0] <@ i and '{}'::int4[] <@ j;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


explain (costs off)
select * from t_gin_test_tbl where i @> '{}';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select * from t_gin_test_tbl where i @> '{}';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


create function explain_query_json(query_sql text)
returns table (explain_line json)
language plpgsql as
$$
begin
  set enable_seqscan = off;
  set enable_bitmapscan = on;
  return query execute 'EXPLAIN (ANALYZE, FORMAT json) ' || query_sql;
end;
$$;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


create function execute_text_query_index(query_sql text)
returns setof text
language plpgsql
as
$$
begin
  set enable_seqscan = off;
  set enable_bitmapscan = on;
  return query execute query_sql;
end;
$$;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


create function execute_text_query_heap(query_sql text)
returns setof text
language plpgsql
as
$$
begin
  set enable_seqscan = on;
  set enable_bitmapscan = off;
  return query execute query_sql;
end;
$$;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check number of rows returned by index and removed by recheck
select
  query,
  js->0->'Plan'->'Plans'->0->'Actual Rows' as "return by index",
  js->0->'Plan'->'Rows Removed by Index Recheck' as "removed by recheck",
  (res_index = res_heap) as "match"
from
  (values
    ($$ i @> '{}' $$),
    ($$ j @> '{}' $$),
    ($$ i @> '{}' and j @> '{}' $$),
    ($$ i @> '{1}' $$),
    ($$ i @> '{1}' and j @> '{}' $$),
    ($$ i @> '{1}' and i @> '{}' and j @> '{}' $$),
    ($$ j @> '{10}' $$),
    ($$ j @> '{10}' and i @> '{}' $$),
    ($$ j @> '{10}' and j @> '{}' and i @> '{}' $$),
    ($$ i @> '{1}' and j @> '{10}' $$)
  ) q(query),
  lateral explain_query_json($$select * from t_gin_test_tbl where $$ || query) js,
  lateral execute_text_query_index($$select string_agg((i, j)::text, ' ') from t_gin_test_tbl where $$ || query) res_index,
  lateral execute_text_query_heap($$select string_agg((i, j)::text, ' ') from t_gin_test_tbl where $$ || query) res_heap;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


reset enable_seqscan;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

reset enable_bitmapscan;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- re-purpose t_gin_test_tbl to test scans involving posting trees
insert into t_gin_test_tbl select array[1, g, g/10], array[2, g, g/10]
  from generate_series(1, 20000) g;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select gin_clean_pending_list('t_gin_test_tbl_i_j_idx') is not null;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


analyze t_gin_test_tbl;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


set enable_seqscan = off;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

set enable_bitmapscan = on;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


explain (costs off)
select count(*) from t_gin_test_tbl where j @> array[50];
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select count(*) from t_gin_test_tbl where j @> array[50];
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

explain (costs off)
select count(*) from t_gin_test_tbl where j @> array[2];
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select count(*) from t_gin_test_tbl where j @> array[2];
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

explain (costs off)
select count(*) from t_gin_test_tbl where j @> '{}'::int[];
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select count(*) from t_gin_test_tbl where j @> '{}'::int[];
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- test vacuuming of posting trees
delete from t_gin_test_tbl where j @> array[2];
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

vacuum t_gin_test_tbl;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select count(*) from t_gin_test_tbl where j @> array[50];
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

select count(*) from t_gin_test_tbl where j @> array[2];
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

select count(*) from t_gin_test_tbl where j @> '{}'::int[];
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


reset enable_seqscan;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

reset enable_bitmapscan;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


drop table t_gin_test_tbl;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- test an unlogged table, mostly to get coverage of ginbuildempty
create unlogged table t_gin_test_tbl(i int4[], j int4[]);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

create index on t_gin_test_tbl using gin (i, j);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into t_gin_test_tbl
values
  (null,    null),
  ('{}',    null),
  ('{1}',   '{2,3}');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop table t_gin_test_tbl;
RESULT: [duckdb: SAME, mysql: ERROR]


=========================================
Summary for test case gin/test.sql of postgres
=========================================

=================
Results for duckdb
SAME: 16 queries, which is 27.12%
DIFFERENT: 4 queries, which is 6.78%
ERROR: 39 queries, which is 66.10%

=================
Results for mysql
SAME: 0 queries, which is 0.00%
DIFFERENT: 0 queries, which is 0.00%
ERROR: 59 queries, which is 100.00%
