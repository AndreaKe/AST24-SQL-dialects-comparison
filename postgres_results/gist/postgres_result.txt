
-----------
QUERY:
--
-- Test GiST indexes.
--
-- There are other tests to test different GiST opclasses. This is for
-- testing GiST code itself. Vacuuming in particular.

create table gist_point_tbl(id int4, p point);
RESULT:
	[]

-----------
QUERY:

create index gist_pointidx on gist_point_tbl using gist(p);
RESULT:
	[]

-----------
QUERY:


-- Verify the fillfactor and buffering options
create index gist_pointidx2 on gist_point_tbl using gist(p) with (buffering = on, fillfactor=50);
RESULT:
	[]

-----------
QUERY:

create index gist_pointidx3 on gist_point_tbl using gist(p) with (buffering = off);
RESULT:
	[]

-----------
QUERY:

create index gist_pointidx4 on gist_point_tbl using gist(p) with (buffering = auto);
RESULT:
	[]

-----------
QUERY:

drop index gist_pointidx2, gist_pointidx3, gist_pointidx4;
RESULT:
	[]

-----------
QUERY:


-- Make sure bad values are refused
create index gist_pointidx5 on gist_point_tbl using gist(p) with (buffering = invalid_value);
RESULT:
	ERROR - invalid value for enum option "buffering": invalid_value
DETAIL:  Valid values are "on", "off", and "auto".


-----------
QUERY:

create index gist_pointidx5 on gist_point_tbl using gist(p) with (fillfactor=9);
RESULT:
	ERROR - value 9 out of bounds for option "fillfactor"
DETAIL:  Valid values are between "10" and "100".


-----------
QUERY:

create index gist_pointidx5 on gist_point_tbl using gist(p) with (fillfactor=101);
RESULT:
	ERROR - value 101 out of bounds for option "fillfactor"
DETAIL:  Valid values are between "10" and "100".


-----------
QUERY:


-- Insert enough data to create a tree that/* REPLACED */''s a couple of levels deep.
insert into gist_point_tbl (id, p)
select g,        point(g*10, g*10) from generate_series(1, 10000) g;
RESULT:
	[]

-----------
QUERY:


insert into gist_point_tbl (id, p)
select g+100000, point(g*10+1, g*10+1) from generate_series(1, 10000) g;
RESULT:
	[]

-----------
QUERY:


-- To test vacuum, delete some entries from all over the index.
delete from gist_point_tbl where id % 2 = 1;
RESULT:
	[]

-----------
QUERY:


-- And also delete some concentration of values.
delete from gist_point_tbl where id > 5000;
RESULT:
	[]

-----------
QUERY:


vacuum analyze gist_point_tbl;
RESULT:
	[]

-----------
QUERY:


-- rebuild the index with a different fillfactor
alter index gist_pointidx SET (fillfactor = 40);
RESULT:
	[]

-----------
QUERY:

reindex index gist_pointidx;
RESULT:
	[]

-----------
QUERY:


--
-- Test Index-only plans on GiST indexes
--

create table gist_tbl (b box, p point, c circle);
RESULT:
	[]

-----------
QUERY:


insert into gist_tbl
select box(point(0.05*i, 0.05*i), point(0.05*i, 0.05*i)),
       point(0.05*i, 0.05*i),
       circle(point(0.05*i, 0.05*i), 1.0)
from generate_series(0,10000) as i;
RESULT:
	[]

-----------
QUERY:


vacuum analyze gist_tbl;
RESULT:
	[]

-----------
QUERY:


set enable_seqscan=off;
RESULT:
	[]

-----------
QUERY:

set enable_bitmapscan=off;
RESULT:
	[]

-----------
QUERY:

set enable_indexonlyscan=on;
RESULT:
	[]

-----------
QUERY:


-- Test index-only scan with point opclass
create index gist_tbl_point_index on gist_tbl using gist (p);
RESULT:
	[]

-----------
QUERY:


-- check that the planner chooses an index-only scan
explain (costs off)
select p from gist_tbl where p <@ box(point(0,0), point(0.5, 0.5));
RESULT:
	[('Index Only Scan using gist_tbl_point_index on gist_tbl',), ("  Index Cond: (p <@ '(0.5,0.5),(0,0)'::box)",)]

-----------
QUERY:


-- execute the same
select p from gist_tbl where p <@ box(point(0,0), point(0.5, 0.5));
RESULT:
	[('(0,0)',), ('(0.05,0.05)',), ('(0.1,0.1)',), ('(0.15,0.15)',), ('(0.2,0.2)',), ('(0.25,0.25)',), ('(0.3,0.3)',), ('(0.35,0.35)',), ('(0.4,0.4)',), ('(0.45,0.45)',), ('(0.5,0.5)',)]

-----------
QUERY:


-- Also test an index-only knn-search
explain (costs off)
select p from gist_tbl where p <@ box(point(0,0), point(0.5, 0.5))
order by p <-> point(0.201, 0.201);
RESULT:
	[('Index Only Scan using gist_tbl_point_index on gist_tbl',), ("  Index Cond: (p <@ '(0.5,0.5),(0,0)'::box)",), ("  Order By: (p <-> '(0.201,0.201)'::point)",)]

-----------
QUERY:


select p from gist_tbl where p <@ box(point(0,0), point(0.5, 0.5))
order by p <-> point(0.201, 0.201);
RESULT:
	[('(0.2,0.2)',), ('(0.25,0.25)',), ('(0.15,0.15)',), ('(0.3,0.3)',), ('(0.1,0.1)',), ('(0.35,0.35)',), ('(0.05,0.05)',), ('(0.4,0.4)',), ('(0,0)',), ('(0.45,0.45)',), ('(0.5,0.5)',)]

-----------
QUERY:


-- Check commuted case as well
explain (costs off)
select p from gist_tbl where p <@ box(point(0,0), point(0.5, 0.5))
order by point(0.101, 0.101) <-> p;
RESULT:
	[('Index Only Scan using gist_tbl_point_index on gist_tbl',), ("  Index Cond: (p <@ '(0.5,0.5),(0,0)'::box)",), ("  Order By: (p <-> '(0.101,0.101)'::point)",)]

-----------
QUERY:


select p from gist_tbl where p <@ box(point(0,0), point(0.5, 0.5))
order by point(0.101, 0.101) <-> p;
RESULT:
	[('(0.1,0.1)',), ('(0.15,0.15)',), ('(0.05,0.05)',), ('(0.2,0.2)',), ('(0,0)',), ('(0.25,0.25)',), ('(0.3,0.3)',), ('(0.35,0.35)',), ('(0.4,0.4)',), ('(0.45,0.45)',), ('(0.5,0.5)',)]

-----------
QUERY:


-- Check case with multiple rescans (bug #14641)
explain (costs off)
select p from
  (values (box(point(0,0), point(0.5,0.5))),
          (box(point(0.5,0.5), point(0.75,0.75))),
          (box(point(0.8,0.8), point(1.0,1.0)))) as v(bb)
cross join lateral
  (select p from gist_tbl where p <@ bb order by p <-> bb[0] limit 2) ss;
RESULT:
	[('Nested Loop',), ('  ->  Values Scan on "*VALUES*"',), ('  ->  Limit',), ('        ->  Index Only Scan using gist_tbl_point_index on gist_tbl',), ('              Index Cond: (p <@ "*VALUES*".column1)',), ('              Order By: (p <-> ("*VALUES*".column1)[0])',)]

-----------
QUERY:


select p from
  (values (box(point(0,0), point(0.5,0.5))),
          (box(point(0.5,0.5), point(0.75,0.75))),
          (box(point(0.8,0.8), point(1.0,1.0)))) as v(bb)
cross join lateral
  (select p from gist_tbl where p <@ bb order by p <-> bb[0] limit 2) ss;
RESULT:
	[('(0.5,0.5)',), ('(0.45,0.45)',), ('(0.75,0.75)',), ('(0.7,0.7)',), ('(1,1)',), ('(0.95,0.95)',)]

-----------
QUERY:


drop index gist_tbl_point_index;
RESULT:
	[]

-----------
QUERY:


-- Test index-only scan with box opclass
create index gist_tbl_box_index on gist_tbl using gist (b);
RESULT:
	[]

-----------
QUERY:


-- check that the planner chooses an index-only scan
explain (costs off)
select b from gist_tbl where b <@ box(point(5,5), point(6,6));
RESULT:
	[('Index Only Scan using gist_tbl_box_index on gist_tbl',), ("  Index Cond: (b <@ '(6,6),(5,5)'::box)",)]

-----------
QUERY:


-- execute the same
select b from gist_tbl where b <@ box(point(5,5), point(6,6));
RESULT:
	[('(5,5),(5,5)',), ('(5.05,5.05),(5.05,5.05)',), ('(5.1,5.1),(5.1,5.1)',), ('(5.15,5.15),(5.15,5.15)',), ('(5.2,5.2),(5.2,5.2)',), ('(5.25,5.25),(5.25,5.25)',), ('(5.3,5.3),(5.3,5.3)',), ('(5.35,5.35),(5.35,5.35)',), ('(5.4,5.4),(5.4,5.4)',), ('(5.45,5.45),(5.45,5.45)',), ('(5.5,5.5),(5.5,5.5)',), ('(5.55,5.55),(5.55,5.55)',), ('(5.6,5.6),(5.6,5.6)',), ('(5.65,5.65),(5.65,5.65)',), ('(5.7,5.7),(5.7,5.7)',), ('(5.75,5.75),(5.75,5.75)',), ('(5.8,5.8),(5.8,5.8)',), ('(5.85,5.85),(5.85,5.85)',), ('(5.9,5.9),(5.9,5.9)',), ('(5.95,5.95),(5.95,5.95)',), ('(6,6),(6,6)',)]

-----------
QUERY:


-- Also test an index-only knn-search
explain (costs off)
select b from gist_tbl where b <@ box(point(5,5), point(6,6))
order by b <-> point(5.2, 5.91);
RESULT:
	[('Index Only Scan using gist_tbl_box_index on gist_tbl',), ("  Index Cond: (b <@ '(6,6),(5,5)'::box)",), ("  Order By: (b <-> '(5.2,5.91)'::point)",)]

-----------
QUERY:


select b from gist_tbl where b <@ box(point(5,5), point(6,6))
order by b <-> point(5.2, 5.91);
RESULT:
	[('(5.55,5.55),(5.55,5.55)',), ('(5.6,5.6),(5.6,5.6)',), ('(5.5,5.5),(5.5,5.5)',), ('(5.65,5.65),(5.65,5.65)',), ('(5.45,5.45),(5.45,5.45)',), ('(5.7,5.7),(5.7,5.7)',), ('(5.4,5.4),(5.4,5.4)',), ('(5.75,5.75),(5.75,5.75)',), ('(5.35,5.35),(5.35,5.35)',), ('(5.8,5.8),(5.8,5.8)',), ('(5.3,5.3),(5.3,5.3)',), ('(5.85,5.85),(5.85,5.85)',), ('(5.25,5.25),(5.25,5.25)',), ('(5.9,5.9),(5.9,5.9)',), ('(5.2,5.2),(5.2,5.2)',), ('(5.95,5.95),(5.95,5.95)',), ('(5.15,5.15),(5.15,5.15)',), ('(6,6),(6,6)',), ('(5.1,5.1),(5.1,5.1)',), ('(5.05,5.05),(5.05,5.05)',), ('(5,5),(5,5)',)]

-----------
QUERY:


-- Check commuted case as well
explain (costs off)
select b from gist_tbl where b <@ box(point(5,5), point(6,6))
order by point(5.2, 5.91) <-> b;
RESULT:
	[('Index Only Scan using gist_tbl_box_index on gist_tbl',), ("  Index Cond: (b <@ '(6,6),(5,5)'::box)",), ("  Order By: (b <-> '(5.2,5.91)'::point)",)]

-----------
QUERY:


select b from gist_tbl where b <@ box(point(5,5), point(6,6))
order by point(5.2, 5.91) <-> b;
RESULT:
	[('(5.55,5.55),(5.55,5.55)',), ('(5.6,5.6),(5.6,5.6)',), ('(5.5,5.5),(5.5,5.5)',), ('(5.65,5.65),(5.65,5.65)',), ('(5.45,5.45),(5.45,5.45)',), ('(5.7,5.7),(5.7,5.7)',), ('(5.4,5.4),(5.4,5.4)',), ('(5.75,5.75),(5.75,5.75)',), ('(5.35,5.35),(5.35,5.35)',), ('(5.8,5.8),(5.8,5.8)',), ('(5.3,5.3),(5.3,5.3)',), ('(5.85,5.85),(5.85,5.85)',), ('(5.25,5.25),(5.25,5.25)',), ('(5.9,5.9),(5.9,5.9)',), ('(5.2,5.2),(5.2,5.2)',), ('(5.95,5.95),(5.95,5.95)',), ('(5.15,5.15),(5.15,5.15)',), ('(6,6),(6,6)',), ('(5.1,5.1),(5.1,5.1)',), ('(5.05,5.05),(5.05,5.05)',), ('(5,5),(5,5)',)]

-----------
QUERY:


drop index gist_tbl_box_index;
RESULT:
	[]

-----------
QUERY:


-- Test that an index-only scan is not chosen, when the query involves the
-- circle column (the circle opclass does not support index-only scans).
create index gist_tbl_multi_index on gist_tbl using gist (p, c);
RESULT:
	[]

-----------
QUERY:


explain (costs off)
select p, c from gist_tbl
where p <@ box(point(5,5), point(6, 6));
RESULT:
	[('Index Scan using gist_tbl_multi_index on gist_tbl',), ("  Index Cond: (p <@ '(6,6),(5,5)'::box)",)]

-----------
QUERY:


-- execute the same
select b, p from gist_tbl
where b <@ box(point(4.5, 4.5), point(5.5, 5.5))
and p <@ box(point(5,5), point(6, 6));
RESULT:
	[('(5,5),(5,5)', '(5,5)'), ('(5.05,5.05),(5.05,5.05)', '(5.05,5.05)'), ('(5.1,5.1),(5.1,5.1)', '(5.1,5.1)'), ('(5.15,5.15),(5.15,5.15)', '(5.15,5.15)'), ('(5.2,5.2),(5.2,5.2)', '(5.2,5.2)'), ('(5.25,5.25),(5.25,5.25)', '(5.25,5.25)'), ('(5.3,5.3),(5.3,5.3)', '(5.3,5.3)'), ('(5.35,5.35),(5.35,5.35)', '(5.35,5.35)'), ('(5.4,5.4),(5.4,5.4)', '(5.4,5.4)'), ('(5.45,5.45),(5.45,5.45)', '(5.45,5.45)'), ('(5.5,5.5),(5.5,5.5)', '(5.5,5.5)')]

-----------
QUERY:


drop index gist_tbl_multi_index;
RESULT:
	[]

-----------
QUERY:


-- Test that we don/* REPLACED */''t try to return the value of a non-returnable
-- column in an index-only scan.  (This isn/* REPLACED */''t GIST-specific, but
-- it only applies to index AMs that can return some columns and not
-- others, so GIST with appropriate opclasses is a convenient test case.)
create index gist_tbl_multi_index on gist_tbl using gist (circle(p,1), p);
RESULT:
	[]

-----------
QUERY:

explain (verbose, costs off)
select circle(p,1) from gist_tbl
where p <@ box(point(5, 5), point(5.3, 5.3));
RESULT:
	[('Index Only Scan using gist_tbl_multi_index on public.gist_tbl',), ("  Output: circle(p, '1'::double precision)",), ("  Index Cond: (gist_tbl.p <@ '(5.3,5.3),(5,5)'::box)",)]

-----------
QUERY:

select circle(p,1) from gist_tbl
where p <@ box(point(5, 5), point(5.3, 5.3));
RESULT:
	[('<(5,5),1>',), ('<(5.05,5.05),1>',), ('<(5.1,5.1),1>',), ('<(5.15,5.15),1>',), ('<(5.2,5.2),1>',), ('<(5.25,5.25),1>',), ('<(5.3,5.3),1>',)]

-----------
QUERY:


-- Similarly, test that index rechecks involving a non-returnable column
-- are done correctly.
explain (verbose, costs off)
select p from gist_tbl where circle(p,1) @> circle(point(0,0),0.95);
RESULT:
	[('Index Only Scan using gist_tbl_multi_index on public.gist_tbl',), ('  Output: p',), ("  Index Cond: ((circle(gist_tbl.p, '1'::double precision)) @> '<(0,0),0.95>'::circle)",)]

-----------
QUERY:

select p from gist_tbl where circle(p,1) @> circle(point(0,0),0.95);
RESULT:
	[('(0,0)',)]

-----------
QUERY:


-- Also check that use_physical_tlist doesn/* REPLACED */''t trigger in such cases.
explain (verbose, costs off)
select count(*) from gist_tbl;
RESULT:
	[('Aggregate',), ('  Output: count(*)',), ('  ->  Index Only Scan using gist_tbl_multi_index on public.gist_tbl',)]

-----------
QUERY:

select count(*) from gist_tbl;
RESULT:
	[(10001,)]

-----------
QUERY:


-- This case isn/* REPLACED */''t supported, but it should at least EXPLAIN correctly.
explain (verbose, costs off)
select p from gist_tbl order by circle(p,1) <-> point(0,0) limit 1;
RESULT:
	[('Limit',), ("  Output: p, ((circle(p, '1'::double precision) <-> '(0,0)'::point))",), ('  ->  Index Only Scan using gist_tbl_multi_index on public.gist_tbl',), ("        Output: p, (circle(p, '1'::double precision) <-> '(0,0)'::point)",), ("        Order By: ((circle(gist_tbl.p, '1'::double precision)) <-> '(0,0)'::point)",)]

-----------
QUERY:

select p from gist_tbl order by circle(p,1) <-> point(0,0) limit 1;
RESULT:
	ERROR - lossy distance functions are not supported in index-only scans


-----------
QUERY:


-- Force an index build using buffering.
create index gist_tbl_box_index_forcing_buffering on gist_tbl using gist (p)
  with (buffering=on, fillfactor=50);
RESULT:
	[]

-----------
QUERY:


-- Clean up
reset enable_seqscan;
RESULT:
	[]

-----------
QUERY:

reset enable_bitmapscan;
RESULT:
	[]

-----------
QUERY:

reset enable_indexonlyscan;
RESULT:
	[]

-----------
QUERY:


drop table gist_tbl;
RESULT:
	[]

-----------
QUERY:


-- test an unlogged table, mostly to get coverage of gistbuildempty
create unlogged table gist_tbl (b box);
RESULT:
	[]

-----------
QUERY:

create index gist_tbl_box_index on gist_tbl using gist (b);
RESULT:
	[]

-----------
QUERY:

insert into gist_tbl
  select box(point(0.05*i, 0.05*i)) from generate_series(0,10) as i;
RESULT:
	[]

-----------
QUERY:

drop table gist_tbl;
RESULT:
	[]
