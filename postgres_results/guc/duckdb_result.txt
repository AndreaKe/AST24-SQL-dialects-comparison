
-----------
QUERY:
-- pg_regress should ensure that this default value applies /* REPLACED */ , however
-- we can/* REPLACED */ ''t rely on any specific default value of vacuum_cost_delay
SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:


-- SET to some nondefault value
SET vacuum_cost_delay TO 40;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "vacuum_cost_delay"

Did you mean: "access_mode"

-----------
QUERY:

SET datestyle = 'ISO, YMD';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "datestyle"

Did you mean: "user"

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:


-- SET LOCAL has no effect outside of a transaction
SET LOCAL vacuum_cost_delay TO 50;
RESULT:
	ERROR - Not implemented Error: SET LOCAL is not implemented.

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SET LOCAL datestyle = 'SQL';
RESULT:
	ERROR - Not implemented Error: SET LOCAL is not implemented.

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:


-- SET LOCAL within a transaction that commits
BEGIN;
RESULT:
	[]

-----------
QUERY:

SET LOCAL vacuum_cost_delay TO 50;
RESULT:
	ERROR - Not implemented Error: SET LOCAL is not implemented.

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SET LOCAL datestyle = 'SQL';
RESULT:
	ERROR - Not implemented Error: SET LOCAL is not implemented.

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

COMMIT;
RESULT:
	[]

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:


-- SET should be reverted after ROLLBACK
BEGIN;
RESULT:
	[]

-----------
QUERY:

SET vacuum_cost_delay TO 60;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "vacuum_cost_delay"

Did you mean: "access_mode"

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SET datestyle = 'German';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "datestyle"

Did you mean: "user"

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

ROLLBACK;
RESULT:
	[]

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:


-- Some tests with subtransactions
BEGIN;
RESULT:
	[]

-----------
QUERY:

SET vacuum_cost_delay TO 70;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "vacuum_cost_delay"

Did you mean: "access_mode"

-----------
QUERY:

SET datestyle = 'MDY';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "datestyle"

Did you mean: "user"

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

SAVEPOINT first_sp;
RESULT:
	ERROR - Parser Error: syntax error at or near "SAVEPOINT"

-----------
QUERY:

SET vacuum_cost_delay TO 80.1;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "vacuum_cost_delay"

Did you mean: "access_mode"

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SET datestyle = 'German, DMY';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "datestyle"

Did you mean: "user"

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

ROLLBACK TO first_sp;
RESULT:
	ERROR - Parser Error: syntax error at or near "TO"

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

SAVEPOINT second_sp;
RESULT:
	ERROR - Parser Error: syntax error at or near "SAVEPOINT"

-----------
QUERY:

SET vacuum_cost_delay TO '900us';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "vacuum_cost_delay"

Did you mean: "access_mode"

-----------
QUERY:

SET datestyle = 'SQL, YMD';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "datestyle"

Did you mean: "user"

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

SAVEPOINT third_sp;
RESULT:
	ERROR - Parser Error: syntax error at or near "SAVEPOINT"

-----------
QUERY:

SET vacuum_cost_delay TO 100;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "vacuum_cost_delay"

Did you mean: "access_mode"

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SET datestyle = 'Postgres, MDY';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "datestyle"

Did you mean: "user"

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

ROLLBACK TO third_sp;
RESULT:
	ERROR - Parser Error: syntax error at or near "TO"

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

ROLLBACK TO second_sp;
RESULT:
	ERROR - Parser Error: syntax error at or near "TO"

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

ROLLBACK;
RESULT:
	[]

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:


-- SET LOCAL with Savepoints
BEGIN;
RESULT:
	[]

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

SAVEPOINT sp;
RESULT:
	ERROR - Parser Error: syntax error at or near "SAVEPOINT"

-----------
QUERY:

SET LOCAL vacuum_cost_delay TO 30;
RESULT:
	ERROR - Not implemented Error: SET LOCAL is not implemented.

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SET LOCAL datestyle = 'Postgres, MDY';
RESULT:
	ERROR - Not implemented Error: SET LOCAL is not implemented.

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

ROLLBACK TO sp;
RESULT:
	ERROR - Parser Error: syntax error at or near "TO"

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

ROLLBACK;
RESULT:
	[]

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:


-- SET LOCAL persists through RELEASE (which was not true in 8.0-8.2)
BEGIN;
RESULT:
	[]

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

SAVEPOINT sp;
RESULT:
	ERROR - Parser Error: syntax error at or near "SAVEPOINT"

-----------
QUERY:

SET LOCAL vacuum_cost_delay TO 30;
RESULT:
	ERROR - Not implemented Error: SET LOCAL is not implemented.

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SET LOCAL datestyle = 'Postgres, MDY';
RESULT:
	ERROR - Not implemented Error: SET LOCAL is not implemented.

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

RELEASE SAVEPOINT sp;
RESULT:
	ERROR - Parser Error: syntax error at or near "RELEASE"

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

ROLLBACK;
RESULT:
	[]

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:


-- SET followed by SET LOCAL
BEGIN;
RESULT:
	[]

-----------
QUERY:

SET vacuum_cost_delay TO 40;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "vacuum_cost_delay"

Did you mean: "access_mode"

-----------
QUERY:

SET LOCAL vacuum_cost_delay TO 50;
RESULT:
	ERROR - Not implemented Error: SET LOCAL is not implemented.

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SET datestyle = 'ISO, DMY';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "datestyle"

Did you mean: "user"

-----------
QUERY:

SET LOCAL datestyle = 'Postgres, MDY';
RESULT:
	ERROR - Not implemented Error: SET LOCAL is not implemented.

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

COMMIT;
RESULT:
	[]

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:


--
-- Test RESET.  We use datestyle because the reset value is forced by
-- pg_regress, so it doesn/* REPLACED */ ''t depend on the installation/* REPLACED */ ''s configuration.
--
SET datestyle = iso, ymd;
RESULT:
	ERROR - Parser Error: SET needs a single scalar value parameter

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:

RESET datestyle;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "datestyle"

Did you mean: "user"

-----------
QUERY:

SHOW datestyle;
RESULT:
	ERROR - Catalog Error: Table with name datestyle does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT '2006-08-13 12:34:56'::timestamptz;
RESULT:
	[(datetime.datetime(2006, 8, 13, 12, 34, 56, tzinfo=<DstTzInfo 'Europe/Zurich' CEST+2:00:00 DST>),)]

-----------
QUERY:


-- Test some simple error cases
SET seq_page_cost TO 'NaN';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "seq_page_cost"

Did you mean: "search_path"

-----------
QUERY:

SET vacuum_cost_delay TO '10s';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "vacuum_cost_delay"

Did you mean: "access_mode"

-----------
QUERY:

SET no_such_variable TO 42;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "no_such_variable"

Did you mean: "schema"

-----------
QUERY:


-- Test /* REPLACED */ ''custom/* REPLACED */ '' GUCs created on the fly (which aren/* REPLACED */ ''t really an
-- intended feature, but many people use them).
SHOW custom.my_guc;
RESULT:
	ERROR - Catalog Error: Table with name my_guc does not exist!
Did you mean "pg_catalog.pg_am"?

-----------
QUERY:
  -- error, not known yet
SET custom.my_guc = 42;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "custom.my_guc"

Did you mean: "custom_user_agent"

-----------
QUERY:

SHOW custom.my_guc;
RESULT:
	ERROR - Catalog Error: Table with name my_guc does not exist!
Did you mean "pg_catalog.pg_am"?

-----------
QUERY:

RESET custom.my_guc;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "custom.my_guc"

Did you mean: "custom_user_agent"

-----------
QUERY:
  -- this makes it go to empty, not become unknown again
SHOW custom.my_guc;
RESULT:
	ERROR - Catalog Error: Table with name my_guc does not exist!
Did you mean "pg_catalog.pg_am"?

-----------
QUERY:

SET custom.my.qualified.guc = 'foo';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "custom.my.qualified.guc"

Did you mean: "user"

-----------
QUERY:

SHOW custom.my.qualified.guc;
RESULT:
	ERROR - Parser Error: Expected catalog.entry, schema.entry or entry: too many entries found

-----------
QUERY:

SET custom."bad-guc" = 42;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "custom.bad-guc"

Did you mean: "custom_user_agent"

-----------
QUERY:
  -- disallowed because -c cannot set this name
SHOW custom."bad-guc";
RESULT:
	ERROR - Catalog Error: Table with name bad-guc does not exist!
Did you mean "pg_catalog.pg_am"?

-----------
QUERY:

SET special."weird name" = 'foo';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "special.weird name"

Did you mean: "username"

-----------
QUERY:
  -- could be allowed, but we choose not to
SHOW special."weird name";
RESULT:
	ERROR - Catalog Error: Table with name weird name does not exist!
Did you mean "pg_catalog.pg_am"?

-----------
QUERY:


-- Check what happens when you try to set a /* REPLACED */ ''custom/* REPLACED */ '' GUC within the
-- namespace of an extension.
SET plpgsql.extra_foo_warnings = true;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "plpgsql.extra_foo_warnings"

Did you mean: "user"

-----------
QUERY:
  -- allowed if plpgsql is not loaded yet
LOAD 'plpgsql';
RESULT:
	ERROR - IO Error: Extension "/home/keuscha/.duckdb/extensions/v0.10.1/linux_amd64_gcc4/plpgsql.duckdb_extension" not found.

Candidate extensions: "mysql"

-----------
QUERY:
  -- this will throw a warning and delete the variable
SET plpgsql.extra_foo_warnings = true;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "plpgsql.extra_foo_warnings"

Did you mean: "user"

-----------
QUERY:
  -- now, it/* REPLACED */ ''s an error
SHOW plpgsql.extra_foo_warnings;
RESULT:
	ERROR - Catalog Error: Table with name extra_foo_warnings does not exist!
Did you mean "pg_catalog.pg_settings"?

-----------
QUERY:


--
-- Test DISCARD TEMP
--
CREATE TEMP TABLE reset_test ( data text ) ON COMMIT DELETE ROWS;
RESULT:
	ERROR - Not implemented Error: Only ON COMMIT PRESERVE ROWS is supported

-----------
QUERY:

SELECT relname FROM pg_class WHERE relname = 'reset_test';
RESULT:
	[]

-----------
QUERY:

DISCARD TEMP;
RESULT:
	ERROR - Parser Error: syntax error at or near "DISCARD"

-----------
QUERY:

SELECT relname FROM pg_class WHERE relname = 'reset_test';
RESULT:
	[]

-----------
QUERY:


--
-- Test DISCARD ALL
--

-- do changes
DECLARE foo CURSOR WITH HOLD FOR SELECT 1;
RESULT:
	ERROR - Parser Error: syntax error at or near "DECLARE"

-----------
QUERY:

PREPARE foo AS SELECT 1;
RESULT:
	[]

-----------
QUERY:

LISTEN foo_event;
RESULT:
	ERROR - Parser Error: syntax error at or near "LISTEN"

-----------
QUERY:

SET vacuum_cost_delay = 13;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "vacuum_cost_delay"

Did you mean: "access_mode"

-----------
QUERY:

CREATE TEMP TABLE tmp_foo (data text) ON COMMIT DELETE ROWS;
RESULT:
	ERROR - Not implemented Error: Only ON COMMIT PRESERVE ROWS is supported

-----------
QUERY:

CREATE ROLE regress_guc_user;
RESULT:
	ERROR - Parser Error: syntax error at or near "ROLE"

-----------
QUERY:

SET SESSION AUTHORIZATION regress_guc_user;
RESULT:
	ERROR - Parser Error: syntax error at or near "AUTHORIZATION"

-----------
QUERY:

-- look changes
SELECT pg_listening_channels();
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_listening_channels does not exist!
Did you mean "list_has"?

-----------
QUERY:

SELECT name FROM pg_prepared_statements;
RESULT:
	ERROR - Catalog Error: Table with name pg_prepared_statements does not exist!
Did you mean "pg_am"?

-----------
QUERY:

SELECT name FROM pg_cursors;
RESULT:
	ERROR - Catalog Error: Table with name pg_cursors does not exist!
Did you mean "pg_class"?

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SELECT relname from pg_class where relname = 'tmp_foo';
RESULT:
	[]

-----------
QUERY:

SELECT current_user = 'regress_guc_user';
RESULT:
	[(False,)]

-----------
QUERY:

-- discard everything
DISCARD ALL;
RESULT:
	ERROR - Parser Error: syntax error at or near "DISCARD"

-----------
QUERY:

-- look again
SELECT pg_listening_channels();
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_listening_channels does not exist!
Did you mean "list_has"?

-----------
QUERY:

SELECT name FROM pg_prepared_statements;
RESULT:
	ERROR - Catalog Error: Table with name pg_prepared_statements does not exist!
Did you mean "pg_am"?

-----------
QUERY:

SELECT name FROM pg_cursors;
RESULT:
	ERROR - Catalog Error: Table with name pg_cursors does not exist!
Did you mean "pg_class"?

-----------
QUERY:

SHOW vacuum_cost_delay;
RESULT:
	ERROR - Catalog Error: Table with name vacuum_cost_delay does not exist!
Did you mean "temp.information_schema.columns"?

-----------
QUERY:

SELECT relname from pg_class where relname = 'tmp_foo';
RESULT:
	[]

-----------
QUERY:

SELECT current_user = 'regress_guc_user';
RESULT:
	[(False,)]

-----------
QUERY:

DROP ROLE regress_guc_user;
RESULT:
	ERROR - Parser Error: syntax error at or near "ROLE"

-----------
QUERY:


--
-- search_path should react to changes in pg_namespace
--

set search_path = foo, public, not_there_initially;
RESULT:
	ERROR - Parser Error: SET needs a single scalar value parameter

-----------
QUERY:

select current_schemas(false);
RESULT:
	[(['main'],)]

-----------
QUERY:

create schema not_there_initially;
RESULT:
	[]

-----------
QUERY:

select current_schemas(false);
RESULT:
	[(['main'],)]

-----------
QUERY:

drop schema not_there_initially;
RESULT:
	[]

-----------
QUERY:

select current_schemas(false);
RESULT:
	[(['main'],)]

-----------
QUERY:

reset search_path;
RESULT:
	[]

-----------
QUERY:


--
-- Tests for function-local GUC settings
--

set work_mem = '3MB';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "work_mem"

Did you mean: "worker_threads"

-----------
QUERY:


create function report_guc(text) returns text as
$$ select current_setting($1) $$ language sql
set work_mem = '1MB';
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


select report_guc('work_mem'), current_setting('work_mem');
RESULT:
	ERROR - Catalog Error: Scalar Function with name report_guc does not exist!
Did you mean "epoch"?

-----------
QUERY:


alter function report_guc(text) set work_mem = '2MB';
RESULT:
	ERROR - Parser Error: syntax error at or near "function"

-----------
QUERY:


select report_guc('work_mem'), current_setting('work_mem');
RESULT:
	ERROR - Catalog Error: Scalar Function with name report_guc does not exist!
Did you mean "epoch"?

-----------
QUERY:


alter function report_guc(text) reset all;
RESULT:
	ERROR - Parser Error: syntax error at or near "function"

-----------
QUERY:


select report_guc('work_mem'), current_setting('work_mem');
RESULT:
	ERROR - Catalog Error: Scalar Function with name report_guc does not exist!
Did you mean "epoch"?

-----------
QUERY:


-- SET LOCAL is restricted by a function SET option
create or replace function myfunc(int) returns text as $$
begin
  set local work_mem = '2MB';
  return current_setting('work_mem');
end $$
language plpgsql
set work_mem = '1MB';
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


select myfunc(0), current_setting('work_mem');
RESULT:
	ERROR - Catalog Error: Scalar Function with name myfunc does not exist!
Did you mean "min"?

-----------
QUERY:


alter function myfunc(int) reset all;
RESULT:
	ERROR - Parser Error: syntax error at or near "function"

-----------
QUERY:


select myfunc(0), current_setting('work_mem');
RESULT:
	ERROR - Catalog Error: Scalar Function with name myfunc does not exist!
Did you mean "min"?

-----------
QUERY:


set work_mem = '3MB';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "work_mem"

Did you mean: "worker_threads"

-----------
QUERY:


-- but SET isn/* REPLACED */ ''t
create or replace function myfunc(int) returns text as $$
begin
  set work_mem = '2MB';
  return current_setting('work_mem');
end $$
language plpgsql
set work_mem = '1MB';
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


select myfunc(0), current_setting('work_mem');
RESULT:
	ERROR - Catalog Error: Scalar Function with name myfunc does not exist!
Did you mean "min"?

-----------
QUERY:


set work_mem = '3MB';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "work_mem"

Did you mean: "worker_threads"

-----------
QUERY:


-- it should roll back on error, though
create or replace function myfunc(int) returns text as $$
begin
  set work_mem = '2MB';
  perform 1/$1;
  return current_setting('work_mem');
end $$
language plpgsql
set work_mem = '1MB';
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


select myfunc(0);
RESULT:
	ERROR - Catalog Error: Scalar Function with name myfunc does not exist!
Did you mean "min"?

-----------
QUERY:

select current_setting('work_mem');
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "work_mem"

Did you mean: "worker_threads"

-----------
QUERY:

select myfunc(1), current_setting('work_mem');
RESULT:
	ERROR - Catalog Error: Scalar Function with name myfunc does not exist!
Did you mean "min"?

-----------
QUERY:


-- check current_setting()/* REPLACED */ ''s behavior with invalid setting name

select current_setting('nosuch.setting');
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "nosuch.setting"

Did you mean: "user"

-----------
QUERY:
  -- FAIL
select current_setting('nosuch.setting', false);
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'current_setting(STRING_LITERAL, BOOLEAN)'. You might need to add explicit type casts.
	Candidate functions:
	current_setting(VARCHAR) -> ANY


-----------
QUERY:
  -- FAIL
select current_setting('nosuch.setting', true) is null;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'current_setting(STRING_LITERAL, BOOLEAN)'. You might need to add explicit type casts.
	Candidate functions:
	current_setting(VARCHAR) -> ANY


-----------
QUERY:


-- after this, all three cases should yield /* REPLACED */ ''nada/* REPLACED */ ''
set nosuch.setting = 'nada';
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "nosuch.setting"

Did you mean: "user"

-----------
QUERY:


select current_setting('nosuch.setting');
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "nosuch.setting"

Did you mean: "user"

-----------
QUERY:

select current_setting('nosuch.setting', false);
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'current_setting(STRING_LITERAL, BOOLEAN)'. You might need to add explicit type casts.
	Candidate functions:
	current_setting(VARCHAR) -> ANY


-----------
QUERY:

select current_setting('nosuch.setting', true);
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'current_setting(STRING_LITERAL, BOOLEAN)'. You might need to add explicit type casts.
	Candidate functions:
	current_setting(VARCHAR) -> ANY


-----------
QUERY:


-- Normally, CREATE FUNCTION should complain about invalid values in
-- function SET options /* REPLACED */ , but not if check_function_bodies is off,
-- because that creates ordering hazards for pg_dump

create function func_with_bad_set() returns int as $$ select 1 $$
language sql
set default_text_search_config = no_such_config;
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


set check_function_bodies = off;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "check_function_bodies"

Did you mean: "default_order"

-----------
QUERY:


create function func_with_bad_set() returns int as $$ select 1 $$
language sql
set default_text_search_config = no_such_config;
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


select func_with_bad_set();
RESULT:
	ERROR - Catalog Error: Scalar Function with name func_with_bad_set does not exist!
Did you mean "to_base"?

-----------
QUERY:


reset check_function_bodies;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "check_function_bodies"

Did you mean: "default_order"

-----------
QUERY:


set default_with_oids to f;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "default_with_oids"

Did you mean: "default_order"

-----------
QUERY:

-- Should not allow to set it to true.
set default_with_oids to t;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "default_with_oids"

Did you mean: "default_order"

-----------
QUERY:


-- Test GUC categories and flag patterns
SELECT pg_settings_get_flags(NULL);
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_settings_get_flags does not exist!
Did you mean "string_agg"?

-----------
QUERY:

SELECT pg_settings_get_flags('does_not_exist');
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_settings_get_flags does not exist!
Did you mean "string_agg"?

-----------
QUERY:

CREATE TABLE tab_settings_flags AS SELECT name, category,
    'EXPLAIN'          = ANY(flags) AS explain,
    'NO_RESET'         = ANY(flags) AS no_reset,
    'NO_RESET_ALL'     = ANY(flags) AS no_reset_all,
    'NOT_IN_SAMPLE'    = ANY(flags) AS not_in_sample,
    'RUNTIME_COMPUTED' = ANY(flags) AS runtime_computed
  FROM pg_show_all_settings() AS psas,
    pg_settings_get_flags(psas.name) AS flags;
RESULT:
	ERROR - Catalog Error: Table Function with name pg_show_all_settings does not exist!
Did you mean "duckdb_settings"?
LINE 8:   FROM pg_show_all_settings() AS psas,
               ^

-----------
QUERY:


-- Developer GUCs should be flagged with GUC_NOT_IN_SAMPLE:
SELECT name FROM tab_settings_flags
  WHERE category = 'Developer Options' AND NOT not_in_sample
  ORDER BY 1;
RESULT:
	ERROR - Catalog Error: Table with name tab_settings_flags does not exist!
Did you mean "pg_settings"?

-----------
QUERY:

-- Most query-tuning GUCs are flagged as valid for EXPLAIN.
-- default_statistics_target is an exception.
SELECT name FROM tab_settings_flags
  WHERE category ~ '^Query Tuning' AND NOT explain
  ORDER BY 1;
RESULT:
	ERROR - Catalog Error: Table with name tab_settings_flags does not exist!
Did you mean "pg_settings"?

-----------
QUERY:

-- Runtime-computed GUCs should be part of the preset category.
SELECT name FROM tab_settings_flags
  WHERE NOT category = 'Preset Options' AND runtime_computed
  ORDER BY 1;
RESULT:
	ERROR - Catalog Error: Table with name tab_settings_flags does not exist!
Did you mean "pg_settings"?

-----------
QUERY:

-- Preset GUCs are flagged as NOT_IN_SAMPLE.
SELECT name FROM tab_settings_flags
  WHERE category = 'Preset Options' AND NOT not_in_sample
  ORDER BY 1;
RESULT:
	ERROR - Catalog Error: Table with name tab_settings_flags does not exist!
Did you mean "pg_settings"?

-----------
QUERY:

-- NO_RESET implies NO_RESET_ALL.
SELECT name FROM tab_settings_flags
  WHERE no_reset AND NOT no_reset_all
  ORDER BY 1;
RESULT:
	ERROR - Catalog Error: Table with name tab_settings_flags does not exist!
Did you mean "pg_settings"?

-----------
QUERY:

DROP TABLE tab_settings_flags;
RESULT:
	ERROR - Catalog Error: Table with name tab_settings_flags does not exist!
Did you mean "pg_settings"?
