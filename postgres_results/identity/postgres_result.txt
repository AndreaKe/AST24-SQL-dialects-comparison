
-----------
QUERY:
-- sanity check of system catalog
SELECT attrelid, attname, attidentity FROM pg_attribute WHERE attidentity NOT IN ('', 'a', 'd');
RESULT:
	[]

-----------
QUERY:



CREATE TABLE itest1 (a int generated by default as identity, b text);
RESULT:
	[]

-----------
QUERY:

CREATE TABLE itest2 (a bigint generated always as identity, b text);
RESULT:
	[]

-----------
QUERY:

CREATE TABLE itest3 (a smallint generated by default as identity (start with 7 increment by 5), b text);
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest3 ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;
RESULT:
	ERROR - column "a" of relation "itest3" is already an identity column


-----------
QUERY:
  -- error

SELECT table_name, column_name, column_default, is_nullable, is_identity, identity_generation, identity_start, identity_increment, identity_maximum, identity_minimum, identity_cycle FROM information_schema.columns WHERE table_name LIKE 'itest_' ORDER BY 1, 2;
RESULT:
	[('itest1', 'a', None, 'NO', 'YES', 'BY DEFAULT', '1', '1', '2147483647', '1', 'NO'), ('itest1', 'b', None, 'YES', 'NO', None, None, None, None, None, 'NO'), ('itest2', 'a', None, 'NO', 'YES', 'ALWAYS', '1', '1', '9223372036854775807', '1', 'NO'), ('itest2', 'b', None, 'YES', 'NO', None, None, None, None, None, 'NO'), ('itest3', 'a', None, 'NO', 'YES', 'BY DEFAULT', '7', '5', '32767', '1', 'NO'), ('itest3', 'b', None, 'YES', 'NO', None, None, None, None, None, 'NO')]

-----------
QUERY:


-- internal sequences should not be shown here
SELECT sequence_name FROM information_schema.sequences WHERE sequence_name LIKE 'itest%';
RESULT:
	[]

-----------
QUERY:


SELECT pg_get_serial_sequence('itest1', 'a');
RESULT:
	[('public.itest1_a_seq',)]

-----------
QUERY:


-- \d itest1_a_seq

CREATE TABLE itest4 (a int, b text);
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest4 ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;
RESULT:
	ERROR - column "a" of relation "itest4" must be declared NOT NULL before identity can be added


-----------
QUERY:
  -- error, requires NOT NULL
ALTER TABLE itest4 ALTER COLUMN a SET NOT NULL;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest4 ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;
RESULT:
	[]

-----------
QUERY:
  -- ok
ALTER TABLE itest4 ALTER COLUMN a DROP NOT NULL;
RESULT:
	ERROR - column "a" of relation "itest4" is an identity column


-----------
QUERY:
  -- error, disallowed
ALTER TABLE itest4 ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;
RESULT:
	ERROR - column "a" of relation "itest4" is already an identity column


-----------
QUERY:
  -- error, already set
ALTER TABLE itest4 ALTER COLUMN b ADD GENERATED ALWAYS AS IDENTITY;
RESULT:
	ERROR - identity column type must be smallint, integer, or bigint


-----------
QUERY:
  -- error, wrong data type

-- for later
ALTER TABLE itest4 ALTER COLUMN b SET DEFAULT '';
RESULT:
	[]

-----------
QUERY:


-- invalid column type
CREATE TABLE itest_err_1 (a text generated by default as identity);
RESULT:
	ERROR - identity column type must be smallint, integer, or bigint


-----------
QUERY:


-- duplicate identity
CREATE TABLE itest_err_2 (a int generated always as identity generated by default as identity);
RESULT:
	ERROR - multiple identity specifications for column "a" of table "itest_err_2"
LINE 4: ...E itest_err_2 (a int generated always as identity generated ...
                                                             ^


-----------
QUERY:


-- cannot have default and identity
CREATE TABLE itest_err_3 (a int default 5 generated by default as identity);
RESULT:
	ERROR - both default and identity specified for column "a" of table "itest_err_3"
LINE 4: CREATE TABLE itest_err_3 (a int default 5 generated by defau...
                                                  ^


-----------
QUERY:


-- cannot combine serial and identity
CREATE TABLE itest_err_4 (a serial generated by default as identity);
RESULT:
	ERROR - both default and identity specified for column "a" of table "itest_err_4"


-----------
QUERY:


INSERT INTO itest1 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest1 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest2 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest2 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest3 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest3 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest4 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest4 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:


SELECT * FROM itest1;
RESULT:
	[(1, None), (2, None)]

-----------
QUERY:

SELECT * FROM itest2;
RESULT:
	[(1, None), (2, None)]

-----------
QUERY:

SELECT * FROM itest3;
RESULT:
	[(7, None), (12, None)]

-----------
QUERY:

SELECT * FROM itest4;
RESULT:
	[(1, ''), (2, '')]

-----------
QUERY:



-- VALUES RTEs

CREATE TABLE itest5 (a int generated always as identity, b text);
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest5 VALUES (1, 'a');
RESULT:
	ERROR - cannot insert a non-DEFAULT value into column "a"
DETAIL:  Column "a" is an identity column defined as GENERATED ALWAYS.
HINT:  Use OVERRIDING SYSTEM VALUE to override.


-----------
QUERY:
  -- error
INSERT INTO itest5 VALUES (DEFAULT, 'a');
RESULT:
	[]

-----------
QUERY:
  -- ok
INSERT INTO itest5 VALUES (2, 'b'), (3, 'c');
RESULT:
	ERROR - cannot insert a non-DEFAULT value into column "a"
DETAIL:  Column "a" is an identity column defined as GENERATED ALWAYS.
HINT:  Use OVERRIDING SYSTEM VALUE to override.


-----------
QUERY:
  -- error
INSERT INTO itest5 VALUES (DEFAULT, 'b'), (3, 'c');
RESULT:
	ERROR - cannot insert a non-DEFAULT value into column "a"
DETAIL:  Column "a" is an identity column defined as GENERATED ALWAYS.
HINT:  Use OVERRIDING SYSTEM VALUE to override.


-----------
QUERY:
  -- error
INSERT INTO itest5 VALUES (2, 'b'), (DEFAULT, 'c');
RESULT:
	ERROR - cannot insert a non-DEFAULT value into column "a"
DETAIL:  Column "a" is an identity column defined as GENERATED ALWAYS.
HINT:  Use OVERRIDING SYSTEM VALUE to override.


-----------
QUERY:
  -- error
INSERT INTO itest5 VALUES (DEFAULT, 'b'), (DEFAULT, 'c');
RESULT:
	[]

-----------
QUERY:
  -- ok

INSERT INTO itest5 OVERRIDING SYSTEM VALUE VALUES (-1, 'aa');
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest5 OVERRIDING SYSTEM VALUE VALUES (-2, 'bb'), (-3, 'cc');
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest5 OVERRIDING SYSTEM VALUE VALUES (DEFAULT, 'dd'), (-4, 'ee');
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest5 OVERRIDING SYSTEM VALUE VALUES (-5, 'ff'), (DEFAULT, 'gg');
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest5 OVERRIDING SYSTEM VALUE VALUES (DEFAULT, 'hh'), (DEFAULT, 'ii');
RESULT:
	[]

-----------
QUERY:


INSERT INTO itest5 OVERRIDING USER VALUE VALUES (-1, 'aaa');
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest5 OVERRIDING USER VALUE VALUES (-2, 'bbb'), (-3, 'ccc');
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest5 OVERRIDING USER VALUE VALUES (DEFAULT, 'ddd'), (-4, 'eee');
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest5 OVERRIDING USER VALUE VALUES (-5, 'fff'), (DEFAULT, 'ggg');
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest5 OVERRIDING USER VALUE VALUES (DEFAULT, 'hhh'), (DEFAULT, 'iii');
RESULT:
	[]

-----------
QUERY:


SELECT * FROM itest5;
RESULT:
	[(1, 'a'), (2, 'b'), (3, 'c'), (-1, 'aa'), (-2, 'bb'), (-3, 'cc'), (4, 'dd'), (-4, 'ee'), (-5, 'ff'), (5, 'gg'), (6, 'hh'), (7, 'ii'), (8, 'aaa'), (9, 'bbb'), (10, 'ccc'), (11, 'ddd'), (12, 'eee'), (13, 'fff'), (14, 'ggg'), (15, 'hhh'), (16, 'iii')]

-----------
QUERY:

DROP TABLE itest5;
RESULT:
	[]

-----------
QUERY:


INSERT INTO itest3 VALUES (DEFAULT, 'a');
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest3 VALUES (DEFAULT, 'b'), (DEFAULT, 'c');
RESULT:
	[]

-----------
QUERY:


SELECT * FROM itest3;
RESULT:
	[(7, None), (12, None), (17, 'a'), (22, 'b'), (27, 'c')]

-----------
QUERY:



-- OVERRIDING tests

-- GENERATED BY DEFAULT

-- This inserts the row as presented:
INSERT INTO itest1 VALUES (10, 'xyz');
RESULT:
	[]

-----------
QUERY:

-- With GENERATED BY DEFAULT, OVERRIDING SYSTEM VALUE is not allowed
-- by the standard, but we allow it as a no-op, since it is of use if
-- there are multiple identity columns in a table, which is also an
-- extension.
INSERT INTO itest1 OVERRIDING SYSTEM VALUE VALUES (20, 'xyz');
RESULT:
	[]

-----------
QUERY:

-- This ignores the 30 and uses the sequence value instead:
INSERT INTO itest1 OVERRIDING USER VALUE VALUES (30, 'xyz');
RESULT:
	[]

-----------
QUERY:


SELECT * FROM itest1;
RESULT:
	[(1, None), (2, None), (10, 'xyz'), (20, 'xyz'), (3, 'xyz')]

-----------
QUERY:


-- GENERATED ALWAYS

-- This is an error:
INSERT INTO itest2 VALUES (10, 'xyz');
RESULT:
	ERROR - cannot insert a non-DEFAULT value into column "a"
DETAIL:  Column "a" is an identity column defined as GENERATED ALWAYS.
HINT:  Use OVERRIDING SYSTEM VALUE to override.


-----------
QUERY:

-- This inserts the row as presented:
INSERT INTO itest2 OVERRIDING SYSTEM VALUE VALUES (20, 'xyz');
RESULT:
	[]

-----------
QUERY:

-- This ignores the 30 and uses the sequence value instead:
INSERT INTO itest2 OVERRIDING USER VALUE VALUES (30, 'xyz');
RESULT:
	[]

-----------
QUERY:


SELECT * FROM itest2;
RESULT:
	[(1, None), (2, None), (20, 'xyz'), (3, 'xyz')]

-----------
QUERY:



-- UPDATE tests

-- GENERATED BY DEFAULT is not restricted.
UPDATE itest1 SET a = 101 WHERE a = 1;
RESULT:
	[]

-----------
QUERY:

UPDATE itest1 SET a = DEFAULT WHERE a = 2;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM itest1;
RESULT:
	[(10, 'xyz'), (20, 'xyz'), (3, 'xyz'), (101, None), (4, None)]

-----------
QUERY:


-- GENERATED ALWAYS allows only DEFAULT.
UPDATE itest2 SET a = 101 WHERE a = 1;
RESULT:
	ERROR - column "a" can only be updated to DEFAULT
DETAIL:  Column "a" is an identity column defined as GENERATED ALWAYS.


-----------
QUERY:
  -- error
UPDATE itest2 SET a = DEFAULT WHERE a = 2;
RESULT:
	[]

-----------
QUERY:
  -- ok
SELECT * FROM itest2;
RESULT:
	[(1, None), (20, 'xyz'), (3, 'xyz'), (4, None)]

-----------
QUERY:



-- COPY tests

CREATE TABLE itest9 (a int GENERATED ALWAYS AS IDENTITY, b text, c bigint);
RESULT:
	[]

-----------
QUERY:


COPY itest9 FROM stdin;
RESULT:
	ERROR - can't execute COPY FROM: use the copy_from() method instead

-----------
QUERY:

100	foo	200
101	bar	201
\.

COPY itest9 (b, c) FROM stdin;
RESULT:
	ERROR - syntax error at or near "100"
LINE 2: 100 foo 200
        ^


-----------
QUERY:

foo2	202
bar2	203
\.

SELECT * FROM itest9 ORDER BY c;
RESULT:
	ERROR - syntax error at or near "foo2"
LINE 2: foo2 202
        ^


-----------
QUERY:



-- DROP IDENTITY tests

ALTER TABLE itest4 ALTER COLUMN a DROP IDENTITY;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest4 ALTER COLUMN a DROP IDENTITY;
RESULT:
	ERROR - column "a" of relation "itest4" is not an identity column


-----------
QUERY:
  -- error
ALTER TABLE itest4 ALTER COLUMN a DROP IDENTITY IF EXISTS;
RESULT:
	[]

-----------
QUERY:
  -- noop

INSERT INTO itest4 DEFAULT VALUES;
RESULT:
	ERROR - null value in column "a" of relation "itest4" violates not-null constraint
DETAIL:  Failing row contains (null, ).


-----------
QUERY:
  -- fails because NOT NULL is not dropped
ALTER TABLE itest4 ALTER COLUMN a DROP NOT NULL;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest4 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM itest4;
RESULT:
	[(1, ''), (2, ''), (None, '')]

-----------
QUERY:


-- check that sequence is removed
SELECT sequence_name FROM itest4_a_seq;
RESULT:
	ERROR - relation "itest4_a_seq" does not exist
LINE 4: SELECT sequence_name FROM itest4_a_seq;
                                  ^


-----------
QUERY:



-- test views

CREATE TABLE itest10 (a int generated by default as identity, b text);
RESULT:
	[]

-----------
QUERY:

CREATE TABLE itest11 (a int generated always as identity, b text);
RESULT:
	[]

-----------
QUERY:


CREATE VIEW itestv10 AS SELECT * FROM itest10;
RESULT:
	[]

-----------
QUERY:

CREATE VIEW itestv11 AS SELECT * FROM itest11;
RESULT:
	[]

-----------
QUERY:


INSERT INTO itestv10 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itestv10 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:


INSERT INTO itestv11 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itestv11 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:


SELECT * FROM itestv10;
RESULT:
	[(1, None), (2, None)]

-----------
QUERY:

SELECT * FROM itestv11;
RESULT:
	[(1, None), (2, None)]

-----------
QUERY:


INSERT INTO itestv10 VALUES (10, 'xyz');
RESULT:
	[]

-----------
QUERY:

INSERT INTO itestv10 OVERRIDING USER VALUE VALUES (11, 'xyz');
RESULT:
	[]

-----------
QUERY:


SELECT * FROM itestv10;
RESULT:
	[(1, None), (2, None), (10, 'xyz'), (3, 'xyz')]

-----------
QUERY:


INSERT INTO itestv11 VALUES (10, 'xyz');
RESULT:
	ERROR - cannot insert a non-DEFAULT value into column "a"
DETAIL:  Column "a" is an identity column defined as GENERATED ALWAYS.
HINT:  Use OVERRIDING SYSTEM VALUE to override.


-----------
QUERY:

INSERT INTO itestv11 OVERRIDING SYSTEM VALUE VALUES (11, 'xyz');
RESULT:
	[]

-----------
QUERY:


SELECT * FROM itestv11;
RESULT:
	[(1, None), (2, None), (11, 'xyz')]

-----------
QUERY:


DROP VIEW itestv10, itestv11;
RESULT:
	[]

-----------
QUERY:



-- ADD COLUMN

CREATE TABLE itest13 (a int);
RESULT:
	[]

-----------
QUERY:

-- add column to empty table
ALTER TABLE itest13 ADD COLUMN b int GENERATED BY DEFAULT AS IDENTITY;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest13 VALUES (1), (2), (3);
RESULT:
	[]

-----------
QUERY:

-- add column to populated table
ALTER TABLE itest13 ADD COLUMN c int GENERATED BY DEFAULT AS IDENTITY;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM itest13;
RESULT:
	[(1, 1, 1), (2, 2, 2), (3, 3, 3)]

-----------
QUERY:



-- various ALTER COLUMN tests

-- fail, not allowed for identity columns
ALTER TABLE itest1 ALTER COLUMN a SET DEFAULT 1;
RESULT:
	ERROR - column "a" of relation "itest1" is an identity column


-----------
QUERY:


-- fail, not allowed, already has a default
CREATE TABLE itest5 (a serial, b text);
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest5 ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;
RESULT:
	ERROR - column "a" of relation "itest5" already has a default value


-----------
QUERY:


ALTER TABLE itest3 ALTER COLUMN a TYPE int;
RESULT:
	[]

-----------
QUERY:

SELECT seqtypid::regtype FROM pg_sequence WHERE seqrelid = 'itest3_a_seq'::regclass;
RESULT:
	[('integer',)]

-----------
QUERY:

-- \d itest3

ALTER TABLE itest3 ALTER COLUMN a TYPE text;
RESULT:
	ERROR - identity column type must be smallint, integer, or bigint


-----------
QUERY:
  -- error

-- check that unlogged propagates to sequence
CREATE UNLOGGED TABLE itest17 (a int NOT NULL, b text);
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest17 ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest17 ADD COLUMN c int GENERATED ALWAYS AS IDENTITY;
RESULT:
	[]

-----------
QUERY:

-- \d itest17
-- \d itest17_a_seq
-- \d itest17_c_seq
CREATE TABLE itest18 (a int NOT NULL, b text);
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest18 SET UNLOGGED, ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;
RESULT:
	[]

-----------
QUERY:

-- \d itest18
-- \d itest18_a_seq
ALTER TABLE itest18 SET LOGGED;
RESULT:
	[]

-----------
QUERY:

-- \d itest18
-- \d itest18_a_seq
ALTER TABLE itest18 SET UNLOGGED;
RESULT:
	[]

-----------
QUERY:

-- \d itest18
-- \d itest18_a_seq

-- kinda silly to change property in the same command, but it should work
ALTER TABLE itest3
  ADD COLUMN c int GENERATED BY DEFAULT AS IDENTITY,
  ALTER COLUMN c SET GENERATED ALWAYS;
RESULT:
	[]

-----------
QUERY:

-- \d itest3


-- ALTER COLUMN ... SET

CREATE TABLE itest6 (a int GENERATED ALWAYS AS IDENTITY, b text);
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest6 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:


ALTER TABLE itest6 ALTER COLUMN a SET GENERATED BY DEFAULT SET INCREMENT BY 2 SET START WITH 100 RESTART;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest6 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest6 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM itest6;
RESULT:
	[(1, None), (100, None), (102, None)]

-----------
QUERY:


SELECT table_name, column_name, is_identity, identity_generation FROM information_schema.columns WHERE table_name = 'itest6' ORDER BY 1, 2;
RESULT:
	[('itest6', 'a', 'YES', 'BY DEFAULT'), ('itest6', 'b', 'NO', None)]

-----------
QUERY:


ALTER TABLE itest6 ALTER COLUMN b SET INCREMENT BY 2;
RESULT:
	ERROR - column "b" of relation "itest6" is not an identity column


-----------
QUERY:
  -- fail, not identity


-- prohibited direct modification of sequence

ALTER SEQUENCE itest6_a_seq OWNED BY NONE;
RESULT:
	ERROR - cannot change ownership of identity sequence
DETAIL:  Sequence "itest6_a_seq" is linked to table "itest6".


-----------
QUERY:



-- inheritance

CREATE TABLE itest7 (a int GENERATED ALWAYS AS IDENTITY);
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest7 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM itest7;
RESULT:
	[(1,)]

-----------
QUERY:


-- identity property is not inherited
CREATE TABLE itest7a (b text) INHERITS (itest7);
RESULT:
	[]

-----------
QUERY:


-- make column identity in child table
CREATE TABLE itest7b (a int);
RESULT:
	[]

-----------
QUERY:

CREATE TABLE itest7c (a int GENERATED ALWAYS AS IDENTITY) INHERITS (itest7b);
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest7c DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM itest7c;
RESULT:
	[(1,)]

-----------
QUERY:


CREATE TABLE itest7d (a int not null);
RESULT:
	[]

-----------
QUERY:

CREATE TABLE itest7e () INHERITS (itest7d);
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest7d ALTER COLUMN a ADD GENERATED ALWAYS AS IDENTITY;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest7d ADD COLUMN b int GENERATED ALWAYS AS IDENTITY;
RESULT:
	ERROR - cannot recursively add identity column to table that has child tables


-----------
QUERY:
  -- error

SELECT table_name, column_name, is_nullable, is_identity, identity_generation FROM information_schema.columns WHERE table_name LIKE 'itest7%' ORDER BY 1, 2;
RESULT:
	[('itest7', 'a', 'NO', 'YES', 'ALWAYS'), ('itest7a', 'a', 'NO', 'NO', None), ('itest7a', 'b', 'YES', 'NO', None), ('itest7b', 'a', 'YES', 'NO', None), ('itest7c', 'a', 'NO', 'YES', 'ALWAYS'), ('itest7d', 'a', 'NO', 'YES', 'ALWAYS'), ('itest7e', 'a', 'NO', 'NO', None)]

-----------
QUERY:


-- These ALTER TABLE variants will not recurse.
ALTER TABLE itest7 ALTER COLUMN a SET GENERATED BY DEFAULT;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest7 ALTER COLUMN a RESTART;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest7 ALTER COLUMN a DROP IDENTITY;
RESULT:
	[]

-----------
QUERY:


-- privileges
CREATE USER regress_identity_user1;
RESULT:
	[]

-----------
QUERY:

CREATE TABLE itest8 (a int GENERATED ALWAYS AS IDENTITY, b text);
RESULT:
	[]

-----------
QUERY:

GRANT SELECT, INSERT ON itest8 TO regress_identity_user1;
RESULT:
	[]

-----------
QUERY:

SET ROLE regress_identity_user1;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest8 DEFAULT VALUES;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM itest8;
RESULT:
	[(1, None)]

-----------
QUERY:

RESET ROLE;
RESULT:
	[]

-----------
QUERY:

DROP TABLE itest8;
RESULT:
	[]

-----------
QUERY:

DROP USER regress_identity_user1;
RESULT:
	[]

-----------
QUERY:


-- multiple steps in ALTER TABLE
CREATE TABLE itest8 (f1 int);
RESULT:
	[]

-----------
QUERY:


ALTER TABLE itest8
  ADD COLUMN f2 int NOT NULL,
  ALTER COLUMN f2 ADD GENERATED ALWAYS AS IDENTITY;
RESULT:
	[]

-----------
QUERY:


ALTER TABLE itest8
  ADD COLUMN f3 int NOT NULL,
  ALTER COLUMN f3 ADD GENERATED ALWAYS AS IDENTITY,
  ALTER COLUMN f3 SET GENERATED BY DEFAULT SET INCREMENT 10;
RESULT:
	[]

-----------
QUERY:


ALTER TABLE itest8
  ADD COLUMN f4 int;
RESULT:
	[]

-----------
QUERY:


ALTER TABLE itest8
  ALTER COLUMN f4 SET NOT NULL,
  ALTER COLUMN f4 ADD GENERATED ALWAYS AS IDENTITY,
  ALTER COLUMN f4 SET DATA TYPE bigint;
RESULT:
	[]

-----------
QUERY:


ALTER TABLE itest8
  ADD COLUMN f5 int GENERATED ALWAYS AS IDENTITY;
RESULT:
	[]

-----------
QUERY:


ALTER TABLE itest8
  ALTER COLUMN f5 DROP IDENTITY,
  ALTER COLUMN f5 DROP NOT NULL,
  ALTER COLUMN f5 SET DATA TYPE bigint;
RESULT:
	[]

-----------
QUERY:


INSERT INTO itest8 VALUES(0), (1);
RESULT:
	[]

-----------
QUERY:


-- This does not work when the table isn/* REPLACED */''t empty.  That/* REPLACED */''s intentional,
-- since ADD GENERATED should only affect later insertions:
ALTER TABLE itest8
  ADD COLUMN f22 int NOT NULL,
  ALTER COLUMN f22 ADD GENERATED ALWAYS AS IDENTITY;
RESULT:
	ERROR - column "f22" of relation "itest8" contains null values


-----------
QUERY:


TABLE itest8;
RESULT:
	[(0, 1, 1, 1, None), (1, 2, 11, 2, None)]

-----------
QUERY:

-- \d+ itest8
-- \d itest8_f2_seq
-- \d itest8_f3_seq
-- \d itest8_f4_seq
-- \d itest8_f5_seq
DROP TABLE itest8;
RESULT:
	[]

-----------
QUERY:



-- typed tables (currently not supported)

CREATE TYPE itest_type AS (f1 integer, f2 text, f3 bigint);
RESULT:
	[]

-----------
QUERY:

CREATE TABLE itest12 OF itest_type (f1 WITH OPTIONS GENERATED ALWAYS AS IDENTITY);
RESULT:
	ERROR - identity columns are not supported on typed tables


-----------
QUERY:
 -- error
DROP TYPE itest_type CASCADE;
RESULT:
	[]

-----------
QUERY:



-- table partitions

-- partitions inherit identity column and share sequence
CREATE TABLE pitest1 (f1 date NOT NULL, f2 text, f3 bigint generated always as identity) PARTITION BY RANGE (f1);
RESULT:
	[]

-----------
QUERY:

-- new partition
CREATE TABLE pitest1_p1 PARTITION OF pitest1 FOR VALUES FROM ('2016-07-01') TO ('2016-08-01');
RESULT:
	[]

-----------
QUERY:

INSERT into pitest1(f1, f2) VALUES ('2016-07-2', 'from pitest1');
RESULT:
	[]

-----------
QUERY:

INSERT into pitest1_p1 (f1, f2) VALUES ('2016-07-3', 'from pitest1_p1');
RESULT:
	[]

-----------
QUERY:

-- attached partition
CREATE TABLE pitest1_p2 (f1 date NOT NULL, f2 text, f3 bigint);
RESULT:
	[]

-----------
QUERY:

INSERT INTO pitest1_p2 VALUES ('2016-08-2', 'before attaching', 100);
RESULT:
	[]

-----------
QUERY:

ALTER TABLE pitest1 ATTACH PARTITION pitest1_p2 FOR VALUES FROM ('2016-08-01') TO ('2016-09-01');
RESULT:
	ERROR - column "f3" in child table must be marked NOT NULL


-----------
QUERY:
 -- requires NOT NULL constraint
ALTER TABLE pitest1_p2 ALTER COLUMN f3 SET NOT NULL;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE pitest1 ATTACH PARTITION pitest1_p2 FOR VALUES FROM ('2016-08-01') TO ('2016-09-01');
RESULT:
	[]

-----------
QUERY:

INSERT INTO pitest1_p2 (f1, f2) VALUES ('2016-08-3', 'from pitest1_p2');
RESULT:
	[]

-----------
QUERY:

INSERT INTO pitest1 (f1, f2) VALUES ('2016-08-4', 'from pitest1');
RESULT:
	[]

-----------
QUERY:

SELECT tableoid::regclass, f1, f2, f3 FROM pitest1;
RESULT:
	[('pitest1_p1', datetime.date(2016, 7, 2), 'from pitest1', 1), ('pitest1_p1', datetime.date(2016, 7, 3), 'from pitest1_p1', 2), ('pitest1_p2', datetime.date(2016, 8, 2), 'before attaching', 100), ('pitest1_p2', datetime.date(2016, 8, 3), 'from pitest1_p2', 3), ('pitest1_p2', datetime.date(2016, 8, 4), 'from pitest1', 4)]

-----------
QUERY:


-- add identity column
CREATE TABLE pitest2 (f1 date NOT NULL, f2 text) PARTITION BY RANGE (f1);
RESULT:
	[]

-----------
QUERY:

CREATE TABLE pitest2_p1 PARTITION OF pitest2 FOR VALUES FROM ('2016-07-01') TO ('2016-08-01');
RESULT:
	[]

-----------
QUERY:

CREATE TABLE pitest2_p2 PARTITION OF pitest2 FOR VALUES FROM ('2016-08-01') TO ('2016-09-01');
RESULT:
	[]

-----------
QUERY:

INSERT into pitest2(f1, f2) VALUES ('2016-07-2', 'from pitest2');
RESULT:
	[]

-----------
QUERY:

INSERT INTO pitest2 (f1, f2) VALUES ('2016-08-2', 'from pitest2');
RESULT:
	[]

-----------
QUERY:

ALTER TABLE pitest2 ADD COLUMN f3 int GENERATED ALWAYS AS IDENTITY;
RESULT:
	[]

-----------
QUERY:

INSERT into pitest2_p1 (f1, f2) VALUES ('2016-07-3', 'from pitest2_p1');
RESULT:
	[]

-----------
QUERY:

INSERT INTO pitest2_p2 (f1, f2) VALUES ('2016-08-3', 'from pitest2_p2');
RESULT:
	[]

-----------
QUERY:

INSERT into pitest2(f1, f2) VALUES ('2016-07-4', 'from pitest2');
RESULT:
	[]

-----------
QUERY:

INSERT INTO pitest2 (f1, f2) VALUES ('2016-08-4', 'from pitest2');
RESULT:
	[]

-----------
QUERY:

SELECT tableoid::regclass, f1, f2, f3 FROM pitest2;
RESULT:
	[('pitest2_p1', datetime.date(2016, 7, 2), 'from pitest2', 1), ('pitest2_p1', datetime.date(2016, 7, 3), 'from pitest2_p1', 3), ('pitest2_p1', datetime.date(2016, 7, 4), 'from pitest2', 5), ('pitest2_p2', datetime.date(2016, 8, 2), 'from pitest2', 2), ('pitest2_p2', datetime.date(2016, 8, 3), 'from pitest2_p2', 4), ('pitest2_p2', datetime.date(2016, 8, 4), 'from pitest2', 6)]

-----------
QUERY:


-- SET identity column
ALTER TABLE pitest2_p1 ALTER COLUMN f3 SET GENERATED BY DEFAULT;
RESULT:
	ERROR - cannot change identity column of a partition


-----------
QUERY:
 -- fails
ALTER TABLE pitest2_p1 ALTER COLUMN f3 SET INCREMENT BY 2;
RESULT:
	ERROR - cannot change identity column of a partition


-----------
QUERY:
 -- fails
ALTER TABLE ONLY pitest2 ALTER COLUMN f3 SET GENERATED BY DEFAULT SET INCREMENT BY 2 SET START WITH 1000 RESTART;
RESULT:
	ERROR - cannot change identity column of only the partitioned table
HINT:  Do not specify the ONLY keyword.


-----------
QUERY:
 -- fails
ALTER TABLE pitest2 ALTER COLUMN f3 SET GENERATED BY DEFAULT SET INCREMENT BY 2 SET START WITH 1000 RESTART;
RESULT:
	[]

-----------
QUERY:

INSERT into pitest2(f1, f2, f3) VALUES ('2016-07-5', 'from pitest2', 200);
RESULT:
	[]

-----------
QUERY:

INSERT INTO pitest2(f1, f2) VALUES ('2016-08-5', 'from pitest2');
RESULT:
	[]

-----------
QUERY:

INSERT into pitest2_p1 (f1, f2) VALUES ('2016-07-6', 'from pitest2_p1');
RESULT:
	[]

-----------
QUERY:

INSERT INTO pitest2_p2 (f1, f2, f3) VALUES ('2016-08-6', 'from pitest2_p2', 300);
RESULT:
	[]

-----------
QUERY:

SELECT tableoid::regclass, f1, f2, f3 FROM pitest2;
RESULT:
	[('pitest2_p1', datetime.date(2016, 7, 2), 'from pitest2', 1), ('pitest2_p1', datetime.date(2016, 7, 3), 'from pitest2_p1', 3), ('pitest2_p1', datetime.date(2016, 7, 4), 'from pitest2', 5), ('pitest2_p1', datetime.date(2016, 7, 5), 'from pitest2', 200), ('pitest2_p1', datetime.date(2016, 7, 6), 'from pitest2_p1', 1002), ('pitest2_p2', datetime.date(2016, 8, 2), 'from pitest2', 2), ('pitest2_p2', datetime.date(2016, 8, 3), 'from pitest2_p2', 4), ('pitest2_p2', datetime.date(2016, 8, 4), 'from pitest2', 6), ('pitest2_p2', datetime.date(2016, 8, 5), 'from pitest2', 1000), ('pitest2_p2', datetime.date(2016, 8, 6), 'from pitest2_p2', 300)]

-----------
QUERY:


-- detaching a partition removes identity property
ALTER TABLE pitest2 DETACH PARTITION pitest2_p1;
RESULT:
	[]

-----------
QUERY:

INSERT into pitest2(f1, f2) VALUES ('2016-08-7', 'from pitest2');
RESULT:
	[]

-----------
QUERY:

INSERT into pitest2_p1 (f1, f2) VALUES ('2016-07-7', 'from pitest2_p1');
RESULT:
	ERROR - null value in column "f3" of relation "pitest2_p1" violates not-null constraint
DETAIL:  Failing row contains (2016-07-07, from pitest2_p1, null).


-----------
QUERY:
 -- error
INSERT into pitest2_p1 (f1, f2, f3) VALUES ('2016-07-7', 'from pitest2_p1', 2000);
RESULT:
	[]

-----------
QUERY:

SELECT tableoid::regclass, f1, f2, f3 FROM pitest2;
RESULT:
	[('pitest2_p2', datetime.date(2016, 8, 2), 'from pitest2', 2), ('pitest2_p2', datetime.date(2016, 8, 3), 'from pitest2_p2', 4), ('pitest2_p2', datetime.date(2016, 8, 4), 'from pitest2', 6), ('pitest2_p2', datetime.date(2016, 8, 5), 'from pitest2', 1000), ('pitest2_p2', datetime.date(2016, 8, 6), 'from pitest2_p2', 300), ('pitest2_p2', datetime.date(2016, 8, 7), 'from pitest2', 1004)]

-----------
QUERY:

SELECT tableoid::regclass, f1, f2, f3 FROM pitest2_p1;
RESULT:
	[('pitest2_p1', datetime.date(2016, 7, 2), 'from pitest2', 1), ('pitest2_p1', datetime.date(2016, 7, 3), 'from pitest2_p1', 3), ('pitest2_p1', datetime.date(2016, 7, 4), 'from pitest2', 5), ('pitest2_p1', datetime.date(2016, 7, 5), 'from pitest2', 200), ('pitest2_p1', datetime.date(2016, 7, 6), 'from pitest2_p1', 1002), ('pitest2_p1', datetime.date(2016, 7, 7), 'from pitest2_p1', 2000)]

-----------
QUERY:


DROP TABLE pitest2_p1;
RESULT:
	[]

-----------
QUERY:


-- changing a regular column to identity column in a partitioned table
CREATE TABLE pitest3 (f1 date NOT NULL, f2 text, f3 int) PARTITION BY RANGE (f1);
RESULT:
	[]

-----------
QUERY:

CREATE TABLE pitest3_p1 PARTITION OF pitest3 FOR VALUES FROM ('2016-07-01') TO ('2016-08-01');
RESULT:
	[]

-----------
QUERY:

INSERT into pitest3 VALUES ('2016-07-2', 'from pitest3', 1);
RESULT:
	[]

-----------
QUERY:

INSERT into pitest3_p1 VALUES ('2016-07-3', 'from pitest3_p1', 2);
RESULT:
	[]

-----------
QUERY:

-- fails, changing only a partition not allowed
ALTER TABLE pitest3_p1
            ALTER COLUMN f3 SET NOT NULL,
            ALTER COLUMN f3 ADD GENERATED ALWAYS AS IDENTITY (START WITH 3);
RESULT:
	ERROR - cannot add identity to a column of a partition


-----------
QUERY:

-- fails, changing only the partitioned table not allowed
ALTER TABLE ONLY pitest3
            ALTER COLUMN f3 SET NOT NULL,
            ALTER COLUMN f3 ADD GENERATED ALWAYS AS IDENTITY (START WITH 3);
RESULT:
	ERROR - constraint must be added to child tables too
HINT:  Do not specify the ONLY keyword.


-----------
QUERY:

ALTER TABLE pitest3
            ALTER COLUMN f3 SET NOT NULL,
            ALTER COLUMN f3 ADD GENERATED ALWAYS AS IDENTITY (START WITH 3);
RESULT:
	[]

-----------
QUERY:

INSERT into pitest3(f1, f2) VALUES ('2016-07-4', 'from pitest3');
RESULT:
	[]

-----------
QUERY:

INSERT into pitest3_p1 (f1, f2) VALUES ('2016-07-5', 'from pitest3_p1');
RESULT:
	[]

-----------
QUERY:

SELECT tableoid::regclass, f1, f2, f3 FROM pitest3;
RESULT:
	[('pitest3_p1', datetime.date(2016, 7, 2), 'from pitest3', 1), ('pitest3_p1', datetime.date(2016, 7, 3), 'from pitest3_p1', 2), ('pitest3_p1', datetime.date(2016, 7, 4), 'from pitest3', 3), ('pitest3_p1', datetime.date(2016, 7, 5), 'from pitest3_p1', 4)]

-----------
QUERY:


-- changing an identity column to a non-identity column in a partitioned table
ALTER TABLE pitest3_p1 ALTER COLUMN f3 DROP IDENTITY;
RESULT:
	ERROR - cannot drop identity from a column of a partition


-----------
QUERY:
 -- fails
ALTER TABLE ONLY pitest3 ALTER COLUMN f3 DROP IDENTITY;
RESULT:
	ERROR - cannot drop identity from a column of only the partitioned table
HINT:  Do not specify the ONLY keyword.


-----------
QUERY:
 -- fails
ALTER TABLE pitest3 ALTER COLUMN f3 DROP IDENTITY;
RESULT:
	[]

-----------
QUERY:

INSERT into pitest3(f1, f2) VALUES ('2016-07-4', 'from pitest3');
RESULT:
	ERROR - null value in column "f3" of relation "pitest3_p1" violates not-null constraint
DETAIL:  Failing row contains (2016-07-04, from pitest3, null).


-----------
QUERY:
 -- fails
INSERT into pitest3_p1 (f1, f2) VALUES ('2016-07-5', 'from pitest3_p1');
RESULT:
	ERROR - null value in column "f3" of relation "pitest3_p1" violates not-null constraint
DETAIL:  Failing row contains (2016-07-05, from pitest3_p1, null).


-----------
QUERY:
 -- fails
INSERT into pitest3(f1, f2, f3) VALUES ('2016-07-6', 'from pitest3', 5);
RESULT:
	[]

-----------
QUERY:

INSERT into pitest3_p1 (f1, f2, f3) VALUES ('2016-07-7', 'from pitest3_p1', 6);
RESULT:
	[]

-----------
QUERY:

SELECT tableoid::regclass, f1, f2, f3 FROM pitest3;
RESULT:
	[('pitest3_p1', datetime.date(2016, 7, 2), 'from pitest3', 1), ('pitest3_p1', datetime.date(2016, 7, 3), 'from pitest3_p1', 2), ('pitest3_p1', datetime.date(2016, 7, 4), 'from pitest3', 3), ('pitest3_p1', datetime.date(2016, 7, 5), 'from pitest3_p1', 4), ('pitest3_p1', datetime.date(2016, 7, 6), 'from pitest3', 5), ('pitest3_p1', datetime.date(2016, 7, 7), 'from pitest3_p1', 6)]

-----------
QUERY:


-- Changing NOT NULL constraint of identity columns is not allowed
ALTER TABLE pitest1_p1 ALTER COLUMN f3 DROP NOT NULL;
RESULT:
	ERROR - column "f3" of relation "pitest1_p1" is an identity column


-----------
QUERY:

ALTER TABLE pitest1 ALTER COLUMN f3 DROP NOT NULL;
RESULT:
	ERROR - column "f3" of relation "pitest1" is an identity column


-----------
QUERY:

-- Identity columns have their own default
ALTER TABLE pitest1_p2 ALTER COLUMN f3 SET DEFAULT 10000;
RESULT:
	ERROR - column "f3" of relation "pitest1_p2" is an identity column


-----------
QUERY:

ALTER TABLE pitest1 ALTER COLUMN f3 SET DEFAULT 10000;
RESULT:
	ERROR - column "f3" of relation "pitest1" is an identity column


-----------
QUERY:

-- Adding identity to an identity column is not allowed
ALTER TABLE pitest1_p2 ALTER COLUMN f3 ADD GENERATED BY DEFAULT AS IDENTITY;
RESULT:
	ERROR - cannot add identity to a column of a partition


-----------
QUERY:

ALTER TABLE pitest1 ALTER COLUMN f3 ADD GENERATED BY DEFAULT AS IDENTITY;
RESULT:
	ERROR - column "f3" of relation "pitest1" is already an identity column


-----------
QUERY:


-- partitions with their own identity columns are not allowed, even if the
-- partitioned table does not have an identity column.
CREATE TABLE pitest1_pfail PARTITION OF pitest1 (
    f3 WITH OPTIONS GENERATED ALWAYS AS IDENTITY
) FOR VALUES FROM ('2016-11-01') TO ('2016-12-01');
RESULT:
	ERROR - identity columns are not supported on partitions


-----------
QUERY:


CREATE TABLE pitest_pfail PARTITION OF pitest3 (
    f3 WITH OPTIONS GENERATED ALWAYS AS IDENTITY
) FOR VALUES FROM ('2016-07-01') TO ('2016-08-01');
RESULT:
	ERROR - identity columns are not supported on partitions


-----------
QUERY:


CREATE TABLE pitest1_pfail (f1 date NOT NULL, f2 text, f3 bigint GENERATED ALWAYS AS IDENTITY);
RESULT:
	[]

-----------
QUERY:

ALTER TABLE pitest1 ATTACH PARTITION pitest1_pfail FOR VALUES FROM ('2016-11-01') TO ('2016-12-01');
RESULT:
	ERROR - table "pitest1_pfail" being attached contains an identity column "f3"
DETAIL:  The new partition may not contain an identity column.


-----------
QUERY:

ALTER TABLE pitest3 ATTACH PARTITION pitest1_pfail FOR VALUES FROM ('2016-11-01') TO ('2016-12-01');
RESULT:
	ERROR - table "pitest1_pfail" being attached contains an identity column "f3"
DETAIL:  The new partition may not contain an identity column.


-----------
QUERY:


DROP TABLE pitest1_pfail;
RESULT:
	[]

-----------
QUERY:

DROP TABLE pitest3;
RESULT:
	[]

-----------
QUERY:


-- test that sequence of half-dropped serial column is properly ignored

CREATE TABLE itest14 (id serial);
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest14 ALTER id DROP DEFAULT;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE itest14 ALTER id ADD GENERATED BY DEFAULT AS IDENTITY;
RESULT:
	[]

-----------
QUERY:

INSERT INTO itest14 (id) VALUES (DEFAULT);
RESULT:
	[]

-----------
QUERY:


-- Identity columns must be NOT NULL (cf bug #16913)

CREATE TABLE itest15 (id integer GENERATED ALWAYS AS IDENTITY NULL);
RESULT:
	ERROR - conflicting NULL/NOT NULL declarations for column "id" of table "itest15"
LINE 5: ...ABLE itest15 (id integer GENERATED ALWAYS AS IDENTITY NULL);
                                                                 ^


-----------
QUERY:
 -- fail
CREATE TABLE itest15 (id integer NULL GENERATED ALWAYS AS IDENTITY);
RESULT:
	ERROR - conflicting NULL/NOT NULL declarations for column "id" of table "itest15"
LINE 2: CREATE TABLE itest15 (id integer NULL GENERATED ALWAYS AS ID...
                                              ^


-----------
QUERY:
 -- fail
CREATE TABLE itest15 (id integer GENERATED ALWAYS AS IDENTITY NOT NULL);
RESULT:
	[]

-----------
QUERY:

DROP TABLE itest15;
RESULT:
	[]

-----------
QUERY:

CREATE TABLE itest15 (id integer NOT NULL GENERATED ALWAYS AS IDENTITY);
RESULT:
	[]

-----------
QUERY:

DROP TABLE itest15;
RESULT:
	[]

-----------
QUERY:


-- MERGE tests
CREATE TABLE itest15 (a int GENERATED ALWAYS AS IDENTITY, b text);
RESULT:
	[]

-----------
QUERY:

CREATE TABLE itest16 (a int GENERATED BY DEFAULT AS IDENTITY, b text);
RESULT:
	[]

-----------
QUERY:


MERGE INTO itest15 t
USING (SELECT 10 AS s_a, 'inserted by merge' AS s_b) s
ON t.a = s.s_a
WHEN NOT MATCHED THEN
	INSERT (a, b) VALUES (s.s_a, s.s_b);
RESULT:
	ERROR - cannot insert a non-DEFAULT value into column "a"
DETAIL:  Column "a" is an identity column defined as GENERATED ALWAYS.
HINT:  Use OVERRIDING SYSTEM VALUE to override.


-----------
QUERY:


-- Used to fail, but now it works and ignores the user supplied value
MERGE INTO itest15 t
USING (SELECT 20 AS s_a, 'inserted by merge' AS s_b) s
ON t.a = s.s_a
WHEN NOT MATCHED THEN
	INSERT (a, b) OVERRIDING USER VALUE VALUES (s.s_a, s.s_b);
RESULT:
	[]

-----------
QUERY:


MERGE INTO itest15 t
USING (SELECT 30 AS s_a, 'inserted by merge' AS s_b) s
ON t.a = s.s_a
WHEN NOT MATCHED THEN
	INSERT (a, b) OVERRIDING SYSTEM VALUE VALUES (s.s_a, s.s_b);
RESULT:
	[]

-----------
QUERY:


MERGE INTO itest16 t
USING (SELECT 10 AS s_a, 'inserted by merge' AS s_b) s
ON t.a = s.s_a
WHEN NOT MATCHED THEN
	INSERT (a, b) VALUES (s.s_a, s.s_b);
RESULT:
	[]

-----------
QUERY:


MERGE INTO itest16 t
USING (SELECT 20 AS s_a, 'inserted by merge' AS s_b) s
ON t.a = s.s_a
WHEN NOT MATCHED THEN
	INSERT (a, b) OVERRIDING USER VALUE VALUES (s.s_a, s.s_b);
RESULT:
	[]

-----------
QUERY:


MERGE INTO itest16 t
USING (SELECT 30 AS s_a, 'inserted by merge' AS s_b) s
ON t.a = s.s_a
WHEN NOT MATCHED THEN
	INSERT (a, b) OVERRIDING SYSTEM VALUE VALUES (s.s_a, s.s_b);
RESULT:
	[]

-----------
QUERY:


SELECT * FROM itest15;
RESULT:
	[(1, 'inserted by merge'), (30, 'inserted by merge')]

-----------
QUERY:

SELECT * FROM itest16;
RESULT:
	[(10, 'inserted by merge'), (1, 'inserted by merge'), (30, 'inserted by merge')]

-----------
QUERY:

DROP TABLE itest15;
RESULT:
	[]

-----------
QUERY:

DROP TABLE itest16;
RESULT:
	[]
