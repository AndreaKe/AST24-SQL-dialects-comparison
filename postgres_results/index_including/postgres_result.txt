
-----------
QUERY:
/*
 * 1.test CREATE INDEX
 *
 * Deliberately avoid dropping objects in this section, to get some pg_dump
 * coverage.
 */

-- Regular index with included columns
CREATE TABLE tbl_include_reg (c1 int, c2 int, c3 int, c4 box);
RESULT:
	[]

-----------
QUERY:

INSERT INTO tbl_include_reg SELECT x, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	[]

-----------
QUERY:

CREATE INDEX tbl_include_reg_idx ON tbl_include_reg (c1, c2) INCLUDE (c3, c4);
RESULT:
	[]

-----------
QUERY:

-- duplicate column is pretty pointless, but we allow it anyway
CREATE INDEX ON tbl_include_reg (c1, c2) INCLUDE (c1, c3);
RESULT:
	[]

-----------
QUERY:

SELECT pg_get_indexdef(i.indexrelid)
FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid
WHERE i.indrelid = 'tbl_include_reg'::regclass ORDER BY c.relname;
RESULT:
	[('CREATE INDEX tbl_include_reg_c1_c2_c11_c3_idx ON public.tbl_include_reg USING btree (c1, c2) INCLUDE (c1, c3)',), ('CREATE INDEX tbl_include_reg_idx ON public.tbl_include_reg USING btree (c1, c2) INCLUDE (c3, c4)',)]

-----------
QUERY:

-- \d tbl_include_reg_idx

-- Unique index and unique constraint
CREATE TABLE tbl_include_unique1 (c1 int, c2 int, c3 int, c4 box);
RESULT:
	[]

-----------
QUERY:

INSERT INTO tbl_include_unique1 SELECT x, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	[]

-----------
QUERY:

CREATE UNIQUE INDEX tbl_include_unique1_idx_unique ON tbl_include_unique1 using btree (c1, c2) INCLUDE (c3, c4);
RESULT:
	[]

-----------
QUERY:

ALTER TABLE tbl_include_unique1 add UNIQUE USING INDEX tbl_include_unique1_idx_unique;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE tbl_include_unique1 add UNIQUE (c1, c2) INCLUDE (c3, c4);
RESULT:
	[]

-----------
QUERY:

SELECT pg_get_indexdef(i.indexrelid)
FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid
WHERE i.indrelid = 'tbl_include_unique1'::regclass ORDER BY c.relname;
RESULT:
	[('CREATE UNIQUE INDEX tbl_include_unique1_c1_c2_c3_c4_key ON public.tbl_include_unique1 USING btree (c1, c2) INCLUDE (c3, c4)',), ('CREATE UNIQUE INDEX tbl_include_unique1_idx_unique ON public.tbl_include_unique1 USING btree (c1, c2) INCLUDE (c3, c4)',)]

-----------
QUERY:


-- Unique index and unique constraint. Both must fail.
CREATE TABLE tbl_include_unique2 (c1 int, c2 int, c3 int, c4 box);
RESULT:
	[]

-----------
QUERY:

INSERT INTO tbl_include_unique2 SELECT 1, 2, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	[]

-----------
QUERY:

CREATE UNIQUE INDEX tbl_include_unique2_idx_unique ON tbl_include_unique2 using btree (c1, c2) INCLUDE (c3, c4);
RESULT:
	ERROR - could not create unique index "tbl_include_unique2_idx_unique"
DETAIL:  Key (c1, c2)=(1, 2) is duplicated.


-----------
QUERY:

ALTER TABLE tbl_include_unique2 add UNIQUE (c1, c2) INCLUDE (c3, c4);
RESULT:
	ERROR - could not create unique index "tbl_include_unique2_c1_c2_c3_c4_key"
DETAIL:  Key (c1, c2)=(1, 2) is duplicated.


-----------
QUERY:


-- PK constraint
CREATE TABLE tbl_include_pk (c1 int, c2 int, c3 int, c4 box);
RESULT:
	[]

-----------
QUERY:

INSERT INTO tbl_include_pk SELECT 1, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE tbl_include_pk add PRIMARY KEY (c1, c2) INCLUDE (c3, c4);
RESULT:
	[]

-----------
QUERY:

SELECT pg_get_indexdef(i.indexrelid)
FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid
WHERE i.indrelid = 'tbl_include_pk'::regclass ORDER BY c.relname;
RESULT:
	[('CREATE UNIQUE INDEX tbl_include_pk_pkey ON public.tbl_include_pk USING btree (c1, c2) INCLUDE (c3, c4)',)]

-----------
QUERY:


CREATE TABLE tbl_include_box (c1 int, c2 int, c3 int, c4 box);
RESULT:
	[]

-----------
QUERY:

INSERT INTO tbl_include_box SELECT 1, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	[]

-----------
QUERY:

CREATE UNIQUE INDEX tbl_include_box_idx_unique ON tbl_include_box using btree (c1, c2) INCLUDE (c3, c4);
RESULT:
	[]

-----------
QUERY:

ALTER TABLE tbl_include_box add PRIMARY KEY USING INDEX tbl_include_box_idx_unique;
RESULT:
	[]

-----------
QUERY:

SELECT pg_get_indexdef(i.indexrelid)
FROM pg_index i JOIN pg_class c ON i.indexrelid = c.oid
WHERE i.indrelid = 'tbl_include_box'::regclass ORDER BY c.relname;
RESULT:
	[('CREATE UNIQUE INDEX tbl_include_box_idx_unique ON public.tbl_include_box USING btree (c1, c2) INCLUDE (c3, c4)',)]

-----------
QUERY:


-- PK constraint. Must fail.
CREATE TABLE tbl_include_box_pk (c1 int, c2 int, c3 int, c4 box);
RESULT:
	[]

-----------
QUERY:

INSERT INTO tbl_include_box_pk SELECT 1, 2, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE tbl_include_box_pk add PRIMARY KEY (c1, c2) INCLUDE (c3, c4);
RESULT:
	ERROR - could not create unique index "tbl_include_box_pk_pkey"
DETAIL:  Key (c1, c2)=(1, 2) is duplicated.


-----------
QUERY:



/*
 * 2. Test CREATE TABLE with constraint
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box,
				CONSTRAINT covering UNIQUE(c1,c2) INCLUDE(c3,c4));
RESULT:
	[]

-----------
QUERY:

SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid;
RESULT:
	[('covering', 4, 2, True, False, '1 2 3 4', '1978 1978')]

-----------
QUERY:

SELECT pg_get_constraintdef(oid), conname, conkey FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid;
RESULT:
	[('UNIQUE (c1, c2) INCLUDE (c3, c4)', 'covering', [1, 2])]

-----------
QUERY:

-- ensure that constraint works
INSERT INTO tbl SELECT 1, 2, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	ERROR - duplicate key value violates unique constraint "covering"
DETAIL:  Key (c1, c2)=(1, 2) already exists.


-----------
QUERY:

DROP TABLE tbl;
RESULT:
	[]

-----------
QUERY:


CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box,
				CONSTRAINT covering PRIMARY KEY(c1,c2) INCLUDE(c3,c4));
RESULT:
	[]

-----------
QUERY:

SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid;
RESULT:
	[('covering', 4, 2, True, True, '1 2 3 4', '1978 1978')]

-----------
QUERY:

SELECT pg_get_constraintdef(oid), conname, conkey FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid;
RESULT:
	[('PRIMARY KEY (c1, c2) INCLUDE (c3, c4)', 'covering', [1, 2])]

-----------
QUERY:

-- ensure that constraint works
INSERT INTO tbl SELECT 1, 2, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	ERROR - duplicate key value violates unique constraint "covering"
DETAIL:  Key (c1, c2)=(1, 2) already exists.


-----------
QUERY:

INSERT INTO tbl SELECT 1, NULL, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	ERROR - null value in column "c2" of relation "tbl" violates not-null constraint
DETAIL:  Failing row contains (1, null, 3, (4,4),(4,4)).


-----------
QUERY:

INSERT INTO tbl SELECT x, 2*x, NULL, NULL FROM generate_series(1,300) AS x;
RESULT:
	[]

-----------
QUERY:

explain (costs off)
select * from tbl where (c1,c2,c3) < (2,5,1);
RESULT:
	[('Bitmap Heap Scan on tbl',), ('  Filter: (ROW(c1, c2, c3) < ROW(2, 5, 1))',), ('  ->  Bitmap Index Scan on covering',), ('        Index Cond: (ROW(c1, c2) <= ROW(2, 5))',)]

-----------
QUERY:

select * from tbl where (c1,c2,c3) < (2,5,1);
RESULT:
	[(1, 2, None, None), (2, 4, None, None)]

-----------
QUERY:

-- row comparison that compares high key at page boundary
SET enable_seqscan = off;
RESULT:
	[]

-----------
QUERY:

explain (costs off)
select * from tbl where (c1,c2,c3) < (262,1,1) limit 1;
RESULT:
	[('Limit',), ('  ->  Index Only Scan using covering on tbl',), ('        Index Cond: (ROW(c1, c2) <= ROW(262, 1))',), ('        Filter: (ROW(c1, c2, c3) < ROW(262, 1, 1))',)]

-----------
QUERY:

select * from tbl where (c1,c2,c3) < (262,1,1) limit 1;
RESULT:
	[(1, 2, None, None)]

-----------
QUERY:

DROP TABLE tbl;
RESULT:
	[]

-----------
QUERY:

RESET enable_seqscan;
RESULT:
	[]

-----------
QUERY:


CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box,
				UNIQUE(c1,c2) INCLUDE(c3,c4));
RESULT:
	[]

-----------
QUERY:

SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid;
RESULT:
	[('tbl_c1_c2_c3_c4_key', 4, 2, True, False, '1 2 3 4', '1978 1978')]

-----------
QUERY:

SELECT pg_get_constraintdef(oid), conname, conkey FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid;
RESULT:
	[('UNIQUE (c1, c2) INCLUDE (c3, c4)', 'tbl_c1_c2_c3_c4_key', [1, 2])]

-----------
QUERY:

-- ensure that constraint works
INSERT INTO tbl SELECT 1, 2, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	ERROR - duplicate key value violates unique constraint "tbl_c1_c2_c3_c4_key"
DETAIL:  Key (c1, c2)=(1, 2) already exists.


-----------
QUERY:

DROP TABLE tbl;
RESULT:
	[]

-----------
QUERY:


CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box,
				PRIMARY KEY(c1,c2) INCLUDE(c3,c4));
RESULT:
	[]

-----------
QUERY:

SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid;
RESULT:
	[('tbl_pkey', 4, 2, True, True, '1 2 3 4', '1978 1978')]

-----------
QUERY:

SELECT pg_get_constraintdef(oid), conname, conkey FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid;
RESULT:
	[('PRIMARY KEY (c1, c2) INCLUDE (c3, c4)', 'tbl_pkey', [1, 2])]

-----------
QUERY:

-- ensure that constraint works
INSERT INTO tbl SELECT 1, 2, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	ERROR - duplicate key value violates unique constraint "tbl_pkey"
DETAIL:  Key (c1, c2)=(1, 2) already exists.


-----------
QUERY:

INSERT INTO tbl SELECT 1, NULL, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	ERROR - null value in column "c2" of relation "tbl" violates not-null constraint
DETAIL:  Failing row contains (1, null, 3, (4,4),(4,4)).


-----------
QUERY:

INSERT INTO tbl SELECT x, 2*x, NULL, NULL FROM generate_series(1,10) AS x;
RESULT:
	[]

-----------
QUERY:

DROP TABLE tbl;
RESULT:
	[]

-----------
QUERY:


CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box,
				EXCLUDE USING btree (c1 WITH =) INCLUDE(c3,c4));
RESULT:
	[]

-----------
QUERY:

SELECT indexrelid::regclass, indnatts, indnkeyatts, indisunique, indisprimary, indkey, indclass FROM pg_index WHERE indrelid = 'tbl'::regclass::oid;
RESULT:
	[('tbl_c1_c3_c4_excl', 3, 1, False, False, '1 3 4', '1978')]

-----------
QUERY:

SELECT pg_get_constraintdef(oid), conname, conkey FROM pg_constraint WHERE conrelid = 'tbl'::regclass::oid;
RESULT:
	[('EXCLUDE USING btree (c1 WITH =) INCLUDE (c3, c4)', 'tbl_c1_c3_c4_excl', [1])]

-----------
QUERY:

-- ensure that constraint works
INSERT INTO tbl SELECT 1, 2, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	ERROR - conflicting key value violates exclusion constraint "tbl_c1_c3_c4_excl"
DETAIL:  Key (c1)=(1) conflicts with existing key (c1)=(1).


-----------
QUERY:

INSERT INTO tbl SELECT x, 2*x, NULL, NULL FROM generate_series(1,10) AS x;
RESULT:
	[]

-----------
QUERY:

DROP TABLE tbl;
RESULT:
	[]

-----------
QUERY:


/*
 * 3.0 Test ALTER TABLE DROP COLUMN.
 * Any column deletion leads to index deletion.
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 int);
RESULT:
	[]

-----------
QUERY:

CREATE UNIQUE INDEX tbl_idx ON tbl using btree(c1, c2, c3, c4);
RESULT:
	[]

-----------
QUERY:

SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
RESULT:
	[('CREATE UNIQUE INDEX tbl_idx ON public.tbl USING btree (c1, c2, c3, c4)',)]

-----------
QUERY:

ALTER TABLE tbl DROP COLUMN c3;
RESULT:
	[]

-----------
QUERY:

SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
RESULT:
	[]

-----------
QUERY:

DROP TABLE tbl;
RESULT:
	[]

-----------
QUERY:


/*
 * 3.1 Test ALTER TABLE DROP COLUMN.
 * Included column deletion leads to the index deletion,
 * AS well AS key columns deletion. It's explained in documentation.
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box);
RESULT:
	[]

-----------
QUERY:

CREATE UNIQUE INDEX tbl_idx ON tbl using btree(c1, c2) INCLUDE(c3,c4);
RESULT:
	[]

-----------
QUERY:

SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
RESULT:
	[('CREATE UNIQUE INDEX tbl_idx ON public.tbl USING btree (c1, c2) INCLUDE (c3, c4)',)]

-----------
QUERY:

ALTER TABLE tbl DROP COLUMN c3;
RESULT:
	[]

-----------
QUERY:

SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
RESULT:
	[]

-----------
QUERY:

DROP TABLE tbl;
RESULT:
	[]

-----------
QUERY:


/*
 * 3.2 Test ALTER TABLE DROP COLUMN.
 * Included column deletion leads to the index deletion.
 * AS well AS key columns deletion. It's explained in documentation.
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box, UNIQUE(c1, c2) INCLUDE(c3,c4));
RESULT:
	[]

-----------
QUERY:

SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
RESULT:
	[('CREATE UNIQUE INDEX tbl_c1_c2_c3_c4_key ON public.tbl USING btree (c1, c2) INCLUDE (c3, c4)',)]

-----------
QUERY:

ALTER TABLE tbl DROP COLUMN c3;
RESULT:
	[]

-----------
QUERY:

SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE tbl DROP COLUMN c1;
RESULT:
	[]

-----------
QUERY:

SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
RESULT:
	[]

-----------
QUERY:

DROP TABLE tbl;
RESULT:
	[]

-----------
QUERY:


/*
 * 3.3 Test ALTER TABLE SET STATISTICS
 */
CREATE TABLE tbl (c1 int, c2 int);
RESULT:
	[]

-----------
QUERY:

CREATE INDEX tbl_idx ON tbl (c1, (c1+0)) INCLUDE (c2);
RESULT:
	[]

-----------
QUERY:

ALTER INDEX tbl_idx ALTER COLUMN 1 SET STATISTICS 1000;
RESULT:
	ERROR - cannot alter statistics on non-expression column "c1" of index "tbl_idx"
HINT:  Alter statistics on table column instead.


-----------
QUERY:

ALTER INDEX tbl_idx ALTER COLUMN 2 SET STATISTICS 1000;
RESULT:
	[]

-----------
QUERY:

ALTER INDEX tbl_idx ALTER COLUMN 3 SET STATISTICS 1000;
RESULT:
	ERROR - cannot alter statistics on included column "c2" of index "tbl_idx"


-----------
QUERY:

ALTER INDEX tbl_idx ALTER COLUMN 4 SET STATISTICS 1000;
RESULT:
	ERROR - column number 4 of relation "tbl_idx" does not exist


-----------
QUERY:

DROP TABLE tbl;
RESULT:
	[]

-----------
QUERY:


/*
 * 4. CREATE INDEX CONCURRENTLY
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box, UNIQUE(c1, c2) INCLUDE(c3,c4));
RESULT:
	[]

-----------
QUERY:

INSERT INTO tbl SELECT x, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,1000) AS x;
RESULT:
	[]

-----------
QUERY:

CREATE UNIQUE INDEX CONCURRENTLY on tbl (c1, c2) INCLUDE (c3, c4);
RESULT:
	[]

-----------
QUERY:

SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
RESULT:
	[('CREATE UNIQUE INDEX tbl_c1_c2_c3_c4_idx ON public.tbl USING btree (c1, c2) INCLUDE (c3, c4)',), ('CREATE UNIQUE INDEX tbl_c1_c2_c3_c4_key ON public.tbl USING btree (c1, c2) INCLUDE (c3, c4)',)]

-----------
QUERY:

DROP TABLE tbl;
RESULT:
	[]

-----------
QUERY:



/*
 * 5. REINDEX
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box, UNIQUE(c1, c2) INCLUDE(c3,c4));
RESULT:
	[]

-----------
QUERY:

SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
RESULT:
	[('CREATE UNIQUE INDEX tbl_c1_c2_c3_c4_key ON public.tbl USING btree (c1, c2) INCLUDE (c3, c4)',)]

-----------
QUERY:

ALTER TABLE tbl DROP COLUMN c3;
RESULT:
	[]

-----------
QUERY:

SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
RESULT:
	[]

-----------
QUERY:

REINDEX INDEX tbl_c1_c2_c3_c4_key;
RESULT:
	ERROR - relation "tbl_c1_c2_c3_c4_key" does not exist


-----------
QUERY:

SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE tbl DROP COLUMN c1;
RESULT:
	[]

-----------
QUERY:

SELECT indexdef FROM pg_indexes WHERE tablename = 'tbl' ORDER BY indexname;
RESULT:
	[]

-----------
QUERY:

DROP TABLE tbl;
RESULT:
	[]

-----------
QUERY:


/*
 * 7. Check various AMs. All but btree, gist and spgist must fail.
 */
CREATE TABLE tbl (c1 int,c2 int, c3 box, c4 box);
RESULT:
	[]

-----------
QUERY:

CREATE INDEX on tbl USING brin(c1, c2) INCLUDE (c3, c4);
RESULT:
	ERROR - access method "brin" does not support included columns


-----------
QUERY:

CREATE INDEX on tbl USING gist(c3) INCLUDE (c1, c4);
RESULT:
	[]

-----------
QUERY:

CREATE INDEX on tbl USING spgist(c3) INCLUDE (c4);
RESULT:
	[]

-----------
QUERY:

CREATE INDEX on tbl USING gin(c1, c2) INCLUDE (c3, c4);
RESULT:
	ERROR - access method "gin" does not support included columns


-----------
QUERY:

CREATE INDEX on tbl USING hash(c1, c2) INCLUDE (c3, c4);
RESULT:
	ERROR - access method "hash" does not support included columns


-----------
QUERY:

CREATE INDEX on tbl USING rtree(c3) INCLUDE (c1, c4);
RESULT:
	[]

-----------
QUERY:

CREATE INDEX on tbl USING btree(c1, c2) INCLUDE (c3, c4);
RESULT:
	[]

-----------
QUERY:

DROP TABLE tbl;
RESULT:
	[]

-----------
QUERY:


/*
 * 8. Update, delete values in indexed table.
 */
CREATE TABLE tbl (c1 int, c2 int, c3 int, c4 box);
RESULT:
	[]

-----------
QUERY:

INSERT INTO tbl SELECT x, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	[]

-----------
QUERY:

CREATE UNIQUE INDEX tbl_idx_unique ON tbl using btree(c1, c2) INCLUDE (c3,c4);
RESULT:
	[]

-----------
QUERY:

UPDATE tbl SET c1 = 100 WHERE c1 = 2;
RESULT:
	[]

-----------
QUERY:

UPDATE tbl SET c1 = 1 WHERE c1 = 3;
RESULT:
	[]

-----------
QUERY:

-- should fail
UPDATE tbl SET c2 = 2 WHERE c1 = 1;
RESULT:
	ERROR - duplicate key value violates unique constraint "tbl_idx_unique"
DETAIL:  Key (c1, c2)=(1, 2) already exists.


-----------
QUERY:

UPDATE tbl SET c3 = 1;
RESULT:
	[]

-----------
QUERY:

DELETE FROM tbl WHERE c1 = 5 OR c3 = 12;
RESULT:
	[]

-----------
QUERY:

DROP TABLE tbl;
RESULT:
	[]

-----------
QUERY:


/*
 * 9. Alter column type.
 */
CREATE TABLE tbl (c1 int,c2 int, c3 int, c4 box, UNIQUE(c1, c2) INCLUDE(c3,c4));
RESULT:
	[]

-----------
QUERY:

INSERT INTO tbl SELECT x, 2*x, 3*x, box('4,4,4,4') FROM generate_series(1,10) AS x;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE tbl ALTER c1 TYPE bigint;
RESULT:
	[]

-----------
QUERY:

ALTER TABLE tbl ALTER c3 TYPE bigint;
RESULT:
	[]

-----------
QUERY:

-- \d tbl
DROP TABLE tbl;
RESULT:
	[]
