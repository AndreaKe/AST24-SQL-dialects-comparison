Guest DBMS identified: postgres
-----------
QUERY:
--
-- insert with DEFAULT in the target_list
--
create table inserttest (col1 int4, col2 int4 NOT NULL, col3 text default 'testing');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

insert into inserttest (col1, col2, col3) values (DEFAULT, DEFAULT, DEFAULT);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into inserttest (col2, col3) values (3, DEFAULT);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

insert into inserttest (col1, col2, col3) values (DEFAULT, 5, DEFAULT);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

insert into inserttest values (DEFAULT, 5, 'test');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

insert into inserttest values (DEFAULT, 7);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select * from inserttest;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


--
-- insert with similar expression / target_list values (all fail)
--
insert into inserttest (col1, col2, col3) values (DEFAULT, DEFAULT);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into inserttest (col1, col2, col3) values (1, 2);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into inserttest (col1) values (1, 2);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into inserttest (col1) values (DEFAULT, DEFAULT);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


select * from inserttest;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


--
-- VALUES test
--
insert into inserttest values(10, 20, '40'), (-1, 2, DEFAULT),
    ((select 2), (select i from (values(3)) as foo (i)), 'values are fun!');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select * from inserttest;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


--
-- TOASTed value test
--
insert into inserttest values(30, 50, repeat('x', 10000));
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select col1, col2, char_length(col3) from inserttest;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


drop table inserttest;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


--
-- tuple larger than fillfactor
--
CREATE TABLE large_tuple_test (a int, b text) WITH (fillfactor = 10);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

ALTER TABLE large_tuple_test ALTER COLUMN b SET STORAGE plain;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- create page w/ free space in range [nearlyEmptyFreeSpace, MaxHeapTupleSize)
INSERT INTO large_tuple_test (select 1, NULL);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- should still fit on the page
INSERT INTO large_tuple_test (select 2, repeat('a', 1000));
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT pg_size_pretty(pg_relation_size('large_tuple_test'::regclass, 'main'));
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- add small record to the second page
INSERT INTO large_tuple_test (select 3, NULL);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- now this tuple won/* REPLACED */ ''t fit on the second page, but the insert should
-- still succeed by extending the relation
INSERT INTO large_tuple_test (select 4, repeat('a', 8126));
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


DROP TABLE large_tuple_test;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


--
-- check indirection (field/array assignment), cf bug #14265
--
-- these tests are aware that transformInsertStmt has 3 separate code paths
--

create type insert_test_type as (if1 int, if2 text[]);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


create table inserttest (f1 int, f2 int[],
                         f3 insert_test_type, f4 insert_test_type[]);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


insert into inserttest (f2[1], f2[2]) values (1,2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttest (f2[1], f2[2]) values (3,4), (5,6);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttest (f2[1], f2[2]) select 7,8;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttest (f2[1], f2[2]) values (1,default);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- not supported

insert into inserttest (f3.if1, f3.if2) values (1,array['foo']);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttest (f3.if1, f3.if2) values (1,'{foo}'), (2,'{bar}');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttest (f3.if1, f3.if2) select 3, '{baz,quux}';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttest (f3.if1, f3.if2) values (1,default);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- not supported

insert into inserttest (f3.if2[1], f3.if2[2]) values ('foo', 'bar');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttest (f3.if2[1], f3.if2[2]) values ('foo', 'bar'), ('baz', 'quux');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttest (f3.if2[1], f3.if2[2]) select 'bear', 'beer';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


insert into inserttest (f4[1].if2[1], f4[1].if2[2]) values ('foo', 'bar');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttest (f4[1].if2[1], f4[1].if2[2]) values ('foo', 'bar'), ('baz', 'quux');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttest (f4[1].if2[1], f4[1].if2[2]) select 'bear', 'beer';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select * from inserttest;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- also check reverse-listing
create table inserttest2 (f1 bigint, f2 text);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

create rule irule1 as on insert to inserttest2 do also
  insert into inserttest (f3.if2[1], f3.if2[2])
  values (new.f1,new.f2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create rule irule2 as on insert to inserttest2 do also
  insert into inserttest (f4[1].if1, f4[1].if2[2])
  values (1,'fool'),(new.f1,new.f2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create rule irule3 as on insert to inserttest2 do also
  insert into inserttest (f4[1].if1, f4[1].if2[2])
  select new.f1, new.f2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- \d+ inserttest2

drop table inserttest2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

drop table inserttest;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Make the same tests with domains over the array and composite fields

create domain insert_pos_ints as int[] check (value[1] > 0);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


create domain insert_test_domain as insert_test_type
  check ((value).if2[1] is not null);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


create table inserttesta (f1 int, f2 insert_pos_ints);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table inserttestb (f3 insert_test_domain, f4 insert_test_domain[]);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


insert into inserttesta (f2[1], f2[2]) values (1,2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttesta (f2[1], f2[2]) values (3,4), (5,6);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttesta (f2[1], f2[2]) select 7,8;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttesta (f2[1], f2[2]) values (1,default);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- not supported
insert into inserttesta (f2[1], f2[2]) values (0,2);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into inserttesta (f2[1], f2[2]) values (3,4), (0,6);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into inserttesta (f2[1], f2[2]) select 0,8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


insert into inserttestb (f3.if1, f3.if2) values (1,array['foo']);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttestb (f3.if1, f3.if2) values (1,'{foo}'), (2,'{bar}');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttestb (f3.if1, f3.if2) select 3, '{baz,quux}';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttestb (f3.if1, f3.if2) values (1,default);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- not supported
insert into inserttestb (f3.if1, f3.if2) values (1,array[null]);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into inserttestb (f3.if1, f3.if2) values (1,'{null}'), (2,'{bar}');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into inserttestb (f3.if1, f3.if2) select 3, '{null,quux}';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


insert into inserttestb (f3.if2[1], f3.if2[2]) values ('foo', 'bar');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttestb (f3.if2[1], f3.if2[2]) values ('foo', 'bar'), ('baz', 'quux');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttestb (f3.if2[1], f3.if2[2]) select 'bear', 'beer';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


insert into inserttestb (f3, f4[1].if2[1], f4[1].if2[2]) values (row(1,'{x}'), 'foo', 'bar');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttestb (f3, f4[1].if2[1], f4[1].if2[2]) values (row(1,'{x}'), 'foo', 'bar'), (row(2,'{y}'), 'baz', 'quux');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttestb (f3, f4[1].if2[1], f4[1].if2[2]) select row(1,'{x}')::insert_test_domain, 'bear', 'beer';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select * from inserttesta;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select * from inserttestb;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- also check reverse-listing
create table inserttest2 (f1 bigint, f2 text);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

create rule irule1 as on insert to inserttest2 do also
  insert into inserttestb (f3.if2[1], f3.if2[2])
  values (new.f1,new.f2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create rule irule2 as on insert to inserttest2 do also
  insert into inserttestb (f4[1].if1, f4[1].if2[2])
  values (1,'fool'),(new.f1,new.f2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create rule irule3 as on insert to inserttest2 do also
  insert into inserttestb (f4[1].if1, f4[1].if2[2])
  select new.f1, new.f2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- \d+ inserttest2

drop table inserttest2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

drop table inserttesta;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop table inserttestb;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop domain insert_pos_ints;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop domain insert_test_domain;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Verify that multiple inserts to subfields of a domain-over-container
-- check the domain constraints only on the finished value

create domain insert_nnarray as int[]
  check (value[1] is not null and value[2] is not null);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


create domain insert_test_domain as insert_test_type
  check ((value).if1 is not null and (value).if2 is not null);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


create table inserttesta (f1 insert_nnarray);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttesta (f1[1]) values (1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- fail
insert into inserttesta (f1[1], f1[2]) values (1, 2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


create table inserttestb (f1 insert_test_domain);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into inserttestb (f1.if1) values (1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- fail
insert into inserttestb (f1.if1, f1.if2) values (1, '{foo}');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


drop table inserttesta;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop table inserttestb;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop domain insert_nnarray;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop type insert_test_type cascade;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- direct partition inserts should check partition bound constraint
create table range_parted (
	a text,
	b int
) partition by range (a, (b+0));
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- no partitions, so fail
insert into range_parted values ('a', 11);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


create table part1 partition of range_parted for values from ('a', 1) to ('a', 10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part2 partition of range_parted for values from ('a', 10) to ('a', 20);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part3 partition of range_parted for values from ('b', 1) to ('b', 10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part4 partition of range_parted for values from ('b', 10) to ('b', 20);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- fail
insert into part1 values ('a', 11);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into part1 values ('b', 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- ok
insert into part1 values ('a', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- fail
insert into part4 values ('b', 21);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into part4 values ('a', 10);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- ok
insert into part4 values ('b', 10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- fail (partition key a has a NOT NULL constraint)
insert into part1 values (null);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- fail (expression key (b+0) cannot be null either)
insert into part1 values (1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


create table list_parted (
	a text,
	b int
) partition by list (lower(a));
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_aa_bb partition of list_parted FOR VALUES IN ('aa', 'bb');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_cc_dd partition of list_parted FOR VALUES IN ('cc', 'dd');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_null partition of list_parted FOR VALUES IN (null);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- fail
insert into part_aa_bb values ('cc', 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into part_aa_bb values ('AAa', 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into part_aa_bb values (null);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- ok
insert into part_cc_dd values ('cC', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into part_null values (null, 0);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check in case of multi-level partitioned table
create table part_ee_ff partition of list_parted for values in ('ee', 'ff') partition by range (b);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_ee_ff1 partition of part_ee_ff for values from (1) to (10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_ee_ff2 partition of part_ee_ff for values from (10) to (20);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- test default partition
create table part_default partition of list_parted default;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- Negative test: a row, which would fit in other partition, does not fit
-- default partition, even when inserted directly
insert into part_default values ('aa', 2);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into part_default values (null, 2);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- ok
insert into part_default values ('Zz', 2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- test if default partition works as expected for multi-level partitioned
-- table as well as when default partition itself is further partitioned
drop table part_default;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_xx_yy partition of list_parted for values in ('xx', 'yy') partition by list (a);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_xx_yy_p1 partition of part_xx_yy for values in ('xx');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_xx_yy_defpart partition of part_xx_yy default;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_default partition of list_parted default partition by range(b);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_default_p1 partition of part_default for values from (20) to (30);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_default_p2 partition of part_default for values from (30) to (40);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- fail
insert into part_ee_ff1 values ('EE', 11);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into part_default_p2 values ('gg', 43);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- fail (even the parent/* REPLACED */ ''s, ie, part_ee_ff/* REPLACED */ ''s partition constraint applies)
insert into part_ee_ff1 values ('cc', 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into part_default values ('gg', 43);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- ok
insert into part_ee_ff1 values ('ff', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into part_ee_ff2 values ('ff', 11);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into part_default_p1 values ('cd', 25);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into part_default_p2 values ('de', 35);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into list_parted values ('ab', 21);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into list_parted values ('xx', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into list_parted values ('yy', 2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select tableoid::regclass, * from list_parted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Check tuple routing for partitioned tables

-- fail
insert into range_parted values ('a', 0);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- ok
insert into range_parted values ('a', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into range_parted values ('a', 10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- fail
insert into range_parted values ('a', 20);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- ok
insert into range_parted values ('b', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into range_parted values ('b', 10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- fail (partition key (b+0) is null)
insert into range_parted values ('a');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Check default partition
create table part_def partition of range_parted default;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- fail
insert into part_def values ('b', 10);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- ok
insert into part_def values ('c', 10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into range_parted values (null, null);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into range_parted values ('a', null);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into range_parted values (null, 19);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into range_parted values ('b', 20);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select tableoid::regclass, * from range_parted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- ok
insert into list_parted values (null, 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into list_parted (a) values ('aA');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- fail (partition of part_ee_ff not found in both cases)
insert into list_parted values ('EE', 0);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into part_ee_ff values ('EE', 0);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- ok
insert into list_parted values ('EE', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into part_ee_ff values ('EE', 10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select tableoid::regclass, * from list_parted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- some more tests to exercise tuple-routing with multi-level partitioning
create table part_gg partition of list_parted for values in ('gg') partition by range (b);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_gg1 partition of part_gg for values from (minvalue) to (1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_gg2 partition of part_gg for values from (1) to (10) partition by range (b);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_gg2_1 partition of part_gg2 for values from (1) to (5);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_gg2_2 partition of part_gg2 for values from (5) to (10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


create table part_ee_ff3 partition of part_ee_ff for values from (20) to (30) partition by range (b);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_ee_ff3_1 partition of part_ee_ff3 for values from (20) to (25);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_ee_ff3_2 partition of part_ee_ff3 for values from (25) to (30);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


truncate list_parted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into list_parted values ('aa'), ('cc');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into list_parted select 'Ff', s.a from generate_series(1, 29) s(a);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into list_parted select 'gg', s.a from generate_series(1, 9) s(a);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into list_parted (b) values (1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select tableoid::regclass::text, a, min(b) as min_b, max(b) as max_b from list_parted group by 1, 2 order by 1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- direct partition inserts should check hash partition bound constraint

create table hash_parted (
	a int
) partition by hash (a part_test_int4_ops);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table hpart0 partition of hash_parted for values with (modulus 4, remainder 0);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table hpart1 partition of hash_parted for values with (modulus 4, remainder 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table hpart2 partition of hash_parted for values with (modulus 4, remainder 2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table hpart3 partition of hash_parted for values with (modulus 4, remainder 3);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


insert into hash_parted values(generate_series(1,10));
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- direct insert of values divisible by 4 - ok /* REPLACED */ ,
insert into hpart0 values(12),(16);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- fail /* REPLACED */ ,
insert into hpart0 values(11);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- 11 % 4 -> 3 remainder i.e. valid data for hpart3 partition
insert into hpart3 values(11);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- view data
select tableoid::regclass as part, a, a%4 as "remainder = a % 4"
from hash_parted order by part;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- test \d+ output on a table which has both partitioned and unpartitioned
-- partitions
-- \d+ list_parted

-- cleanup
drop table range_parted, list_parted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop table hash_parted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- test that a default partition added as the first partition accepts any value
-- including null
create table list_parted (a int) partition by list (a);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table part_default partition of list_parted default;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- \d+ part_default
insert into part_default values (null);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into part_default values (1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into part_default values (-1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select tableoid::regclass, a from list_parted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- cleanup
drop table list_parted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- more tests for certain multi-level partitioning scenarios
create table mlparted (a int, b int) partition by range (a, b);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted1 (b int not null, a int not null) partition by range ((b+0));
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted11 (like mlparted1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted11 drop a;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted11 add a int;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted11 drop a;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted11 add a int not null;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- attnum for key attribute /* REPLACED */ ''a/* REPLACED */ '' is different in mlparted, mlparted1, and mlparted11
select attrelid::regclass, attname, attnum
from pg_attribute
where attname = 'a'
 and (attrelid = 'mlparted'::regclass
   or attrelid = 'mlparted1'::regclass
   or attrelid = 'mlparted11'::regclass)
order by attrelid::regclass::text;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


alter table mlparted1 attach partition mlparted11 for values from (2) to (5);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted attach partition mlparted1 for values from (1, 2) to (1, 10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check that /* REPLACED */ ''(1, 2)/* REPLACED */ '' is correctly routed to mlparted11.
insert into mlparted values (1, 2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select tableoid::regclass, * from mlparted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check that proper message is shown after failure to route through mlparted1
insert into mlparted (a, b) values (1, 5);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


truncate mlparted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted add constraint check_b check (b = 3);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- have a BR trigger modify the row such that the check_b is violated
create function mlparted11_trig_fn()
returns trigger AS
$$
begin
  NEW.b := 4;
  return NEW;
end;
$$
language plpgsql;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create trigger mlparted11_trig before insert ON mlparted11
  for each row execute procedure mlparted11_trig_fn();
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check that the correct row is shown when constraint check_b fails after
-- /* REPLACED */ ''(1, 2)/* REPLACED */ '' is routed to mlparted11 (actually /* REPLACED */ ''(1, 4)/* REPLACED */ '' would be shown due
-- to the BR trigger mlparted11_trig_fn)
insert into mlparted values (1, 2);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

drop trigger mlparted11_trig on mlparted11;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop function mlparted11_trig_fn();
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check that inserting into an internal partition successfully results in
-- checking its partition constraint before inserting into the leaf partition
-- selected by tuple-routing
insert into mlparted1 (a, b) values (2, 3);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- check routing error through a list partitioned table when the key is null
create table lparted_nonullpart (a int, b char) partition by list (b);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table lparted_nonullpart_a partition of lparted_nonullpart for values in ('a');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into lparted_nonullpart values (1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

drop table lparted_nonullpart;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check that RETURNING works correctly with tuple-routing
alter table mlparted drop constraint check_b;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted12 partition of mlparted1 for values from (5) to (10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted2 (b int not null, a int not null);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

alter table mlparted attach partition mlparted2 for values from (1, 10) to (1, 20);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted3 partition of mlparted for values from (1, 20) to (1, 30);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted4 (like mlparted);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted4 drop a;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted4 add a int not null;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted attach partition mlparted4 for values from (1, 30) to (1, 40);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

with ins (a, b, c) as
  (insert into mlparted (b, a) select s.a, 1 from generate_series(2, 39) s(a) returning tableoid::regclass, *)
  select a, b, min(c), max(c) from ins group by a, b order by 1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


alter table mlparted add c text;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted5 (c text, a int not null, b int not null) partition by list (c);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted5a (a int not null, c text, b int not null);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

alter table mlparted5 attach partition mlparted5a for values in ('a');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted attach partition mlparted5 for values from (1, 40) to (1, 50);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted add constraint check_b check (a = 1 and b < 45);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mlparted values (1, 45, 'a');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

create function mlparted5abrtrig_func() returns trigger as $$ begin new.c = 'b'; return new; end; $$ language plpgsql;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create trigger mlparted5abrtrig before insert on mlparted5a for each row execute procedure mlparted5abrtrig_func();
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mlparted5 (a, b, c) values (1, 40, 'a');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

drop table mlparted5;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted drop constraint check_b;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Check multi-level default partition
create table mlparted_def partition of mlparted default partition by range(a);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted_def1 partition of mlparted_def for values from (40) to (50);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted_def2 partition of mlparted_def for values from (50) to (60);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mlparted values (40, 100);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mlparted_def1 values (42, 100);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mlparted_def2 values (54, 50);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- fail
insert into mlparted values (70, 100);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into mlparted_def1 values (52, 50);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into mlparted_def2 values (34, 50);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- ok
create table mlparted_defd partition of mlparted_def default;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mlparted values (70, 100);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select tableoid::regclass, * from mlparted_def;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Check multi-level tuple routing with attributes dropped from the
-- top-most parent.  First remove the last attribute.
alter table mlparted add d int, add e int;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted drop e;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted5 partition of mlparted
  for values from (1, 40) to (1, 50) partition by range (c);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted5_ab partition of mlparted5
  for values from ('a') to ('c') partition by list (c);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- This partitioned table should remain with no partitions.
create table mlparted5_cd partition of mlparted5
  for values from ('c') to ('e') partition by list (c);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted5_a partition of mlparted5_ab for values in ('a');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mlparted5_b (d int, b int, c text, a int);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

alter table mlparted5_ab attach partition mlparted5_b for values in ('b');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

truncate mlparted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mlparted values (1, 2, 'a', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mlparted values (1, 40, 'a', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:
  -- goes to mlparted5_a
insert into mlparted values (1, 45, 'b', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:
  -- goes to mlparted5_b
insert into mlparted values (1, 45, 'c', 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- goes to mlparted5_cd, fails
insert into mlparted values (1, 45, 'f', 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- goes to mlparted5, fails
select tableoid::regclass, * from mlparted order by a, b, c, d;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted drop d;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

truncate mlparted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- Remove the before last attribute.
alter table mlparted add e int, add d int;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted drop e;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mlparted values (1, 2, 'a', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mlparted values (1, 40, 'a', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:
  -- goes to mlparted5_a
insert into mlparted values (1, 45, 'b', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:
  -- goes to mlparted5_b
insert into mlparted values (1, 45, 'c', 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- goes to mlparted5_cd, fails
insert into mlparted values (1, 45, 'f', 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- goes to mlparted5, fails
select tableoid::regclass, * from mlparted order by a, b, c, d;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table mlparted drop d;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop table mlparted5;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check that message shown after failure to find a partition shows the
-- appropriate key description (or none) in various situations
create table key_desc (a int, b int) partition by list ((a+0));
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table key_desc_1 partition of key_desc for values in (1) partition by range (b);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


create user regress_insert_other_user;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

grant select (a) on key_desc_1 to regress_insert_other_user;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

grant insert on key_desc to regress_insert_other_user;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


set role regress_insert_other_user;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- no key description is shown
insert into key_desc values (1, 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


reset role;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

grant select (b) on key_desc_1 to regress_insert_other_user;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

set role regress_insert_other_user;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- key description (b)=(1) is now shown
insert into key_desc values (1, 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- key description is not shown if key contains expression
insert into key_desc values (2, 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

reset role;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

revoke all on key_desc from regress_insert_other_user;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

revoke all on key_desc_1 from regress_insert_other_user;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop role regress_insert_other_user;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

drop table key_desc, key_desc_1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- test minvalue/maxvalue restrictions
create table mcrparted (a int, b int, c int) partition by range (a, abs(b), c);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted0 partition of mcrparted for values from (minvalue, 0, 0) to (1, maxvalue, maxvalue);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

create table mcrparted2 partition of mcrparted for values from (10, 6, minvalue) to (10, maxvalue, minvalue);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

create table mcrparted4 partition of mcrparted for values from (21, minvalue, 0) to (30, 20, minvalue);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- check multi-column range partitioning expression enforces the same
-- constraint as what tuple-routing would determine it to be
create table mcrparted0 partition of mcrparted for values from (minvalue, minvalue, minvalue) to (1, maxvalue, maxvalue);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted1 partition of mcrparted for values from (2, 1, minvalue) to (10, 5, 10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted2 partition of mcrparted for values from (10, 6, minvalue) to (10, maxvalue, maxvalue);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted3 partition of mcrparted for values from (11, 1, 1) to (20, 10, 10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted4 partition of mcrparted for values from (21, minvalue, minvalue) to (30, 20, maxvalue);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted5 partition of mcrparted for values from (30, 21, 20) to (maxvalue, maxvalue, maxvalue);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- null not allowed in range partition
insert into mcrparted values (null, null, null);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- routed to mcrparted0
insert into mcrparted values (0, 1, 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mcrparted0 values (0, 1, 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- routed to mcparted1
insert into mcrparted values (9, 1000, 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mcrparted1 values (9, 1000, 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mcrparted values (10, 5, -1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mcrparted1 values (10, 5, -1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mcrparted values (2, 1, 0);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mcrparted1 values (2, 1, 0);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- routed to mcparted2
insert into mcrparted values (10, 6, 1000);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mcrparted2 values (10, 6, 1000);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mcrparted values (10, 1000, 1000);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mcrparted2 values (10, 1000, 1000);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- no partition exists, nor does mcrparted3 accept it
insert into mcrparted values (11, 1, -1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into mcrparted3 values (11, 1, -1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- routed to mcrparted5
insert into mcrparted values (30, 21, 20);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mcrparted5 values (30, 21, 20);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into mcrparted4 values (30, 21, 20);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
	-- error

-- check rows
select tableoid::regclass::text, * from mcrparted order by 1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- cleanup
drop table mcrparted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check that a BR constraint can/* REPLACED */ ''t make partition contain violating rows
create table brtrigpartcon (a int, b text) partition by list (a);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table brtrigpartcon1 partition of brtrigpartcon for values in (1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create or replace function brtrigpartcon1trigf() returns trigger as $$begin new.a := 2; return new; end$$ language plpgsql;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create trigger brtrigpartcon1trig before insert on brtrigpartcon1 for each row execute procedure brtrigpartcon1trigf();
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into brtrigpartcon values (1, 'hi there');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

insert into brtrigpartcon1 values (1, 'hi there');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- check that the message shows the appropriate column description in a
-- situation where the partitioned table is not the primary ModifyTable node
create table inserttest3 (f1 text default 'foo', f2 text default 'bar', f3 int);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

create role regress_coldesc_role;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

grant insert on inserttest3 to regress_coldesc_role;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

grant insert on brtrigpartcon to regress_coldesc_role;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

revoke select on brtrigpartcon from regress_coldesc_role;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

set role regress_coldesc_role;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

with result as (insert into brtrigpartcon values (1, 'hi there') returning 1)
  insert into inserttest3 (f3) select * from result;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

reset role;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- cleanup
revoke all on inserttest3 from regress_coldesc_role;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

revoke all on brtrigpartcon from regress_coldesc_role;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop role regress_coldesc_role;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

drop table inserttest3;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

drop table brtrigpartcon;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop function brtrigpartcon1trigf();
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check that /* REPLACED */ ''do nothing/* REPLACED */ '' BR triggers work with tuple-routing
create table donothingbrtrig_test (a int, b text) partition by list (a);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table donothingbrtrig_test1 (b text, a int);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

create table donothingbrtrig_test2 (c text, b text, a int);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

alter table donothingbrtrig_test2 drop column c;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

create or replace function donothingbrtrig_func() returns trigger as $$begin raise notice 'b: %', new.b; return NULL; end$$ language plpgsql;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create trigger donothingbrtrig1 before insert on donothingbrtrig_test1 for each row execute procedure donothingbrtrig_func();
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create trigger donothingbrtrig2 before insert on donothingbrtrig_test2 for each row execute procedure donothingbrtrig_func();
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table donothingbrtrig_test attach partition donothingbrtrig_test1 for values in (1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

alter table donothingbrtrig_test attach partition donothingbrtrig_test2 for values in (2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into donothingbrtrig_test values (1, 'foo'), (2, 'bar');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

copy donothingbrtrig_test from stdout;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

1	baz
2	qux
-- \.
select tableoid::regclass, * from donothingbrtrig_test;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- cleanup
drop table donothingbrtrig_test;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop function donothingbrtrig_func();
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check multi-column range partitioning with minvalue/maxvalue constraints
create table mcrparted (a text, b int) partition by range(a, b);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted1_lt_b partition of mcrparted for values from (minvalue, minvalue) to ('b', minvalue);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted2_b partition of mcrparted for values from ('b', minvalue) to ('c', minvalue);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted3_c_to_common partition of mcrparted for values from ('c', minvalue) to ('common', minvalue);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted4_common_lt_0 partition of mcrparted for values from ('common', minvalue) to ('common', 0);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted5_common_0_to_10 partition of mcrparted for values from ('common', 0) to ('common', 10);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted6_common_ge_10 partition of mcrparted for values from ('common', 10) to ('common', maxvalue);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted7_gt_common_lt_d partition of mcrparted for values from ('common', maxvalue) to ('d', minvalue);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table mcrparted8_ge_d partition of mcrparted for values from ('d', minvalue) to (maxvalue, maxvalue);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- \d+ mcrparted
-- \d+ mcrparted1_lt_b
-- \d+ mcrparted2_b
-- \d+ mcrparted3_c_to_common
-- \d+ mcrparted4_common_lt_0
-- \d+ mcrparted5_common_0_to_10
-- \d+ mcrparted6_common_ge_10
-- \d+ mcrparted7_gt_common_lt_d
-- \d+ mcrparted8_ge_d

insert into mcrparted values ('aaa', 0), ('b', 0), ('bz', 10), ('c', -10),
    ('comm', -10), ('common', -10), ('common', 0), ('common', 10),
    ('commons', 0), ('d', -10), ('e', 0);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select tableoid::regclass, * from mcrparted order by a, b;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop table mcrparted;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check that wholerow vars in the RETURNING list work with partitioned tables
create table returningwrtest (a int) partition by list (a);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table returningwrtest1 partition of returningwrtest for values in (1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into returningwrtest values (1) returning returningwrtest;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check also that the wholerow vars in RETURNING list are converted as needed
alter table returningwrtest add b text;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

create table returningwrtest2 (b text, c int, a int);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

alter table returningwrtest2 drop c;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

alter table returningwrtest attach partition returningwrtest2 for values in (2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into returningwrtest values (2, 'foo') returning returningwrtest;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

drop table returningwrtest;
RESULT: [duckdb: ERROR, mysql: ERROR]


=========================================
Summary for test case insert/test.sql of postgres
=========================================

=================
Results for duckdb
SAME: 95 queries, which is 24.55%
DIFFERENT: 3 queries, which is 0.78%
ERROR: 289 queries, which is 74.68%

=================
Results for mysql
SAME: 84 queries, which is 21.71%
DIFFERENT: 0 queries, which is 0.00%
ERROR: 303 queries, which is 78.29%
