Guest DBMS identified: postgres
-----------
QUERY:
--
-- INT8
-- Test int8 64-bit integers.
--

-- int8_tbl was already created and filled in test_setup.sql.
-- Here we just try to insert bad values.

INSERT INTO INT8_TBL(q1) VALUES ('      ');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO INT8_TBL(q1) VALUES ('xxx');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO INT8_TBL(q1) VALUES ('3908203590239580293850293850329485');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO INT8_TBL(q1) VALUES ('-1204982019841029840928340329840934');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO INT8_TBL(q1) VALUES ('- 123');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO INT8_TBL(q1) VALUES ('  345     5');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO INT8_TBL(q1) VALUES ('');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT * FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Also try it with non-error-throwing API
SELECT pg_input_is_valid('34', 'int8');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('asdf', 'int8');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('10000000000000000000', 'int8');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('10000000000000000000', 'int8');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- int8/int8 cmp
SELECT * FROM INT8_TBL WHERE q2 = 4567890123456789;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 <> 4567890123456789;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 < 4567890123456789;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 > 4567890123456789;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 <= 4567890123456789;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 >= 4567890123456789;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- int8/int4 cmp
SELECT * FROM INT8_TBL WHERE q2 = 456;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 <> 456;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 < 456;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 > 456;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 <= 456;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 >= 456;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- int4/int8 cmp
SELECT * FROM INT8_TBL WHERE 123 = q1;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE 123 <> q1;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE 123 < q1;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE 123 > q1;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE 123 <= q1;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE 123 >= q1;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- int8/int2 cmp
SELECT * FROM INT8_TBL WHERE q2 = '456'::int2;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 <> '456'::int2;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 < '456'::int2;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 > '456'::int2;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 <= '456'::int2;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE q2 >= '456'::int2;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- int2/int8 cmp
SELECT * FROM INT8_TBL WHERE '123'::int2 = q1;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE '123'::int2 <> q1;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE '123'::int2 < q1;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE '123'::int2 > q1;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE '123'::int2 <= q1;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT * FROM INT8_TBL WHERE '123'::int2 >= q1;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:



SELECT q1 AS plus, -q1 AS minus FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT q1, q2, q1 + q2 AS plus FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT q1, q2, q1 - q2 AS minus FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT q1, q2, q1 * q2 AS multiply FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT q1, q2, q1 * q2 AS multiply FROM INT8_TBL
 WHERE q1 < 1000 or (q2 > 0 and q2 < 1000);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT q1, q2, q1 / q2 AS divide, q1 % q2 AS mod FROM INT8_TBL;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


SELECT q1, float8(q1) FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT q2, float8(q2) FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT 37 + q1 AS plus4 FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 37 - q1 AS minus4 FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 2 * q1 AS "twice int4" FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT q1 * 2 AS "twice int4" FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- int8 op int4
SELECT q1 + 42::int4 AS "8plus4", q1 - 42::int4 AS "8minus4", q1 * 42::int4 AS "8mul4", q1 / 42::int4 AS "8div4" FROM INT8_TBL;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

-- int4 op int8
SELECT 246::int4 + q1 AS "4plus8", 246::int4 - q1 AS "4minus8", 246::int4 * q1 AS "4mul8", 246::int4 / q1 AS "4div8" FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- int8 op int2
SELECT q1 + 42::int2 AS "8plus2", q1 - 42::int2 AS "8minus2", q1 * 42::int2 AS "8mul2", q1 / 42::int2 AS "8div2" FROM INT8_TBL;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

-- int2 op int8
SELECT 246::int2 + q1 AS "2plus8", 246::int2 - q1 AS "2minus8", 246::int2 * q1 AS "2mul8", 246::int2 / q1 AS "2div8" FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT q2, abs(q2) FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT min(q1), min(q2) FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT max(q1), max(q2) FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:



-- TO_CHAR()
--
SELECT to_char(q1, '9G999G999G999G999G999'), to_char(q2, '9,999,999,999,999,999')
	FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT to_char(q1, '9G999G999G999G999G999D999G999'), to_char(q2, '9,999,999,999,999,999.999,999')
	FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT to_char( (q1 * -1), '9999999999999999PR'), to_char( (q2 * -1), '9999999999999999.999PR')
	FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT to_char( (q1 * -1), '9999999999999999S'), to_char( (q2 * -1), 'S9999999999999999')
	FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT to_char(q2, 'MI9999999999999999')     FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT to_char(q2, 'FMS9999999999999999')    FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT to_char(q2, 'FM9999999999999999THPR') FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT to_char(q2, 'SG9999999999999999th')   FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT to_char(q2, '0999999999999999')       FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT to_char(q2, 'S0999999999999999')      FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT to_char(q2, 'FM0999999999999999')     FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT to_char(q2, 'FM9999999999999999.000') FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT to_char(q2, 'L9999999999999999.000')  FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT to_char(q2, 'FM9999999999999999.999') FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT to_char(q2, 'S 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 . 9 9 9') FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT to_char(q2, E'99999 "text" 9999 "9999" 999 "\\"text between quote marks\\"" 9999') FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT to_char(q2, '999999SG9999999999')     FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check min/max values and overflow behavior

select '-9223372036854775808'::int8;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

select '-9223372036854775809'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select '9223372036854775807'::int8;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

select '9223372036854775808'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


select -('-9223372036854775807'::int8);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

select -('-9223372036854775808'::int8);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select 0::int8 - '-9223372036854775808'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


select '9223372036854775800'::int8 + '9223372036854775800'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select '-9223372036854775800'::int8 + '-9223372036854775800'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


select '9223372036854775800'::int8 - '-9223372036854775800'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select '-9223372036854775800'::int8 - '9223372036854775800'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


select '9223372036854775800'::int8 * '9223372036854775800'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


select '9223372036854775800'::int8 / '0'::int8;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

select '9223372036854775800'::int8 % '0'::int8;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:


select abs('-9223372036854775808'::int8);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


select '9223372036854775800'::int8 + '100'::int4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select '-9223372036854775800'::int8 - '100'::int4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select '9223372036854775800'::int8 * '100'::int4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


select '100'::int4 + '9223372036854775800'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select '-100'::int4 - '9223372036854775800'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select '100'::int4 * '9223372036854775800'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


select '9223372036854775800'::int8 + '100'::int2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select '-9223372036854775800'::int8 - '100'::int2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select '9223372036854775800'::int8 * '100'::int2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select '-9223372036854775808'::int8 / '0'::int2;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:


select '100'::int2 + '9223372036854775800'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select '-100'::int2 - '9223372036854775800'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select '100'::int2 * '9223372036854775800'::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

select '100'::int2 / '0'::int8;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:


SELECT CAST(q1 AS int4) FROM int8_tbl WHERE q2 = 456;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT CAST(q1 AS int4) FROM int8_tbl WHERE q2 <> 456;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT CAST(q1 AS int2) FROM int8_tbl WHERE q2 = 456;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT CAST(q1 AS int2) FROM int8_tbl WHERE q2 <> 456;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT CAST('42'::int2 AS int8), CAST('-37'::int2 AS int8);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT CAST(q1 AS float4), CAST(q2 AS float8) FROM INT8_TBL;
RESULT: [duckdb: DIFFERENT, mysql: SAME]

-----------
QUERY:

SELECT CAST('36854775807.0'::float4 AS int8);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT CAST('922337203685477580700.0'::float8 AS int8);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT CAST(q1 AS oid) FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT oid::int8 FROM pg_class WHERE relname = 'pg_class';
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:



-- bit operations

SELECT q1, q2, q1 & q2 AS "and", q1 | q2 AS "or", q1 # q2 AS "xor", ~q1 AS "not" FROM INT8_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT q1, q1 << 2 AS "shl", q1 >> 3 AS "shr" FROM INT8_TBL;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:



-- generate_series

SELECT * FROM generate_series('+4567890123456789'::int8, '+4567890123456799'::int8);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT * FROM generate_series('+4567890123456789'::int8, '+4567890123456799'::int8, 0);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT * FROM generate_series('+4567890123456789'::int8, '+4567890123456799'::int8, 2);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- corner case
SELECT (-1::int8<<63)::text;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT ((-1::int8<<63)+1)::text;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check sane handling of INT64_MIN overflow cases
SELECT (-9223372036854775808)::int8 * (-1)::int8;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT (-9223372036854775808)::int8 / (-1)::int8;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT (-9223372036854775808)::int8 % (-1)::int8;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT (-9223372036854775808)::int8 * (-1)::int4;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT (-9223372036854775808)::int8 / (-1)::int4;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT (-9223372036854775808)::int8 % (-1)::int4;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT (-9223372036854775808)::int8 * (-1)::int2;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT (-9223372036854775808)::int8 / (-1)::int2;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT (-9223372036854775808)::int8 % (-1)::int2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- check rounding when casting from float
SELECT x, x::int8 AS int8_value
FROM (VALUES (-2.5::float8),
             (-1.5::float8),
             (-0.5::float8),
             (0.0::float8),
             (0.5::float8),
             (1.5::float8),
             (2.5::float8)) t(x);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- check rounding when casting from numeric
SELECT x, x::int8 AS int8_value
FROM (VALUES (-2.5::numeric),
             (-1.5::numeric),
             (-0.5::numeric),
             (0.0::numeric),
             (0.5::numeric),
             (1.5::numeric),
             (2.5::numeric)) t(x);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- test gcd()
SELECT a, b, gcd(a, b), gcd(a, -b), gcd(b, a), gcd(-b, a)
FROM (VALUES (0::int8, 0::int8),
             (0::int8, 29893644334::int8),
             (288484263558::int8, 29893644334::int8),
             (-288484263558::int8, 29893644334::int8),
             ((-9223372036854775808)::int8, 1::int8),
             ((-9223372036854775808)::int8, 9223372036854775807::int8),
             ((-9223372036854775808)::int8, 4611686018427387904::int8)) AS v(a, b);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT gcd((-9223372036854775808)::int8, 0::int8);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 -- overflow
SELECT gcd((-9223372036854775808)::int8, (-9223372036854775808)::int8);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 -- overflow

-- test lcm()
SELECT a, b, lcm(a, b), lcm(a, -b), lcm(b, a), lcm(-b, a)
FROM (VALUES (0::int8, 0::int8),
             (0::int8, 29893644334::int8),
             (29893644334::int8, 29893644334::int8),
             (288484263558::int8, 29893644334::int8),
             (-288484263558::int8, 29893644334::int8),
             ((-9223372036854775808)::int8, 0::int8)) AS v(a, b);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT lcm((-9223372036854775808)::int8, 1::int8);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 -- overflow
SELECT lcm(9223372036854775807::int8, 9223372036854775806::int8);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 -- overflow


-- non-decimal literals

SELECT int8 '0b100101';
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT int8 '0o273';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT int8 '0x42F';
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT int8 '0b';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT int8 '0o';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT int8 '0x';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- cases near overflow
SELECT int8 '0b111111111111111111111111111111111111111111111111111111111111111';
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT int8 '0b1000000000000000000000000000000000000000000000000000000000000000';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT int8 '0o777777777777777777777';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT int8 '0o1000000000000000000000';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT int8 '0x7FFFFFFFFFFFFFFF';
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT int8 '0x8000000000000000';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT int8 '-0b1000000000000000000000000000000000000000000000000000000000000000';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT int8 '-0b1000000000000000000000000000000000000000000000000000000000000001';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT int8 '-0o1000000000000000000000';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT int8 '-0o1000000000000000000001';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT int8 '-0x8000000000000000';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT int8 '-0x8000000000000001';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:



-- underscores

SELECT int8 '1_000_000';
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT int8 '1_2_3';
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT int8 '0x1EEE_FFFF';
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT int8 '0o2_73';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT int8 '0b_10_0101';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- error cases
SELECT int8 '_100';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT int8 '100_';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT int8 '100__000';
RESULT: [duckdb: SAME, mysql: SAME]
=========================================
Summary for test case int8/test.sql of postgres
=========================================

=================
Results for duckdb
SAME: 118 queries, which is 70.66%
DIFFERENT: 5 queries, which is 2.99%
ERROR: 44 queries, which is 26.35%

=================
Results for mysql
SAME: 93 queries, which is 55.69%
DIFFERENT: 0 queries, which is 0.00%
ERROR: 74 queries, which is 44.31%
