
-----------
QUERY:
--
-- encoding-sensitive tests for json and jsonb
--

-- We provide expected-results files for UTF8 (json_encoding.out)
-- and for SQL_ASCII (json_encoding_1.out).  Skip otherwise.
SELECT getdatabaseencoding() NOT IN ('UTF8', 'SQL_ASCII')
       AS skip_test \gset
\if :skip_test
\quit
\endif

SELECT getdatabaseencoding();
RESULT:
	ERROR - syntax error at or near "\"
LINE 8:        AS skip_test \gset
                            ^


-----------
QUERY:
           -- just to label the results files

-- first json

-- basic unicode input
SELECT '"\u"'::json;
RESULT:
	ERROR - invalid input syntax for type json
LINE 6: SELECT '"\u"'::json;
               ^
DETAIL:  "\u" must be followed by four hexadecimal digits.
CONTEXT:  JSON data, line 1: "\u"


-----------
QUERY:
			-- ERROR, incomplete escape
SELECT '"\u00"'::json;
RESULT:
	ERROR - invalid input syntax for type json
LINE 2: SELECT '"\u00"'::json;
               ^
DETAIL:  "\u" must be followed by four hexadecimal digits.
CONTEXT:  JSON data, line 1: "\u00"


-----------
QUERY:
			-- ERROR, incomplete escape
SELECT '"\u000g"'::json;
RESULT:
	ERROR - invalid input syntax for type json
LINE 2: SELECT '"\u000g"'::json;
               ^
DETAIL:  "\u" must be followed by four hexadecimal digits.
CONTEXT:  JSON data, line 1: "\u000g...


-----------
QUERY:
		-- ERROR, g is not a hex digit
SELECT '"\u0000"'::json;
RESULT:
	[('\x00',)]

-----------
QUERY:
		-- OK, legal escape
SELECT '"\uaBcD"'::json;
RESULT:
	[('ꯍ',)]

-----------
QUERY:
		-- OK, uppercase and lower case both OK

-- handling of unicode surrogate pairs

select json '{ "a":  "\ud83d\ude04\ud83d\udc36" }' -> 'a' as correct_in_utf8;
RESULT:
	[('😄🐶',)]

-----------
QUERY:

select json '{ "a":  "\ud83d\ud83d" }' -> 'a';
RESULT:
	ERROR - invalid input syntax for type json
DETAIL:  Unicode high surrogate must not follow a high surrogate.
CONTEXT:  JSON data, line 1: { "a":  "\ud83d\ud83d...


-----------
QUERY:
 -- 2 high surrogates in a row
select json '{ "a":  "\ude04\ud83d" }' -> 'a';
RESULT:
	ERROR - invalid input syntax for type json
DETAIL:  Unicode low surrogate must follow a high surrogate.
CONTEXT:  JSON data, line 1: { "a":  "\ude04...


-----------
QUERY:
 -- surrogates in wrong order
select json '{ "a":  "\ud83dX" }' -> 'a';
RESULT:
	ERROR - invalid input syntax for type json
DETAIL:  Unicode low surrogate must follow a high surrogate.
CONTEXT:  JSON data, line 1: { "a":  "\ud83dX...


-----------
QUERY:
 -- orphan high surrogate
select json '{ "a":  "\ude04X" }' -> 'a';
RESULT:
	ERROR - invalid input syntax for type json
DETAIL:  Unicode low surrogate must follow a high surrogate.
CONTEXT:  JSON data, line 1: { "a":  "\ude04...


-----------
QUERY:
 -- orphan low surrogate

--handling of simple unicode escapes

select json '{ "a":  "the Copyright \u00a9 sign" }' as correct_in_utf8;
RESULT:
	[({'a': 'the Copyright © sign'},)]

-----------
QUERY:

select json '{ "a":  "dollar \u0024 character" }' as correct_everywhere;
RESULT:
	[({'a': 'dollar $ character'},)]

-----------
QUERY:

select json '{ "a":  "dollar \\u0024 character" }' as not_an_escape;
RESULT:
	[({'a': 'dollar \\u0024 character'},)]

-----------
QUERY:

select json '{ "a":  "null \u0000 escape" }' as not_unescaped;
RESULT:
	[({'a': 'null \x00 escape'},)]

-----------
QUERY:

select json '{ "a":  "null \\u0000 escape" }' as not_an_escape;
RESULT:
	[({'a': 'null \\u0000 escape'},)]

-----------
QUERY:


select json '{ "a":  "the Copyright \u00a9 sign" }' ->> 'a' as correct_in_utf8;
RESULT:
	[('the Copyright © sign',)]

-----------
QUERY:

select json '{ "a":  "dollar \u0024 character" }' ->> 'a' as correct_everywhere;
RESULT:
	[('dollar $ character',)]

-----------
QUERY:

select json '{ "a":  "dollar \\u0024 character" }' ->> 'a' as not_an_escape;
RESULT:
	[('dollar \\u0024 character',)]

-----------
QUERY:

select json '{ "a":  "null \u0000 escape" }' ->> 'a' as fails;
RESULT:
	ERROR - unsupported Unicode escape sequence
DETAIL:  \u0000 cannot be converted to text.
CONTEXT:  JSON data, line 1: { "a":  "null \u0000...


-----------
QUERY:

select json '{ "a":  "null \\u0000 escape" }' ->> 'a' as not_an_escape;
RESULT:
	[('null \\u0000 escape',)]

-----------
QUERY:


-- then jsonb

-- basic unicode input
SELECT '"\u"'::jsonb;
RESULT:
	ERROR - invalid input syntax for type json
LINE 6: SELECT '"\u"'::jsonb;
               ^
DETAIL:  "\u" must be followed by four hexadecimal digits.
CONTEXT:  JSON data, line 1: "\u"


-----------
QUERY:
			-- ERROR, incomplete escape
SELECT '"\u00"'::jsonb;
RESULT:
	ERROR - invalid input syntax for type json
LINE 2: SELECT '"\u00"'::jsonb;
               ^
DETAIL:  "\u" must be followed by four hexadecimal digits.
CONTEXT:  JSON data, line 1: "\u00"


-----------
QUERY:
			-- ERROR, incomplete escape
SELECT '"\u000g"'::jsonb;
RESULT:
	ERROR - invalid input syntax for type json
LINE 2: SELECT '"\u000g"'::jsonb;
               ^
DETAIL:  "\u" must be followed by four hexadecimal digits.
CONTEXT:  JSON data, line 1: "\u000g...


-----------
QUERY:
		-- ERROR, g is not a hex digit
SELECT '"\u0045"'::jsonb;
RESULT:
	[('E',)]

-----------
QUERY:
		-- OK, legal escape
SELECT '"\u0000"'::jsonb;
RESULT:
	ERROR - unsupported Unicode escape sequence
LINE 2: SELECT '"\u0000"'::jsonb;
               ^
DETAIL:  \u0000 cannot be converted to text.
CONTEXT:  JSON data, line 1: "\u0000...


-----------
QUERY:
		-- ERROR, we don/* REPLACED */''t support U+0000
-- use octet_length here so we don/* REPLACED */''t get an odd unicode char in the
-- output
SELECT octet_length('"\uaBcD"'::jsonb::text);
RESULT:
	[(5,)]

-----------
QUERY:
 -- OK, uppercase and lower case both OK

-- handling of unicode surrogate pairs

SELECT octet_length((jsonb '{ "a":  "\ud83d\ude04\ud83d\udc36" }' -> 'a')::text) AS correct_in_utf8;
RESULT:
	[(10,)]

-----------
QUERY:

SELECT jsonb '{ "a":  "\ud83d\ud83d" }' -> 'a';
RESULT:
	ERROR - invalid input syntax for type json
LINE 2: SELECT jsonb '{ "a":  "\ud83d\ud83d" }' -> 'a';
                     ^
DETAIL:  Unicode high surrogate must not follow a high surrogate.
CONTEXT:  JSON data, line 1: { "a":  "\ud83d\ud83d...


-----------
QUERY:
 -- 2 high surrogates in a row
SELECT jsonb '{ "a":  "\ude04\ud83d" }' -> 'a';
RESULT:
	ERROR - invalid input syntax for type json
LINE 2: SELECT jsonb '{ "a":  "\ude04\ud83d" }' -> 'a';
                     ^
DETAIL:  Unicode low surrogate must follow a high surrogate.
CONTEXT:  JSON data, line 1: { "a":  "\ude04...


-----------
QUERY:
 -- surrogates in wrong order
SELECT jsonb '{ "a":  "\ud83dX" }' -> 'a';
RESULT:
	ERROR - invalid input syntax for type json
LINE 2: SELECT jsonb '{ "a":  "\ud83dX" }' -> 'a';
                     ^
DETAIL:  Unicode low surrogate must follow a high surrogate.
CONTEXT:  JSON data, line 1: { "a":  "\ud83dX...


-----------
QUERY:
 -- orphan high surrogate
SELECT jsonb '{ "a":  "\ude04X" }' -> 'a';
RESULT:
	ERROR - invalid input syntax for type json
LINE 2: SELECT jsonb '{ "a":  "\ude04X" }' -> 'a';
                     ^
DETAIL:  Unicode low surrogate must follow a high surrogate.
CONTEXT:  JSON data, line 1: { "a":  "\ude04...


-----------
QUERY:
 -- orphan low surrogate

-- handling of simple unicode escapes

SELECT jsonb '{ "a":  "the Copyright \u00a9 sign" }' as correct_in_utf8;
RESULT:
	[({'a': 'the Copyright © sign'},)]

-----------
QUERY:

SELECT jsonb '{ "a":  "dollar \u0024 character" }' as correct_everywhere;
RESULT:
	[({'a': 'dollar $ character'},)]

-----------
QUERY:

SELECT jsonb '{ "a":  "dollar \\u0024 character" }' as not_an_escape;
RESULT:
	[({'a': 'dollar \\u0024 character'},)]

-----------
QUERY:

SELECT jsonb '{ "a":  "null \u0000 escape" }' as fails;
RESULT:
	ERROR - unsupported Unicode escape sequence
LINE 2: SELECT jsonb '{ "a":  "null \u0000 escape" }' as fails;
                     ^
DETAIL:  \u0000 cannot be converted to text.
CONTEXT:  JSON data, line 1: { "a":  "null \u0000...


-----------
QUERY:

SELECT jsonb '{ "a":  "null \\u0000 escape" }' as not_an_escape;
RESULT:
	[({'a': 'null \\u0000 escape'},)]

-----------
QUERY:


SELECT jsonb '{ "a":  "the Copyright \u00a9 sign" }' ->> 'a' as correct_in_utf8;
RESULT:
	[('the Copyright © sign',)]

-----------
QUERY:

SELECT jsonb '{ "a":  "dollar \u0024 character" }' ->> 'a' as correct_everywhere;
RESULT:
	[('dollar $ character',)]

-----------
QUERY:

SELECT jsonb '{ "a":  "dollar \\u0024 character" }' ->> 'a' as not_an_escape;
RESULT:
	[('dollar \\u0024 character',)]

-----------
QUERY:

SELECT jsonb '{ "a":  "null \u0000 escape" }' ->> 'a' as fails;
RESULT:
	ERROR - unsupported Unicode escape sequence
LINE 2: SELECT jsonb '{ "a":  "null \u0000 escape" }' ->> 'a' as fai...
                     ^
DETAIL:  \u0000 cannot be converted to text.
CONTEXT:  JSON data, line 1: { "a":  "null \u0000...


-----------
QUERY:

SELECT jsonb '{ "a":  "null \\u0000 escape" }' ->> 'a' as not_an_escape;
RESULT:
	[('null \\u0000 escape',)]

-----------
QUERY:


-- soft error for input-time failure

select * from pg_input_error_info('{ "a":  "\ud83d\ude04\ud83d\udc36" }', 'jsonb');
RESULT:
	[(None, None, None, None)]
