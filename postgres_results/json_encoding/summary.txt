Guest DBMS identified: postgres
-----------
QUERY:
--
-- encoding-sensitive tests for json and jsonb
--

-- We provide expected-results files for UTF8 (json_encoding.out)
-- and for SQL_ASCII (json_encoding_1.out).  Skip otherwise.
SELECT getdatabaseencoding() NOT IN ('UTF8', 'SQL_ASCII')
       AS skip_test \gset
-- \if :skip_test
-- \quit
-- \endif

SELECT getdatabaseencoding();
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
           -- just to label the results files

-- first json

-- basic unicode input
SELECT '"\u"'::json;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
			-- ERROR, incomplete escape
SELECT '"\u00"'::json;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
			-- ERROR, incomplete escape
SELECT '"\u000g"'::json;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
		-- ERROR, g is not a hex digit
SELECT '"\u0000"'::json;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:
		-- OK, legal escape
SELECT '"\uaBcD"'::json;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:
		-- OK, uppercase and lower case both OK

-- handling of unicode surrogate pairs

select json '{ "a":  "\ud83d\ude04\ud83d\udc36" }' -> 'a' as correct_in_utf8;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

select json '{ "a":  "\ud83d\ud83d" }' -> 'a';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 -- 2 high surrogates in a row
select json '{ "a":  "\ude04\ud83d" }' -> 'a';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 -- surrogates in wrong order
select json '{ "a":  "\ud83dX" }' -> 'a';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 -- orphan high surrogate
select json '{ "a":  "\ude04X" }' -> 'a';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 -- orphan low surrogate

--handling of simple unicode escapes

select json '{ "a":  "the Copyright \u00a9 sign" }' as correct_in_utf8;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

select json '{ "a":  "dollar \u0024 character" }' as correct_everywhere;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

select json '{ "a":  "dollar \\u0024 character" }' as not_an_escape;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

select json '{ "a":  "null \u0000 escape" }' as not_unescaped;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

select json '{ "a":  "null \\u0000 escape" }' as not_an_escape;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


select json '{ "a":  "the Copyright \u00a9 sign" }' ->> 'a' as correct_in_utf8;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

select json '{ "a":  "dollar \u0024 character" }' ->> 'a' as correct_everywhere;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

select json '{ "a":  "dollar \\u0024 character" }' ->> 'a' as not_an_escape;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

select json '{ "a":  "null \u0000 escape" }' ->> 'a' as fails;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

select json '{ "a":  "null \\u0000 escape" }' ->> 'a' as not_an_escape;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- then jsonb

-- basic unicode input
SELECT '"\u"'::jsonb;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
			-- ERROR, incomplete escape
SELECT '"\u00"'::jsonb;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
			-- ERROR, incomplete escape
SELECT '"\u000g"'::jsonb;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
		-- ERROR, g is not a hex digit
SELECT '"\u0045"'::jsonb;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:
		-- OK, legal escape
SELECT '"\u0000"'::jsonb;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
		-- ERROR, we don/* REPLACED */ ''t support U+0000
-- use octet_length here so we don/* REPLACED */ ''t get an odd unicode char in the
-- output
SELECT octet_length('"\uaBcD"'::jsonb::text);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:
 -- OK, uppercase and lower case both OK

-- handling of unicode surrogate pairs

SELECT octet_length((jsonb '{ "a":  "\ud83d\ude04\ud83d\udc36" }' -> 'a')::text) AS correct_in_utf8;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT jsonb '{ "a":  "\ud83d\ud83d" }' -> 'a';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 -- 2 high surrogates in a row
SELECT jsonb '{ "a":  "\ude04\ud83d" }' -> 'a';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 -- surrogates in wrong order
SELECT jsonb '{ "a":  "\ud83dX" }' -> 'a';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 -- orphan high surrogate
SELECT jsonb '{ "a":  "\ude04X" }' -> 'a';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 -- orphan low surrogate

-- handling of simple unicode escapes

SELECT jsonb '{ "a":  "the Copyright \u00a9 sign" }' as correct_in_utf8;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT jsonb '{ "a":  "dollar \u0024 character" }' as correct_everywhere;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT jsonb '{ "a":  "dollar \\u0024 character" }' as not_an_escape;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT jsonb '{ "a":  "null \u0000 escape" }' as fails;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT jsonb '{ "a":  "null \\u0000 escape" }' as not_an_escape;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT jsonb '{ "a":  "the Copyright \u00a9 sign" }' ->> 'a' as correct_in_utf8;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT jsonb '{ "a":  "dollar \u0024 character" }' ->> 'a' as correct_everywhere;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT jsonb '{ "a":  "dollar \\u0024 character" }' ->> 'a' as not_an_escape;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT jsonb '{ "a":  "null \u0000 escape" }' ->> 'a' as fails;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT jsonb '{ "a":  "null \\u0000 escape" }' ->> 'a' as not_an_escape;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- soft error for input-time failure

select * from pg_input_error_info('{ "a":  "\ud83d\ude04\ud83d\udc36" }', 'jsonb');
RESULT: [duckdb: ERROR, mysql: ERROR]


=========================================
Summary for test case json_encoding/test.sql of postgres
=========================================

=================
Results for duckdb
SAME      :	22 queries	51.16%
DIFFERENT :	8 queries	18.60%
ERROR     :	13 queries	30.23%

=================
Results for mysql
SAME      :	19 queries	44.19%
DIFFERENT :	0 queries	0.00%
ERROR     :	24 queries	55.81%
Guest results are identical to expected results