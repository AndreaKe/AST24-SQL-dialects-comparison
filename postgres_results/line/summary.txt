Guest DBMS identified: postgres
-----------
QUERY:
--
-- LINE
-- Infinite lines
--

--DROP TABLE LINE_TBL /* REPLACED */ ,
CREATE TABLE LINE_TBL (s line);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


INSERT INTO LINE_TBL VALUES ('{0,-1,5}');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:
	-- A == 0
INSERT INTO LINE_TBL VALUES ('{1,0,5}');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:
	-- B == 0
INSERT INTO LINE_TBL VALUES ('{0,3,0}');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:
	-- A == C == 0
INSERT INTO LINE_TBL VALUES (' (0,0), (6,6)');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('10,-10 ,-5,-4');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('[-1e6,2e2,3e5, -4e1]');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


INSERT INTO LINE_TBL VALUES ('{3,NaN,5}');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('{NaN,NaN,NaN}');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- horizontal
INSERT INTO LINE_TBL VALUES ('[(1,3),(2,3)]');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- vertical
INSERT INTO LINE_TBL VALUES (line(point '(3,1)', point '(3,2)'));
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- bad values for parser testing
INSERT INTO LINE_TBL VALUES ('{}');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('{0');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('{0,0}');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('{0,0,1');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('{0,0,1}');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('{0,0,1} x');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('(3asdf,2 ,3,4r2)');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('[1,2,3, 4');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('[(,2),(3,4)]');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('[(1,2),(3,4)');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('[(1,2),(1,2)]');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


INSERT INTO LINE_TBL VALUES (line(point '(1,0)', point '(1,0)'));
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


select * from LINE_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select '{nan, 1, nan}'::line = '{nan, 1, nan}'::line as true,
	   '{nan, 1, nan}'::line = '{nan, 2, nan}'::line as false;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- test non-error-throwing API for some core types
SELECT pg_input_is_valid('{1, 1}', 'line');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('{1, 1}', 'line');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('{0, 0, 0}', 'line');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('{0, 0, 0}', 'line');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('{1, 1, a}', 'line');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('{1, 1, a}', 'line');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('{1, 1, 1e400}', 'line');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('{1, 1, 1e400}', 'line');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('(1, 1), (1, 1e400)', 'line');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('(1, 1), (1, 1e400)', 'line');
RESULT: [duckdb: ERROR, mysql: ERROR]
=========================================
Summary for test case line/test.sql of postgres
=========================================

=================
Results for duckdb
SAME: 12 queries, which is 34.29%
DIFFERENT: 0 queries, which is 0.00%
ERROR: 23 queries, which is 65.71%

=================
Results for mysql
SAME: 12 queries, which is 34.29%
DIFFERENT: 0 queries, which is 0.00%
ERROR: 23 queries, which is 65.71%
