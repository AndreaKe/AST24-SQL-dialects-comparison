
-----------
QUERY:
-- directory paths and dlsuffix are passed to us in environment variables
-- \getenv libdir PG_LIBDIR
-- \getenv dlsuffix PG_DLSUFFIX

-- \set regresslib /* REPLACED */ PG_LIBDIR '/regress' /* REPLACED */ PG_DLSUFFIX

--
-- num_nulls()
--

SELECT num_nonnulls(NULL);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nonnulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nonnulls('1');
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nonnulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nonnulls(NULL::text);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nonnulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nonnulls(NULL::text, NULL::int);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nonnulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nonnulls(1, 2, NULL::text, NULL::point, '', int8 '9', 1.0 / NULL);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nonnulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nonnulls(VARIADIC '{1,2,NULL,3}'::int[]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nonnulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nonnulls(VARIADIC '{"1","2","3","4"}'::text[]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nonnulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nonnulls(VARIADIC ARRAY(SELECT CASE WHEN i <> 40 THEN i END FROM generate_series(1, 100) i));
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nonnulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:


SELECT num_nulls(NULL);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nulls('1');
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nulls(NULL::text);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nulls(NULL::text, NULL::int);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nulls(1, 2, NULL::text, NULL::point, '', int8 '9', 1.0 / NULL);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nulls(VARIADIC '{1,2,NULL,3}'::int[]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nulls(VARIADIC '{"1","2","3","4"}'::text[]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nulls(VARIADIC ARRAY(SELECT CASE WHEN i <> 40 THEN i END FROM generate_series(1, 100) i));
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:


-- special cases
SELECT num_nonnulls(VARIADIC NULL::text[]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nonnulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nonnulls(VARIADIC '{}'::int[]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nonnulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nulls(VARIADIC NULL::text[]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nulls(VARIADIC '{}'::int[]);
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:


-- should fail, one or more arguments is required
SELECT num_nonnulls();
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nonnulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:

SELECT num_nulls();
RESULT:
	ERROR - Catalog Error: Scalar Function with name num_nulls does not exist!
Did you mean "enum_last"?

-----------
QUERY:


--
-- canonicalize_path()
--

CREATE FUNCTION test_canonicalize_path(text)
   RETURNS text
   AS /* REPLACED */ PG_LIBDIR '/regress' PG_DLSUFFIX
   LANGUAGE C STRICT IMMUTABLE;
RESULT:
	ERROR - Parser Error: syntax error at or near "RETURNS"

-----------
QUERY:


SELECT test_canonicalize_path('/');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('/./abc/def/');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('/./../abc/def');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('/./../../abc/def/');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('/abc/.././def/ghi');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('/abc/./../def/ghi//');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('/abc/def/../..');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('/abc/def/../../..');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('/abc/def/../../../../ghi/jkl');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('.');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('./');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('./abc/..');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('abc/../');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('abc/../def');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('..');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('../abc/def');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('../abc/..');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('../abc/../def');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('../abc/../../def/ghi');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('./abc/./def/.');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('./abc/././def/.');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:

SELECT test_canonicalize_path('./abc/./def/.././ghi/../../../jkl/mno');
RESULT:
	ERROR - Catalog Error: Scalar Function with name test_canonicalize_path does not exist!
Did you mean "list_concat"?

-----------
QUERY:


--
-- pg_log_backend_memory_contexts()
--
-- Memory contexts are logged and they are not returned to the function.
-- Furthermore, their contents can vary depending on the timing. However,
-- we can at least verify that the code doesn/* REPLACED */ ''t fail, and that the
-- permissions are set properly.
--

SELECT pg_log_backend_memory_contexts(pg_backend_pid());
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_log_backend_memory_contexts does not exist!
Did you mean "pg_get_expr"?

-----------
QUERY:


SELECT pg_log_backend_memory_contexts(pid) FROM pg_stat_activity
  WHERE backend_type = 'checkpointer';
RESULT:
	ERROR - Catalog Error: Table with name pg_stat_activity does not exist!
Did you mean "pg_attribute"?

-----------
QUERY:


CREATE ROLE regress_log_memory;
RESULT:
	ERROR - Parser Error: syntax error at or near "ROLE"

-----------
QUERY:


SELECT has_function_privilege('regress_log_memory',
  'pg_log_backend_memory_contexts(integer)', 'EXECUTE');
RESULT:
	ERROR - Binder Error: Macro function 'has_function_privilege(function, privilege)' requires 2 positional arguments, but 3 positional arguments were provided.

-----------
QUERY:
 -- no

GRANT EXECUTE ON FUNCTION pg_log_backend_memory_contexts(integer)
  TO regress_log_memory;
RESULT:
	ERROR - Parser Error: syntax error at or near "GRANT"

-----------
QUERY:


SELECT has_function_privilege('regress_log_memory',
  'pg_log_backend_memory_contexts(integer)', 'EXECUTE');
RESULT:
	ERROR - Binder Error: Macro function 'has_function_privilege(function, privilege)' requires 2 positional arguments, but 3 positional arguments were provided.

-----------
QUERY:
 -- yes

SET ROLE regress_log_memory;
RESULT:
	ERROR - Parser Error: syntax error at or near "regress_log_memory"

-----------
QUERY:

SELECT pg_log_backend_memory_contexts(pg_backend_pid());
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_log_backend_memory_contexts does not exist!
Did you mean "pg_get_expr"?

-----------
QUERY:

RESET ROLE;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "ROLE"

Did you mean: "threads", "Calendar", "home_directory", "errors_as_json", "profile_output"

-----------
QUERY:


REVOKE EXECUTE ON FUNCTION pg_log_backend_memory_contexts(integer)
  FROM regress_log_memory;
RESULT:
	ERROR - Parser Error: syntax error at or near "REVOKE"

-----------
QUERY:


DROP ROLE regress_log_memory;
RESULT:
	ERROR - Parser Error: syntax error at or near "ROLE"

-----------
QUERY:


--
-- Test some built-in SRFs
--
-- The outputs of these are variable, so we can/* REPLACED */ ''t just print their results
-- directly, but we can at least verify that the code doesn/* REPLACED */ ''t fail.
--
select setting as segsize
from pg_settings where name = 'wal_segment_size'
-- \gset

select count(*) > 0 as ok from pg_ls_waldir();
RESULT:
	ERROR - Parser Error: syntax error at or near "select"

-----------
QUERY:

-- Test ProjectSet as well as FunctionScan
select count(*) > 0 as ok from (select pg_ls_waldir()) ss;
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_ls_waldir does not exist!
Did you mean "list_mad"?

-----------
QUERY:

-- Test not-run-to-completion cases.
select * from pg_ls_waldir() limit 0;
RESULT:
	ERROR - Catalog Error: Table Function with name pg_ls_waldir does not exist!
Did you mean "glob"?

-----------
QUERY:

select count(*) > 0 as ok from (select * from pg_ls_waldir() limit 1) ss;
RESULT:
	ERROR - Catalog Error: Table Function with name pg_ls_waldir does not exist!
Did you mean "glob"?

-----------
QUERY:

select (w).size = :segsize as ok
from (select pg_ls_waldir() w) ss where length((w).name) = 24 limit 1;
RESULT:
	ERROR - Parser Error: syntax error at or near ":"

-----------
QUERY:


select count(*) >= 0 as ok from pg_ls_archive_statusdir();
RESULT:
	ERROR - Catalog Error: Table Function with name pg_ls_archive_statusdir does not exist!
Did you mean "parquet_scan"?

-----------
QUERY:


-- pg_read_file()
select length(pg_read_file('postmaster.pid')) > 20;
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_read_file does not exist!
Did you mean "prefix"?

-----------
QUERY:

select length(pg_read_file('postmaster.pid', 1, 20));
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_read_file does not exist!
Did you mean "prefix"?

-----------
QUERY:

-- Test missing_ok
select pg_read_file('does not exist');
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_read_file does not exist!
Did you mean "prefix"?

-----------
QUERY:
 -- error
select pg_read_file('does not exist', true) IS NULL;
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_read_file does not exist!
Did you mean "prefix"?

-----------
QUERY:
 -- ok
-- Test invalid argument
select pg_read_file('does not exist', 0, -1);
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_read_file does not exist!
Did you mean "prefix"?

-----------
QUERY:
 -- error
select pg_read_file('does not exist', 0, -1, true);
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_read_file does not exist!
Did you mean "prefix"?

-----------
QUERY:
 -- error

-- pg_read_binary_file()
select length(pg_read_binary_file('postmaster.pid')) > 20;
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_read_binary_file does not exist!
Did you mean "pg_has_role"?

-----------
QUERY:

select length(pg_read_binary_file('postmaster.pid', 1, 20));
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_read_binary_file does not exist!
Did you mean "pg_has_role"?

-----------
QUERY:

-- Test missing_ok
select pg_read_binary_file('does not exist');
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_read_binary_file does not exist!
Did you mean "pg_has_role"?

-----------
QUERY:
 -- error
select pg_read_binary_file('does not exist', true) IS NULL;
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_read_binary_file does not exist!
Did you mean "pg_has_role"?

-----------
QUERY:
 -- ok
-- Test invalid argument
select pg_read_binary_file('does not exist', 0, -1);
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_read_binary_file does not exist!
Did you mean "pg_has_role"?

-----------
QUERY:
 -- error
select pg_read_binary_file('does not exist', 0, -1, true);
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_read_binary_file does not exist!
Did you mean "pg_has_role"?

-----------
QUERY:
 -- error

-- pg_stat_file()
select size > 20, isdir from pg_stat_file('postmaster.pid');
RESULT:
	ERROR - Catalog Error: Table Function with name pg_stat_file does not exist!
Did you mean "glob"?

-----------
QUERY:


-- pg_ls_dir()
select * from (select pg_ls_dir('.') a) a where a = 'base' limit 1;
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_ls_dir does not exist!
Did you mean "pi"?

-----------
QUERY:

-- Test missing_ok (second argument)
select pg_ls_dir('does not exist', false, false);
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_ls_dir does not exist!
Did you mean "pi"?

-----------
QUERY:
 -- error
select pg_ls_dir('does not exist', true, false);
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_ls_dir does not exist!
Did you mean "pi"?

-----------
QUERY:
 -- ok
-- Test include_dot_dirs (third argument)
select count(*) = 1 as dot_found
  from pg_ls_dir('.', false, true) as ls where ls = '.';
RESULT:
	ERROR - Catalog Error: Table Function with name pg_ls_dir does not exist!
Did you mean "glob"?

-----------
QUERY:

select count(*) = 1 as dot_found
  from pg_ls_dir('.', false, false) as ls where ls = '.';
RESULT:
	ERROR - Catalog Error: Table Function with name pg_ls_dir does not exist!
Did you mean "glob"?

-----------
QUERY:


-- pg_timezone_names()
select * from (select (pg_timezone_names()).name) ptn where name='UTC' limit 1;
RESULT:
	ERROR - Binder Error: Function "pg_timezone_names" is a table function but it was used as a scalar function. This function has to be called in a FROM clause (similar to a table).

-----------
QUERY:


-- pg_tablespace_databases()
select count(*) > 0 from
  (select pg_tablespace_databases(oid) as pts from pg_tablespace
   where spcname = 'pg_default') pts
  join pg_database db on pts.pts = db.oid;
RESULT:
	ERROR - Catalog Error: Scalar Function with name pg_tablespace_databases does not exist!
Did you mean "current_database"?

-----------
QUERY:


--
-- Test replication slot directory functions
--
CREATE ROLE regress_slot_dir_funcs;
RESULT:
	ERROR - Parser Error: syntax error at or near "ROLE"

-----------
QUERY:

-- Not available by default.
SELECT has_function_privilege('regress_slot_dir_funcs',
  'pg_ls_logicalsnapdir()', 'EXECUTE');
RESULT:
	ERROR - Binder Error: Macro function 'has_function_privilege(function, privilege)' requires 2 positional arguments, but 3 positional arguments were provided.

-----------
QUERY:

SELECT has_function_privilege('regress_slot_dir_funcs',
  'pg_ls_logicalmapdir()', 'EXECUTE');
RESULT:
	ERROR - Binder Error: Macro function 'has_function_privilege(function, privilege)' requires 2 positional arguments, but 3 positional arguments were provided.

-----------
QUERY:

SELECT has_function_privilege('regress_slot_dir_funcs',
  'pg_ls_replslotdir(text)', 'EXECUTE');
RESULT:
	ERROR - Binder Error: Macro function 'has_function_privilege(function, privilege)' requires 2 positional arguments, but 3 positional arguments were provided.

-----------
QUERY:

GRANT pg_monitor TO regress_slot_dir_funcs;
RESULT:
	ERROR - Parser Error: syntax error at or near "GRANT"

-----------
QUERY:

-- Role is now part of pg_monitor, so these are available.
SELECT has_function_privilege('regress_slot_dir_funcs',
  'pg_ls_logicalsnapdir()', 'EXECUTE');
RESULT:
	ERROR - Binder Error: Macro function 'has_function_privilege(function, privilege)' requires 2 positional arguments, but 3 positional arguments were provided.

-----------
QUERY:

SELECT has_function_privilege('regress_slot_dir_funcs',
  'pg_ls_logicalmapdir()', 'EXECUTE');
RESULT:
	ERROR - Binder Error: Macro function 'has_function_privilege(function, privilege)' requires 2 positional arguments, but 3 positional arguments were provided.

-----------
QUERY:

SELECT has_function_privilege('regress_slot_dir_funcs',
  'pg_ls_replslotdir(text)', 'EXECUTE');
RESULT:
	ERROR - Binder Error: Macro function 'has_function_privilege(function, privilege)' requires 2 positional arguments, but 3 positional arguments were provided.

-----------
QUERY:

DROP ROLE regress_slot_dir_funcs;
RESULT:
	ERROR - Parser Error: syntax error at or near "ROLE"

-----------
QUERY:


--
-- Test adding a support function to a subject function
--

CREATE FUNCTION my_int_eq(int, int) RETURNS bool
  LANGUAGE internal STRICT IMMUTABLE PARALLEL SAFE
  AS $$int4eq$$;
RESULT:
	ERROR - Parser Error: syntax error at or near "RETURNS"

-----------
QUERY:


-- By default, planner does not think that/* REPLACED */ ''s selective
EXPLAIN (COSTS OFF)
SELECT * FROM tenk1 a JOIN tenk1 b ON a.unique1 = b.unique1
WHERE my_int_eq(a.unique2, 42);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: COSTS

-----------
QUERY:


-- With support function that knows it/* REPLACED */ ''s int4eq, we get a different plan
CREATE FUNCTION test_support_func(internal)
    RETURNS internal
    AS /* REPLACED */ PG_LIBDIR '/regress' PG_DLSUFFIX, 'test_support_func'
    LANGUAGE C STRICT;
RESULT:
	ERROR - Parser Error: syntax error at or near "RETURNS"

-----------
QUERY:


ALTER FUNCTION my_int_eq(int, int) SUPPORT test_support_func;
RESULT:
	ERROR - Parser Error: syntax error at or near "FUNCTION"

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT * FROM tenk1 a JOIN tenk1 b ON a.unique1 = b.unique1
WHERE my_int_eq(a.unique2, 42);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: COSTS

-----------
QUERY:


-- Also test non-default rowcount estimate
CREATE FUNCTION my_gen_series(int, int) RETURNS SETOF integer
  LANGUAGE internal STRICT IMMUTABLE PARALLEL SAFE
  AS $$generate_series_int4$$
  SUPPORT test_support_func;
RESULT:
	ERROR - Parser Error: syntax error at or near "RETURNS"

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT * FROM tenk1 a JOIN my_gen_series(1,1000) g ON a.unique1 = g;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: COSTS

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT * FROM tenk1 a JOIN my_gen_series(1,10) g ON a.unique1 = g;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: COSTS

-----------
QUERY:


-- Test functions for control data
SELECT count(*) > 0 AS ok FROM pg_control_checkpoint();
RESULT:
	ERROR - Catalog Error: Table Function with name pg_control_checkpoint does not exist!
Did you mean "checkpoint"?

-----------
QUERY:

SELECT count(*) > 0 AS ok FROM pg_control_init();
RESULT:
	ERROR - Catalog Error: Table Function with name pg_control_init does not exist!
Did you mean "checkpoint"?

-----------
QUERY:

SELECT count(*) > 0 AS ok FROM pg_control_recovery();
RESULT:
	ERROR - Catalog Error: Table Function with name pg_control_recovery does not exist!
Did you mean "glob"?

-----------
QUERY:

SELECT count(*) > 0 AS ok FROM pg_control_system();
RESULT:
	ERROR - Catalog Error: Table Function with name pg_control_system does not exist!
Did you mean "glob"?

-----------
QUERY:


-- pg_split_walfile_name, pg_walfile_name & pg_walfile_name_offset
SELECT * FROM pg_split_walfile_name(NULL);
RESULT:
	ERROR - Catalog Error: Table Function with name pg_split_walfile_name does not exist!
Did you mean "pg_timezone_names"?

-----------
QUERY:

SELECT * FROM pg_split_walfile_name('invalid');
RESULT:
	ERROR - Catalog Error: Table Function with name pg_split_walfile_name does not exist!
Did you mean "pg_timezone_names"?

-----------
QUERY:

SELECT segment_number > 0 AS ok_segment_number, timeline_id
  FROM pg_split_walfile_name('000000010000000100000000');
RESULT:
	ERROR - Catalog Error: Table Function with name pg_split_walfile_name does not exist!
Did you mean "pg_timezone_names"?

-----------
QUERY:

SELECT segment_number > 0 AS ok_segment_number, timeline_id
  FROM pg_split_walfile_name('ffffffFF00000001000000af');
RESULT:
	ERROR - Catalog Error: Table Function with name pg_split_walfile_name does not exist!
Did you mean "pg_timezone_names"?

-----------
QUERY:

SELECT setting::int8 AS segment_size
FROM pg_settings
WHERE name = 'wal_segment_size'
-- \gset
SELECT segment_number, file_offset
FROM pg_walfile_name_offset('0/0'::pg_lsn + :segment_size),
     pg_split_walfile_name(file_name);
RESULT:
	ERROR - Parser Error: syntax error at or near "SELECT"

-----------
QUERY:

SELECT segment_number, file_offset
FROM pg_walfile_name_offset('0/0'::pg_lsn + :segment_size + 1),
     pg_split_walfile_name(file_name);
RESULT:
	ERROR - Parser Error: syntax error at or near ":"

-----------
QUERY:

SELECT segment_number, file_offset = :segment_size - 1
FROM pg_walfile_name_offset('0/0'::pg_lsn + :segment_size - 1),
     pg_split_walfile_name(file_name);
RESULT:
	ERROR - Parser Error: syntax error at or near ":"

-----------
QUERY:


-- test stratnum support functions
SELECT gist_stratnum_identity(3::smallint);
RESULT:
	ERROR - Catalog Error: Scalar Function with name gist_stratnum_identity does not exist!
Did you mean "list_min"?

-----------
QUERY:

SELECT gist_stratnum_identity(18::smallint);
RESULT:
	ERROR - Catalog Error: Scalar Function with name gist_stratnum_identity does not exist!
Did you mean "list_min"?

-----------
QUERY:


-- pg_current_logfile
CREATE ROLE regress_current_logfile;
RESULT:
	ERROR - Parser Error: syntax error at or near "ROLE"

-----------
QUERY:

-- not available by default
SELECT has_function_privilege('regress_current_logfile',
  'pg_current_logfile()', 'EXECUTE');
RESULT:
	ERROR - Binder Error: Macro function 'has_function_privilege(function, privilege)' requires 2 positional arguments, but 3 positional arguments were provided.

-----------
QUERY:

GRANT pg_monitor TO regress_current_logfile;
RESULT:
	ERROR - Parser Error: syntax error at or near "GRANT"

-----------
QUERY:

-- role has privileges of pg_monitor and can execute the function
SELECT has_function_privilege('regress_current_logfile',
  'pg_current_logfile()', 'EXECUTE');
RESULT:
	ERROR - Binder Error: Macro function 'has_function_privilege(function, privilege)' requires 2 positional arguments, but 3 positional arguments were provided.

-----------
QUERY:

DROP ROLE regress_current_logfile;
RESULT:
	ERROR - Parser Error: syntax error at or near "ROLE"

-----------
QUERY:


-- pg_column_toast_chunk_id
CREATE TABLE test_chunk_id (a TEXT, b TEXT STORAGE EXTERNAL);
RESULT:
	ERROR - Parser Error: syntax error at or near "STORAGE"

-----------
QUERY:

INSERT INTO test_chunk_id VALUES ('x', repeat('x', 8192));
RESULT:
	ERROR - Catalog Error: Table with name test_chunk_id does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:

SELECT t.relname AS toastrel FROM pg_class c
  LEFT JOIN pg_class t ON c.reltoastrelid = t.oid
  WHERE c.relname = 'test_chunk_id'
-- \gset
SELECT pg_column_toast_chunk_id(a) IS NULL,
  pg_column_toast_chunk_id(b) IN (SELECT chunk_id FROM pg_toast.:toastrel)
  FROM test_chunk_id;
RESULT:
	ERROR - Parser Error: syntax error at or near "SELECT"

-----------
QUERY:

DROP TABLE test_chunk_id;
RESULT:
	ERROR - Catalog Error: Table with name test_chunk_id does not exist!
Did you mean "temp.information_schema.tables"?
