Guest DBMS identified: postgres
-----------
QUERY:
--
-- NAME
-- all inputs are silently truncated at NAMEDATALEN-1 (63) characters
--

-- fixed-length by reference
SELECT name 'name string' = name 'name string' AS "True";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT name 'name string' = name 'name string ' AS "False";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
--
--

CREATE TABLE NAME_TBL(f1 name);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


INSERT INTO NAME_TBL(f1) VALUES ('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQR');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


INSERT INTO NAME_TBL(f1) VALUES ('1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqr');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


INSERT INTO NAME_TBL(f1) VALUES ('asdfghjkl;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


INSERT INTO NAME_TBL(f1) VALUES ('343f%2a');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


INSERT INTO NAME_TBL(f1) VALUES ('d34aaasdf');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


INSERT INTO NAME_TBL(f1) VALUES ('');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


INSERT INTO NAME_TBL(f1) VALUES ('1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:



SELECT * FROM NAME_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT c.f1 FROM NAME_TBL c WHERE c.f1 <> '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQR';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT c.f1 FROM NAME_TBL c WHERE c.f1 = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQR';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT c.f1 FROM NAME_TBL c WHERE c.f1 < '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQR';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT c.f1 FROM NAME_TBL c WHERE c.f1 <= '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQR';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT c.f1 FROM NAME_TBL c WHERE c.f1 > '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQR';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT c.f1 FROM NAME_TBL c WHERE c.f1 >= '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQR';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT c.f1 FROM NAME_TBL c WHERE c.f1 ~ '.*';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT c.f1 FROM NAME_TBL c WHERE c.f1 !~ '.*';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT c.f1 FROM NAME_TBL c WHERE c.f1 ~ '[0-9]';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT c.f1 FROM NAME_TBL c WHERE c.f1 ~ '.*asdf.*';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


DROP TABLE NAME_TBL;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


DO $$
DECLARE r text[];
BEGIN
  r := parse_ident('Schemax.Tabley');
  RAISE NOTICE '%', format('%I.%I', r[1], r[2]);
  r := parse_ident('"SchemaX"."TableY"');
  RAISE NOTICE '%', format('%I.%I', r[1], r[2]);
END;
$$;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT parse_ident('foo.boo');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT parse_ident('foo.boo[]');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
 -- should fail
SELECT parse_ident('foo.boo[]', strict => false);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:
 -- ok

-- should fail
SELECT parse_ident(' ');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT parse_ident(' .aaa');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT parse_ident(' aaa . ');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT parse_ident('aaa.a%b');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT parse_ident(E'X\rXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT length(a[1]), length(a[2]) from parse_ident('"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx".yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy') as a ;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT parse_ident(' first . "  second  " ."   third   ". "  ' || repeat('x',66) || '"');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT parse_ident(' first . "  second  " ."   third   ". "  ' || repeat('x',66) || '"')::name[];
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT parse_ident(E'"c".X XXXX\002XXXXXX');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT parse_ident('1020');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT parse_ident('10.20');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT parse_ident('.');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT parse_ident('.1020');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT parse_ident('xxx.1020');
RESULT: [duckdb: SAME, mysql: SAME]


=========================================
Summary for test case name/test.sql of postgres
=========================================

=================
Results for duckdb
SAME: 14 queries, which is 34.15%
DIFFERENT: 0 queries, which is 0.00%
ERROR: 27 queries, which is 65.85%

=================
Results for mysql
SAME: 14 queries, which is 34.15%
DIFFERENT: 0 queries, which is 0.00%
ERROR: 27 queries, which is 65.85%
