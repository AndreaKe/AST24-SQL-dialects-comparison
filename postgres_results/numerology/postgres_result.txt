--
-- NUMEROLOGY
-- Test various combinations of numeric types and functions.
--


--
-- numeric literals
--

SELECT 0b100101
RESULT: 
	[(37,)]

SELECT 0o273
RESULT: 
	[(187,)]

SELECT 0x42F
RESULT: 
	[(1071,)]


-- cases near int4 overflow
SELECT 0b1111111111111111111111111111111
RESULT: 
	[(2147483647,)]

SELECT 0b10000000000000000000000000000000
RESULT: 
	[(2147483648,)]

SELECT 0o17777777777
RESULT: 
	[(2147483647,)]

SELECT 0o20000000000
RESULT: 
	[(2147483648,)]

SELECT 0x7FFFFFFF
RESULT: 
	[(2147483647,)]

SELECT 0x80000000
RESULT: 
	[(2147483648,)]


SELECT -0b10000000000000000000000000000000
RESULT: 
	[(-2147483648,)]

SELECT -0b10000000000000000000000000000001
RESULT: 
	[(-2147483649,)]

SELECT -0o20000000000
RESULT: 
	[(-2147483648,)]

SELECT -0o20000000001
RESULT: 
	[(-2147483649,)]

SELECT -0x80000000
RESULT: 
	[(-2147483648,)]

SELECT -0x80000001
RESULT: 
	[(-2147483649,)]


-- cases near int8 overflow
SELECT 0b111111111111111111111111111111111111111111111111111111111111111
RESULT: 
	[(9223372036854775807,)]

SELECT 0b1000000000000000000000000000000000000000000000000000000000000000
RESULT: 
	[(Decimal('9223372036854775808'),)]

SELECT 0o777777777777777777777
RESULT: 
	[(9223372036854775807,)]

SELECT 0o1000000000000000000000
RESULT: 
	[(Decimal('9223372036854775808'),)]

SELECT 0x7FFFFFFFFFFFFFFF
RESULT: 
	[(9223372036854775807,)]

SELECT 0x8000000000000000
RESULT: 
	[(Decimal('9223372036854775808'),)]


SELECT -0b1000000000000000000000000000000000000000000000000000000000000000
RESULT: 
	[(-9223372036854775808,)]

SELECT -0b1000000000000000000000000000000000000000000000000000000000000001
RESULT: 
	[(Decimal('-9223372036854775809'),)]

SELECT -0o1000000000000000000000
RESULT: 
	[(-9223372036854775808,)]

SELECT -0o1000000000000000000001
RESULT: 
	[(Decimal('-9223372036854775809'),)]

SELECT -0x8000000000000000
RESULT: 
	[(-9223372036854775808,)]

SELECT -0x8000000000000001
RESULT: 
	[(Decimal('-9223372036854775809'),)]


-- error cases
SELECT 123abc
ProgrammingError: 

-- error cases
SELECT 123abc

trailing junk after numeric literal at or near "123a"
LINE 4: SELECT 123abc
               ^


SELECT 0x0o
ProgrammingError: 
SELECT 0x0o

trailing junk after numeric literal at or near "0x0o"
LINE 2: SELECT 0x0o
               ^


SELECT 0.a
ProgrammingError: 
SELECT 0.a

trailing junk after numeric literal at or near "0.a"
LINE 2: SELECT 0.a
               ^


SELECT 0.0a
ProgrammingError: 
SELECT 0.0a

trailing junk after numeric literal at or near "0.0a"
LINE 2: SELECT 0.0a
               ^


SELECT .0a
ProgrammingError: 
SELECT .0a

trailing junk after numeric literal at or near ".0a"
LINE 2: SELECT .0a
               ^


SELECT 0.0e1a
ProgrammingError: 
SELECT 0.0e1a

trailing junk after numeric literal at or near "0.0e1a"
LINE 2: SELECT 0.0e1a
               ^


SELECT 0.0e
ProgrammingError: 
SELECT 0.0e

trailing junk after numeric literal at or near "0.0e"
LINE 2: SELECT 0.0e
               ^


SELECT 0.0e+a
ProgrammingError: 
SELECT 0.0e+a

trailing junk after numeric literal at or near "0.0e+"
LINE 2: SELECT 0.0e+a
               ^


PREPARE p1 AS SELECT $1a
ProgrammingError: 
PREPARE p1 AS SELECT $1a

trailing junk after parameter at or near "$1a"
LINE 2: PREPARE p1 AS SELECT $1a
                             ^



SELECT 0b
ProgrammingError: 

SELECT 0b

invalid binary integer at or near "0b"
LINE 3: SELECT 0b
               ^


SELECT 1b
ProgrammingError: 
SELECT 1b

trailing junk after numeric literal at or near "1b"
LINE 2: SELECT 1b
               ^


SELECT 0b0x
ProgrammingError: 
SELECT 0b0x

trailing junk after numeric literal at or near "0b0x"
LINE 2: SELECT 0b0x
               ^



SELECT 0o
ProgrammingError: 

SELECT 0o

invalid octal integer at or near "0o"
LINE 3: SELECT 0o
               ^


SELECT 1o
ProgrammingError: 
SELECT 1o

trailing junk after numeric literal at or near "1o"
LINE 2: SELECT 1o
               ^


SELECT 0o0x
ProgrammingError: 
SELECT 0o0x

trailing junk after numeric literal at or near "0o0x"
LINE 2: SELECT 0o0x
               ^



SELECT 0x
ProgrammingError: 

SELECT 0x

invalid hexadecimal integer at or near "0x"
LINE 3: SELECT 0x
               ^


SELECT 1x
ProgrammingError: 
SELECT 1x

trailing junk after numeric literal at or near "1x"
LINE 2: SELECT 1x
               ^


SELECT 0x0y
ProgrammingError: 
SELECT 0x0y

trailing junk after numeric literal at or near "0x0y"
LINE 2: SELECT 0x0y
               ^



-- underscores
SELECT 1_000_000
RESULT: 
	[(1000000,)]

SELECT 1_2_3
RESULT: 
	[(123,)]

SELECT 0x1EEE_FFFF
RESULT: 
	[(518979583,)]

SELECT 0o2_73
RESULT: 
	[(187,)]

SELECT 0b_10_0101
RESULT: 
	[(37,)]


SELECT 1_000.000_005
RESULT: 
	[(Decimal('1000.000005'),)]

SELECT 1_000.
RESULT: 
	[(Decimal('1000'),)]

SELECT .000_005
RESULT: 
	[(Decimal('0.000005'),)]

SELECT 1_000.5e0_1
RESULT: 
	[(Decimal('10005'),)]


-- error cases
SELECT _100
ProgrammingError: 

-- error cases
SELECT _100

column "_100" does not exist
LINE 4: SELECT _100
               ^


SELECT 100_
ProgrammingError: 
SELECT 100_

trailing junk after numeric literal at or near "100_"
LINE 2: SELECT 100_
               ^


SELECT 100__000
ProgrammingError: 
SELECT 100__000

trailing junk after numeric literal at or near "100_"
LINE 2: SELECT 100__000
               ^



SELECT _1_000.5
ProgrammingError: 

SELECT _1_000.5

syntax error at or near ".5"
LINE 3: SELECT _1_000.5
                     ^


SELECT 1_000_.5
ProgrammingError: 
SELECT 1_000_.5

trailing junk after numeric literal at or near "1_000_"
LINE 2: SELECT 1_000_.5
               ^


SELECT 1_000._5
ProgrammingError: 
SELECT 1_000._5

trailing junk after numeric literal at or near "1_000._"
LINE 2: SELECT 1_000._5
               ^


SELECT 1_000.5_
ProgrammingError: 
SELECT 1_000.5_

trailing junk after numeric literal at or near "1_000.5_"
LINE 2: SELECT 1_000.5_
               ^


SELECT 1_000.5e_1
ProgrammingError: 
SELECT 1_000.5e_1

trailing junk after numeric literal at or near "1_000.5e"
LINE 2: SELECT 1_000.5e_1
               ^




--
-- Test implicit type conversions
-- This fails for Postgres v6.1 (and earlier?)
--  so let''s try explicit conversions for now - tgl 97/05/07
--

CREATE TABLE TEMP_FLOAT (f1 FLOAT8)


INSERT INTO TEMP_FLOAT (f1)
  SELECT float8(f1) FROM INT4_TBL


INSERT INTO TEMP_FLOAT (f1)
  SELECT float8(f1) FROM INT2_TBL


SELECT f1 FROM TEMP_FLOAT
  ORDER BY f1
RESULT: 
	[(-2147483647.0,), (-123456.0,), (-32767.0,), (-1234.0,), (0.0,), (0.0,), (1234.0,), (32767.0,), (123456.0,), (2147483647.0,)]


-- int4

CREATE TABLE TEMP_INT4 (f1 INT4)


INSERT INTO TEMP_INT4 (f1)
  SELECT int4(f1) FROM FLOAT8_TBL
  WHERE (f1 > -2147483647) AND (f1 < 2147483647)


INSERT INTO TEMP_INT4 (f1)
  SELECT int4(f1) FROM INT2_TBL


SELECT f1 FROM TEMP_INT4
  ORDER BY f1
RESULT: 
	[(-32767,), (-1234,), (-1004,), (-35,), (0,), (0,), (0,), (1234,), (32767,)]


-- int2

CREATE TABLE TEMP_INT2 (f1 INT2)


INSERT INTO TEMP_INT2 (f1)
  SELECT int2(f1) FROM FLOAT8_TBL
  WHERE (f1 >= -32767) AND (f1 <= 32767)


INSERT INTO TEMP_INT2 (f1)
  SELECT int2(f1) FROM INT4_TBL
  WHERE (f1 >= -32767) AND (f1 <= 32767)


SELECT f1 FROM TEMP_INT2
  ORDER BY f1
RESULT: 
	[(-1004,), (-35,), (0,), (0,), (0,)]


--
-- Group-by combinations
--

CREATE TABLE TEMP_GROUP (f1 INT4, f2 INT4, f3 FLOAT8)


INSERT INTO TEMP_GROUP
  SELECT 1, (- i.f1), (- f.f1)
  FROM INT4_TBL i, FLOAT8_TBL f


INSERT INTO TEMP_GROUP
  SELECT 2, i.f1, f.f1
  FROM INT4_TBL i, FLOAT8_TBL f


SELECT DISTINCT f1 AS two FROM TEMP_GROUP ORDER BY 1
RESULT: 
	[(1,), (2,)]


SELECT f1 AS two, max(f3) AS max_float, min(f3) as min_float
  FROM TEMP_GROUP
  GROUP BY f1
  ORDER BY two, max_float, min_float
RESULT: 
	[(1, 1.2345678901234e+200, -0.0), (2, 0.0, -1.2345678901234e+200)]


-- GROUP BY a result column name is not legal per SQL92, but we accept it
-- anyway (if the name is not the name of any column exposed by FROM).
SELECT f1 AS two, max(f3) AS max_float, min(f3) AS min_float
  FROM TEMP_GROUP
  GROUP BY two
  ORDER BY two, max_float, min_float
RESULT: 
	[(1, 1.2345678901234e+200, -0.0), (2, 0.0, -1.2345678901234e+200)]


SELECT f1 AS two, (max(f3) + 1) AS max_plus_1, (min(f3) - 1) AS min_minus_1
  FROM TEMP_GROUP
  GROUP BY f1
  ORDER BY two, min_minus_1
RESULT: 
	[(1, 1.2345678901234e+200, -1.0), (2, 1.0, -1.2345678901234e+200)]


SELECT f1 AS two,
       max(f2) + min(f2) AS max_plus_min,
       min(f3) - 1 AS min_minus_1
  FROM TEMP_GROUP
  GROUP BY f1
  ORDER BY two, min_minus_1
RESULT: 
	[(1, 0, -1.0), (2, 0, -1.2345678901234e+200)]


DROP TABLE TEMP_INT2


DROP TABLE TEMP_INT4


DROP TABLE TEMP_FLOAT


DROP TABLE TEMP_GROUP


