
-----------
QUERY:
--
-- OPR_SANITY
-- Sanity checks for common errors in making operator/procedure system tables:
-- pg_operator, pg_proc, pg_cast, pg_conversion, pg_aggregate, pg_am,
-- pg_amop, pg_amproc, pg_opclass, pg_opfamily, pg_index.
--
-- Every test failure in this file should be closely inspected.
-- The description of the failing test should be read carefully before
-- adjusting the expected output.  In most cases, the queries should
-- not find *any* matching entries.
--
-- NB: we assume the oidjoins test will have caught any dangling links,
-- that is OID or REGPROC fields that are not zero and do not match some
-- row in the linked-to table.  However, if we want to enforce that a link
-- field can/* REPLACED */ ''t be 0, we have to check it here.
--
-- NB: run this test earlier than the create_operator test, because
-- that test creates some bogus operators...


-- **************** pg_proc ****************

-- Look for illegal values in pg_proc fields.

SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE p1.prolang = 0 OR p1.prorettype = 0 OR
       p1.pronargs < 0 OR
       p1.pronargdefaults < 0 OR
       p1.pronargdefaults > p1.pronargs OR
       array_lower(p1.proargtypes, 1) != 0 OR
       array_upper(p1.proargtypes, 1) != p1.pronargs-1 OR
       0::oid = ANY (p1.proargtypes) OR
       procost <= 0 OR
       CASE WHEN proretset THEN prorows <= 0 ELSE prorows != 0 END OR
       prokind NOT IN ('f', 'a', 'w', 'p') OR
       provolatile NOT IN ('i', 's', 'v') OR
       proparallel NOT IN ('s', 'r', 'u');
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_lower does not exist!
Did you mean "array_where"?

-----------
QUERY:


-- prosrc should never be null /* REPLACED */ , it can be empty only if prosqlbody isn/* REPLACED */ ''t null
SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE prosrc IS NULL;
RESULT:
	[(22, 'pragma_user_agent'), (1469, 'parquet_schema'), (1469, 'parquet_schema'), (1455, 'pg_timezone_names'), (10, 'pragma_collations'), (20, 'pragma_database_size'), (18, 'pragma_metadata_info'), (18, 'pragma_metadata_info'), (8, 'pragma_platform'), (14, 'pragma_show'), (16, 'pragma_storage_info'), (12, 'pragma_table_info'), (1465, 'parquet_scan'), (1465, 'parquet_scan'), (6, 'pragma_version'), (1484, 'python_map_function'), (76, 'range'), (76, 'range'), (76, 'range'), (76, 'range'), (76, 'range'), (90, 'read_blob'), (90, 'read_blob'), (66, 'read_csv'), (66, 'read_csv'), (68, 'read_csv_auto'), (68, 'read_csv_auto'), (1143, 'read_json'), (1143, 'read_json'), (1147, 'read_json_auto'), (1147, 'read_json_auto'), (1137, 'read_json_objects'), (1137, 'read_json_objects'), (78, 'generate_series'), (78, 'generate_series'), (78, 'generate_series'), (78, 'generate_series'), (78, 'generate_series'), (36, 'duckdb_schemas'), (46, 'duckdb_secrets'), (48, 'duckdb_sequences'), (50, 'duckdb_settings'), (52, 'duckdb_tables'), (54, 'duckdb_temporary_files'), (56, 'duckdb_types'), (58, 'duckdb_views'), (72, 'force_checkpoint'), (72, 'force_checkpoint'), (1141, 'read_json_objects_auto'), (1141, 'read_json_objects_auto'), (74, 'glob'), (74, 'glob'), (1461, 'icu_calendar_names'), (4, 'index_scan'), (1151, 'json_execute_serialized_sql'), (1482, 'pandas_scan'), (1473, 'parquet_file_metadata'), (1473, 'parquet_file_metadata'), (1471, 'parquet_kv_metadata'), (1471, 'parquet_kv_metadata'), (1467, 'parquet_metadata'), (1467, 'parquet_metadata'), (28, 'duckdb_databases'), (84, 'unnest'), (44, 'duckdb_optimizers'), (42, 'duckdb_memory'), (32, 'duckdb_keywords'), (34, 'duckdb_indexes'), (30, 'duckdb_functions'), (40, 'duckdb_extensions'), (38, 'duckdb_dependencies'), (1145, 'read_ndjson'), (1145, 'read_ndjson'), (26, 'duckdb_constraints'), (24, 'duckdb_columns'), (1165, 'dsdgen'), (1173, 'dbgen'), (70, 'checkpoint'), (70, 'checkpoint'), (96, 'arrow_scan_dumb'), (94, 'arrow_scan'), (1179, 'tpch_answers'), (1149, 'read_ndjson_auto'), (1149, 'read_ndjson_auto'), (1139, 'read_ndjson_objects'), (1139, 'read_ndjson_objects'), (1463, 'read_parquet'), (1463, 'read_parquet'), (92, 'read_text'), (92, 'read_text'), (80, 'repeat'), (86, 'repeat_row'), (2, 'seq_scan'), (88, 'sniff_csv'), (82, 'summary'), (60, 'test_all_types'), (62, 'test_vector_types'), (1171, 'tpcds_answers'), (1169, 'tpcds_queries'), (1177, 'tpch_queries'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (722, 'list_aggregate'), (1030, 'typeof'), (1028, 'txid_current'), (724, 'list_apply'), (1026, 'try_strptime'), (1026, 'try_strptime'), (1133, 'json_serialize_sql'), (1133, 'json_serialize_sql'), (1133, 'json_serialize_sql'), (1133, 'json_serialize_sql'), (706, 'least'), (706, 'least'), (706, 'least'), (706, 'least'), (706, 'least'), (706, 'least'), (706, 'least'), (706, 'least'), (706, 'least'), (1101, 'to_json'), (1111, 'json_structure'), (1111, 'json_structure'), (1113, 'json_transform'), (1113, 'json_transform'), (1117, 'json_transform_strict'), (1117, 'json_transform_strict'), (1127, 'json_type'), (1127, 'json_type'), (1127, 'json_type'), (1127, 'json_type'), (1127, 'json_type'), (1127, 'json_type'), (1129, 'json_valid'), (1129, 'json_valid'), (694, 'julian'), (694, 'julian'), (694, 'julian'), (702, 'last_day'), (702, 'last_day'), (702, 'last_day'), (180, 'lcase'), (704, 'lcm'), (704, 'lcm'), (720, 'list_aggr'), (708, 'least_common_multiple'), (708, 'least_common_multiple'), (710, 'left'), (712, 'left_grapheme'), (198, 'len'), (198, 'len'), (198, 'len'), (196, 'length'), (196, 'length'), (196, 'length'), (200, 'length_grapheme'), (714, 'levenshtein'), (716, 'lgamma'), (220, 'like_escape'), (280, 'list_element'), (280, 'list_element'), (774, 'make_time'), (998, 'to_microseconds'), (738, 'list_inner_product'), (738, 'list_inner_product'), (272, 'list_indexof'), (1000, 'to_millennia'), (1002, 'to_milliseconds'), (1004, 'to_minutes'), (266, 'list_has'), (736, 'list_grade_up'), (736, 'list_grade_up'), (736, 'list_grade_up'), (1006, 'to_months'), (734, 'list_filter'), (278, 'list_extract'), (278, 'list_extract'), (1008, 'to_seconds'), (1022, 'trim'), (1022, 'trim'), (732, 'list_dot_product'), (732, 'list_dot_product'), (730, 'list_distinct'), (728, 'list_distance'), (728, 'list_distance'), (1010, 'to_timestamp'), (726, 'list_cosine_similarity'), (726, 'list_cosine_similarity'), (262, 'list_contains'), (254, 'list_concat'), (256, 'list_cat'), (1012, 'to_weeks'), (1014, 'to_years'), (1018, 'transaction_timestamp'), (1020, 'translate'), (1042, 'union_value'), (1451, 'icu_sort_key'), (672, 'hour'), (672, 'hour'), (672, 'hour'), (672, 'hour'), (672, 'hour'), (672, 'hour'), (668, 'hex'), (668, 'hex'), (668, 'hex'), (668, 'hex'), (668, 'hex'), (666, 'hash'), (664, 'hamming'), (660, 'greatest_common_divisor'), (660, 'greatest_common_divisor'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (656, 'grade_up'), (656, 'grade_up'), (656, 'grade_up'), (654, 'get_current_timestamp'), (652, 'get_current_time'), (1038, 'union_extract'), (650, 'get_bit'), (1040, 'union_tag'), (224, 'ilike_escape'), (646, 'gen_random_uuid'), (1044, 'unpivot_list'), (648, 'generate_series'), (648, 'generate_series'), (648, 'generate_series'), (648, 'generate_series'), (648, 'generate_series'), (644, 'gcd'), (644, 'gcd'), (642, 'gamma'), (1119, 'from_json_strict'), (1119, 'from_json_strict'), (1115, 'from_json'), (1115, 'from_json'), (638, 'from_hex'), (636, 'from_binary'), (634, 'from_base64'), (632, 'format_bytes'), (630, 'formatReadableSize'), (628, 'formatReadableDecimalSize'), (1121, 'json_array_length'), (1121, 'json_array_length'), (1121, 'json_array_length'), (1121, 'json_array_length'), (1121, 'json_array_length'), (1121, 'json_array_length'), (1103, 'json_quote'), (1099, 'json_object'), (1109, 'json_merge_patch'), (1125, 'json_keys'), (1125, 'json_keys'), (1125, 'json_keys'), (1125, 'json_keys'), (1125, 'json_keys'), (1125, 'json_keys'), (184, 'ucase'), (1032, 'unbin'), (1034, 'unhex'), (1091, 'json_extract_string'), (1091, 'json_extract_string'), (1091, 'json_extract_string'), (1091, 'json_extract_string'), (1091, 'json_extract_string'), (1091, 'json_extract_string'), (1093, 'json_extract_path_text'), (1093, 'json_extract_path_text'), (1093, 'json_extract_path_text'), (1093, 'json_extract_path_text'), (1093, 'json_extract_path_text'), (1093, 'json_extract_path_text'), (1089, 'json_extract_path'), (1089, 'json_extract_path'), (1089, 'json_extract_path'), (1089, 'json_extract_path'), (1089, 'json_extract_path'), (1089, 'json_extract_path'), (1087, 'json_extract'), (1087, 'json_extract'), (1087, 'json_extract'), (1087, 'json_extract'), (1087, 'json_extract'), (1087, 'json_extract'), (1135, 'json_deserialize_sql'), (1123, 'json_contains'), (1123, 'json_contains'), (1123, 'json_contains'), (1123, 'json_contains'), (1131, 'json_serialize_plan'), (1131, 'json_serialize_plan'), (1131, 'json_serialize_plan'), (1131, 'json_serialize_plan'), (1131, 'json_serialize_plan'), (1097, 'json_array'), (1036, 'unicode'), (692, 'jaro_winkler_similarity'), (690, 'jaro_similarity'), (688, 'jaccard'), (686, 'isoyear'), (686, 'isoyear'), (686, 'isoyear'), (686, 'isoyear'), (684, 'isodow'), (684, 'isodow'), (684, 'isodow'), (684, 'isodow'), (682, 'isnan'), (682, 'isnan'), (680, 'isinf'), (680, 'isinf'), (680, 'isinf'), (680, 'isinf'), (680, 'isinf'), (678, 'isfinite'), (678, 'isfinite'), (678, 'isfinite'), (678, 'isfinite'), (678, 'isfinite'), (674, 'in_search_path'), (676, 'instr'), (836, 'parse_dirpath'), (836, 'parse_dirpath'), (868, 'reduce'), (866, 'range'), (866, 'range'), (866, 'range'), (866, 'range'), (866, 'range'), (864, 'random'), (862, 'radians'), (860, 'quarter'), (860, 'quarter'), (860, 'quarter'), (860, 'quarter'), (850, 'printf'), (244, 'prefix'), (848, 'power'), (846, 'pow'), (844, 'position'), (842, 'pi'), (840, 'parse_path'), (840, 'parse_path'), (838, 'parse_filename'), (838, 'parse_filename'), (838, 'parse_filename'), (838, 'parse_filename'), (870, 'regexp_escape'), (834, 'parse_dirname'), (834, 'parse_dirname'), (832, 'ord'), (208, 'octet_length'), (208, 'octet_length'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (830, 'now'), (222, 'not_like_escape'), (226, 'not_ilike_escape'), (250, 'nfc_normalize'), (174, 'nextval'), (828, 'nextafter'), (828, 'nextafter'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (826, 'monthname'), (826, 'monthname'), (826, 'monthname'), (824, 'month'), (824, 'month'), (824, 'month'), (824, 'month'), (904, 'round'), (904, 'round'), (904, 'round'), (904, 'round'), (904, 'round'), (904, 'round'), (924, 'signbit'), (924, 'signbit'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (920, 'sha256'), (916, 'set_bit'), (918, 'setseed'), (946, 'str_split_regex'), (946, 'str_split_regex'), (912, 'second'), (912, 'second'), (912, 'second'), (912, 'second'), (912, 'second'), (912, 'second'), (910, 'rtrim'), (910, 'rtrim'), (908, 'rpad'), (1107, 'row_to_json'), (906, 'row'), (240, 'substr'), (240, 'substr'), (238, 'substring'), (238, 'substring'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (902, 'right_grapheme'), (900, 'right'), (898, 'reverse'), (894, 'replace'), (892, 'repeat'), (892, 'repeat'), (242, 'substring_grapheme'), (242, 'substring_grapheme'), (872, 'regexp_split_to_array'), (872, 'regexp_split_to_array'), (232, 'regexp_replace'), (232, 'regexp_replace'), (230, 'regexp_matches'), (230, 'regexp_matches'), (228, 'regexp_full_match'), (228, 'regexp_full_match'), (236, 'regexp_extract_all'), (236, 'regexp_extract_all'), (236, 'regexp_extract_all'), (234, 'regexp_extract'), (234, 'regexp_extract'), (234, 'regexp_extract'), (234, 'regexp_extract'), (234, 'regexp_extract'), (744, 'list_reverse_sort'), (744, 'list_reverse_sort'), (288, 'list_zip'), (296, 'list_where'), (246, 'suffix'), (754, 'list_value'), (752, 'list_unique'), (750, 'list_transform'), (972, 'tan'), (976, 'timezone'), (976, 'timezone'), (976, 'timezone'), (976, 'timezone'), (976, 'timezone'), (976, 'timezone'), (976, 'timezone'), (976, 'timezone'), (748, 'list_sort'), (748, 'list_sort'), (748, 'list_sort'), (746, 'list_slice'), (746, 'list_slice'), (978, 'timezone_hour'), (978, 'timezone_hour'), (978, 'timezone_hour'), (978, 'timezone_hour'), (980, 'timezone_minute'), (980, 'timezone_minute'), (980, 'timezone_minute'), (980, 'timezone_minute'), (292, 'list_select'), (758, 'ln'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (284, 'list_resize'), (284, 'list_resize'), (742, 'list_reduce'), (1016, 'today'), (982, 'to_base'), (982, 'to_base'), (270, 'list_position'), (740, 'list_pack'), (984, 'to_base64'), (986, 'to_binary'), (986, 'to_binary'), (986, 'to_binary'), (986, 'to_binary'), (986, 'to_binary'), (988, 'to_centuries'), (990, 'to_days'), (992, 'to_decades'), (994, 'to_hex'), (994, 'to_hex'), (994, 'to_hex'), (994, 'to_hex'), (994, 'to_hex'), (782, 'map_entries'), (820, 'mismatches'), (818, 'minute'), (818, 'minute'), (818, 'minute'), (818, 'minute'), (818, 'minute'), (818, 'minute'), (812, 'millisecond'), (812, 'millisecond'), (812, 'millisecond'), (812, 'millisecond'), (812, 'millisecond'), (812, 'millisecond'), (810, 'millennium'), (810, 'millennium'), (810, 'millennium'), (810, 'millennium'), (808, 'microsecond'), (808, 'microsecond'), (808, 'microsecond'), (808, 'microsecond'), (808, 'microsecond'), (808, 'microsecond'), (802, 'md5_number_upper'), (800, 'md5_number_lower'), (798, 'md5_number'), (796, 'md5'), (790, 'map_values'), (788, 'map_keys'), (786, 'map_from_entries'), (784, 'map_extract'), (996, 'to_hours'), (780, 'map_concat'), (778, 'map'), (1453, 'make_timestamptz'), (1453, 'make_timestamptz'), (1453, 'make_timestamptz'), (776, 'make_timestamp'), (776, 'make_timestamp'), (598, 'enum_range_boundary'), (772, 'make_date'), (772, 'make_date'), (768, 'ltrim'), (768, 'ltrim'), (766, 'lpad'), (178, 'lower'), (764, 'log2'), (762, 'log10'), (760, 'log'), (760, 'log'), (444, 'array_aggregate'), (460, 'array_grade_up'), (460, 'array_grade_up'), (460, 'array_grade_up'), (458, 'array_filter'), (282, 'array_extract'), (282, 'array_extract'), (282, 'array_extract'), (282, 'array_extract'), (456, 'array_dot_product'), (456, 'array_dot_product'), (454, 'array_distinct'), (452, 'array_distance'), (452, 'array_distance'), (450, 'array_cross_product'), (450, 'array_cross_product'), (448, 'array_cosine_similarity'), (448, 'array_cosine_similarity'), (264, 'array_contains'), (258, 'array_concat'), (260, 'array_cat'), (446, 'array_apply'), (116, '__internal_compress_integral_ubigint'), (116, '__internal_compress_integral_ubigint'), (268, 'array_has'), (442, 'array_aggr'), (422, 'apply'), (420, 'alias'), (418, 'aggregate'), (416, 'age'), (416, 'age'), (416, 'age'), (416, 'age'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (414, 'acos'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (114, '__internal_compress_integral_uinteger'), (114, '__internal_compress_integral_uinteger'), (114, '__internal_compress_integral_uinteger'), (114, '__internal_compress_integral_uinteger'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (112, '__internal_compress_integral_usmallint'), (112, '__internal_compress_integral_usmallint'), (112, '__internal_compress_integral_usmallint'), (112, '__internal_compress_integral_usmallint'), (112, '__internal_compress_integral_usmallint'), (112, '__internal_compress_integral_usmallint'), (464, 'array_reduce'), (298, 'array_where'), (476, 'array_value'), (474, 'array_unique'), (472, 'array_transform'), (1056, 'version'), (1105, 'array_to_json'), (470, 'array_sort'), (470, 'array_sort'), (470, 'array_sort'), (468, 'array_slice'), (468, 'array_slice'), (294, 'array_select'), (466, 'array_reverse_sort'), (466, 'array_reverse_sort'), (1058, 'week'), (1058, 'week'), (1058, 'week'), (1058, 'week'), (286, 'array_resize'), (286, 'array_resize'), (402, '<=>'), (402, '<=>'), (1060, 'weekday'), (1060, 'weekday'), (1060, 'weekday'), (1060, 'weekday'), (1062, 'weekofyear'), (1062, 'weekofyear'), (1062, 'weekofyear'), (1062, 'weekofyear'), (1064, 'which_secret'), (274, 'array_position'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1068, 'year'), (1068, 'year'), (1068, 'year'), (1068, 'year'), (202, 'array_length'), (202, 'array_length'), (626, 'format'), (462, 'array_inner_product'), (462, 'array_inner_product'), (276, 'array_indexof'), (408, '^'), (410, '^@'), (934, 'starts_with'), (132, '__internal_decompress_integral_uhugeint'), (132, '__internal_decompress_integral_uhugeint'), (132, '__internal_decompress_integral_uhugeint'), (132, '__internal_decompress_integral_uhugeint'), (128, '__internal_decompress_integral_uinteger'), (128, '__internal_decompress_integral_uinteger'), (126, '__internal_decompress_integral_usmallint'), (144, '__internal_decompress_string'), (144, '__internal_decompress_string'), (144, '__internal_decompress_string'), (144, '__internal_decompress_string'), (144, '__internal_decompress_string'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (190, '||'), (190, '||'), (190, '||'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (210, '~~'), (216, '~~*'), (214, '~~~'), (930, 'split'), (944, 'str_split'), (932, 'sqrt'), (130, '__internal_decompress_integral_ubigint'), (130, '__internal_decompress_integral_ubigint'), (130, '__internal_decompress_integral_ubigint'), (936, 'stats'), (948, 'strftime'), (948, 'strftime'), (948, 'strftime'), (948, 'strftime'), (948, 'strftime'), (952, 'string_split'), (954, 'string_split_regex'), (954, 'string_split_regex'), (956, 'string_to_array'), (186, 'strip_accents'), (204, 'strlen'), (958, 'strpos'), (960, 'strptime'), (960, 'strptime'), (252, 'struct_extract'), (252, 'struct_extract'), (962, 'struct_insert'), (964, 'struct_pack'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (398, '<->'), (398, '<->'), (396, '<#>'), (396, '<#>'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (164, '/'), (164, '/'), (164, '/'), (1095, '->>'), (1095, '->>'), (1095, '->>'), (1095, '->>'), (1095, '->>'), (1095, '->>'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (394, '**'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (1070, 'yearweek'), (1070, 'yearweek'), (1070, 'yearweek'), (1070, 'yearweek'), (218, '!~~*'), (212, '!~~'), (390, '!__postfix'), (142, '__internal_compress_string_hugeint'), (140, '__internal_compress_string_ubigint'), (138, '__internal_compress_string_uinteger'), (136, '__internal_compress_string_usmallint'), (134, '__internal_compress_string_utinyint'), (122, '__internal_decompress_integral_bigint'), (122, '__internal_decompress_integral_bigint'), (122, '__internal_decompress_integral_bigint'), (124, '__internal_decompress_integral_hugeint'), (124, '__internal_decompress_integral_hugeint'), (124, '__internal_decompress_integral_hugeint'), (124, '__internal_decompress_integral_hugeint'), (120, '__internal_decompress_integral_integer'), (120, '__internal_decompress_integral_integer'), (118, '__internal_decompress_integral_smallint'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (576, 'decade'), (576, 'decade'), (576, 'decade'), (576, 'decade'), (574, 'dayofyear'), (574, 'dayofyear'), (574, 'dayofyear'), (574, 'dayofyear'), (572, 'dayofweek'), (572, 'dayofweek'), (572, 'dayofweek'), (572, 'dayofweek'), (570, 'dayofmonth'), (570, 'dayofmonth'), (570, 'dayofmonth'), (570, 'dayofmonth'), (568, 'dayname'), (568, 'dayname'), (568, 'dayname'), (566, 'day'), (566, 'day'), (566, 'day'), (566, 'day'), (556, 'date_trunc'), (556, 'date_trunc'), (556, 'date_trunc'), (556, 'date_trunc'), (554, 'date_sub'), (554, 'date_sub'), (554, 'date_sub'), (554, 'date_sub'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (550, 'date_diff'), (550, 'date_diff'), (550, 'date_diff'), (550, 'date_diff'), (1046, 'uuid'), (564, 'datetrunc'), (564, 'datetrunc'), (564, 'datetrunc'), (564, 'datetrunc'), (562, 'datesub'), (562, 'datesub'), (562, 'datesub'), (562, 'datesub'), (578, 'decode'), (558, 'datediff'), (558, 'datediff'), (558, 'datediff'), (558, 'datediff'), (548, 'damerau_levenshtein'), (176, 'currval'), (290, 'array_zip'), (544, 'current_schemas'), (542, 'current_schema'), (540, 'current_query'), (1457, 'current_localtimestamp'), (1459, 'current_localtime'), (538, 'current_date'), (536, 'current_database'), (534, 'create_sort_key'), (604, 'epoch_ns'), (604, 'epoch_ns'), (604, 'epoch_ns'), (604, 'epoch_ns'), (604, 'epoch_ns'), (604, 'epoch_ns'), (182, 'upper'), (624, 'floor'), (624, 'floor'), (624, 'floor'), (622, 'flatten'), (150, 'finalize'), (620, 'filter'), (926, 'sin'), (616, 'factorial'), (614, 'exp'), (612, 'even'), (610, 'error'), (608, 'era'), (608, 'era'), (608, 'era'), (608, 'era'), (606, 'epoch_us'), (606, 'epoch_us'), (606, 'epoch_us'), (606, 'epoch_us'), (606, 'epoch_us'), (606, 'epoch_us'), (546, 'current_setting'), (602, 'epoch_ms'), (602, 'epoch_ms'), (602, 'epoch_ms'), (602, 'epoch_ms'), (602, 'epoch_ms'), (602, 'epoch_ms'), (602, 'epoch_ms'), (600, 'epoch'), (600, 'epoch'), (600, 'epoch'), (600, 'epoch'), (600, 'epoch'), (600, 'epoch'), (596, 'enum_range'), (594, 'enum_last'), (592, 'enum_first'), (590, 'enum_code'), (248, 'ends_with'), (586, 'encode'), (584, 'element_at'), (582, 'editdist3'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (580, 'degrees'), (512, 'cardinality'), (1054, 'vector_type'), (528, 'cot'), (526, 'cos'), (194, 'contains'), (146, 'constant_or_null'), (192, 'concat_ws'), (188, 'concat'), (148, 'combine'), (522, 'chr'), (520, 'century'), (520, 'century'), (520, 'century'), (520, 'century'), (518, 'ceiling'), (518, 'ceiling'), (518, 'ceiling'), (514, 'cbrt'), (516, 'ceil'), (516, 'ceil'), (516, 'ceil'), (500, 'bit_position'), (206, 'bit_length'), (206, 'bit_length'), (496, 'bit_count'), (496, 'bit_count'), (496, 'bit_count'), (496, 'bit_count'), (496, 'bit_count'), (496, 'bit_count'), (504, 'bitstring'), (492, 'bin'), (492, 'bin'), (492, 'bin'), (492, 'bin'), (492, 'bin'), (490, 'base64'), (488, 'bar'), (488, 'bar'), (484, 'atan2'), (482, 'atan'), (480, 'asin'), (478, 'ascii'), (882, 'regr_r2'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (792, 'max'), (792, 'max'), (890, 'regr_syy'), (888, 'regr_sxy'), (886, 'regr_sxx'), (884, 'regr_slope'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (880, 'regr_intercept'), (878, 'regr_count'), (876, 'regr_avgy'), (874, 'regr_avgx'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (928, 'skewness'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (770, 'mad'), (770, 'mad'), (770, 'mad'), (770, 'mad'), (770, 'mad'), (770, 'mad'), (770, 'mad'), (770, 'mad'), (640, 'fsum'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (530, 'covar_pop'), (102, 'first'), (102, 'first'), (108, 'any_value'), (108, 'any_value'), (486, 'avg'), (486, 'avg'), (486, 'avg'), (486, 'avg'), (486, 'avg'), (486, 'avg'), (914, 'sem'), (532, 'covar_samp'), (700, 'kurtosis_pop'), (618, 'favg'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (950, 'string_agg'), (950, 'string_agg'), (1050, 'var_samp'), (942, 'stddev_samp'), (940, 'stddev_pop'), (938, 'stddev'), (968, 'sum_no_overflow'), (968, 'sum_no_overflow'), (968, 'sum_no_overflow'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (1048, 'var_pop'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (440, 'array_agg'), (814, 'min'), (814, 'min'), (696, 'kahan_sum'), (524, 'corr'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (804, 'mean'), (804, 'mean'), (804, 'mean'), (804, 'mean'), (804, 'mean'), (804, 'mean'), (970, 'sumkahan'), (1052, 'variance'), (100, 'count'), (100, 'count'), (698, 'kurtosis'), (966, 'sum'), (966, 'sum'), (966, 'sum'), (966, 'sum'), (966, 'sum'), (966, 'sum'), (98, 'count_star'), (106, 'last'), (106, 'last'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (508, 'bool_and'), (510, 'bool_or'), (662, 'group_concat'), (662, 'group_concat'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (852, 'product'), (104, 'arbitrary'), (104, 'arbitrary'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (756, 'listagg'), (756, 'listagg'), (718, 'list'), (334, 'enable_profile'), (338, 'disable_profile'), (366, 'enable_optimizer'), (362, 'enable_object_cache'), (380, 'enable_checkpoint_on_shutdown'), (356, 'disable_verify_serializer'), (360, 'disable_verify_parallelism'), (352, 'disable_verify_fetch_row'), (348, 'disable_verify_external'), (344, 'disable_verification'), (374, 'disable_progress_bar'), (340, 'disable_profiling'), (376, 'enable_print_progress_bar'), (378, 'disable_print_progress_bar'), (368, 'disable_optimizer'), (364, 'disable_object_cache'), (382, 'disable_checkpoint_on_shutdown'), (322, 'database_size'), (312, 'database_list'), (328, 'copy_database'), (314, 'collations'), (330, 'all_profiling_output'), (1477, 'add_parquet_key'), (372, 'enable_progress_bar'), (336, 'enable_profiling'), (318, 'version'), (354, 'verify_serializer'), (358, 'verify_parallelism'), (350, 'verify_fetch_row'), (346, 'verify_external'), (332, 'user_agent'), (1175, 'tpch'), (1167, 'tpcds'), (300, 'table_info'), (302, 'storage_info'), (306, 'show_tables'), (308, 'show_tables_expanded'), (342, 'enable_verification'), (370, 'force_checkpoint'), (324, 'functions'), (326, 'import_database'), (1153, 'json_execute_serialized_sql'), (304, 'metadata_info'), (320, 'platform'), (316, 'show'), (310, 'show_databases'), (1627, 'list_stddev_pop'), (1628, 'list_stddev_samp'), (1648, 'list_string_agg'), (1647, 'list_sum'), (1626, 'list_var_pop'), (1625, 'list_var_samp'), (1596, 'nullif'), (1654, 'regexp_split_to_table'), (1595, 'roundbankers'), (1594, 'round_even'), (1593, 'session_user'), (1610, 'split_part'), (1592, 'user'), (1573, 'col_description'), (1552, 'current_database'), (1553, 'current_query'), (1554, 'current_schema'), (1555, 'current_schemas'), (1636, 'list_count'), (1570, 'format_pg_type'), (1638, 'list_last'), (1575, 'shobj_description'), (1637, 'list_entropy'), (1639, 'list_first'), (1620, 'list_has_all'), (1617, 'list_has_any'), (1652, 'list_histogram'), (1615, 'list_intersect'), (1641, 'list_kurtosis'), (1642, 'list_kurtosis_pop'), (1646, 'list_skewness'), (1651, 'list_mad'), (1644, 'list_max'), (1650, 'list_median'), (1643, 'list_min'), (1649, 'list_mode'), (1599, 'list_prepend'), (1645, 'list_product'), (1613, 'list_reverse'), (1629, 'list_sem'), (1550, 'pg_postmaster_start_time'), (1568, 'pg_get_constraintdef'), (1569, 'pg_get_expr'), (1567, 'pg_get_viewdef'), (1572, 'pg_has_role'), (1548, 'pg_is_other_temp_schema'), (1547, 'pg_my_temp_schema'), (1579, 'pg_opclass_is_visible'), (1580, 'pg_operator_is_visible'), (1581, 'pg_opfamily_is_visible'), (1578, 'pg_function_is_visible'), (1588, 'pg_size_pretty'), (1582, 'pg_table_is_visible'), (1583, 'pg_ts_config_is_visible'), (1584, 'pg_ts_dict_is_visible'), (1585, 'pg_ts_parser_is_visible'), (1586, 'pg_ts_template_is_visible'), (1551, 'pg_typeof'), (1587, 'pg_type_is_visible'), (1799, '&&'), (1566, 'has_tablespace_privilege'), (1556, 'has_any_column_privilege'), (1557, 'has_column_privilege'), (1558, 'has_database_privilege'), (1559, 'has_foreign_data_wrapper_privilege'), (1560, 'has_function_privilege'), (1561, 'has_language_privilege'), (1562, 'has_schema_privilege'), (1563, 'has_sequence_privilege'), (1564, 'has_server_privilege'), (1571, 'format_type'), (1565, 'has_table_privilege'), (1543, 'inet_client_addr'), (1544, 'inet_client_port'), (1545, 'inet_server_addr'), (1546, 'inet_server_port'), (1574, 'obj_description'), (1576, 'pg_collation_is_visible'), (1549, 'pg_conf_load_time'), (1577, 'pg_conversion_is_visible'), (1516, 'pg_get_viewdef'), (1494, 'inet_server_addr'), (1495, 'inet_server_port'), (1523, 'obj_description'), (1525, 'pg_collation_is_visible'), (1498, 'pg_conf_load_time'), (1526, 'pg_conversion_is_visible'), (1527, 'pg_function_is_visible'), (1517, 'pg_get_constraintdef'), (1518, 'pg_get_expr'), (1493, 'inet_client_port'), (1521, 'pg_has_role'), (1497, 'pg_is_other_temp_schema'), (1496, 'pg_my_temp_schema'), (1528, 'pg_opclass_is_visible'), (1529, 'pg_operator_is_visible'), (1530, 'pg_opfamily_is_visible'), (1499, 'pg_postmaster_start_time'), (1537, 'pg_size_pretty'), (1531, 'pg_table_is_visible'), (1507, 'has_database_privilege'), (1522, 'col_description'), (1501, 'current_database'), (1502, 'current_query'), (1503, 'current_schema'), (1504, 'current_schemas'), (1519, 'format_pg_type'), (1520, 'format_type'), (1505, 'has_any_column_privilege'), (1506, 'has_column_privilege'), (1532, 'pg_ts_config_is_visible'), (1508, 'has_foreign_data_wrapper_privilege'), (1509, 'has_function_privilege'), (1510, 'has_language_privilege'), (1511, 'has_schema_privilege'), (1512, 'has_sequence_privilege'), (1513, 'has_server_privilege'), (1515, 'has_tablespace_privilege'), (1514, 'has_table_privilege'), (1492, 'inet_client_addr'), (1612, 'geometric_mean'), (1609, 'count_if'), (1591, 'current_catalog'), (1589, 'current_role'), (1590, 'current_user'), (1653, 'date_add'), (1607, 'fdiv'), (1608, 'fmod'), (1606, 'generate_subscripts'), (1611, 'geomean'), (1605, 'array_to_string'), (1655, 'get_block_size'), (1640, 'list_any_value'), (1597, 'list_append'), (1630, 'list_approx_count_distinct'), (1624, 'list_avg'), (1633, 'list_bit_and'), (1632, 'list_bit_or'), (1631, 'list_bit_xor'), (1634, 'list_bool_and'), (1598, 'array_append'), (1533, 'pg_ts_dict_is_visible'), (1534, 'pg_ts_parser_is_visible'), (1535, 'pg_ts_template_is_visible'), (1500, 'pg_typeof'), (1536, 'pg_type_is_visible'), (1524, 'shobj_description'), (1619, '&&'), (1623, '<@'), (1622, '@>'), (1635, 'list_bool_or'), (1621, 'array_has_all'), (1618, 'array_has_any'), (1616, 'array_intersect'), (1601, 'array_pop_back'), (1602, 'array_pop_front'), (1600, 'array_prepend'), (1603, 'array_push_back'), (1604, 'array_push_front'), (1614, 'array_reverse'), (1827, 'list_sum'), (1732, 'current_database'), (1753, 'col_description'), (1772, 'user'), (1790, 'split_part'), (1773, 'session_user'), (1774, 'round_even'), (1775, 'roundbankers'), (1834, 'regexp_split_to_table'), (1776, 'nullif'), (1805, 'list_var_samp'), (1806, 'list_var_pop'), (1733, 'current_query'), (1828, 'list_string_agg'), (1808, 'list_stddev_samp'), (1807, 'list_stddev_pop'), (1826, 'list_skewness'), (1809, 'list_sem'), (1793, 'list_reverse'), (1825, 'list_product'), (1779, 'list_prepend'), (1829, 'list_mode'), (1823, 'list_min'), (1742, 'has_schema_privilege'), (1729, 'pg_conf_load_time'), (1756, 'pg_collation_is_visible'), (1754, 'obj_description'), (1726, 'inet_server_port'), (1725, 'inet_server_addr'), (1724, 'inet_client_port'), (1723, 'inet_client_addr'), (1745, 'has_table_privilege'), (1746, 'has_tablespace_privilege'), (1744, 'has_server_privilege'), (1743, 'has_sequence_privilege'), (1830, 'list_median'), (1741, 'has_language_privilege'), (1740, 'has_function_privilege'), (1739, 'has_foreign_data_wrapper_privilege'), (1738, 'has_database_privilege'), (1737, 'has_column_privilege'), (1736, 'has_any_column_privilege'), (1751, 'format_type'), (1750, 'format_pg_type'), (1735, 'current_schemas'), (1734, 'current_schema'), (1784, 'array_push_front'), (1791, 'geomean'), (1786, 'generate_subscripts'), (1788, 'fmod'), (1787, 'fdiv'), (1833, 'date_add'), (1770, 'current_user'), (1769, 'current_role'), (1771, 'current_catalog'), (1789, 'count_if'), (1785, 'array_to_string'), (1794, 'array_reverse'), (1792, 'geometric_mean'), (1783, 'array_push_back'), (1780, 'array_prepend'), (1782, 'array_pop_front'), (1781, 'array_pop_back'), (1796, 'array_intersect'), (1798, 'array_has_any'), (1801, 'array_has_all'), (1778, 'array_append'), (1802, '@>'), (1803, '<@'), (1816, 'list_count'), (1824, 'list_max'), (1831, 'list_mad'), (1818, 'list_last'), (1822, 'list_kurtosis_pop'), (1821, 'list_kurtosis'), (1795, 'list_intersect'), (1832, 'list_histogram'), (1797, 'list_has_any'), (1800, 'list_has_all'), (1819, 'list_first'), (1817, 'list_entropy'), (1757, 'pg_conversion_is_visible'), (1815, 'list_bool_or'), (1814, 'list_bool_and'), (1811, 'list_bit_xor'), (1812, 'list_bit_or'), (1813, 'list_bit_and'), (1804, 'list_avg'), (1810, 'list_approx_count_distinct'), (1777, 'list_append'), (1820, 'list_any_value'), (1835, 'get_block_size'), (1698, 'list_bit_xor'), (1709, 'list_kurtosis_pop'), (1708, 'list_kurtosis'), (1682, 'list_intersect'), (1719, 'list_histogram'), (1684, 'list_has_any'), (1687, 'list_has_all'), (1706, 'list_first'), (1704, 'list_entropy'), (1703, 'list_count'), (1702, 'list_bool_or'), (1701, 'list_bool_and'), (1705, 'list_last'), (1699, 'list_bit_or'), (1700, 'list_bit_and'), (1691, 'list_avg'), (1697, 'list_approx_count_distinct'), (1664, 'list_append'), (1707, 'list_any_value'), (1161, 'json_group_structure'), (1159, 'json_group_object'), (1157, 'json_group_array'), (1163, 'json'), (1694, 'list_stddev_pop'), (1677, 'split_part'), (1660, 'session_user'), (1661, 'round_even'), (1662, 'roundbankers'), (1721, 'regexp_split_to_table'), (1663, 'nullif'), (1692, 'list_var_samp'), (1693, 'list_var_pop'), (1714, 'list_sum'), (1715, 'list_string_agg'), (1695, 'list_stddev_samp'), (1722, 'get_block_size'), (1713, 'list_skewness'), (1696, 'list_sem'), (1680, 'list_reverse'), (1712, 'list_product'), (1666, 'list_prepend'), (1716, 'list_mode'), (1710, 'list_min'), (1717, 'list_median'), (1711, 'list_max'), (1718, 'list_mad'), (1730, 'pg_postmaster_start_time'), (1690, '<@'), (1686, '&&'), (1755, 'shobj_description'), (1767, 'pg_type_is_visible'), (1731, 'pg_typeof'), (1766, 'pg_ts_template_is_visible'), (1765, 'pg_ts_parser_is_visible'), (1764, 'pg_ts_dict_is_visible'), (1763, 'pg_ts_config_is_visible'), (1762, 'pg_table_is_visible'), (1768, 'pg_size_pretty'), (1689, '@>'), (1761, 'pg_opfamily_is_visible'), (1760, 'pg_operator_is_visible'), (1759, 'pg_opclass_is_visible'), (1727, 'pg_my_temp_schema'), (1728, 'pg_is_other_temp_schema'), (1752, 'pg_has_role'), (1747, 'pg_get_viewdef'), (1749, 'pg_get_expr'), (1748, 'pg_get_constraintdef'), (1758, 'pg_function_is_visible'), (1672, 'array_to_string'), (1679, 'geometric_mean'), (1678, 'geomean'), (1673, 'generate_subscripts'), (1675, 'fmod'), (1674, 'fdiv'), (1720, 'date_add'), (1657, 'current_user'), (1656, 'current_role'), (1658, 'current_catalog'), (1676, 'count_if'), (1659, 'user'), (1681, 'array_reverse'), (1671, 'array_push_front'), (1670, 'array_push_back'), (1667, 'array_prepend'), (1669, 'array_pop_front'), (1668, 'array_pop_back'), (1683, 'array_intersect'), (1685, 'array_has_any'), (1688, 'array_has_all'), (1665, 'array_append')]

-----------
QUERY:

SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE (prosrc = '' OR prosrc = '-') AND prosqlbody IS NULL;
RESULT:
	[]

-----------
QUERY:


-- proretset should only be set for normal functions
SELECT p1.oid, p1.proname
FROM pg_proc AS p1
WHERE proretset AND prokind != 'f';
RESULT:
	[]

-----------
QUERY:


-- currently, no built-in functions should be SECURITY DEFINER /* REPLACED */ ,
-- this might change in future, but there will probably never be many.
SELECT p1.oid, p1.proname
FROM pg_proc AS p1
WHERE prosecdef
ORDER BY 1;
RESULT:
	[]

-----------
QUERY:


-- pronargdefaults should be 0 iff proargdefaults is null
SELECT p1.oid, p1.proname
FROM pg_proc AS p1
WHERE (pronargdefaults <> 0) != (proargdefaults IS NOT NULL);
RESULT:
	[]

-----------
QUERY:


-- probin should be non-empty for C functions, null everywhere else
SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE prolang = 13 AND (probin IS NULL OR probin = '' OR probin = '-');
RESULT:
	[]

-----------
QUERY:


SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE prolang != 13 AND probin IS NOT NULL;
RESULT:
	[]

-----------
QUERY:


-- Look for conflicting proc definitions (same names and input datatypes).
-- (This test should be dead code now that we have the unique index
-- pg_proc_proname_args_nsp_index, but I/* REPLACED */ ''ll leave it in anyway.)

SELECT p1.oid, p1.proname, p2.oid, p2.proname
FROM pg_proc AS p1, pg_proc AS p2
WHERE p1.oid != p2.oid AND
    p1.proname = p2.proname AND
    p1.pronargs = p2.pronargs AND
    p1.proargtypes = p2.proargtypes;
RESULT:
	[(370, 'force_checkpoint', 72, 'force_checkpoint'), (318, 'version', 1056, 'version'), (1734, 'current_schema', 542, 'current_schema'), (1733, 'current_query', 540, 'current_query'), (1732, 'current_database', 536, 'current_database'), (866, 'range', 76, 'range'), (648, 'generate_series', 78, 'generate_series'), (1153, 'json_execute_serialized_sql', 1151, 'json_execute_serialized_sql'), (866, 'range', 76, 'range'), (648, 'generate_series', 78, 'generate_series'), (866, 'range', 76, 'range'), (866, 'range', 76, 'range'), (866, 'range', 76, 'range'), (648, 'generate_series', 78, 'generate_series'), (648, 'generate_series', 78, 'generate_series'), (1503, 'current_schema', 542, 'current_schema'), (1502, 'current_query', 540, 'current_query'), (1501, 'current_database', 536, 'current_database'), (78, 'generate_series', 648, 'generate_series'), (76, 'range', 866, 'range'), (78, 'generate_series', 648, 'generate_series'), (76, 'range', 866, 'range'), (648, 'generate_series', 78, 'generate_series'), (78, 'generate_series', 648, 'generate_series'), (78, 'generate_series', 648, 'generate_series'), (76, 'range', 866, 'range'), (76, 'range', 866, 'range'), (76, 'range', 866, 'range'), (1554, 'current_schema', 542, 'current_schema'), (1553, 'current_query', 540, 'current_query'), (1552, 'current_database', 536, 'current_database'), (78, 'generate_series', 648, 'generate_series'), (1660, 'session_user', 1593, 'session_user'), (1659, 'user', 1592, 'user'), (1732, 'current_database', 1552, 'current_database'), (1733, 'current_query', 1553, 'current_query'), (1734, 'current_schema', 1554, 'current_schema'), (1730, 'pg_postmaster_start_time', 1550, 'pg_postmaster_start_time'), (1727, 'pg_my_temp_schema', 1547, 'pg_my_temp_schema'), (1723, 'inet_client_addr', 1543, 'inet_client_addr'), (1725, 'inet_server_addr', 1545, 'inet_server_addr'), (1726, 'inet_server_port', 1546, 'inet_server_port'), (1729, 'pg_conf_load_time', 1549, 'pg_conf_load_time'), (1725, 'inet_server_addr', 1494, 'inet_server_addr'), (1726, 'inet_server_port', 1495, 'inet_server_port'), (1729, 'pg_conf_load_time', 1498, 'pg_conf_load_time'), (1727, 'pg_my_temp_schema', 1496, 'pg_my_temp_schema'), (1730, 'pg_postmaster_start_time', 1499, 'pg_postmaster_start_time'), (1732, 'current_database', 1501, 'current_database'), (1733, 'current_query', 1502, 'current_query'), (1734, 'current_schema', 1503, 'current_schema'), (1723, 'inet_client_addr', 1492, 'inet_client_addr'), (1658, 'current_catalog', 1591, 'current_catalog'), (1656, 'current_role', 1589, 'current_role'), (1657, 'current_user', 1590, 'current_user'), (1659, 'user', 1772, 'user'), (1660, 'session_user', 1773, 'session_user'), (1657, 'current_user', 1770, 'current_user'), (1656, 'current_role', 1769, 'current_role'), (1658, 'current_catalog', 1771, 'current_catalog'), (1694, 'list_stddev_pop', 1627, 'list_stddev_pop'), (1695, 'list_stddev_samp', 1628, 'list_stddev_samp'), (1715, 'list_string_agg', 1648, 'list_string_agg'), (1693, 'list_var_pop', 1626, 'list_var_pop'), (1692, 'list_var_samp', 1625, 'list_var_samp'), (1735, 'current_schemas', 1555, 'current_schemas'), (1703, 'list_count', 1636, 'list_count'), (1750, 'format_pg_type', 1570, 'format_pg_type'), (1705, 'list_last', 1638, 'list_last'), (1704, 'list_entropy', 1637, 'list_entropy'), (1706, 'list_first', 1639, 'list_first'), (1719, 'list_histogram', 1652, 'list_histogram'), (1708, 'list_kurtosis', 1641, 'list_kurtosis'), (1709, 'list_kurtosis_pop', 1642, 'list_kurtosis_pop'), (1713, 'list_skewness', 1646, 'list_skewness'), (1718, 'list_mad', 1651, 'list_mad'), (1711, 'list_max', 1644, 'list_max'), (1717, 'list_median', 1650, 'list_median'), (1710, 'list_min', 1643, 'list_min'), (1712, 'list_product', 1645, 'list_product'), (1680, 'list_reverse', 1613, 'list_reverse'), (1747, 'pg_get_viewdef', 1567, 'pg_get_viewdef'), (1728, 'pg_is_other_temp_schema', 1548, 'pg_is_other_temp_schema'), (1759, 'pg_opclass_is_visible', 1579, 'pg_opclass_is_visible'), (1760, 'pg_operator_is_visible', 1580, 'pg_operator_is_visible'), (1761, 'pg_opfamily_is_visible', 1581, 'pg_opfamily_is_visible'), (1758, 'pg_function_is_visible', 1578, 'pg_function_is_visible'), (1762, 'pg_table_is_visible', 1582, 'pg_table_is_visible'), (1763, 'pg_ts_config_is_visible', 1583, 'pg_ts_config_is_visible'), (1764, 'pg_ts_dict_is_visible', 1584, 'pg_ts_dict_is_visible'), (1765, 'pg_ts_parser_is_visible', 1585, 'pg_ts_parser_is_visible'), (1766, 'pg_ts_template_is_visible', 1586, 'pg_ts_template_is_visible'), (1731, 'pg_typeof', 1551, 'pg_typeof'), (1767, 'pg_type_is_visible', 1587, 'pg_type_is_visible'), (1756, 'pg_collation_is_visible', 1576, 'pg_collation_is_visible'), (1757, 'pg_conversion_is_visible', 1577, 'pg_conversion_is_visible'), (1747, 'pg_get_viewdef', 1516, 'pg_get_viewdef'), (1756, 'pg_collation_is_visible', 1525, 'pg_collation_is_visible'), (1757, 'pg_conversion_is_visible', 1526, 'pg_conversion_is_visible'), (1758, 'pg_function_is_visible', 1527, 'pg_function_is_visible'), (1728, 'pg_is_other_temp_schema', 1497, 'pg_is_other_temp_schema'), (1759, 'pg_opclass_is_visible', 1528, 'pg_opclass_is_visible'), (1760, 'pg_operator_is_visible', 1529, 'pg_operator_is_visible'), (1761, 'pg_opfamily_is_visible', 1530, 'pg_opfamily_is_visible'), (1762, 'pg_table_is_visible', 1531, 'pg_table_is_visible'), (1735, 'current_schemas', 1504, 'current_schemas'), (1750, 'format_pg_type', 1519, 'format_pg_type'), (1763, 'pg_ts_config_is_visible', 1532, 'pg_ts_config_is_visible'), (1679, 'geometric_mean', 1612, 'geometric_mean'), (1676, 'count_if', 1609, 'count_if'), (1678, 'geomean', 1611, 'geomean'), (1722, 'get_block_size', 1655, 'get_block_size'), (1707, 'list_any_value', 1640, 'list_any_value'), (1691, 'list_avg', 1624, 'list_avg'), (1700, 'list_bit_and', 1633, 'list_bit_and'), (1699, 'list_bit_or', 1632, 'list_bit_or'), (1698, 'list_bit_xor', 1631, 'list_bit_xor'), (1701, 'list_bool_and', 1634, 'list_bool_and'), (1764, 'pg_ts_dict_is_visible', 1533, 'pg_ts_dict_is_visible'), (1765, 'pg_ts_parser_is_visible', 1534, 'pg_ts_parser_is_visible'), (1766, 'pg_ts_template_is_visible', 1535, 'pg_ts_template_is_visible'), (1731, 'pg_typeof', 1500, 'pg_typeof'), (1767, 'pg_type_is_visible', 1536, 'pg_type_is_visible'), (1702, 'list_bool_or', 1635, 'list_bool_or'), (1669, 'array_pop_front', 1602, 'array_pop_front'), (1681, 'array_reverse', 1614, 'array_reverse'), (1692, 'list_var_samp', 1805, 'list_var_samp'), (1693, 'list_var_pop', 1806, 'list_var_pop'), (1715, 'list_string_agg', 1828, 'list_string_agg'), (1695, 'list_stddev_samp', 1808, 'list_stddev_samp'), (1694, 'list_stddev_pop', 1807, 'list_stddev_pop'), (1713, 'list_skewness', 1826, 'list_skewness'), (1680, 'list_reverse', 1793, 'list_reverse'), (1712, 'list_product', 1825, 'list_product'), (1710, 'list_min', 1823, 'list_min'), (1717, 'list_median', 1830, 'list_median'), (1678, 'geomean', 1791, 'geomean'), (1676, 'count_if', 1789, 'count_if'), (1681, 'array_reverse', 1794, 'array_reverse'), (1679, 'geometric_mean', 1792, 'geometric_mean'), (1669, 'array_pop_front', 1782, 'array_pop_front'), (1703, 'list_count', 1816, 'list_count'), (1711, 'list_max', 1824, 'list_max'), (1718, 'list_mad', 1831, 'list_mad'), (1705, 'list_last', 1818, 'list_last'), (1709, 'list_kurtosis_pop', 1822, 'list_kurtosis_pop'), (1708, 'list_kurtosis', 1821, 'list_kurtosis'), (1719, 'list_histogram', 1832, 'list_histogram'), (1706, 'list_first', 1819, 'list_first'), (1704, 'list_entropy', 1817, 'list_entropy'), (1702, 'list_bool_or', 1815, 'list_bool_or'), (1701, 'list_bool_and', 1814, 'list_bool_and'), (1698, 'list_bit_xor', 1811, 'list_bit_xor'), (1699, 'list_bit_or', 1812, 'list_bit_or'), (1700, 'list_bit_and', 1813, 'list_bit_and'), (1691, 'list_avg', 1804, 'list_avg'), (1707, 'list_any_value', 1820, 'list_any_value'), (1722, 'get_block_size', 1835, 'get_block_size'), (1663, 'nullif', 1596, 'nullif'), (1721, 'regexp_split_to_table', 1654, 'regexp_split_to_table'), (1662, 'roundbankers', 1595, 'roundbankers'), (1661, 'round_even', 1594, 'round_even'), (1753, 'col_description', 1573, 'col_description'), (1755, 'shobj_description', 1575, 'shobj_description'), (1687, 'list_has_all', 1620, 'list_has_all'), (1684, 'list_has_any', 1617, 'list_has_any'), (1682, 'list_intersect', 1615, 'list_intersect'), (1666, 'list_prepend', 1599, 'list_prepend'), (1748, 'pg_get_constraintdef', 1568, 'pg_get_constraintdef'), (1749, 'pg_get_expr', 1569, 'pg_get_expr'), (1686, '&&', 1799, '&&'), (1746, 'has_tablespace_privilege', 1566, 'has_tablespace_privilege'), (1736, 'has_any_column_privilege', 1556, 'has_any_column_privilege'), (1738, 'has_database_privilege', 1558, 'has_database_privilege'), (1740, 'has_function_privilege', 1560, 'has_function_privilege'), (1741, 'has_language_privilege', 1561, 'has_language_privilege'), (1742, 'has_schema_privilege', 1562, 'has_schema_privilege'), (1743, 'has_sequence_privilege', 1563, 'has_sequence_privilege'), (1744, 'has_server_privilege', 1564, 'has_server_privilege'), (1751, 'format_type', 1571, 'format_type'), (1745, 'has_table_privilege', 1565, 'has_table_privilege'), (1748, 'pg_get_constraintdef', 1517, 'pg_get_constraintdef'), (1749, 'pg_get_expr', 1518, 'pg_get_expr'), (1738, 'has_database_privilege', 1507, 'has_database_privilege'), (1753, 'col_description', 1522, 'col_description'), (1751, 'format_type', 1520, 'format_type'), (1736, 'has_any_column_privilege', 1505, 'has_any_column_privilege'), (1740, 'has_function_privilege', 1509, 'has_function_privilege'), (1741, 'has_language_privilege', 1510, 'has_language_privilege'), (1742, 'has_schema_privilege', 1511, 'has_schema_privilege'), (1743, 'has_sequence_privilege', 1512, 'has_sequence_privilege'), (1744, 'has_server_privilege', 1513, 'has_server_privilege'), (1746, 'has_tablespace_privilege', 1515, 'has_tablespace_privilege'), (1745, 'has_table_privilege', 1514, 'has_table_privilege'), (1720, 'date_add', 1653, 'date_add'), (1674, 'fdiv', 1607, 'fdiv'), (1675, 'fmod', 1608, 'fmod'), (1673, 'generate_subscripts', 1606, 'generate_subscripts'), (1672, 'array_to_string', 1605, 'array_to_string'), (1664, 'list_append', 1597, 'list_append'), (1665, 'array_append', 1598, 'array_append'), (1755, 'shobj_description', 1524, 'shobj_description'), (1686, '&&', 1619, '&&'), (1690, '<@', 1623, '<@'), (1688, 'array_has_all', 1621, 'array_has_all'), (1685, 'array_has_any', 1618, 'array_has_any'), (1667, 'array_prepend', 1600, 'array_prepend'), (1670, 'array_push_back', 1603, 'array_push_back'), (1671, 'array_push_front', 1604, 'array_push_front'), (1661, 'round_even', 1774, 'round_even'), (1662, 'roundbankers', 1775, 'roundbankers'), (1721, 'regexp_split_to_table', 1834, 'regexp_split_to_table'), (1663, 'nullif', 1776, 'nullif'), (1666, 'list_prepend', 1779, 'list_prepend'), (1671, 'array_push_front', 1784, 'array_push_front'), (1673, 'generate_subscripts', 1786, 'generate_subscripts'), (1675, 'fmod', 1788, 'fmod'), (1674, 'fdiv', 1787, 'fdiv'), (1720, 'date_add', 1833, 'date_add'), (1672, 'array_to_string', 1785, 'array_to_string'), (1670, 'array_push_back', 1783, 'array_push_back'), (1667, 'array_prepend', 1780, 'array_prepend'), (1685, 'array_has_any', 1798, 'array_has_any'), (1688, 'array_has_all', 1801, 'array_has_all'), (1665, 'array_append', 1778, 'array_append'), (1690, '<@', 1803, '<@'), (1682, 'list_intersect', 1795, 'list_intersect'), (1684, 'list_has_any', 1797, 'list_has_any'), (1687, 'list_has_all', 1800, 'list_has_all'), (1664, 'list_append', 1777, 'list_append'), (1677, 'split_part', 1610, 'split_part'), (1752, 'pg_has_role', 1572, 'pg_has_role'), (1737, 'has_column_privilege', 1557, 'has_column_privilege'), (1752, 'pg_has_role', 1521, 'pg_has_role'), (1737, 'has_column_privilege', 1506, 'has_column_privilege'), (1677, 'split_part', 1790, 'split_part'), (1056, 'version', 318, 'version'), (72, 'force_checkpoint', 370, 'force_checkpoint'), (1773, 'session_user', 1593, 'session_user'), (1772, 'user', 1592, 'user'), (1501, 'current_database', 1552, 'current_database'), (1502, 'current_query', 1553, 'current_query'), (1503, 'current_schema', 1554, 'current_schema'), (1499, 'pg_postmaster_start_time', 1550, 'pg_postmaster_start_time'), (1496, 'pg_my_temp_schema', 1547, 'pg_my_temp_schema'), (1492, 'inet_client_addr', 1543, 'inet_client_addr'), (1724, 'inet_client_port', 1544, 'inet_client_port'), (1494, 'inet_server_addr', 1545, 'inet_server_addr'), (1495, 'inet_server_port', 1546, 'inet_server_port'), (1498, 'pg_conf_load_time', 1549, 'pg_conf_load_time'), (1724, 'inet_client_port', 1493, 'inet_client_port'), (1771, 'current_catalog', 1591, 'current_catalog'), (1769, 'current_role', 1589, 'current_role'), (1770, 'current_user', 1590, 'current_user'), (1501, 'current_database', 1732, 'current_database'), (1502, 'current_query', 1733, 'current_query'), (1498, 'pg_conf_load_time', 1729, 'pg_conf_load_time'), (1495, 'inet_server_port', 1726, 'inet_server_port'), (1494, 'inet_server_addr', 1725, 'inet_server_addr'), (1492, 'inet_client_addr', 1723, 'inet_client_addr'), (1503, 'current_schema', 1734, 'current_schema'), (1773, 'session_user', 1660, 'session_user'), (1499, 'pg_postmaster_start_time', 1730, 'pg_postmaster_start_time'), (1496, 'pg_my_temp_schema', 1727, 'pg_my_temp_schema'), (1770, 'current_user', 1657, 'current_user'), (1769, 'current_role', 1656, 'current_role'), (1771, 'current_catalog', 1658, 'current_catalog'), (1772, 'user', 1659, 'user'), (1151, 'json_execute_serialized_sql', 1153, 'json_execute_serialized_sql'), (1807, 'list_stddev_pop', 1627, 'list_stddev_pop'), (1808, 'list_stddev_samp', 1628, 'list_stddev_samp'), (1828, 'list_string_agg', 1648, 'list_string_agg'), (1714, 'list_sum', 1647, 'list_sum'), (1806, 'list_var_pop', 1626, 'list_var_pop'), (1805, 'list_var_samp', 1625, 'list_var_samp'), (1504, 'current_schemas', 1555, 'current_schemas'), (1816, 'list_count', 1636, 'list_count'), (1519, 'format_pg_type', 1570, 'format_pg_type'), (1818, 'list_last', 1638, 'list_last'), (1817, 'list_entropy', 1637, 'list_entropy'), (1819, 'list_first', 1639, 'list_first'), (1832, 'list_histogram', 1652, 'list_histogram'), (1821, 'list_kurtosis', 1641, 'list_kurtosis'), (1822, 'list_kurtosis_pop', 1642, 'list_kurtosis_pop'), (1826, 'list_skewness', 1646, 'list_skewness'), (1831, 'list_mad', 1651, 'list_mad'), (1824, 'list_max', 1644, 'list_max'), (1830, 'list_median', 1650, 'list_median'), (1823, 'list_min', 1643, 'list_min'), (1716, 'list_mode', 1649, 'list_mode'), (1825, 'list_product', 1645, 'list_product'), (1793, 'list_reverse', 1613, 'list_reverse'), (1696, 'list_sem', 1629, 'list_sem'), (1516, 'pg_get_viewdef', 1567, 'pg_get_viewdef'), (1497, 'pg_is_other_temp_schema', 1548, 'pg_is_other_temp_schema'), (1528, 'pg_opclass_is_visible', 1579, 'pg_opclass_is_visible'), (1529, 'pg_operator_is_visible', 1580, 'pg_operator_is_visible'), (1530, 'pg_opfamily_is_visible', 1581, 'pg_opfamily_is_visible'), (1527, 'pg_function_is_visible', 1578, 'pg_function_is_visible'), (1768, 'pg_size_pretty', 1588, 'pg_size_pretty'), (1531, 'pg_table_is_visible', 1582, 'pg_table_is_visible'), (1532, 'pg_ts_config_is_visible', 1583, 'pg_ts_config_is_visible'), (1533, 'pg_ts_dict_is_visible', 1584, 'pg_ts_dict_is_visible'), (1534, 'pg_ts_parser_is_visible', 1585, 'pg_ts_parser_is_visible'), (1535, 'pg_ts_template_is_visible', 1586, 'pg_ts_template_is_visible'), (1500, 'pg_typeof', 1551, 'pg_typeof'), (1536, 'pg_type_is_visible', 1587, 'pg_type_is_visible'), (1525, 'pg_collation_is_visible', 1576, 'pg_collation_is_visible'), (1526, 'pg_conversion_is_visible', 1577, 'pg_conversion_is_visible'), (1768, 'pg_size_pretty', 1537, 'pg_size_pretty'), (1792, 'geometric_mean', 1612, 'geometric_mean'), (1789, 'count_if', 1609, 'count_if'), (1791, 'geomean', 1611, 'geomean'), (1835, 'get_block_size', 1655, 'get_block_size'), (1820, 'list_any_value', 1640, 'list_any_value'), (1697, 'list_approx_count_distinct', 1630, 'list_approx_count_distinct'), (1804, 'list_avg', 1624, 'list_avg'), (1813, 'list_bit_and', 1633, 'list_bit_and'), (1812, 'list_bit_or', 1632, 'list_bit_or'), (1811, 'list_bit_xor', 1631, 'list_bit_xor'), (1814, 'list_bool_and', 1634, 'list_bool_and'), (1815, 'list_bool_or', 1635, 'list_bool_or'), (1668, 'array_pop_back', 1601, 'array_pop_back'), (1782, 'array_pop_front', 1602, 'array_pop_front'), (1794, 'array_reverse', 1614, 'array_reverse'), (1714, 'list_sum', 1827, 'list_sum'), (1696, 'list_sem', 1809, 'list_sem'), (1716, 'list_mode', 1829, 'list_mode'), (1525, 'pg_collation_is_visible', 1756, 'pg_collation_is_visible'), (1519, 'format_pg_type', 1750, 'format_pg_type'), (1504, 'current_schemas', 1735, 'current_schemas'), (1668, 'array_pop_back', 1781, 'array_pop_back'), (1526, 'pg_conversion_is_visible', 1757, 'pg_conversion_is_visible'), (1697, 'list_approx_count_distinct', 1810, 'list_approx_count_distinct'), (1811, 'list_bit_xor', 1698, 'list_bit_xor'), (1822, 'list_kurtosis_pop', 1709, 'list_kurtosis_pop'), (1821, 'list_kurtosis', 1708, 'list_kurtosis'), (1832, 'list_histogram', 1719, 'list_histogram'), (1819, 'list_first', 1706, 'list_first'), (1817, 'list_entropy', 1704, 'list_entropy'), (1816, 'list_count', 1703, 'list_count'), (1815, 'list_bool_or', 1702, 'list_bool_or'), (1814, 'list_bool_and', 1701, 'list_bool_and'), (1818, 'list_last', 1705, 'list_last'), (1812, 'list_bit_or', 1699, 'list_bit_or'), (1813, 'list_bit_and', 1700, 'list_bit_and'), (1804, 'list_avg', 1691, 'list_avg'), (1820, 'list_any_value', 1707, 'list_any_value'), (1807, 'list_stddev_pop', 1694, 'list_stddev_pop'), (1805, 'list_var_samp', 1692, 'list_var_samp'), (1806, 'list_var_pop', 1693, 'list_var_pop'), (1828, 'list_string_agg', 1715, 'list_string_agg'), (1808, 'list_stddev_samp', 1695, 'list_stddev_samp'), (1835, 'get_block_size', 1722, 'get_block_size'), (1826, 'list_skewness', 1713, 'list_skewness'), (1793, 'list_reverse', 1680, 'list_reverse'), (1825, 'list_product', 1712, 'list_product'), (1823, 'list_min', 1710, 'list_min'), (1830, 'list_median', 1717, 'list_median'), (1824, 'list_max', 1711, 'list_max'), (1831, 'list_mad', 1718, 'list_mad'), (1536, 'pg_type_is_visible', 1767, 'pg_type_is_visible'), (1500, 'pg_typeof', 1731, 'pg_typeof'), (1535, 'pg_ts_template_is_visible', 1766, 'pg_ts_template_is_visible'), (1534, 'pg_ts_parser_is_visible', 1765, 'pg_ts_parser_is_visible'), (1533, 'pg_ts_dict_is_visible', 1764, 'pg_ts_dict_is_visible'), (1532, 'pg_ts_config_is_visible', 1763, 'pg_ts_config_is_visible'), (1531, 'pg_table_is_visible', 1762, 'pg_table_is_visible'), (1530, 'pg_opfamily_is_visible', 1761, 'pg_opfamily_is_visible'), (1529, 'pg_operator_is_visible', 1760, 'pg_operator_is_visible'), (1528, 'pg_opclass_is_visible', 1759, 'pg_opclass_is_visible'), (1497, 'pg_is_other_temp_schema', 1728, 'pg_is_other_temp_schema'), (1516, 'pg_get_viewdef', 1747, 'pg_get_viewdef'), (1527, 'pg_function_is_visible', 1758, 'pg_function_is_visible'), (1792, 'geometric_mean', 1679, 'geometric_mean'), (1791, 'geomean', 1678, 'geomean'), (1789, 'count_if', 1676, 'count_if'), (1794, 'array_reverse', 1681, 'array_reverse'), (1782, 'array_pop_front', 1669, 'array_pop_front'), (1776, 'nullif', 1596, 'nullif'), (1834, 'regexp_split_to_table', 1654, 'regexp_split_to_table'), (1775, 'roundbankers', 1595, 'roundbankers'), (1774, 'round_even', 1594, 'round_even'), (1522, 'col_description', 1573, 'col_description'), (1524, 'shobj_description', 1575, 'shobj_description'), (1800, 'list_has_all', 1620, 'list_has_all'), (1797, 'list_has_any', 1617, 'list_has_any'), (1795, 'list_intersect', 1615, 'list_intersect'), (1779, 'list_prepend', 1599, 'list_prepend'), (1517, 'pg_get_constraintdef', 1568, 'pg_get_constraintdef'), (1518, 'pg_get_expr', 1569, 'pg_get_expr'), (1619, '&&', 1799, '&&'), (1515, 'has_tablespace_privilege', 1566, 'has_tablespace_privilege'), (1505, 'has_any_column_privilege', 1556, 'has_any_column_privilege'), (1507, 'has_database_privilege', 1558, 'has_database_privilege'), (1739, 'has_foreign_data_wrapper_privilege', 1559, 'has_foreign_data_wrapper_privilege'), (1509, 'has_function_privilege', 1560, 'has_function_privilege'), (1510, 'has_language_privilege', 1561, 'has_language_privilege'), (1511, 'has_schema_privilege', 1562, 'has_schema_privilege'), (1512, 'has_sequence_privilege', 1563, 'has_sequence_privilege'), (1513, 'has_server_privilege', 1564, 'has_server_privilege'), (1520, 'format_type', 1571, 'format_type'), (1514, 'has_table_privilege', 1565, 'has_table_privilege'), (1754, 'obj_description', 1574, 'obj_description'), (1754, 'obj_description', 1523, 'obj_description'), (1739, 'has_foreign_data_wrapper_privilege', 1508, 'has_foreign_data_wrapper_privilege'), (1833, 'date_add', 1653, 'date_add'), (1787, 'fdiv', 1607, 'fdiv'), (1788, 'fmod', 1608, 'fmod'), (1786, 'generate_subscripts', 1606, 'generate_subscripts'), (1785, 'array_to_string', 1605, 'array_to_string'), (1777, 'list_append', 1597, 'list_append'), (1778, 'array_append', 1598, 'array_append'), (1803, '<@', 1623, '<@'), (1689, '@>', 1622, '@>'), (1801, 'array_has_all', 1621, 'array_has_all'), (1798, 'array_has_any', 1618, 'array_has_any'), (1683, 'array_intersect', 1616, 'array_intersect'), (1780, 'array_prepend', 1600, 'array_prepend'), (1783, 'array_push_back', 1603, 'array_push_back'), (1784, 'array_push_front', 1604, 'array_push_front'), (1522, 'col_description', 1753, 'col_description'), (1511, 'has_schema_privilege', 1742, 'has_schema_privilege'), (1514, 'has_table_privilege', 1745, 'has_table_privilege'), (1515, 'has_tablespace_privilege', 1746, 'has_tablespace_privilege'), (1513, 'has_server_privilege', 1744, 'has_server_privilege'), (1512, 'has_sequence_privilege', 1743, 'has_sequence_privilege'), (1510, 'has_language_privilege', 1741, 'has_language_privilege'), (1509, 'has_function_privilege', 1740, 'has_function_privilege'), (1507, 'has_database_privilege', 1738, 'has_database_privilege'), (1505, 'has_any_column_privilege', 1736, 'has_any_column_privilege'), (1520, 'format_type', 1751, 'format_type'), (1683, 'array_intersect', 1796, 'array_intersect'), (1689, '@>', 1802, '@>'), (1795, 'list_intersect', 1682, 'list_intersect'), (1797, 'list_has_any', 1684, 'list_has_any'), (1800, 'list_has_all', 1687, 'list_has_all'), (1777, 'list_append', 1664, 'list_append'), (1774, 'round_even', 1661, 'round_even'), (1775, 'roundbankers', 1662, 'roundbankers'), (1834, 'regexp_split_to_table', 1721, 'regexp_split_to_table'), (1776, 'nullif', 1663, 'nullif'), (1779, 'list_prepend', 1666, 'list_prepend'), (1803, '<@', 1690, '<@'), (1619, '&&', 1686, '&&'), (1524, 'shobj_description', 1755, 'shobj_description'), (1518, 'pg_get_expr', 1749, 'pg_get_expr'), (1517, 'pg_get_constraintdef', 1748, 'pg_get_constraintdef'), (1785, 'array_to_string', 1672, 'array_to_string'), (1786, 'generate_subscripts', 1673, 'generate_subscripts'), (1788, 'fmod', 1675, 'fmod'), (1787, 'fdiv', 1674, 'fdiv'), (1833, 'date_add', 1720, 'date_add'), (1784, 'array_push_front', 1671, 'array_push_front'), (1783, 'array_push_back', 1670, 'array_push_back'), (1780, 'array_prepend', 1667, 'array_prepend'), (1798, 'array_has_any', 1685, 'array_has_any'), (1801, 'array_has_all', 1688, 'array_has_all'), (1778, 'array_append', 1665, 'array_append'), (1790, 'split_part', 1610, 'split_part'), (1521, 'pg_has_role', 1572, 'pg_has_role'), (1506, 'has_column_privilege', 1557, 'has_column_privilege'), (1506, 'has_column_privilege', 1737, 'has_column_privilege'), (1790, 'split_part', 1677, 'split_part'), (1521, 'pg_has_role', 1752, 'pg_has_role'), (1493, 'inet_client_port', 1544, 'inet_client_port'), (1545, 'inet_server_addr', 1494, 'inet_server_addr'), (1546, 'inet_server_port', 1495, 'inet_server_port'), (1549, 'pg_conf_load_time', 1498, 'pg_conf_load_time'), (1547, 'pg_my_temp_schema', 1496, 'pg_my_temp_schema'), (1550, 'pg_postmaster_start_time', 1499, 'pg_postmaster_start_time'), (1552, 'current_database', 1501, 'current_database'), (1553, 'current_query', 1502, 'current_query'), (1554, 'current_schema', 1503, 'current_schema'), (1543, 'inet_client_addr', 1492, 'inet_client_addr'), (1552, 'current_database', 1732, 'current_database'), (1592, 'user', 1772, 'user'), (1593, 'session_user', 1773, 'session_user'), (1553, 'current_query', 1733, 'current_query'), (1549, 'pg_conf_load_time', 1729, 'pg_conf_load_time'), (1546, 'inet_server_port', 1726, 'inet_server_port'), (1545, 'inet_server_addr', 1725, 'inet_server_addr'), (1493, 'inet_client_port', 1724, 'inet_client_port'), (1543, 'inet_client_addr', 1723, 'inet_client_addr'), (1554, 'current_schema', 1734, 'current_schema'), (1590, 'current_user', 1770, 'current_user'), (1589, 'current_role', 1769, 'current_role'), (1591, 'current_catalog', 1771, 'current_catalog'), (1593, 'session_user', 1660, 'session_user'), (1550, 'pg_postmaster_start_time', 1730, 'pg_postmaster_start_time'), (1547, 'pg_my_temp_schema', 1727, 'pg_my_temp_schema'), (1590, 'current_user', 1657, 'current_user'), (1589, 'current_role', 1656, 'current_role'), (1591, 'current_catalog', 1658, 'current_catalog'), (1592, 'user', 1659, 'user'), (1827, 'list_sum', 1647, 'list_sum'), (1829, 'list_mode', 1649, 'list_mode'), (1809, 'list_sem', 1629, 'list_sem'), (1537, 'pg_size_pretty', 1588, 'pg_size_pretty'), (1567, 'pg_get_viewdef', 1516, 'pg_get_viewdef'), (1576, 'pg_collation_is_visible', 1525, 'pg_collation_is_visible'), (1577, 'pg_conversion_is_visible', 1526, 'pg_conversion_is_visible'), (1578, 'pg_function_is_visible', 1527, 'pg_function_is_visible'), (1548, 'pg_is_other_temp_schema', 1497, 'pg_is_other_temp_schema'), (1579, 'pg_opclass_is_visible', 1528, 'pg_opclass_is_visible'), (1580, 'pg_operator_is_visible', 1529, 'pg_operator_is_visible'), (1581, 'pg_opfamily_is_visible', 1530, 'pg_opfamily_is_visible'), (1582, 'pg_table_is_visible', 1531, 'pg_table_is_visible'), (1555, 'current_schemas', 1504, 'current_schemas'), (1570, 'format_pg_type', 1519, 'format_pg_type'), (1583, 'pg_ts_config_is_visible', 1532, 'pg_ts_config_is_visible'), (1810, 'list_approx_count_distinct', 1630, 'list_approx_count_distinct'), (1584, 'pg_ts_dict_is_visible', 1533, 'pg_ts_dict_is_visible'), (1585, 'pg_ts_parser_is_visible', 1534, 'pg_ts_parser_is_visible'), (1586, 'pg_ts_template_is_visible', 1535, 'pg_ts_template_is_visible'), (1551, 'pg_typeof', 1500, 'pg_typeof'), (1587, 'pg_type_is_visible', 1536, 'pg_type_is_visible'), (1781, 'array_pop_back', 1601, 'array_pop_back'), (1625, 'list_var_samp', 1805, 'list_var_samp'), (1626, 'list_var_pop', 1806, 'list_var_pop'), (1648, 'list_string_agg', 1828, 'list_string_agg'), (1628, 'list_stddev_samp', 1808, 'list_stddev_samp'), (1627, 'list_stddev_pop', 1807, 'list_stddev_pop'), (1646, 'list_skewness', 1826, 'list_skewness'), (1613, 'list_reverse', 1793, 'list_reverse'), (1645, 'list_product', 1825, 'list_product'), (1643, 'list_min', 1823, 'list_min'), (1576, 'pg_collation_is_visible', 1756, 'pg_collation_is_visible'), (1650, 'list_median', 1830, 'list_median'), (1570, 'format_pg_type', 1750, 'format_pg_type'), (1555, 'current_schemas', 1735, 'current_schemas'), (1611, 'geomean', 1791, 'geomean'), (1609, 'count_if', 1789, 'count_if'), (1614, 'array_reverse', 1794, 'array_reverse'), (1612, 'geometric_mean', 1792, 'geometric_mean'), (1602, 'array_pop_front', 1782, 'array_pop_front'), (1636, 'list_count', 1816, 'list_count'), (1644, 'list_max', 1824, 'list_max'), (1651, 'list_mad', 1831, 'list_mad'), (1638, 'list_last', 1818, 'list_last'), (1642, 'list_kurtosis_pop', 1822, 'list_kurtosis_pop'), (1641, 'list_kurtosis', 1821, 'list_kurtosis'), (1652, 'list_histogram', 1832, 'list_histogram'), (1639, 'list_first', 1819, 'list_first'), (1637, 'list_entropy', 1817, 'list_entropy'), (1577, 'pg_conversion_is_visible', 1757, 'pg_conversion_is_visible'), (1635, 'list_bool_or', 1815, 'list_bool_or'), (1634, 'list_bool_and', 1814, 'list_bool_and'), (1631, 'list_bit_xor', 1811, 'list_bit_xor'), (1632, 'list_bit_or', 1812, 'list_bit_or'), (1633, 'list_bit_and', 1813, 'list_bit_and'), (1624, 'list_avg', 1804, 'list_avg'), (1640, 'list_any_value', 1820, 'list_any_value'), (1655, 'get_block_size', 1835, 'get_block_size'), (1631, 'list_bit_xor', 1698, 'list_bit_xor'), (1642, 'list_kurtosis_pop', 1709, 'list_kurtosis_pop'), (1641, 'list_kurtosis', 1708, 'list_kurtosis'), (1652, 'list_histogram', 1719, 'list_histogram'), (1639, 'list_first', 1706, 'list_first'), (1637, 'list_entropy', 1704, 'list_entropy'), (1636, 'list_count', 1703, 'list_count'), (1635, 'list_bool_or', 1702, 'list_bool_or'), (1634, 'list_bool_and', 1701, 'list_bool_and'), (1638, 'list_last', 1705, 'list_last'), (1632, 'list_bit_or', 1699, 'list_bit_or'), (1633, 'list_bit_and', 1700, 'list_bit_and'), (1624, 'list_avg', 1691, 'list_avg'), (1810, 'list_approx_count_distinct', 1697, 'list_approx_count_distinct'), (1640, 'list_any_value', 1707, 'list_any_value'), (1627, 'list_stddev_pop', 1694, 'list_stddev_pop'), (1625, 'list_var_samp', 1692, 'list_var_samp'), (1626, 'list_var_pop', 1693, 'list_var_pop'), (1827, 'list_sum', 1714, 'list_sum'), (1648, 'list_string_agg', 1715, 'list_string_agg'), (1628, 'list_stddev_samp', 1695, 'list_stddev_samp'), (1655, 'get_block_size', 1722, 'get_block_size'), (1646, 'list_skewness', 1713, 'list_skewness'), (1809, 'list_sem', 1696, 'list_sem'), (1613, 'list_reverse', 1680, 'list_reverse'), (1645, 'list_product', 1712, 'list_product'), (1829, 'list_mode', 1716, 'list_mode'), (1643, 'list_min', 1710, 'list_min'), (1650, 'list_median', 1717, 'list_median'), (1644, 'list_max', 1711, 'list_max'), (1651, 'list_mad', 1718, 'list_mad'), (1587, 'pg_type_is_visible', 1767, 'pg_type_is_visible'), (1551, 'pg_typeof', 1731, 'pg_typeof'), (1586, 'pg_ts_template_is_visible', 1766, 'pg_ts_template_is_visible'), (1585, 'pg_ts_parser_is_visible', 1765, 'pg_ts_parser_is_visible'), (1584, 'pg_ts_dict_is_visible', 1764, 'pg_ts_dict_is_visible'), (1583, 'pg_ts_config_is_visible', 1763, 'pg_ts_config_is_visible'), (1582, 'pg_table_is_visible', 1762, 'pg_table_is_visible'), (1537, 'pg_size_pretty', 1768, 'pg_size_pretty'), (1581, 'pg_opfamily_is_visible', 1761, 'pg_opfamily_is_visible'), (1580, 'pg_operator_is_visible', 1760, 'pg_operator_is_visible'), (1579, 'pg_opclass_is_visible', 1759, 'pg_opclass_is_visible'), (1548, 'pg_is_other_temp_schema', 1728, 'pg_is_other_temp_schema'), (1567, 'pg_get_viewdef', 1747, 'pg_get_viewdef'), (1578, 'pg_function_is_visible', 1758, 'pg_function_is_visible'), (1612, 'geometric_mean', 1679, 'geometric_mean'), (1611, 'geomean', 1678, 'geomean'), (1609, 'count_if', 1676, 'count_if'), (1614, 'array_reverse', 1681, 'array_reverse'), (1602, 'array_pop_front', 1669, 'array_pop_front'), (1781, 'array_pop_back', 1668, 'array_pop_back'), (1508, 'has_foreign_data_wrapper_privilege', 1559, 'has_foreign_data_wrapper_privilege'), (1523, 'obj_description', 1574, 'obj_description'), (1568, 'pg_get_constraintdef', 1517, 'pg_get_constraintdef'), (1569, 'pg_get_expr', 1518, 'pg_get_expr'), (1558, 'has_database_privilege', 1507, 'has_database_privilege'), (1573, 'col_description', 1522, 'col_description'), (1571, 'format_type', 1520, 'format_type'), (1556, 'has_any_column_privilege', 1505, 'has_any_column_privilege'), (1560, 'has_function_privilege', 1509, 'has_function_privilege'), (1561, 'has_language_privilege', 1510, 'has_language_privilege'), (1562, 'has_schema_privilege', 1511, 'has_schema_privilege'), (1563, 'has_sequence_privilege', 1512, 'has_sequence_privilege'), (1564, 'has_server_privilege', 1513, 'has_server_privilege'), (1566, 'has_tablespace_privilege', 1515, 'has_tablespace_privilege'), (1565, 'has_table_privilege', 1514, 'has_table_privilege'), (1575, 'shobj_description', 1524, 'shobj_description'), (1799, '&&', 1619, '&&'), (1802, '@>', 1622, '@>'), (1796, 'array_intersect', 1616, 'array_intersect'), (1573, 'col_description', 1753, 'col_description'), (1594, 'round_even', 1774, 'round_even'), (1595, 'roundbankers', 1775, 'roundbankers'), (1654, 'regexp_split_to_table', 1834, 'regexp_split_to_table'), (1596, 'nullif', 1776, 'nullif'), (1599, 'list_prepend', 1779, 'list_prepend'), (1562, 'has_schema_privilege', 1742, 'has_schema_privilege'), (1523, 'obj_description', 1754, 'obj_description'), (1565, 'has_table_privilege', 1745, 'has_table_privilege'), (1566, 'has_tablespace_privilege', 1746, 'has_tablespace_privilege'), (1564, 'has_server_privilege', 1744, 'has_server_privilege'), (1563, 'has_sequence_privilege', 1743, 'has_sequence_privilege'), (1561, 'has_language_privilege', 1741, 'has_language_privilege'), (1560, 'has_function_privilege', 1740, 'has_function_privilege'), (1508, 'has_foreign_data_wrapper_privilege', 1739, 'has_foreign_data_wrapper_privilege'), (1558, 'has_database_privilege', 1738, 'has_database_privilege'), (1556, 'has_any_column_privilege', 1736, 'has_any_column_privilege'), (1571, 'format_type', 1751, 'format_type'), (1604, 'array_push_front', 1784, 'array_push_front'), (1606, 'generate_subscripts', 1786, 'generate_subscripts'), (1608, 'fmod', 1788, 'fmod'), (1607, 'fdiv', 1787, 'fdiv'), (1653, 'date_add', 1833, 'date_add'), (1605, 'array_to_string', 1785, 'array_to_string'), (1603, 'array_push_back', 1783, 'array_push_back'), (1600, 'array_prepend', 1780, 'array_prepend'), (1618, 'array_has_any', 1798, 'array_has_any'), (1621, 'array_has_all', 1801, 'array_has_all'), (1598, 'array_append', 1778, 'array_append'), (1623, '<@', 1803, '<@'), (1615, 'list_intersect', 1795, 'list_intersect'), (1617, 'list_has_any', 1797, 'list_has_any'), (1620, 'list_has_all', 1800, 'list_has_all'), (1597, 'list_append', 1777, 'list_append'), (1615, 'list_intersect', 1682, 'list_intersect'), (1617, 'list_has_any', 1684, 'list_has_any'), (1620, 'list_has_all', 1687, 'list_has_all'), (1597, 'list_append', 1664, 'list_append'), (1594, 'round_even', 1661, 'round_even'), (1595, 'roundbankers', 1662, 'roundbankers'), (1654, 'regexp_split_to_table', 1721, 'regexp_split_to_table'), (1596, 'nullif', 1663, 'nullif'), (1599, 'list_prepend', 1666, 'list_prepend'), (1623, '<@', 1690, '<@'), (1799, '&&', 1686, '&&'), (1575, 'shobj_description', 1755, 'shobj_description'), (1802, '@>', 1689, '@>'), (1569, 'pg_get_expr', 1749, 'pg_get_expr'), (1568, 'pg_get_constraintdef', 1748, 'pg_get_constraintdef'), (1605, 'array_to_string', 1672, 'array_to_string'), (1606, 'generate_subscripts', 1673, 'generate_subscripts'), (1608, 'fmod', 1675, 'fmod'), (1607, 'fdiv', 1674, 'fdiv'), (1653, 'date_add', 1720, 'date_add'), (1604, 'array_push_front', 1671, 'array_push_front'), (1603, 'array_push_back', 1670, 'array_push_back'), (1600, 'array_prepend', 1667, 'array_prepend'), (1796, 'array_intersect', 1683, 'array_intersect'), (1618, 'array_has_any', 1685, 'array_has_any'), (1621, 'array_has_all', 1688, 'array_has_all'), (1598, 'array_append', 1665, 'array_append'), (1572, 'pg_has_role', 1521, 'pg_has_role'), (1557, 'has_column_privilege', 1506, 'has_column_privilege'), (1610, 'split_part', 1790, 'split_part'), (1557, 'has_column_privilege', 1737, 'has_column_privilege'), (1610, 'split_part', 1677, 'split_part'), (1572, 'pg_has_role', 1752, 'pg_has_role'), (536, 'current_database', 1552, 'current_database'), (540, 'current_query', 1553, 'current_query'), (542, 'current_schema', 1554, 'current_schema'), (1544, 'inet_client_port', 1493, 'inet_client_port'), (536, 'current_database', 1501, 'current_database'), (540, 'current_query', 1502, 'current_query'), (542, 'current_schema', 1503, 'current_schema'), (536, 'current_database', 1732, 'current_database'), (540, 'current_query', 1733, 'current_query'), (1544, 'inet_client_port', 1724, 'inet_client_port'), (542, 'current_schema', 1734, 'current_schema'), (1588, 'pg_size_pretty', 1537, 'pg_size_pretty'), (1647, 'list_sum', 1827, 'list_sum'), (1629, 'list_sem', 1809, 'list_sem'), (1649, 'list_mode', 1829, 'list_mode'), (1601, 'array_pop_back', 1781, 'array_pop_back'), (1630, 'list_approx_count_distinct', 1810, 'list_approx_count_distinct'), (1630, 'list_approx_count_distinct', 1697, 'list_approx_count_distinct'), (1647, 'list_sum', 1714, 'list_sum'), (1629, 'list_sem', 1696, 'list_sem'), (1649, 'list_mode', 1716, 'list_mode'), (1588, 'pg_size_pretty', 1768, 'pg_size_pretty'), (1601, 'array_pop_back', 1668, 'array_pop_back'), (1574, 'obj_description', 1523, 'obj_description'), (1559, 'has_foreign_data_wrapper_privilege', 1508, 'has_foreign_data_wrapper_privilege'), (1574, 'obj_description', 1754, 'obj_description'), (1559, 'has_foreign_data_wrapper_privilege', 1739, 'has_foreign_data_wrapper_privilege'), (1616, 'array_intersect', 1796, 'array_intersect'), (1622, '@>', 1802, '@>'), (1622, '@>', 1689, '@>'), (1616, 'array_intersect', 1683, 'array_intersect')]

-----------
QUERY:


-- Considering only built-in procs (prolang = 12), look for multiple uses
-- of the same internal function (ie, matching prosrc fields).  It/* REPLACED */ ''s OK to
-- have several entries with different pronames for the same internal function,
-- but conflicts in the number of arguments and other critical items should
-- be complained of.  (We don/* REPLACED */ ''t check data types here /* REPLACED */ , see next query.)
-- Note: ignore aggregate functions here, since they all point to the same
-- dummy built-in function.

SELECT p1.oid, p1.proname, p2.oid, p2.proname
FROM pg_proc AS p1, pg_proc AS p2
WHERE p1.oid < p2.oid AND
    p1.prosrc = p2.prosrc AND
    p1.prolang = 12 AND p2.prolang = 12 AND
    (p1.prokind != 'a' OR p2.prokind != 'a') AND
    (p1.prolang != p2.prolang OR
     p1.prokind != p2.prokind OR
     p1.prosecdef != p2.prosecdef OR
     p1.proleakproof != p2.proleakproof OR
     p1.proisstrict != p2.proisstrict OR
     p1.proretset != p2.proretset OR
     p1.provolatile != p2.provolatile OR
     p1.pronargs != p2.pronargs);
RESULT:
	[]

-----------
QUERY:


-- Look for uses of different type OIDs in the argument/result type fields
-- for different aliases of the same built-in function.
-- This indicates that the types are being presumed to be binary-equivalent,
-- or that the built-in function is prepared to deal with different types.
-- That/* REPLACED */ ''s not wrong, necessarily, but we make lists of all the types being
-- so treated.  Note that the expected output of this part of the test will
-- need to be modified whenever new pairs of types are made binary-equivalent,
-- or when new polymorphic built-in functions are added!
-- Note: ignore aggregate functions here, since they all point to the same
-- dummy built-in function.  Likewise, ignore range and multirange constructor
-- functions.

SELECT DISTINCT p1.prorettype::regtype, p2.prorettype::regtype
FROM pg_proc AS p1, pg_proc AS p2
WHERE p1.oid != p2.oid AND
    p1.prosrc = p2.prosrc AND
    p1.prolang = 12 AND p2.prolang = 12 AND
    p1.prokind != 'a' AND p2.prokind != 'a' AND
    p1.prosrc NOT LIKE E'range\\_constructor_' AND
    p2.prosrc NOT LIKE E'range\\_constructor_' AND
    p1.prosrc NOT LIKE E'multirange\\_constructor_' AND
    p2.prosrc NOT LIKE E'multirange\\_constructor_' AND
    (p1.prorettype < p2.prorettype)
ORDER BY 1, 2;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


SELECT DISTINCT p1.proargtypes[0]::regtype, p2.proargtypes[0]::regtype
FROM pg_proc AS p1, pg_proc AS p2
WHERE p1.oid != p2.oid AND
    p1.prosrc = p2.prosrc AND
    p1.prolang = 12 AND p2.prolang = 12 AND
    p1.prokind != 'a' AND p2.prokind != 'a' AND
    p1.prosrc NOT LIKE E'range\\_constructor_' AND
    p2.prosrc NOT LIKE E'range\\_constructor_' AND
    p1.prosrc NOT LIKE E'multirange\\_constructor_' AND
    p2.prosrc NOT LIKE E'multirange\\_constructor_' AND
    (p1.proargtypes[0] < p2.proargtypes[0])
ORDER BY 1, 2;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


SELECT DISTINCT p1.proargtypes[1]::regtype, p2.proargtypes[1]::regtype
FROM pg_proc AS p1, pg_proc AS p2
WHERE p1.oid != p2.oid AND
    p1.prosrc = p2.prosrc AND
    p1.prolang = 12 AND p2.prolang = 12 AND
    p1.prokind != 'a' AND p2.prokind != 'a' AND
    p1.prosrc NOT LIKE E'range\\_constructor_' AND
    p2.prosrc NOT LIKE E'range\\_constructor_' AND
    p1.prosrc NOT LIKE E'multirange\\_constructor_' AND
    p2.prosrc NOT LIKE E'multirange\\_constructor_' AND
    (p1.proargtypes[1] < p2.proargtypes[1])
ORDER BY 1, 2;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


SELECT DISTINCT p1.proargtypes[2]::regtype, p2.proargtypes[2]::regtype
FROM pg_proc AS p1, pg_proc AS p2
WHERE p1.oid != p2.oid AND
    p1.prosrc = p2.prosrc AND
    p1.prolang = 12 AND p2.prolang = 12 AND
    p1.prokind != 'a' AND p2.prokind != 'a' AND
    (p1.proargtypes[2] < p2.proargtypes[2])
ORDER BY 1, 2;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


SELECT DISTINCT p1.proargtypes[3]::regtype, p2.proargtypes[3]::regtype
FROM pg_proc AS p1, pg_proc AS p2
WHERE p1.oid != p2.oid AND
    p1.prosrc = p2.prosrc AND
    p1.prolang = 12 AND p2.prolang = 12 AND
    p1.prokind != 'a' AND p2.prokind != 'a' AND
    (p1.proargtypes[3] < p2.proargtypes[3])
ORDER BY 1, 2;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


SELECT DISTINCT p1.proargtypes[4]::regtype, p2.proargtypes[4]::regtype
FROM pg_proc AS p1, pg_proc AS p2
WHERE p1.oid != p2.oid AND
    p1.prosrc = p2.prosrc AND
    p1.prolang = 12 AND p2.prolang = 12 AND
    p1.prokind != 'a' AND p2.prokind != 'a' AND
    (p1.proargtypes[4] < p2.proargtypes[4])
ORDER BY 1, 2;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


SELECT DISTINCT p1.proargtypes[5]::regtype, p2.proargtypes[5]::regtype
FROM pg_proc AS p1, pg_proc AS p2
WHERE p1.oid != p2.oid AND
    p1.prosrc = p2.prosrc AND
    p1.prolang = 12 AND p2.prolang = 12 AND
    p1.prokind != 'a' AND p2.prokind != 'a' AND
    (p1.proargtypes[5] < p2.proargtypes[5])
ORDER BY 1, 2;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


SELECT DISTINCT p1.proargtypes[6]::regtype, p2.proargtypes[6]::regtype
FROM pg_proc AS p1, pg_proc AS p2
WHERE p1.oid != p2.oid AND
    p1.prosrc = p2.prosrc AND
    p1.prolang = 12 AND p2.prolang = 12 AND
    p1.prokind != 'a' AND p2.prokind != 'a' AND
    (p1.proargtypes[6] < p2.proargtypes[6])
ORDER BY 1, 2;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


SELECT DISTINCT p1.proargtypes[7]::regtype, p2.proargtypes[7]::regtype
FROM pg_proc AS p1, pg_proc AS p2
WHERE p1.oid != p2.oid AND
    p1.prosrc = p2.prosrc AND
    p1.prolang = 12 AND p2.prolang = 12 AND
    p1.prokind != 'a' AND p2.prokind != 'a' AND
    (p1.proargtypes[7] < p2.proargtypes[7])
ORDER BY 1, 2;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


-- Look for functions that return type /* REPLACED */ ''internal/* REPLACED */ '' and do not have any
-- /* REPLACED */ ''internal/* REPLACED */ '' argument.  Such a function would be a security hole since
-- it might be used to call an internal function from an SQL command.
-- As of 7.3 this query should find only internal_in, which is safe because
-- it always throws an error when called.

SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE p1.prorettype = 'internal'::regtype AND NOT
    'internal'::regtype = ANY (p1.proargtypes);
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


-- Look for functions that return a polymorphic type and do not have any
-- polymorphic argument.  Calls of such functions would be unresolvable
-- at parse time.  As of 9.6 this query should find only some input functions
-- and GiST support functions associated with these pseudotypes.

SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE p1.prorettype IN
    ('anyelement'::regtype, 'anyarray'::regtype, 'anynonarray'::regtype,
     'anyenum'::regtype)
  AND NOT
    ('anyelement'::regtype = ANY (p1.proargtypes) OR
     'anyarray'::regtype = ANY (p1.proargtypes) OR
     'anynonarray'::regtype = ANY (p1.proargtypes) OR
     'anyenum'::regtype = ANY (p1.proargtypes) OR
     'anyrange'::regtype = ANY (p1.proargtypes) OR
     'anymultirange'::regtype = ANY (p1.proargtypes))
ORDER BY 2;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


-- anyrange and anymultirange are tighter than the rest, can only resolve
-- from each other

SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE p1.prorettype IN ('anyrange'::regtype, 'anymultirange'::regtype)
  AND NOT
    ('anyrange'::regtype = ANY (p1.proargtypes) OR
      'anymultirange'::regtype = ANY (p1.proargtypes))
ORDER BY 2;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


-- similarly for the anycompatible family

SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE p1.prorettype IN
    ('anycompatible'::regtype, 'anycompatiblearray'::regtype,
     'anycompatiblenonarray'::regtype)
  AND NOT
    ('anycompatible'::regtype = ANY (p1.proargtypes) OR
     'anycompatiblearray'::regtype = ANY (p1.proargtypes) OR
     'anycompatiblenonarray'::regtype = ANY (p1.proargtypes) OR
     'anycompatiblerange'::regtype = ANY (p1.proargtypes))
ORDER BY 2;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE p1.prorettype = 'anycompatiblerange'::regtype
  AND NOT
     'anycompatiblerange'::regtype = ANY (p1.proargtypes)
ORDER BY 2;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:



-- Look for functions that accept cstring and are neither datatype input
-- functions nor encoding conversion functions.  It/* REPLACED */ ''s almost never a good
-- idea to use cstring input for a function meant to be called from SQL /* REPLACED */ ,
-- text should be used instead, because cstring lacks suitable casts.
-- As of 9.6 this query should find only cstring_out and cstring_send.
-- However, we must manually exclude shell_in, which might or might not be
-- rejected by the EXISTS clause depending on whether there are currently
-- any shell types.

SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE 'cstring'::regtype = ANY (p1.proargtypes)
    AND NOT EXISTS(SELECT 1 FROM pg_type WHERE typinput = p1.oid)
    AND NOT EXISTS(SELECT 1 FROM pg_conversion WHERE conproc = p1.oid)
    AND p1.oid != 'shell_in(cstring)'::regprocedure
ORDER BY 1;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


-- Likewise, look for functions that return cstring and aren/* REPLACED */ ''t datatype output
-- functions nor typmod output functions.
-- As of 9.6 this query should find only cstring_in and cstring_recv.
-- However, we must manually exclude shell_out.

SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE  p1.prorettype = 'cstring'::regtype
    AND NOT EXISTS(SELECT 1 FROM pg_type WHERE typoutput = p1.oid)
    AND NOT EXISTS(SELECT 1 FROM pg_type WHERE typmodout = p1.oid)
    AND p1.oid != 'shell_out(void)'::regprocedure
ORDER BY 1;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


-- Check for length inconsistencies between the various argument-info arrays.

SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE proallargtypes IS NOT NULL AND
    array_length(proallargtypes,1) < array_length(proargtypes,1);
RESULT:
	[]

-----------
QUERY:


SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE proargmodes IS NOT NULL AND
    array_length(proargmodes,1) < array_length(proargtypes,1);
RESULT:
	[]

-----------
QUERY:


SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE proargnames IS NOT NULL AND
    array_length(proargnames,1) < array_length(proargtypes,1);
RESULT:
	[]

-----------
QUERY:


SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE proallargtypes IS NOT NULL AND proargmodes IS NOT NULL AND
    array_length(proallargtypes,1) <> array_length(proargmodes,1);
RESULT:
	[]

-----------
QUERY:


SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE proallargtypes IS NOT NULL AND proargnames IS NOT NULL AND
    array_length(proallargtypes,1) <> array_length(proargnames,1);
RESULT:
	[]

-----------
QUERY:


SELECT p1.oid, p1.proname
FROM pg_proc as p1
WHERE proargmodes IS NOT NULL AND proargnames IS NOT NULL AND
    array_length(proargmodes,1) <> array_length(proargnames,1);
RESULT:
	[]

-----------
QUERY:


-- Check that proallargtypes matches proargtypes
SELECT p1.oid, p1.proname, p1.proargtypes, p1.proallargtypes, p1.proargmodes
FROM pg_proc as p1
WHERE proallargtypes IS NOT NULL AND
  ARRAY(SELECT unnest(proargtypes)) <>
  ARRAY(SELECT proallargtypes[i]
        FROM generate_series(1, array_length(proallargtypes, 1)) g(i)
        WHERE proargmodes IS NULL OR proargmodes[i] IN ('i', 'b', 'v'));
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'array_length(STRING_LITERAL, INTEGER_LITERAL)'. You might need to add explicit type casts.
	Candidate functions:
	array_length(ANY[]) -> BIGINT
	array_length(ANY[], BIGINT) -> BIGINT


-----------
QUERY:


-- Check for type of the variadic array parameter/* REPLACED */ ''s elements.
-- provariadic should be ANYOID if the type of the last element is ANYOID,
-- ANYELEMENTOID if the type of the last element is ANYARRAYOID,
-- ANYCOMPATIBLEOID if the type of the last element is ANYCOMPATIBLEARRAYOID,
-- and otherwise the element type corresponding to the array type.

SELECT oid::regprocedure, provariadic::regtype, proargtypes::regtype[]
FROM pg_proc
WHERE provariadic != 0
AND case proargtypes[array_length(proargtypes, 1)-1]
	WHEN '"any"'::regtype THEN '"any"'::regtype
	WHEN 'anyarray'::regtype THEN 'anyelement'::regtype
	WHEN 'anycompatiblearray'::regtype THEN 'anycompatible'::regtype
	ELSE (SELECT t.oid
		  FROM pg_type t
		  WHERE t.typarray = proargtypes[array_length(proargtypes, 1)-1])
	END  != provariadic;
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


-- Check that all and only those functions with a variadic type have
-- a variadic argument.
SELECT oid::regprocedure, proargmodes, provariadic
FROM pg_proc
WHERE (proargmodes IS NOT NULL AND 'v' = any(proargmodes))
    IS DISTINCT FROM
    (provariadic != 0);
RESULT:
	ERROR - Catalog Error: Type with name regprocedure does not exist!
Did you mean "dec"?

-----------
QUERY:


-- Check for prosupport functions with the wrong signature
SELECT p1.oid, p1.proname, p2.oid, p2.proname
FROM pg_proc AS p1, pg_proc AS p2
WHERE p2.oid = p1.prosupport AND
    (p2.prorettype != 'internal'::regtype OR p2.proretset OR p2.pronargs != 1
     OR p2.proargtypes[0] != 'internal'::regtype);
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


-- Insist that all built-in pg_proc entries have descriptions
SELECT p1.oid, p1.proname
FROM pg_proc as p1 LEFT JOIN pg_description as d
     ON p1.tableoid = d.classoid and p1.oid = d.objoid and d.objsubid = 0
WHERE d.classoid IS NULL AND p1.oid <= 9999;
RESULT:
	ERROR - Binder Error: Values list "p1" does not have a column named "tableoid"

-----------
QUERY:


-- List of built-in leakproof functions
--
-- Leakproof functions should only be added after carefully
-- scrutinizing all possibly executed codepaths for possible
-- information leaks. Don/* REPLACED */ ''t add functions here unless you know what a
-- leakproof function is. If unsure, don/* REPLACED */ ''t mark it as such.

-- temporarily disable fancy output, so catalog changes create less diff noise
-- \a\t

SELECT p1.oid::regprocedure
FROM pg_proc p1 JOIN pg_namespace pn
     ON pronamespace = pn.oid
WHERE nspname = 'pg_catalog' AND proleakproof
ORDER BY 1;
RESULT:
	ERROR - Catalog Error: Type with name regprocedure does not exist!
Did you mean "dec"?

-----------
QUERY:


-- restore normal output mode
-- \a\t

-- List of functions used by libpq/* REPLACED */ ''s fe-lobj.c
--
-- If the output of this query changes, you probably broke libpq.
-- lo_initialize() assumes that there will be at most one match for
-- each listed name.
select proname, oid from pg_catalog.pg_proc
where proname in (
  'lo_open',
  'lo_close',
  'lo_creat',
  'lo_create',
  'lo_unlink',
  'lo_lseek',
  'lo_lseek64',
  'lo_tell',
  'lo_tell64',
  'lo_truncate',
  'lo_truncate64',
  'loread',
  'lowrite')
and pronamespace = (select oid from pg_catalog.pg_namespace
                    where nspname = 'pg_catalog')
order by 1;
RESULT:
	[]

-----------
QUERY:


-- Check that all immutable functions are marked parallel safe
SELECT p1.oid, p1.proname
FROM pg_proc AS p1
WHERE provolatile = 'i' AND proparallel = 'u';
RESULT:
	[(1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (1024, 'trunc'), (722, 'list_aggregate'), (1030, 'typeof'), (724, 'list_apply'), (1026, 'try_strptime'), (1026, 'try_strptime'), (1133, 'json_serialize_sql'), (1133, 'json_serialize_sql'), (1133, 'json_serialize_sql'), (1133, 'json_serialize_sql'), (706, 'least'), (706, 'least'), (706, 'least'), (706, 'least'), (706, 'least'), (706, 'least'), (706, 'least'), (706, 'least'), (706, 'least'), (1101, 'to_json'), (1111, 'json_structure'), (1111, 'json_structure'), (1113, 'json_transform'), (1113, 'json_transform'), (1117, 'json_transform_strict'), (1117, 'json_transform_strict'), (1127, 'json_type'), (1127, 'json_type'), (1127, 'json_type'), (1127, 'json_type'), (1127, 'json_type'), (1127, 'json_type'), (1129, 'json_valid'), (1129, 'json_valid'), (694, 'julian'), (694, 'julian'), (694, 'julian'), (702, 'last_day'), (702, 'last_day'), (702, 'last_day'), (180, 'lcase'), (704, 'lcm'), (704, 'lcm'), (720, 'list_aggr'), (708, 'least_common_multiple'), (708, 'least_common_multiple'), (710, 'left'), (712, 'left_grapheme'), (198, 'len'), (198, 'len'), (198, 'len'), (196, 'length'), (196, 'length'), (196, 'length'), (200, 'length_grapheme'), (714, 'levenshtein'), (716, 'lgamma'), (220, 'like_escape'), (280, 'list_element'), (280, 'list_element'), (774, 'make_time'), (998, 'to_microseconds'), (738, 'list_inner_product'), (738, 'list_inner_product'), (272, 'list_indexof'), (1000, 'to_millennia'), (1002, 'to_milliseconds'), (1004, 'to_minutes'), (266, 'list_has'), (736, 'list_grade_up'), (736, 'list_grade_up'), (736, 'list_grade_up'), (1006, 'to_months'), (734, 'list_filter'), (278, 'list_extract'), (278, 'list_extract'), (1008, 'to_seconds'), (1022, 'trim'), (1022, 'trim'), (732, 'list_dot_product'), (732, 'list_dot_product'), (730, 'list_distinct'), (728, 'list_distance'), (728, 'list_distance'), (1010, 'to_timestamp'), (726, 'list_cosine_similarity'), (726, 'list_cosine_similarity'), (262, 'list_contains'), (254, 'list_concat'), (256, 'list_cat'), (1012, 'to_weeks'), (1014, 'to_years'), (1020, 'translate'), (1042, 'union_value'), (1451, 'icu_sort_key'), (672, 'hour'), (672, 'hour'), (672, 'hour'), (672, 'hour'), (672, 'hour'), (672, 'hour'), (668, 'hex'), (668, 'hex'), (668, 'hex'), (668, 'hex'), (668, 'hex'), (666, 'hash'), (664, 'hamming'), (660, 'greatest_common_divisor'), (660, 'greatest_common_divisor'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (658, 'greatest'), (656, 'grade_up'), (656, 'grade_up'), (656, 'grade_up'), (1038, 'union_extract'), (650, 'get_bit'), (1040, 'union_tag'), (224, 'ilike_escape'), (1044, 'unpivot_list'), (648, 'generate_series'), (648, 'generate_series'), (648, 'generate_series'), (648, 'generate_series'), (648, 'generate_series'), (644, 'gcd'), (644, 'gcd'), (642, 'gamma'), (1119, 'from_json_strict'), (1119, 'from_json_strict'), (1115, 'from_json'), (1115, 'from_json'), (638, 'from_hex'), (636, 'from_binary'), (634, 'from_base64'), (632, 'format_bytes'), (630, 'formatReadableSize'), (628, 'formatReadableDecimalSize'), (1121, 'json_array_length'), (1121, 'json_array_length'), (1121, 'json_array_length'), (1121, 'json_array_length'), (1121, 'json_array_length'), (1121, 'json_array_length'), (1103, 'json_quote'), (1099, 'json_object'), (1109, 'json_merge_patch'), (1125, 'json_keys'), (1125, 'json_keys'), (1125, 'json_keys'), (1125, 'json_keys'), (1125, 'json_keys'), (1125, 'json_keys'), (184, 'ucase'), (1032, 'unbin'), (1034, 'unhex'), (1091, 'json_extract_string'), (1091, 'json_extract_string'), (1091, 'json_extract_string'), (1091, 'json_extract_string'), (1091, 'json_extract_string'), (1091, 'json_extract_string'), (1093, 'json_extract_path_text'), (1093, 'json_extract_path_text'), (1093, 'json_extract_path_text'), (1093, 'json_extract_path_text'), (1093, 'json_extract_path_text'), (1093, 'json_extract_path_text'), (1089, 'json_extract_path'), (1089, 'json_extract_path'), (1089, 'json_extract_path'), (1089, 'json_extract_path'), (1089, 'json_extract_path'), (1089, 'json_extract_path'), (1087, 'json_extract'), (1087, 'json_extract'), (1087, 'json_extract'), (1087, 'json_extract'), (1087, 'json_extract'), (1087, 'json_extract'), (1135, 'json_deserialize_sql'), (1123, 'json_contains'), (1123, 'json_contains'), (1123, 'json_contains'), (1123, 'json_contains'), (1131, 'json_serialize_plan'), (1131, 'json_serialize_plan'), (1131, 'json_serialize_plan'), (1131, 'json_serialize_plan'), (1131, 'json_serialize_plan'), (1097, 'json_array'), (1036, 'unicode'), (692, 'jaro_winkler_similarity'), (690, 'jaro_similarity'), (688, 'jaccard'), (686, 'isoyear'), (686, 'isoyear'), (686, 'isoyear'), (686, 'isoyear'), (684, 'isodow'), (684, 'isodow'), (684, 'isodow'), (684, 'isodow'), (682, 'isnan'), (682, 'isnan'), (680, 'isinf'), (680, 'isinf'), (680, 'isinf'), (680, 'isinf'), (680, 'isinf'), (678, 'isfinite'), (678, 'isfinite'), (678, 'isfinite'), (678, 'isfinite'), (678, 'isfinite'), (676, 'instr'), (836, 'parse_dirpath'), (836, 'parse_dirpath'), (868, 'reduce'), (866, 'range'), (866, 'range'), (866, 'range'), (866, 'range'), (866, 'range'), (862, 'radians'), (860, 'quarter'), (860, 'quarter'), (860, 'quarter'), (860, 'quarter'), (850, 'printf'), (244, 'prefix'), (848, 'power'), (846, 'pow'), (844, 'position'), (842, 'pi'), (840, 'parse_path'), (840, 'parse_path'), (838, 'parse_filename'), (838, 'parse_filename'), (838, 'parse_filename'), (838, 'parse_filename'), (870, 'regexp_escape'), (834, 'parse_dirname'), (834, 'parse_dirname'), (832, 'ord'), (208, 'octet_length'), (208, 'octet_length'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (158, 'subtract'), (222, 'not_like_escape'), (226, 'not_ilike_escape'), (250, 'nfc_normalize'), (828, 'nextafter'), (828, 'nextafter'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (162, 'multiply'), (826, 'monthname'), (826, 'monthname'), (826, 'monthname'), (824, 'month'), (824, 'month'), (824, 'month'), (824, 'month'), (904, 'round'), (904, 'round'), (904, 'round'), (904, 'round'), (904, 'round'), (904, 'round'), (924, 'signbit'), (924, 'signbit'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (922, 'sign'), (920, 'sha256'), (916, 'set_bit'), (946, 'str_split_regex'), (946, 'str_split_regex'), (912, 'second'), (912, 'second'), (912, 'second'), (912, 'second'), (912, 'second'), (912, 'second'), (910, 'rtrim'), (910, 'rtrim'), (908, 'rpad'), (1107, 'row_to_json'), (906, 'row'), (240, 'substr'), (240, 'substr'), (238, 'substring'), (238, 'substring'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (172, 'mod'), (902, 'right_grapheme'), (900, 'right'), (898, 'reverse'), (894, 'replace'), (892, 'repeat'), (892, 'repeat'), (242, 'substring_grapheme'), (242, 'substring_grapheme'), (872, 'regexp_split_to_array'), (872, 'regexp_split_to_array'), (232, 'regexp_replace'), (232, 'regexp_replace'), (230, 'regexp_matches'), (230, 'regexp_matches'), (228, 'regexp_full_match'), (228, 'regexp_full_match'), (236, 'regexp_extract_all'), (236, 'regexp_extract_all'), (236, 'regexp_extract_all'), (234, 'regexp_extract'), (234, 'regexp_extract'), (234, 'regexp_extract'), (234, 'regexp_extract'), (234, 'regexp_extract'), (744, 'list_reverse_sort'), (744, 'list_reverse_sort'), (288, 'list_zip'), (296, 'list_where'), (246, 'suffix'), (754, 'list_value'), (752, 'list_unique'), (750, 'list_transform'), (972, 'tan'), (976, 'timezone'), (976, 'timezone'), (976, 'timezone'), (976, 'timezone'), (976, 'timezone'), (976, 'timezone'), (976, 'timezone'), (976, 'timezone'), (748, 'list_sort'), (748, 'list_sort'), (748, 'list_sort'), (746, 'list_slice'), (746, 'list_slice'), (978, 'timezone_hour'), (978, 'timezone_hour'), (978, 'timezone_hour'), (978, 'timezone_hour'), (980, 'timezone_minute'), (980, 'timezone_minute'), (980, 'timezone_minute'), (980, 'timezone_minute'), (292, 'list_select'), (758, 'ln'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (974, 'time_bucket'), (284, 'list_resize'), (284, 'list_resize'), (742, 'list_reduce'), (982, 'to_base'), (982, 'to_base'), (270, 'list_position'), (740, 'list_pack'), (984, 'to_base64'), (986, 'to_binary'), (986, 'to_binary'), (986, 'to_binary'), (986, 'to_binary'), (986, 'to_binary'), (988, 'to_centuries'), (990, 'to_days'), (992, 'to_decades'), (994, 'to_hex'), (994, 'to_hex'), (994, 'to_hex'), (994, 'to_hex'), (994, 'to_hex'), (782, 'map_entries'), (820, 'mismatches'), (818, 'minute'), (818, 'minute'), (818, 'minute'), (818, 'minute'), (818, 'minute'), (818, 'minute'), (812, 'millisecond'), (812, 'millisecond'), (812, 'millisecond'), (812, 'millisecond'), (812, 'millisecond'), (812, 'millisecond'), (810, 'millennium'), (810, 'millennium'), (810, 'millennium'), (810, 'millennium'), (808, 'microsecond'), (808, 'microsecond'), (808, 'microsecond'), (808, 'microsecond'), (808, 'microsecond'), (808, 'microsecond'), (802, 'md5_number_upper'), (800, 'md5_number_lower'), (798, 'md5_number'), (796, 'md5'), (790, 'map_values'), (788, 'map_keys'), (786, 'map_from_entries'), (784, 'map_extract'), (996, 'to_hours'), (780, 'map_concat'), (778, 'map'), (1453, 'make_timestamptz'), (1453, 'make_timestamptz'), (1453, 'make_timestamptz'), (776, 'make_timestamp'), (776, 'make_timestamp'), (598, 'enum_range_boundary'), (772, 'make_date'), (772, 'make_date'), (768, 'ltrim'), (768, 'ltrim'), (766, 'lpad'), (178, 'lower'), (764, 'log2'), (762, 'log10'), (760, 'log'), (760, 'log'), (444, 'array_aggregate'), (460, 'array_grade_up'), (460, 'array_grade_up'), (460, 'array_grade_up'), (458, 'array_filter'), (282, 'array_extract'), (282, 'array_extract'), (282, 'array_extract'), (282, 'array_extract'), (456, 'array_dot_product'), (456, 'array_dot_product'), (454, 'array_distinct'), (452, 'array_distance'), (452, 'array_distance'), (450, 'array_cross_product'), (450, 'array_cross_product'), (448, 'array_cosine_similarity'), (448, 'array_cosine_similarity'), (264, 'array_contains'), (258, 'array_concat'), (260, 'array_cat'), (446, 'array_apply'), (116, '__internal_compress_integral_ubigint'), (116, '__internal_compress_integral_ubigint'), (268, 'array_has'), (442, 'array_aggr'), (422, 'apply'), (420, 'alias'), (418, 'aggregate'), (416, 'age'), (416, 'age'), (416, 'age'), (416, 'age'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (154, 'add'), (414, 'acos'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (412, 'abs'), (114, '__internal_compress_integral_uinteger'), (114, '__internal_compress_integral_uinteger'), (114, '__internal_compress_integral_uinteger'), (114, '__internal_compress_integral_uinteger'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (406, '@'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (404, '>>'), (112, '__internal_compress_integral_usmallint'), (112, '__internal_compress_integral_usmallint'), (112, '__internal_compress_integral_usmallint'), (112, '__internal_compress_integral_usmallint'), (112, '__internal_compress_integral_usmallint'), (112, '__internal_compress_integral_usmallint'), (464, 'array_reduce'), (298, 'array_where'), (476, 'array_value'), (474, 'array_unique'), (472, 'array_transform'), (1056, 'version'), (1105, 'array_to_json'), (470, 'array_sort'), (470, 'array_sort'), (470, 'array_sort'), (468, 'array_slice'), (468, 'array_slice'), (294, 'array_select'), (466, 'array_reverse_sort'), (466, 'array_reverse_sort'), (1058, 'week'), (1058, 'week'), (1058, 'week'), (1058, 'week'), (286, 'array_resize'), (286, 'array_resize'), (402, '<=>'), (402, '<=>'), (1060, 'weekday'), (1060, 'weekday'), (1060, 'weekday'), (1060, 'weekday'), (1062, 'weekofyear'), (1062, 'weekofyear'), (1062, 'weekofyear'), (1062, 'weekofyear'), (1064, 'which_secret'), (274, 'array_position'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1066, 'xor'), (1068, 'year'), (1068, 'year'), (1068, 'year'), (1068, 'year'), (202, 'array_length'), (202, 'array_length'), (626, 'format'), (462, 'array_inner_product'), (462, 'array_inner_product'), (276, 'array_indexof'), (408, '^'), (410, '^@'), (934, 'starts_with'), (132, '__internal_decompress_integral_uhugeint'), (132, '__internal_decompress_integral_uhugeint'), (132, '__internal_decompress_integral_uhugeint'), (132, '__internal_decompress_integral_uhugeint'), (128, '__internal_decompress_integral_uinteger'), (128, '__internal_decompress_integral_uinteger'), (126, '__internal_decompress_integral_usmallint'), (144, '__internal_decompress_string'), (144, '__internal_decompress_string'), (144, '__internal_decompress_string'), (144, '__internal_decompress_string'), (144, '__internal_decompress_string'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (1072, '|'), (190, '||'), (190, '||'), (190, '||'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (1074, '~'), (210, '~~'), (216, '~~*'), (214, '~~~'), (930, 'split'), (944, 'str_split'), (932, 'sqrt'), (130, '__internal_decompress_integral_ubigint'), (130, '__internal_decompress_integral_ubigint'), (130, '__internal_decompress_integral_ubigint'), (948, 'strftime'), (948, 'strftime'), (948, 'strftime'), (948, 'strftime'), (948, 'strftime'), (952, 'string_split'), (954, 'string_split_regex'), (954, 'string_split_regex'), (956, 'string_to_array'), (186, 'strip_accents'), (204, 'strlen'), (958, 'strpos'), (960, 'strptime'), (960, 'strptime'), (252, 'struct_extract'), (252, 'struct_extract'), (962, 'struct_insert'), (964, 'struct_pack'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (170, '%'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (400, '<<'), (398, '<->'), (398, '<->'), (396, '<#>'), (396, '<#>'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (166, '//'), (164, '/'), (164, '/'), (164, '/'), (1095, '->>'), (1095, '->>'), (1095, '->>'), (1095, '->>'), (1095, '->>'), (1095, '->>'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (156, '-'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (152, '+'), (394, '**'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (160, '*'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (110, '__internal_compress_integral_utinyint'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (392, '&'), (1070, 'yearweek'), (1070, 'yearweek'), (1070, 'yearweek'), (1070, 'yearweek'), (218, '!~~*'), (212, '!~~'), (390, '!__postfix'), (142, '__internal_compress_string_hugeint'), (140, '__internal_compress_string_ubigint'), (138, '__internal_compress_string_uinteger'), (136, '__internal_compress_string_usmallint'), (134, '__internal_compress_string_utinyint'), (122, '__internal_decompress_integral_bigint'), (122, '__internal_decompress_integral_bigint'), (122, '__internal_decompress_integral_bigint'), (124, '__internal_decompress_integral_hugeint'), (124, '__internal_decompress_integral_hugeint'), (124, '__internal_decompress_integral_hugeint'), (124, '__internal_decompress_integral_hugeint'), (120, '__internal_decompress_integral_integer'), (120, '__internal_decompress_integral_integer'), (118, '__internal_decompress_integral_smallint'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (560, 'datepart'), (576, 'decade'), (576, 'decade'), (576, 'decade'), (576, 'decade'), (574, 'dayofyear'), (574, 'dayofyear'), (574, 'dayofyear'), (574, 'dayofyear'), (572, 'dayofweek'), (572, 'dayofweek'), (572, 'dayofweek'), (572, 'dayofweek'), (570, 'dayofmonth'), (570, 'dayofmonth'), (570, 'dayofmonth'), (570, 'dayofmonth'), (568, 'dayname'), (568, 'dayname'), (568, 'dayname'), (566, 'day'), (566, 'day'), (566, 'day'), (566, 'day'), (556, 'date_trunc'), (556, 'date_trunc'), (556, 'date_trunc'), (556, 'date_trunc'), (554, 'date_sub'), (554, 'date_sub'), (554, 'date_sub'), (554, 'date_sub'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (552, 'date_part'), (550, 'date_diff'), (550, 'date_diff'), (550, 'date_diff'), (550, 'date_diff'), (564, 'datetrunc'), (564, 'datetrunc'), (564, 'datetrunc'), (564, 'datetrunc'), (562, 'datesub'), (562, 'datesub'), (562, 'datesub'), (562, 'datesub'), (578, 'decode'), (558, 'datediff'), (558, 'datediff'), (558, 'datediff'), (558, 'datediff'), (548, 'damerau_levenshtein'), (290, 'array_zip'), (1457, 'current_localtimestamp'), (1459, 'current_localtime'), (534, 'create_sort_key'), (604, 'epoch_ns'), (604, 'epoch_ns'), (604, 'epoch_ns'), (604, 'epoch_ns'), (604, 'epoch_ns'), (604, 'epoch_ns'), (182, 'upper'), (624, 'floor'), (624, 'floor'), (624, 'floor'), (622, 'flatten'), (150, 'finalize'), (620, 'filter'), (926, 'sin'), (616, 'factorial'), (614, 'exp'), (612, 'even'), (608, 'era'), (608, 'era'), (608, 'era'), (608, 'era'), (606, 'epoch_us'), (606, 'epoch_us'), (606, 'epoch_us'), (606, 'epoch_us'), (606, 'epoch_us'), (606, 'epoch_us'), (546, 'current_setting'), (602, 'epoch_ms'), (602, 'epoch_ms'), (602, 'epoch_ms'), (602, 'epoch_ms'), (602, 'epoch_ms'), (602, 'epoch_ms'), (602, 'epoch_ms'), (600, 'epoch'), (600, 'epoch'), (600, 'epoch'), (600, 'epoch'), (600, 'epoch'), (600, 'epoch'), (596, 'enum_range'), (594, 'enum_last'), (592, 'enum_first'), (590, 'enum_code'), (248, 'ends_with'), (586, 'encode'), (584, 'element_at'), (582, 'editdist3'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (168, 'divide'), (580, 'degrees'), (512, 'cardinality'), (1054, 'vector_type'), (528, 'cot'), (526, 'cos'), (194, 'contains'), (146, 'constant_or_null'), (192, 'concat_ws'), (188, 'concat'), (148, 'combine'), (522, 'chr'), (520, 'century'), (520, 'century'), (520, 'century'), (520, 'century'), (518, 'ceiling'), (518, 'ceiling'), (518, 'ceiling'), (514, 'cbrt'), (516, 'ceil'), (516, 'ceil'), (516, 'ceil'), (500, 'bit_position'), (206, 'bit_length'), (206, 'bit_length'), (496, 'bit_count'), (496, 'bit_count'), (496, 'bit_count'), (496, 'bit_count'), (496, 'bit_count'), (496, 'bit_count'), (504, 'bitstring'), (492, 'bin'), (492, 'bin'), (492, 'bin'), (492, 'bin'), (492, 'bin'), (490, 'base64'), (488, 'bar'), (488, 'bar'), (484, 'atan2'), (482, 'atan'), (480, 'asin'), (478, 'ascii'), (882, 'regr_r2'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (506, 'bitstring_agg'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (896, 'reservoir_quantile'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (494, 'bit_and'), (792, 'max'), (792, 'max'), (890, 'regr_syy'), (888, 'regr_sxy'), (886, 'regr_sxx'), (884, 'regr_slope'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (438, 'argmin'), (880, 'regr_intercept'), (878, 'regr_count'), (876, 'regr_avgy'), (874, 'regr_avgx'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (794, 'max_by'), (928, 'skewness'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (498, 'bit_or'), (770, 'mad'), (770, 'mad'), (770, 'mad'), (770, 'mad'), (770, 'mad'), (770, 'mad'), (770, 'mad'), (770, 'mad'), (640, 'fsum'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (426, 'approx_quantile'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (424, 'approx_count_distinct'), (530, 'covar_pop'), (102, 'first'), (102, 'first'), (108, 'any_value'), (108, 'any_value'), (486, 'avg'), (486, 'avg'), (486, 'avg'), (486, 'avg'), (486, 'avg'), (486, 'avg'), (914, 'sem'), (532, 'covar_samp'), (700, 'kurtosis_pop'), (618, 'favg'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (436, 'argmax'), (950, 'string_agg'), (950, 'string_agg'), (1050, 'var_samp'), (942, 'stddev_samp'), (940, 'stddev_pop'), (938, 'stddev'), (968, 'sum_no_overflow'), (968, 'sum_no_overflow'), (968, 'sum_no_overflow'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (806, 'median'), (1048, 'var_pop'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (434, 'arg_min_null'), (440, 'array_agg'), (814, 'min'), (814, 'min'), (696, 'kahan_sum'), (524, 'corr'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (816, 'min_by'), (804, 'mean'), (804, 'mean'), (804, 'mean'), (804, 'mean'), (804, 'mean'), (804, 'mean'), (970, 'sumkahan'), (1052, 'variance'), (100, 'count'), (100, 'count'), (698, 'kurtosis'), (966, 'sum'), (966, 'sum'), (966, 'sum'), (966, 'sum'), (966, 'sum'), (966, 'sum'), (98, 'count_star'), (106, 'last'), (106, 'last'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (822, 'mode'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (858, 'quantile_disc'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (502, 'bit_xor'), (508, 'bool_and'), (510, 'bool_or'), (662, 'group_concat'), (662, 'group_concat'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (428, 'arg_max'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (588, 'entropy'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (430, 'arg_max_null'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (670, 'histogram'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (856, 'quantile_cont'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (854, 'quantile'), (852, 'product'), (104, 'arbitrary'), (104, 'arbitrary'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (432, 'arg_min'), (756, 'listagg'), (756, 'listagg'), (718, 'list')]

-----------
QUERY:



-- **************** pg_cast ****************

-- Catch bogus values in pg_cast columns (other than cases detected by
-- oidjoins test).

SELECT *
FROM pg_cast c
WHERE castsource = 0 OR casttarget = 0 OR castcontext NOT IN ('e', 'a', 'i')
    OR castmethod NOT IN ('f', 'b' ,'i');
RESULT:
	ERROR - Catalog Error: Table with name pg_cast does not exist!
Did you mean "pg_class"?

-----------
QUERY:


-- Check that castfunc is nonzero only for cast methods that need a function,
-- and zero otherwise

SELECT *
FROM pg_cast c
WHERE (castmethod = 'f' AND castfunc = 0)
   OR (castmethod IN ('b', 'i') AND castfunc <> 0);
RESULT:
	ERROR - Catalog Error: Table with name pg_cast does not exist!
Did you mean "pg_class"?

-----------
QUERY:


-- Look for casts to/from the same type that aren/* REPLACED */ ''t length coercion functions.
-- (We assume they are length coercions if they take multiple arguments.)
-- Such entries are not necessarily harmful, but they are useless.

SELECT *
FROM pg_cast c
WHERE castsource = casttarget AND castfunc = 0;
RESULT:
	ERROR - Catalog Error: Table with name pg_cast does not exist!
Did you mean "pg_class"?

-----------
QUERY:


SELECT c.*
FROM pg_cast c, pg_proc p
WHERE c.castfunc = p.oid AND p.pronargs < 2 AND castsource = casttarget;
RESULT:
	ERROR - Catalog Error: Table with name pg_cast does not exist!
Did you mean "pg_class"?

-----------
QUERY:


-- Look for cast functions that don/* REPLACED */ ''t have the right signature.  The
-- argument and result types in pg_proc must be the same as, or binary
-- compatible with, what it says in pg_cast.
-- As a special case, we allow casts from CHAR(n) that use functions
-- declared to take TEXT.  This does not pass the binary-coercibility test
-- because CHAR(n)-to-TEXT normally invokes rtrim().  However, the results
-- are the same, so long as the function is one that ignores trailing blanks.

SELECT c.*
FROM pg_cast c, pg_proc p
WHERE c.castfunc = p.oid AND
    (p.pronargs < 1 OR p.pronargs > 3
     OR NOT (binary_coercible(c.castsource, p.proargtypes[0])
             OR (c.castsource = 'character'::regtype AND
                 p.proargtypes[0] = 'text'::regtype))
     OR NOT binary_coercible(p.prorettype, c.casttarget));
RESULT:
	ERROR - Catalog Error: Table with name pg_cast does not exist!
Did you mean "pg_class"?

-----------
QUERY:


SELECT c.*
FROM pg_cast c, pg_proc p
WHERE c.castfunc = p.oid AND
    ((p.pronargs > 1 AND p.proargtypes[1] != 'int4'::regtype) OR
     (p.pronargs > 2 AND p.proargtypes[2] != 'bool'::regtype));
RESULT:
	ERROR - Catalog Error: Table with name pg_cast does not exist!
Did you mean "pg_class"?

-----------
QUERY:


-- Look for binary compatible casts that do not have the reverse
-- direction registered as well, or where the reverse direction is not
-- also binary compatible.  This is legal, but usually not intended.

-- As of 7.4, this finds the casts from text and varchar to bpchar, because
-- those are binary-compatible while the reverse way goes through rtrim().

-- As of 8.2, this finds the cast from cidr to inet, because that is a
-- trivial binary coercion while the other way goes through inet_to_cidr().

-- As of 8.3, this finds the casts from xml to text, varchar, and bpchar,
-- because those are binary-compatible while the reverse goes through
-- texttoxml(), which does an XML syntax check.

-- As of 9.1, this finds the cast from pg_node_tree to text, which we
-- intentionally do not provide a reverse pathway for.

SELECT castsource::regtype, casttarget::regtype, castfunc, castcontext
FROM pg_cast c
WHERE c.castmethod = 'b' AND
    NOT EXISTS (SELECT 1 FROM pg_cast k
                WHERE k.castmethod = 'b' AND
                    k.castsource = c.casttarget AND
                    k.casttarget = c.castsource);
RESULT:
	ERROR - Catalog Error: Table with name pg_cast does not exist!
Did you mean "pg_class"?

-----------
QUERY:



-- **************** pg_conversion ****************

-- Look for illegal values in pg_conversion fields.

SELECT c.oid, c.conname
FROM pg_conversion as c
WHERE c.conproc = 0 OR
    pg_encoding_to_char(conforencoding) = '' OR
    pg_encoding_to_char(contoencoding) = '';
RESULT:
	ERROR - Catalog Error: Table with name pg_conversion does not exist!
Did you mean "pg_constraint"?

-----------
QUERY:


-- Look for conprocs that don/* REPLACED */ ''t have the expected signature.

SELECT p.oid, p.proname, c.oid, c.conname
FROM pg_proc p, pg_conversion c
WHERE p.oid = c.conproc AND
    (p.prorettype != 'int4'::regtype OR p.proretset OR
     p.pronargs != 6 OR
     p.proargtypes[0] != 'int4'::regtype OR
     p.proargtypes[1] != 'int4'::regtype OR
     p.proargtypes[2] != 'cstring'::regtype OR
     p.proargtypes[3] != 'internal'::regtype OR
     p.proargtypes[4] != 'int4'::regtype OR
     p.proargtypes[5] != 'bool'::regtype);
RESULT:
	ERROR - Catalog Error: Table with name pg_conversion does not exist!
Did you mean "pg_constraint"?

-----------
QUERY:


-- Check for conprocs that don/* REPLACED */ ''t perform the specific conversion that
-- pg_conversion alleges they do, by trying to invoke each conversion
-- on some simple ASCII data.  (The conproc should throw an error if
-- it doesn/* REPLACED */ ''t accept the encodings that are passed to it.)
-- Unfortunately, we can/* REPLACED */ ''t test non-default conprocs this way, because
-- there is no way to ask convert() to invoke them, and we cannot call
-- them directly from SQL.  But there are no non-default built-in
-- conversions anyway.
-- (Similarly, this doesn/* REPLACED */ ''t cope with any search path issues.)

SELECT c.oid, c.conname
FROM pg_conversion as c
WHERE condefault AND
    convert('ABC'::bytea, pg_encoding_to_char(conforencoding),
            pg_encoding_to_char(contoencoding)) != 'ABC';
RESULT:
	ERROR - Catalog Error: Table with name pg_conversion does not exist!
Did you mean "pg_constraint"?

-----------
QUERY:



-- **************** pg_operator ****************

-- Look for illegal values in pg_operator fields.

SELECT o1.oid, o1.oprname
FROM pg_operator as o1
WHERE (o1.oprkind != 'b' AND o1.oprkind != 'l') OR
    o1.oprresult = 0 OR o1.oprcode = 0;
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Look for missing or unwanted operand types

SELECT o1.oid, o1.oprname
FROM pg_operator as o1
WHERE (o1.oprleft = 0 and o1.oprkind != 'l') OR
    (o1.oprleft != 0 and o1.oprkind = 'l') OR
    o1.oprright = 0;
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Look for conflicting operator definitions (same names and input datatypes).

SELECT o1.oid, o1.oprcode, o2.oid, o2.oprcode
FROM pg_operator AS o1, pg_operator AS o2
WHERE o1.oid != o2.oid AND
    o1.oprname = o2.oprname AND
    o1.oprkind = o2.oprkind AND
    o1.oprleft = o2.oprleft AND
    o1.oprright = o2.oprright;
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Look for commutative operators that don/* REPLACED */ ''t commute.
-- DEFINITIONAL NOTE: If A.oprcom = B, then x A y has the same result as y B x.
-- We expect that B will always say that B.oprcom = A as well /* REPLACED */ , that/* REPLACED */ ''s not
-- inherently essential, but it would be inefficient not to mark it so.

SELECT o1.oid, o1.oprcode, o2.oid, o2.oprcode
FROM pg_operator AS o1, pg_operator AS o2
WHERE o1.oprcom = o2.oid AND
    (o1.oprkind != 'b' OR
     o1.oprleft != o2.oprright OR
     o1.oprright != o2.oprleft OR
     o1.oprresult != o2.oprresult OR
     o1.oid != o2.oprcom);
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Look for negatory operators that don/* REPLACED */ ''t agree.
-- DEFINITIONAL NOTE: If A.oprnegate = B, then both A and B must yield
-- boolean results, and (x A y) == ! (x B y), or the equivalent for
-- single-operand operators.
-- We expect that B will always say that B.oprnegate = A as well /* REPLACED */ , that/* REPLACED */ ''s not
-- inherently essential, but it would be inefficient not to mark it so.
-- Also, A and B had better not be the same operator.

SELECT o1.oid, o1.oprcode, o2.oid, o2.oprcode
FROM pg_operator AS o1, pg_operator AS o2
WHERE o1.oprnegate = o2.oid AND
    (o1.oprkind != o2.oprkind OR
     o1.oprleft != o2.oprleft OR
     o1.oprright != o2.oprright OR
     o1.oprresult != 'bool'::regtype OR
     o2.oprresult != 'bool'::regtype OR
     o1.oid != o2.oprnegate OR
     o1.oid = o2.oid);
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Make a list of the names of operators that are claimed to be commutator
-- pairs.  This list will grow over time, but before accepting a new entry
-- make sure you didn/* REPLACED */ ''t link the wrong operators.

SELECT DISTINCT o1.oprname AS op1, o2.oprname AS op2
FROM pg_operator o1, pg_operator o2
WHERE o1.oprcom = o2.oid AND o1.oprname <= o2.oprname
ORDER BY 1, 2;
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Likewise for negator pairs.

SELECT DISTINCT o1.oprname AS op1, o2.oprname AS op2
FROM pg_operator o1, pg_operator o2
WHERE o1.oprnegate = o2.oid AND o1.oprname <= o2.oprname
ORDER BY 1, 2;
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- A mergejoinable or hashjoinable operator must be binary, must return
-- boolean, and must have a commutator (itself, unless it/* REPLACED */ ''s a cross-type
-- operator).

SELECT o1.oid, o1.oprname FROM pg_operator AS o1
WHERE (o1.oprcanmerge OR o1.oprcanhash) AND NOT
    (o1.oprkind = 'b' AND o1.oprresult = 'bool'::regtype AND o1.oprcom != 0);
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- What/* REPLACED */ ''s more, the commutator had better be mergejoinable/hashjoinable too.

SELECT o1.oid, o1.oprname, o2.oid, o2.oprname
FROM pg_operator AS o1, pg_operator AS o2
WHERE o1.oprcom = o2.oid AND
    (o1.oprcanmerge != o2.oprcanmerge OR
     o1.oprcanhash != o2.oprcanhash);
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Mergejoinable operators should appear as equality members of btree index
-- opfamilies.

SELECT o1.oid, o1.oprname
FROM pg_operator AS o1
WHERE o1.oprcanmerge AND NOT EXISTS
  (SELECT 1 FROM pg_amop
   WHERE amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree') AND
         amopopr = o1.oid AND amopstrategy = 3);
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- And the converse.

SELECT o1.oid, o1.oprname, p.amopfamily
FROM pg_operator AS o1, pg_amop p
WHERE amopopr = o1.oid
  AND amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree')
  AND amopstrategy = 3
  AND NOT o1.oprcanmerge;
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Hashable operators should appear as members of hash index opfamilies.

SELECT o1.oid, o1.oprname
FROM pg_operator AS o1
WHERE o1.oprcanhash AND NOT EXISTS
  (SELECT 1 FROM pg_amop
   WHERE amopmethod = (SELECT oid FROM pg_am WHERE amname = 'hash') AND
         amopopr = o1.oid AND amopstrategy = 1);
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- And the converse.

SELECT o1.oid, o1.oprname, p.amopfamily
FROM pg_operator AS o1, pg_amop p
WHERE amopopr = o1.oid
  AND amopmethod = (SELECT oid FROM pg_am WHERE amname = 'hash')
  AND NOT o1.oprcanhash;
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Check that each operator defined in pg_operator matches its oprcode entry
-- in pg_proc.  Easiest to do this separately for each oprkind.

SELECT o1.oid, o1.oprname, p1.oid, p1.proname
FROM pg_operator AS o1, pg_proc AS p1
WHERE o1.oprcode = p1.oid AND
    o1.oprkind = 'b' AND
    (p1.pronargs != 2
     OR NOT binary_coercible(p1.prorettype, o1.oprresult)
     OR NOT binary_coercible(o1.oprleft, p1.proargtypes[0])
     OR NOT binary_coercible(o1.oprright, p1.proargtypes[1]));
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


SELECT o1.oid, o1.oprname, p1.oid, p1.proname
FROM pg_operator AS o1, pg_proc AS p1
WHERE o1.oprcode = p1.oid AND
    o1.oprkind = 'l' AND
    (p1.pronargs != 1
     OR NOT binary_coercible(p1.prorettype, o1.oprresult)
     OR NOT binary_coercible(o1.oprright, p1.proargtypes[0])
     OR o1.oprleft != 0);
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- If the operator is mergejoinable or hashjoinable, its underlying function
-- should not be volatile.

SELECT o1.oid, o1.oprname, p1.oid, p1.proname
FROM pg_operator AS o1, pg_proc AS p1
WHERE o1.oprcode = p1.oid AND
    (o1.oprcanmerge OR o1.oprcanhash) AND
    p1.provolatile = 'v';
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- If oprrest is set, the operator must return boolean,
-- and it must link to a proc with the right signature
-- to be a restriction selectivity estimator.
-- The proc signature we want is: float8 proc(internal, oid, internal, int4)

SELECT o1.oid, o1.oprname, p2.oid, p2.proname
FROM pg_operator AS o1, pg_proc AS p2
WHERE o1.oprrest = p2.oid AND
    (o1.oprresult != 'bool'::regtype OR
     p2.prorettype != 'float8'::regtype OR p2.proretset OR
     p2.pronargs != 4 OR
     p2.proargtypes[0] != 'internal'::regtype OR
     p2.proargtypes[1] != 'oid'::regtype OR
     p2.proargtypes[2] != 'internal'::regtype OR
     p2.proargtypes[3] != 'int4'::regtype);
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- If oprjoin is set, the operator must be a binary boolean op,
-- and it must link to a proc with the right signature
-- to be a join selectivity estimator.
-- The proc signature we want is: float8 proc(internal, oid, internal, int2, internal)
-- (Note: the old signature with only 4 args is still allowed, but no core
-- estimator should be using it.)

SELECT o1.oid, o1.oprname, p2.oid, p2.proname
FROM pg_operator AS o1, pg_proc AS p2
WHERE o1.oprjoin = p2.oid AND
    (o1.oprkind != 'b' OR o1.oprresult != 'bool'::regtype OR
     p2.prorettype != 'float8'::regtype OR p2.proretset OR
     p2.pronargs != 5 OR
     p2.proargtypes[0] != 'internal'::regtype OR
     p2.proargtypes[1] != 'oid'::regtype OR
     p2.proargtypes[2] != 'internal'::regtype OR
     p2.proargtypes[3] != 'int2'::regtype OR
     p2.proargtypes[4] != 'internal'::regtype);
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Insist that all built-in pg_operator entries have descriptions
SELECT o1.oid, o1.oprname
FROM pg_operator as o1 LEFT JOIN pg_description as d
     ON o1.tableoid = d.classoid and o1.oid = d.objoid and d.objsubid = 0
WHERE d.classoid IS NULL AND o1.oid <= 9999;
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Check that operators/* REPLACED */ '' underlying functions have suitable comments,
-- namely /* REPLACED */ ''implementation of XXX operator/* REPLACED */ ''.  (Note: it/* REPLACED */ ''s not necessary to
-- put such comments into pg_proc.dat /* REPLACED */ , initdb will generate them as needed.)
-- In some cases involving legacy names for operators, there are multiple
-- operators referencing the same pg_proc entry, so ignore operators whose
-- comments say they are deprecated.
-- We also have a few functions that are both operator support and meant to
-- be called directly /* REPLACED */ , those should have comments matching their operator.
WITH funcdescs AS (
  SELECT p.oid as p_oid, proname, o.oid as o_oid,
    pd.description as prodesc,
    'implementation of ' || oprname || ' operator' as expecteddesc,
    od.description as oprdesc
  FROM pg_proc p JOIN pg_operator o ON oprcode = p.oid
       LEFT JOIN pg_description pd ON
         (pd.objoid = p.oid and pd.classoid = p.tableoid and pd.objsubid = 0)
       LEFT JOIN pg_description od ON
         (od.objoid = o.oid and od.classoid = o.tableoid and od.objsubid = 0)
  WHERE o.oid <= 9999
)
SELECT * FROM funcdescs
  WHERE prodesc IS DISTINCT FROM expecteddesc
    AND oprdesc NOT LIKE 'deprecated%'
    AND prodesc IS DISTINCT FROM oprdesc;
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Show all the operator-implementation functions that have their own
-- comments.  This should happen only in cases where the function and
-- operator syntaxes are both documented at the user level.
-- This should be a pretty short list /* REPLACED */ , it/* REPLACED */ ''s mostly legacy cases.
WITH funcdescs AS (
  SELECT p.oid as p_oid, proname, o.oid as o_oid,
    pd.description as prodesc,
    'implementation of ' || oprname || ' operator' as expecteddesc,
    od.description as oprdesc
  FROM pg_proc p JOIN pg_operator o ON oprcode = p.oid
       LEFT JOIN pg_description pd ON
         (pd.objoid = p.oid and pd.classoid = p.tableoid and pd.objsubid = 0)
       LEFT JOIN pg_description od ON
         (od.objoid = o.oid and od.classoid = o.tableoid and od.objsubid = 0)
  WHERE o.oid <= 9999
)
SELECT p_oid, proname, prodesc FROM funcdescs
  WHERE prodesc IS DISTINCT FROM expecteddesc
    AND oprdesc NOT LIKE 'deprecated%'
ORDER BY 1;
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Operators that are commutator pairs should have identical volatility
-- and leakproofness markings on their implementation functions.
SELECT o1.oid, o1.oprcode, o2.oid, o2.oprcode
FROM pg_operator AS o1, pg_operator AS o2, pg_proc AS p1, pg_proc AS p2
WHERE o1.oprcom = o2.oid AND p1.oid = o1.oprcode AND p2.oid = o2.oprcode AND
    (p1.provolatile != p2.provolatile OR
     p1.proleakproof != p2.proleakproof);
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Likewise for negator pairs.
SELECT o1.oid, o1.oprcode, o2.oid, o2.oprcode
FROM pg_operator AS o1, pg_operator AS o2, pg_proc AS p1, pg_proc AS p2
WHERE o1.oprnegate = o2.oid AND p1.oid = o1.oprcode AND p2.oid = o2.oprcode AND
    (p1.provolatile != p2.provolatile OR
     p1.proleakproof != p2.proleakproof);
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Btree comparison operators/* REPLACED */ '' functions should have the same volatility
-- and leakproofness markings as the associated comparison support function.
SELECT pp.oid::regprocedure as proc, pp.provolatile as vp, pp.proleakproof as lp,
       po.oid::regprocedure as opr, po.provolatile as vo, po.proleakproof as lo
FROM pg_proc pp, pg_proc po, pg_operator o, pg_amproc ap, pg_amop ao
WHERE pp.oid = ap.amproc AND po.oid = o.oprcode AND o.oid = ao.amopopr AND
    ao.amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree') AND
    ao.amopfamily = ap.amprocfamily AND
    ao.amoplefttype = ap.amproclefttype AND
    ao.amoprighttype = ap.amprocrighttype AND
    ap.amprocnum = 1 AND
    (pp.provolatile != po.provolatile OR
     pp.proleakproof != po.proleakproof)
ORDER BY 1;
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:



-- **************** pg_aggregate ****************

-- Look for illegal values in pg_aggregate fields.

SELECT ctid, aggfnoid::oid
FROM pg_aggregate as a
WHERE aggfnoid = 0 OR aggtransfn = 0 OR
    aggkind NOT IN ('n', 'o', 'h') OR
    aggnumdirectargs < 0 OR
    (aggkind = 'n' AND aggnumdirectargs > 0) OR
    aggfinalmodify NOT IN ('r', 's', 'w') OR
    aggmfinalmodify NOT IN ('r', 's', 'w') OR
    aggtranstype = 0 OR aggtransspace < 0 OR aggmtransspace < 0;
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Make sure the matching pg_proc entry is sensible, too.

SELECT a.aggfnoid::oid, p.proname
FROM pg_aggregate as a, pg_proc as p
WHERE a.aggfnoid = p.oid AND
    (p.prokind != 'a' OR p.proretset OR p.pronargs < a.aggnumdirectargs);
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Make sure there are no prokind = PROKIND_AGGREGATE pg_proc entries without matches.

SELECT oid, proname
FROM pg_proc as p
WHERE p.prokind = 'a' AND
    NOT EXISTS (SELECT 1 FROM pg_aggregate a WHERE a.aggfnoid = p.oid);
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- If there is no finalfn then the output type must be the transtype.

SELECT a.aggfnoid::oid, p.proname
FROM pg_aggregate as a, pg_proc as p
WHERE a.aggfnoid = p.oid AND
    a.aggfinalfn = 0 AND p.prorettype != a.aggtranstype;
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Cross-check transfn against its entry in pg_proc.
SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname
FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr
WHERE a.aggfnoid = p.oid AND
    a.aggtransfn = ptr.oid AND
    (ptr.proretset
     OR NOT (ptr.pronargs =
             CASE WHEN a.aggkind = 'n' THEN p.pronargs + 1
             ELSE greatest(p.pronargs - a.aggnumdirectargs, 1) + 1 END)
     OR NOT binary_coercible(ptr.prorettype, a.aggtranstype)
     OR NOT binary_coercible(a.aggtranstype, ptr.proargtypes[0])
     OR (p.pronargs > 0 AND
         NOT binary_coercible(p.proargtypes[0], ptr.proargtypes[1]))
     OR (p.pronargs > 1 AND
         NOT binary_coercible(p.proargtypes[1], ptr.proargtypes[2]))
     OR (p.pronargs > 2 AND
         NOT binary_coercible(p.proargtypes[2], ptr.proargtypes[3]))
     OR (p.pronargs > 3 AND
         NOT binary_coercible(p.proargtypes[3], ptr.proargtypes[4]))
     -- we could carry the check further, but 4 args is enough for now
     OR (p.pronargs > 4)
    );
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Cross-check finalfn (if present) against its entry in pg_proc.

SELECT a.aggfnoid::oid, p.proname, pfn.oid, pfn.proname
FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS pfn
WHERE a.aggfnoid = p.oid AND
    a.aggfinalfn = pfn.oid AND
    (pfn.proretset OR
     NOT binary_coercible(pfn.prorettype, p.prorettype) OR
     NOT binary_coercible(a.aggtranstype, pfn.proargtypes[0]) OR
     CASE WHEN a.aggfinalextra THEN pfn.pronargs != p.pronargs + 1
          ELSE pfn.pronargs != a.aggnumdirectargs + 1 END
     OR (pfn.pronargs > 1 AND
         NOT binary_coercible(p.proargtypes[0], pfn.proargtypes[1]))
     OR (pfn.pronargs > 2 AND
         NOT binary_coercible(p.proargtypes[1], pfn.proargtypes[2]))
     OR (pfn.pronargs > 3 AND
         NOT binary_coercible(p.proargtypes[2], pfn.proargtypes[3]))
     -- we could carry the check further, but 4 args is enough for now
     OR (pfn.pronargs > 4)
    );
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- If transfn is strict then either initval should be non-NULL, or
-- input type should match transtype so that the first non-null input
-- can be assigned as the state value.

SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname
FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr
WHERE a.aggfnoid = p.oid AND
    a.aggtransfn = ptr.oid AND ptr.proisstrict AND
    a.agginitval IS NULL AND
    NOT binary_coercible(p.proargtypes[0], a.aggtranstype);
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Check for inconsistent specifications of moving-aggregate columns.

SELECT ctid, aggfnoid::oid
FROM pg_aggregate as a
WHERE aggmtranstype != 0 AND
    (aggmtransfn = 0 OR aggminvtransfn = 0);
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


SELECT ctid, aggfnoid::oid
FROM pg_aggregate as a
WHERE aggmtranstype = 0 AND
    (aggmtransfn != 0 OR aggminvtransfn != 0 OR aggmfinalfn != 0 OR
     aggmtransspace != 0 OR aggminitval IS NOT NULL);
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- If there is no mfinalfn then the output type must be the mtranstype.

SELECT a.aggfnoid::oid, p.proname
FROM pg_aggregate as a, pg_proc as p
WHERE a.aggfnoid = p.oid AND
    a.aggmtransfn != 0 AND
    a.aggmfinalfn = 0 AND p.prorettype != a.aggmtranstype;
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Cross-check mtransfn (if present) against its entry in pg_proc.
SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname
FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr
WHERE a.aggfnoid = p.oid AND
    a.aggmtransfn = ptr.oid AND
    (ptr.proretset
     OR NOT (ptr.pronargs =
             CASE WHEN a.aggkind = 'n' THEN p.pronargs + 1
             ELSE greatest(p.pronargs - a.aggnumdirectargs, 1) + 1 END)
     OR NOT binary_coercible(ptr.prorettype, a.aggmtranstype)
     OR NOT binary_coercible(a.aggmtranstype, ptr.proargtypes[0])
     OR (p.pronargs > 0 AND
         NOT binary_coercible(p.proargtypes[0], ptr.proargtypes[1]))
     OR (p.pronargs > 1 AND
         NOT binary_coercible(p.proargtypes[1], ptr.proargtypes[2]))
     OR (p.pronargs > 2 AND
         NOT binary_coercible(p.proargtypes[2], ptr.proargtypes[3]))
     -- we could carry the check further, but 3 args is enough for now
     OR (p.pronargs > 3)
    );
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Cross-check minvtransfn (if present) against its entry in pg_proc.
SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname
FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr
WHERE a.aggfnoid = p.oid AND
    a.aggminvtransfn = ptr.oid AND
    (ptr.proretset
     OR NOT (ptr.pronargs =
             CASE WHEN a.aggkind = 'n' THEN p.pronargs + 1
             ELSE greatest(p.pronargs - a.aggnumdirectargs, 1) + 1 END)
     OR NOT binary_coercible(ptr.prorettype, a.aggmtranstype)
     OR NOT binary_coercible(a.aggmtranstype, ptr.proargtypes[0])
     OR (p.pronargs > 0 AND
         NOT binary_coercible(p.proargtypes[0], ptr.proargtypes[1]))
     OR (p.pronargs > 1 AND
         NOT binary_coercible(p.proargtypes[1], ptr.proargtypes[2]))
     OR (p.pronargs > 2 AND
         NOT binary_coercible(p.proargtypes[2], ptr.proargtypes[3]))
     -- we could carry the check further, but 3 args is enough for now
     OR (p.pronargs > 3)
    );
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Cross-check mfinalfn (if present) against its entry in pg_proc.

SELECT a.aggfnoid::oid, p.proname, pfn.oid, pfn.proname
FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS pfn
WHERE a.aggfnoid = p.oid AND
    a.aggmfinalfn = pfn.oid AND
    (pfn.proretset OR
     NOT binary_coercible(pfn.prorettype, p.prorettype) OR
     NOT binary_coercible(a.aggmtranstype, pfn.proargtypes[0]) OR
     CASE WHEN a.aggmfinalextra THEN pfn.pronargs != p.pronargs + 1
          ELSE pfn.pronargs != a.aggnumdirectargs + 1 END
     OR (pfn.pronargs > 1 AND
         NOT binary_coercible(p.proargtypes[0], pfn.proargtypes[1]))
     OR (pfn.pronargs > 2 AND
         NOT binary_coercible(p.proargtypes[1], pfn.proargtypes[2]))
     OR (pfn.pronargs > 3 AND
         NOT binary_coercible(p.proargtypes[2], pfn.proargtypes[3]))
     -- we could carry the check further, but 4 args is enough for now
     OR (pfn.pronargs > 4)
    );
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- If mtransfn is strict then either minitval should be non-NULL, or
-- input type should match mtranstype so that the first non-null input
-- can be assigned as the state value.

SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname
FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr
WHERE a.aggfnoid = p.oid AND
    a.aggmtransfn = ptr.oid AND ptr.proisstrict AND
    a.aggminitval IS NULL AND
    NOT binary_coercible(p.proargtypes[0], a.aggmtranstype);
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- mtransfn and minvtransfn should have same strictness setting.

SELECT a.aggfnoid::oid, p.proname, ptr.oid, ptr.proname, iptr.oid, iptr.proname
FROM pg_aggregate AS a, pg_proc AS p, pg_proc AS ptr, pg_proc AS iptr
WHERE a.aggfnoid = p.oid AND
    a.aggmtransfn = ptr.oid AND
    a.aggminvtransfn = iptr.oid AND
    ptr.proisstrict != iptr.proisstrict;
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Check that all combine functions have signature
-- combine(transtype, transtype) returns transtype

SELECT a.aggfnoid, p.proname
FROM pg_aggregate as a, pg_proc as p
WHERE a.aggcombinefn = p.oid AND
    (p.pronargs != 2 OR
     p.prorettype != p.proargtypes[0] OR
     p.prorettype != p.proargtypes[1] OR
     NOT binary_coercible(a.aggtranstype, p.proargtypes[0]));
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Check that no combine function for an INTERNAL transtype is strict.

SELECT a.aggfnoid, p.proname
FROM pg_aggregate as a, pg_proc as p
WHERE a.aggcombinefn = p.oid AND
    a.aggtranstype = 'internal'::regtype AND p.proisstrict;
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- serialize/deserialize functions should be specified only for aggregates
-- with transtype internal and a combine function, and we should have both
-- or neither of them.

SELECT aggfnoid, aggtranstype, aggserialfn, aggdeserialfn
FROM pg_aggregate
WHERE (aggserialfn != 0 OR aggdeserialfn != 0)
  AND (aggtranstype != 'internal'::regtype OR aggcombinefn = 0 OR
       aggserialfn = 0 OR aggdeserialfn = 0);
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Check that all serialization functions have signature
-- serialize(internal) returns bytea
-- Also insist that they be strict /* REPLACED */ , it/* REPLACED */ ''s wasteful to run them on NULLs.

SELECT a.aggfnoid, p.proname
FROM pg_aggregate as a, pg_proc as p
WHERE a.aggserialfn = p.oid AND
    (p.prorettype != 'bytea'::regtype OR p.pronargs != 1 OR
     p.proargtypes[0] != 'internal'::regtype OR
     NOT p.proisstrict);
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Check that all deserialization functions have signature
-- deserialize(bytea, internal) returns internal
-- Also insist that they be strict /* REPLACED */ , it/* REPLACED */ ''s wasteful to run them on NULLs.

SELECT a.aggfnoid, p.proname
FROM pg_aggregate as a, pg_proc as p
WHERE a.aggdeserialfn = p.oid AND
    (p.prorettype != 'internal'::regtype OR p.pronargs != 2 OR
     p.proargtypes[0] != 'bytea'::regtype OR
     p.proargtypes[1] != 'internal'::regtype OR
     NOT p.proisstrict);
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Check that aggregates which have the same transition function also have
-- the same combine, serialization, and deserialization functions.
-- While that isn/* REPLACED */ ''t strictly necessary, it/* REPLACED */ ''s fishy if they don/* REPLACED */ ''t.

SELECT a.aggfnoid, a.aggcombinefn, a.aggserialfn, a.aggdeserialfn,
       b.aggfnoid, b.aggcombinefn, b.aggserialfn, b.aggdeserialfn
FROM
    pg_aggregate a, pg_aggregate b
WHERE
    a.aggfnoid < b.aggfnoid AND a.aggtransfn = b.aggtransfn AND
    (a.aggcombinefn != b.aggcombinefn OR a.aggserialfn != b.aggserialfn
     OR a.aggdeserialfn != b.aggdeserialfn);
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Cross-check aggsortop (if present) against pg_operator.
-- We expect to find entries for bool_and, bool_or, every, max, and min.

SELECT DISTINCT proname, oprname
FROM pg_operator AS o, pg_aggregate AS a, pg_proc AS p
WHERE a.aggfnoid = p.oid AND a.aggsortop = o.oid
ORDER BY 1, 2;
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Check datatypes match

SELECT a.aggfnoid::oid, o.oid
FROM pg_operator AS o, pg_aggregate AS a, pg_proc AS p
WHERE a.aggfnoid = p.oid AND a.aggsortop = o.oid AND
    (oprkind != 'b' OR oprresult != 'boolean'::regtype
     OR oprleft != p.proargtypes[0] OR oprright != p.proargtypes[0]);
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Check operator is a suitable btree opfamily member

SELECT a.aggfnoid::oid, o.oid
FROM pg_operator AS o, pg_aggregate AS a, pg_proc AS p
WHERE a.aggfnoid = p.oid AND a.aggsortop = o.oid AND
    NOT EXISTS(SELECT 1 FROM pg_amop
               WHERE amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree')
                     AND amopopr = o.oid
                     AND amoplefttype = o.oprleft
                     AND amoprighttype = o.oprright);
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Check correspondence of btree strategies and names

SELECT DISTINCT proname, oprname, amopstrategy
FROM pg_operator AS o, pg_aggregate AS a, pg_proc AS p,
     pg_amop as ao
WHERE a.aggfnoid = p.oid AND a.aggsortop = o.oid AND
    amopopr = o.oid AND
    amopmethod = (SELECT oid FROM pg_am WHERE amname = 'btree')
ORDER BY 1, 2;
RESULT:
	ERROR - Catalog Error: Table with name pg_operator does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Check that there are not aggregates with the same name and different
-- numbers of arguments.  While not technically wrong, we have a project policy
-- to avoid this because it opens the door for confusion in connection with
-- ORDER BY: novices frequently put the ORDER BY in the wrong place.
-- See the fate of the single-argument form of string_agg() for history.
-- (Note: we don/* REPLACED */ ''t forbid users from creating such aggregates /* REPLACED */ , the policy is
-- just to think twice before creating built-in aggregates like this.)
-- The only aggregates that should show up here are count(x) and count(*).

SELECT p1.oid::regprocedure, p2.oid::regprocedure
FROM pg_proc AS p1, pg_proc AS p2
WHERE p1.oid < p2.oid AND p1.proname = p2.proname AND
    p1.prokind = 'a' AND p2.prokind = 'a' AND
    array_dims(p1.proargtypes) != array_dims(p2.proargtypes)
ORDER BY 1;
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_dims does not exist!
Did you mean "array_has"?

-----------
QUERY:


-- For the same reason, built-in aggregates with default arguments are no good.

SELECT oid, proname
FROM pg_proc AS p
WHERE prokind = 'a' AND proargdefaults IS NOT NULL;
RESULT:
	[]

-----------
QUERY:


-- For the same reason, we avoid creating built-in variadic aggregates, except
-- that variadic ordered-set aggregates are OK (since they have special syntax
-- that is not subject to the misplaced ORDER BY issue).

SELECT p.oid, proname
FROM pg_proc AS p JOIN pg_aggregate AS a ON a.aggfnoid = p.oid
WHERE prokind = 'a' AND provariadic != 0 AND a.aggkind = 'n';
RESULT:
	ERROR - Catalog Error: Table with name pg_aggregate does not exist!
Did you mean "pg_am"?

-----------
QUERY:



-- **************** pg_opfamily ****************

-- Look for illegal values in pg_opfamily fields

SELECT f.oid
FROM pg_opfamily as f
WHERE f.opfmethod = 0 OR f.opfnamespace = 0;
RESULT:
	ERROR - Catalog Error: Table with name pg_opfamily does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Look for opfamilies having no opclasses.  While most validation of
-- opfamilies is now handled by AM-specific amvalidate functions, that/* REPLACED */ ''s
-- driven from pg_opclass entries below, so an empty opfamily would not
-- get noticed.

SELECT oid, opfname FROM pg_opfamily f
WHERE NOT EXISTS (SELECT 1 FROM pg_opclass WHERE opcfamily = f.oid);
RESULT:
	ERROR - Catalog Error: Table with name pg_opfamily does not exist!
Did you mean "pg_am"?

-----------
QUERY:



-- **************** pg_opclass ****************

-- Look for illegal values in pg_opclass fields

SELECT c1.oid
FROM pg_opclass AS c1
WHERE c1.opcmethod = 0 OR c1.opcnamespace = 0 OR c1.opcfamily = 0
    OR c1.opcintype = 0;
RESULT:
	ERROR - Catalog Error: Table with name pg_opclass does not exist!
Did you mean "pg_class"?

-----------
QUERY:


-- opcmethod must match owning opfamily/* REPLACED */ ''s opfmethod

SELECT c1.oid, f1.oid
FROM pg_opclass AS c1, pg_opfamily AS f1
WHERE c1.opcfamily = f1.oid AND c1.opcmethod != f1.opfmethod;
RESULT:
	ERROR - Catalog Error: Table with name pg_opclass does not exist!
Did you mean "pg_class"?

-----------
QUERY:


-- There should not be multiple entries in pg_opclass with opcdefault true
-- and the same opcmethod/opcintype combination.

SELECT c1.oid, c2.oid
FROM pg_opclass AS c1, pg_opclass AS c2
WHERE c1.oid != c2.oid AND
    c1.opcmethod = c2.opcmethod AND c1.opcintype = c2.opcintype AND
    c1.opcdefault AND c2.opcdefault;
RESULT:
	ERROR - Catalog Error: Table with name pg_opclass does not exist!
Did you mean "pg_class"?

-----------
QUERY:


-- Ask access methods to validate opclasses
-- (this replaces a lot of SQL-level checks that used to be done in this file)

SELECT oid, opcname FROM pg_opclass WHERE NOT amvalidate(oid);
RESULT:
	ERROR - Catalog Error: Table with name pg_opclass does not exist!
Did you mean "pg_class"?

-----------
QUERY:



-- **************** pg_am ****************

-- Look for illegal values in pg_am fields

SELECT a1.oid, a1.amname
FROM pg_am AS a1
WHERE a1.amhandler = 0;
RESULT:
	[]

-----------
QUERY:


-- Check for index amhandler functions with the wrong signature

SELECT a1.oid, a1.amname, p1.oid, p1.proname
FROM pg_am AS a1, pg_proc AS p1
WHERE p1.oid = a1.amhandler AND a1.amtype = 'i' AND
    (p1.prorettype != 'index_am_handler'::regtype
     OR p1.proretset
     OR p1.pronargs != 1
     OR p1.proargtypes[0] != 'internal'::regtype);
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


-- Check for table amhandler functions with the wrong signature

SELECT a1.oid, a1.amname, p1.oid, p1.proname
FROM pg_am AS a1, pg_proc AS p1
WHERE p1.oid = a1.amhandler AND a1.amtype = 't' AND
    (p1.prorettype != 'table_am_handler'::regtype
     OR p1.proretset
     OR p1.pronargs != 1
     OR p1.proargtypes[0] != 'internal'::regtype);
RESULT:
	ERROR - Catalog Error: Type with name regtype does not exist!
Did you mean "date"?

-----------
QUERY:


-- **************** pg_amop ****************

-- Look for illegal values in pg_amop fields

SELECT a1.amopfamily, a1.amopstrategy
FROM pg_amop as a1
WHERE a1.amopfamily = 0 OR a1.amoplefttype = 0 OR a1.amoprighttype = 0
    OR a1.amopopr = 0 OR a1.amopmethod = 0 OR a1.amopstrategy < 1;
RESULT:
	ERROR - Catalog Error: Table with name pg_amop does not exist!
Did you mean "pg_am"?

-----------
QUERY:


SELECT a1.amopfamily, a1.amopstrategy
FROM pg_amop as a1
WHERE NOT ((a1.amoppurpose = 's' AND a1.amopsortfamily = 0) OR
           (a1.amoppurpose = 'o' AND a1.amopsortfamily <> 0));
RESULT:
	ERROR - Catalog Error: Table with name pg_amop does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- amopmethod must match owning opfamily/* REPLACED */ ''s opfmethod

SELECT a1.oid, f1.oid
FROM pg_amop AS a1, pg_opfamily AS f1
WHERE a1.amopfamily = f1.oid AND a1.amopmethod != f1.opfmethod;
RESULT:
	ERROR - Catalog Error: Table with name pg_amop does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Make a list of all the distinct operator names being used in particular
-- strategy slots.  This is a bit hokey, since the list might need to change
-- in future releases, but it/* REPLACED */ ''s an effective way of spotting mistakes such as
-- swapping two operators within a family.

SELECT DISTINCT amopmethod, amopstrategy, oprname
FROM pg_amop a1 LEFT JOIN pg_operator o1 ON amopopr = o1.oid
ORDER BY 1, 2, 3;
RESULT:
	ERROR - Catalog Error: Table with name pg_amop does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Check that all opclass search operators have selectivity estimators.
-- This is not absolutely required, but it seems a reasonable thing
-- to insist on for all standard datatypes.

SELECT a1.amopfamily, a1.amopopr, o1.oid, o1.oprname
FROM pg_amop AS a1, pg_operator AS o1
WHERE a1.amopopr = o1.oid AND a1.amoppurpose = 's' AND
    (o1.oprrest = 0 OR o1.oprjoin = 0);
RESULT:
	ERROR - Catalog Error: Table with name pg_amop does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Check that each opclass in an opfamily has associated operators, that is
-- ones whose oprleft matches opcintype (possibly by coercion).

SELECT c1.opcname, c1.opcfamily
FROM pg_opclass AS c1
WHERE NOT EXISTS(SELECT 1 FROM pg_amop AS a1
                 WHERE a1.amopfamily = c1.opcfamily
                   AND binary_coercible(c1.opcintype, a1.amoplefttype));
RESULT:
	ERROR - Catalog Error: Table with name pg_opclass does not exist!
Did you mean "pg_class"?

-----------
QUERY:


-- Check that each operator listed in pg_amop has an associated opclass,
-- that is one whose opcintype matches oprleft (possibly by coercion).
-- Otherwise the operator is useless because it cannot be matched to an index.
-- (In principle it could be useful to list such operators in multiple-datatype
-- btree opfamilies, but in practice you/* REPLACED */ ''d expect there to be an opclass for
-- every datatype the family knows about.)

SELECT a1.amopfamily, a1.amopstrategy, a1.amopopr
FROM pg_amop AS a1
WHERE NOT EXISTS(SELECT 1 FROM pg_opclass AS c1
                 WHERE c1.opcfamily = a1.amopfamily
                   AND binary_coercible(c1.opcintype, a1.amoplefttype));
RESULT:
	ERROR - Catalog Error: Table with name pg_amop does not exist!
Did you mean "pg_am"?

-----------
QUERY:


-- Operators that are primary members of opclasses must be immutable (else
-- it suggests that the index ordering isn/* REPLACED */ ''t fixed).  Operators that are
-- cross-type members need only be stable, since they are just shorthands
-- for index probe queries.

SELECT a1.amopfamily, a1.amopopr, o1.oprname, p1.prosrc
FROM pg_amop AS a1, pg_operator AS o1, pg_proc AS p1
WHERE a1.amopopr = o1.oid AND o1.oprcode = p1.oid AND
    a1.amoplefttype = a1.amoprighttype AND
    p1.provolatile != 'i';
RESULT:
	ERROR - Catalog Error: Table with name pg_amop does not exist!
Did you mean "pg_am"?

-----------
QUERY:


SELECT a1.amopfamily, a1.amopopr, o1.oprname, p1.prosrc
FROM pg_amop AS a1, pg_operator AS o1, pg_proc AS p1
WHERE a1.amopopr = o1.oid AND o1.oprcode = p1.oid AND
    a1.amoplefttype != a1.amoprighttype AND
    p1.provolatile = 'v';
RESULT:
	ERROR - Catalog Error: Table with name pg_amop does not exist!
Did you mean "pg_am"?

-----------
QUERY:



-- **************** pg_amproc ****************

-- Look for illegal values in pg_amproc fields

SELECT a1.amprocfamily, a1.amprocnum
FROM pg_amproc as a1
WHERE a1.amprocfamily = 0 OR a1.amproclefttype = 0 OR a1.amprocrighttype = 0
    OR a1.amprocnum < 0 OR a1.amproc = 0;
RESULT:
	ERROR - Catalog Error: Table with name pg_amproc does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Support routines that are primary members of opfamilies must be immutable
-- (else it suggests that the index ordering isn/* REPLACED */ ''t fixed).  But cross-type
-- members need only be stable, since they are just shorthands
-- for index probe queries.

SELECT a1.amprocfamily, a1.amproc, p1.prosrc
FROM pg_amproc AS a1, pg_proc AS p1
WHERE a1.amproc = p1.oid AND
    a1.amproclefttype = a1.amprocrighttype AND
    p1.provolatile != 'i';
RESULT:
	ERROR - Catalog Error: Table with name pg_amproc does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


SELECT a1.amprocfamily, a1.amproc, p1.prosrc
FROM pg_amproc AS a1, pg_proc AS p1
WHERE a1.amproc = p1.oid AND
    a1.amproclefttype != a1.amprocrighttype AND
    p1.provolatile = 'v';
RESULT:
	ERROR - Catalog Error: Table with name pg_amproc does not exist!
Did you mean "pg_proc"?

-----------
QUERY:


-- Almost all of the core distribution/* REPLACED */ ''s Btree opclasses can use one of the
-- two generic /* REPLACED */ ''equalimage/* REPLACED */ '' functions as their support function 4.  Look for
-- opclasses that don/* REPLACED */ ''t allow deduplication unconditionally here.
--
-- Newly added Btree opclasses don/* REPLACED */ ''t have to support deduplication.  It will
-- usually be trivial to add support, though.  Note that the expected output
-- of this part of the test will need to be updated when a new opclass cannot
-- support deduplication (by using btequalimage).
SELECT amp.amproc::regproc AS proc, opf.opfname AS opfamily_name,
       opc.opcname AS opclass_name, opc.opcintype::regtype AS opcintype
FROM pg_am AS am
JOIN pg_opclass AS opc ON opc.opcmethod = am.oid
JOIN pg_opfamily AS opf ON opc.opcfamily = opf.oid
LEFT JOIN pg_amproc AS amp ON amp.amprocfamily = opf.oid AND
    amp.amproclefttype = opc.opcintype AND amp.amprocnum = 4
WHERE am.amname = 'btree' AND
    amp.amproc IS DISTINCT FROM 'btequalimage'::regproc
ORDER BY 1, 2, 3;
RESULT:
	ERROR - Catalog Error: Table with name pg_opclass does not exist!
Did you mean "pg_class"?

-----------
QUERY:


-- **************** pg_index ****************

-- Look for illegal values in pg_index fields.

SELECT indexrelid, indrelid
FROM pg_index
WHERE indexrelid = 0 OR indrelid = 0 OR
      indnatts <= 0 OR indnatts > 32;
RESULT:
	[(1989, 1986), (2000, 1998)]

-----------
QUERY:


-- oidvector and int2vector fields should be of length indnatts.

SELECT indexrelid, indrelid
FROM pg_index
WHERE array_lower(indkey, 1) != 0 OR array_upper(indkey, 1) != indnatts-1 OR
    array_lower(indclass, 1) != 0 OR array_upper(indclass, 1) != indnatts-1 OR
    array_lower(indcollation, 1) != 0 OR array_upper(indcollation, 1) != indnatts-1 OR
    array_lower(indoption, 1) != 0 OR array_upper(indoption, 1) != indnatts-1;
RESULT:
	ERROR - Catalog Error: Scalar Function with name array_lower does not exist!
Did you mean "array_where"?

-----------
QUERY:


-- Check that opclasses and collations match the underlying columns.
-- (As written, this test ignores expression indexes.)

SELECT indexrelid::regclass, indrelid::regclass, attname, atttypid::regtype, opcname
FROM (SELECT indexrelid, indrelid, unnest(indkey) as ikey,
             unnest(indclass) as iclass, unnest(indcollation) as icoll
      FROM pg_index) ss,
      pg_attribute a,
      pg_opclass opc
WHERE a.attrelid = indrelid AND a.attnum = ikey AND opc.oid = iclass AND
      (NOT binary_coercible(atttypid, opcintype) OR icoll != attcollation);
RESULT:
	ERROR - Catalog Error: Table with name pg_opclass does not exist!
Did you mean "pg_class"?

-----------
QUERY:


-- For system catalogs, be even tighter: nearly all indexes should be
-- exact type matches not binary-coercible matches.  At this writing
-- the only exception is an OID index on a regproc column.

SELECT indexrelid::regclass, indrelid::regclass, attname, atttypid::regtype, opcname
FROM (SELECT indexrelid, indrelid, unnest(indkey) as ikey,
             unnest(indclass) as iclass, unnest(indcollation) as icoll
      FROM pg_index
      WHERE indrelid < 16384) ss,
      pg_attribute a,
      pg_opclass opc
WHERE a.attrelid = indrelid AND a.attnum = ikey AND opc.oid = iclass AND
      (opcintype != atttypid OR icoll != attcollation)
ORDER BY 1;
RESULT:
	ERROR - Catalog Error: Table with name pg_opclass does not exist!
Did you mean "pg_class"?

-----------
QUERY:


-- Check for system catalogs with collation-sensitive ordering.  This is not
-- a representational error in pg_index, but simply wrong catalog design.
-- It/* REPLACED */ ''s bad because we expect to be able to clone template0 and assign the
-- copy a different database collation.  It would especially not work for
-- shared catalogs.

SELECT relname, attname, attcollation
FROM pg_class c, pg_attribute a
WHERE c.oid = attrelid AND c.oid < 16384 AND
    c.relkind != 'v' AND  -- we don/* REPLACED */ ''t care about columns in views
    attcollation != 0 AND
    attcollation != (SELECT oid FROM pg_collation WHERE collname = 'C');
RESULT:
	ERROR - Catalog Error: Table with name pg_collation does not exist!
Did you mean "pg_class"?

-----------
QUERY:


-- Double-check that collation-sensitive indexes have /* REPLACED */ ''C/* REPLACED */ '' collation, too.

SELECT indexrelid::regclass, indrelid::regclass, iclass, icoll
FROM (SELECT indexrelid, indrelid,
             unnest(indclass) as iclass, unnest(indcollation) as icoll
      FROM pg_index
      WHERE indrelid < 16384) ss
WHERE icoll != 0 AND
    icoll != (SELECT oid FROM pg_collation WHERE collname = 'C');
RESULT:
	ERROR - Catalog Error: Table with name pg_collation does not exist!
Did you mean "pg_class"?
