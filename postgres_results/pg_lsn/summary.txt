Guest DBMS identified: postgres
-----------
QUERY:
--
-- PG_LSN
--

CREATE TABLE PG_LSN_TBL (f1 pg_lsn);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- Largest and smallest input
INSERT INTO PG_LSN_TBL VALUES ('0/0');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO PG_LSN_TBL VALUES ('FFFFFFFF/FFFFFFFF');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- Incorrect input
INSERT INTO PG_LSN_TBL VALUES ('G/0');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

INSERT INTO PG_LSN_TBL VALUES ('-1/0');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

INSERT INTO PG_LSN_TBL VALUES (' 0/12345678');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

INSERT INTO PG_LSN_TBL VALUES ('ABCD/');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

INSERT INTO PG_LSN_TBL VALUES ('/ABCD');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


-- Also try it with non-error-throwing API
SELECT pg_input_is_valid('16AE7F7', 'pg_lsn');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('16AE7F7', 'pg_lsn');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- Min/Max aggregation
SELECT MIN(f1), MAX(f1) FROM PG_LSN_TBL;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DROP TABLE PG_LSN_TBL;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- Operators
SELECT '0/16AE7F8' = '0/16AE7F8'::pg_lsn;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT '0/16AE7F8'::pg_lsn != '0/16AE7F7';
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT '0/16AE7F7' < '0/16AE7F8'::pg_lsn;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT '0/16AE7F8' > pg_lsn '0/16AE7F7';
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT '0/16AE7F7'::pg_lsn - '0/16AE7F8'::pg_lsn;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT '0/16AE7F8'::pg_lsn - '0/16AE7F7'::pg_lsn;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT '0/16AE7F7'::pg_lsn + 16::numeric;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT 16::numeric + '0/16AE7F7'::pg_lsn;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT '0/16AE7F7'::pg_lsn - 16::numeric;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT 'FFFFFFFF/FFFFFFFE'::pg_lsn + 1::numeric;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT 'FFFFFFFF/FFFFFFFE'::pg_lsn + 2::numeric;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- out of range error
SELECT '0/1'::pg_lsn - 1::numeric;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT '0/1'::pg_lsn - 2::numeric;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- out of range error
SELECT '0/0'::pg_lsn + ('FFFFFFFF/FFFFFFFF'::pg_lsn - '0/0'::pg_lsn);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT 'FFFFFFFF/FFFFFFFF'::pg_lsn - ('FFFFFFFF/FFFFFFFF'::pg_lsn - '0/0'::pg_lsn);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT '0/16AE7F7'::pg_lsn + 'NaN'::numeric;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

SELECT '0/16AE7F7'::pg_lsn - 'NaN'::numeric;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


-- Check btree and hash opclasses
EXPLAIN (COSTS OFF)
SELECT DISTINCT (i || '/' || j)::pg_lsn f
  FROM generate_series(1, 10) i,
       generate_series(1, 10) j,
       generate_series(1, 5) k
  WHERE i <= 10 AND j > 0 AND j <= 10
  ORDER BY f;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


SELECT DISTINCT (i || '/' || j)::pg_lsn f
  FROM generate_series(1, 10) i,
       generate_series(1, 10) j,
       generate_series(1, 5) k
  WHERE i <= 10 AND j > 0 AND j <= 10
  ORDER BY f;
RESULT: [duckdb: ERROR, mySQL: ERROR]
=========================================
Summary for test case pg_lsn/test.sql of postgres
=========================================

=================
Results for duckdb
SAME: 9 queries, which is 29.03%
DIFFERENT: 0 queries, which is 0.00%
ERROR: 22 queries, which is 70.97%

=================
Results for mySQL
SAME: 9 queries, which is 29.03%
DIFFERENT: 0 queries, which is 0.00%
ERROR: 22 queries, which is 70.97%
