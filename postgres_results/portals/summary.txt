Guest DBMS identified: postgres
-----------
QUERY:
--
-- Cursor regression tests
--

BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


DECLARE foo1 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo2 SCROLL CURSOR FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo3 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo4 SCROLL CURSOR FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo5 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo6 SCROLL CURSOR FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo7 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo8 SCROLL CURSOR FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo9 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo10 SCROLL CURSOR FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo11 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo12 SCROLL CURSOR FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo13 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo14 SCROLL CURSOR FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo15 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo16 SCROLL CURSOR FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo17 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo18 SCROLL CURSOR FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo19 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo20 SCROLL CURSOR FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo21 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo22 SCROLL CURSOR FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE foo23 SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 1 in foo1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 2 in foo2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 3 in foo3;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 4 in foo4;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 5 in foo5;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 6 in foo6;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 7 in foo7;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 8 in foo8;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 9 in foo9;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 10 in foo10;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 11 in foo11;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 12 in foo12;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 13 in foo13;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 14 in foo14;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 15 in foo15;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 16 in foo16;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 17 in foo17;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 18 in foo18;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 19 in foo19;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 20 in foo20;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 21 in foo21;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 22 in foo22;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 23 in foo23;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 1 in foo23;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 2 in foo22;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 3 in foo21;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 4 in foo20;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 5 in foo19;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 6 in foo18;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 7 in foo17;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 8 in foo16;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 9 in foo15;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 10 in foo14;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 11 in foo13;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 12 in foo12;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 13 in foo11;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 14 in foo10;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 15 in foo9;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 16 in foo8;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 17 in foo7;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 18 in foo6;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 19 in foo5;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 20 in foo4;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 21 in foo3;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 22 in foo2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH backward 23 in foo1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo3;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo4;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo5;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo6;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo7;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo8;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo9;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo10;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo11;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo12;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- leave some cursors open, to test that auto-close works.

-- record this in the system view as well (don/* REPLACED */''t query the time field there
-- however)
SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors ORDER BY 1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


END;
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:


SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


--
-- NO SCROLL disallows backward fetching
--

BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


DECLARE foo24 NO SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 1 FROM foo24;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH BACKWARD 1 FROM foo24;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- should fail

END;
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:


BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


DECLARE foo24 NO SCROLL CURSOR FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH 1 FROM foo24;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH ABSOLUTE 2 FROM foo24;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:
 -- allowed

FETCH ABSOLUTE 1 FROM foo24;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- should fail

END;
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:


--
-- Cursors outside transaction blocks
--


SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


DECLARE foo25 SCROLL CURSOR WITH HOLD FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH FROM foo25;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH FROM foo25;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


COMMIT;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


FETCH FROM foo25;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH BACKWARD FROM foo25;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH ABSOLUTE -1 FROM foo25;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo25;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


DECLARE foo25ns NO SCROLL CURSOR WITH HOLD FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH FROM foo25ns;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH FROM foo25ns;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


COMMIT;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


FETCH FROM foo25ns;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH ABSOLUTE 4 FROM foo25ns;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


FETCH ABSOLUTE 4 FROM foo25ns;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- fail

SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


CLOSE foo25ns;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


--
-- ROLLBACK should close holdable cursors
--

BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


DECLARE foo26 CURSOR WITH HOLD FOR SELECT * FROM tenk1 ORDER BY unique2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


-- should fail
FETCH FROM foo26;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


--
-- Parameterized DECLARE needs to insert param values into the cursor portal
--

BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


CREATE FUNCTION declares_cursor(text)
   RETURNS void
   AS 'DECLARE c CURSOR FOR SELECT stringu1 FROM tenk1 WHERE stringu1 LIKE $1;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
'
   LANGUAGE SQL;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


SELECT declares_cursor('AB%');
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


FETCH ALL FROM c;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


--
-- Test behavior of both volatile and stable functions inside a cursor /* REPLACED */,
-- in particular we want to see what happens during commit of a holdable
-- cursor
--

create temp table tt1(f1 int);
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:


create function count_tt1_v() returns int8 as
'select count(*) from tt1' language sql volatile;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


create function count_tt1_s() returns int8 as
'select count(*) from tt1' language sql stable;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


begin;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


insert into tt1 values(1);
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:


declare c1 cursor for select count_tt1_v(), count_tt1_s();
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


insert into tt1 values(2);
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:


fetch all from c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


rollback;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


begin;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


insert into tt1 values(1);
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:


declare c2 cursor with hold for select count_tt1_v(), count_tt1_s();
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


insert into tt1 values(2);
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:


commit;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


delete from tt1;
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:


fetch all from c2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


drop function count_tt1_v();
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

drop function count_tt1_s();
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:



-- Create a cursor with the BINARY option and check the pg_cursors view
BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DECLARE bc BINARY CURSOR FOR SELECT * FROM tenk1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors ORDER BY 1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


-- We should not see the portal that is created internally to
-- implement EXECUTE in pg_cursors
PREPARE cprep AS
  SELECT name, statement, is_holdable, is_binary, is_scrollable FROM pg_cursors;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

EXECUTE cprep;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- test CLOSE ALL /* REPLACED */,
SELECT name FROM pg_cursors ORDER BY 1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

CLOSE ALL;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT name FROM pg_cursors ORDER BY 1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE foo1 CURSOR WITH HOLD FOR SELECT 1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DECLARE foo2 CURSOR WITHOUT HOLD FOR SELECT 1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT name FROM pg_cursors ORDER BY 1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

CLOSE ALL;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT name FROM pg_cursors ORDER BY 1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

COMMIT;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


--
-- Tests for updatable cursors
--

CREATE TEMP TABLE uctest(f1 int, f2 text);
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:

INSERT INTO uctest VALUES (1, 'one'), (2, 'two'), (3, 'three');
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:


-- Check DELETE WHERE CURRENT
BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c1 CURSOR FOR SELECT * FROM uctest;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH 2 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DELETE FROM uctest WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

-- should show deletion
SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

-- cursor did not move
FETCH ALL FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

-- cursor is insensitive
MOVE BACKWARD ALL IN c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH ALL FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

COMMIT;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

-- should still see deletion
SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:


-- Check UPDATE WHERE CURRENT /* REPLACED */, this time use FOR UPDATE
BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c1 CURSOR FOR SELECT * FROM uctest FOR UPDATE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

UPDATE uctest SET f1 = 8 WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

COMMIT;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:


-- Check repeated-update and update-then-delete cases
BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c1 CURSOR FOR SELECT * FROM uctest;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

-- insensitive cursor should not show effects of updates or deletes
FETCH RELATIVE 0 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DELETE FROM uctest WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

DELETE FROM uctest WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:
 -- no-op
SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:
 -- no-op
SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

FETCH RELATIVE 0 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:


BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c1 CURSOR FOR SELECT * FROM uctest FOR UPDATE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

DELETE FROM uctest WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

DELETE FROM uctest WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:
 -- no-op
SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:
 -- no-op
SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

--- FOR UPDATE cursors can/* REPLACED */''t currently scroll back, so this is an error:
FETCH RELATIVE 0 FROM c1;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:


-- Check insensitive cursor with INSERT
-- (The above tests don/* REPLACED */''t test the SQL notion of an insensitive cursor
-- correctly, because per SQL standard, changes from WHERE CURRENT OF
-- commands should be visible in the cursor.  So here we make the
-- changes with a command that is independent of the cursor.)
BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c1 INSENSITIVE CURSOR FOR SELECT * FROM uctest;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO uctest VALUES (10, 'ten');
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:

FETCH NEXT FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH NEXT FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH NEXT FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:
  -- insert not visible
COMMIT;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

DELETE FROM uctest WHERE f1 = 10;
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:
  -- restore test table state

-- Check inheritance cases
CREATE TEMP TABLE ucchild () inherits (uctest);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO ucchild values(100, 'hundred');
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:


BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c1 CURSOR FOR SELECT * FROM uctest FOR UPDATE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH 1 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH 1 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH 1 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH 1 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

COMMIT;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:


-- Can update from a self-join, but only if FOR UPDATE says which to use
BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c1 CURSOR FOR SELECT * FROM uctest a, uctest b WHERE a.f1 = b.f1 + 5;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH 1 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
  -- fail
ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c1 CURSOR FOR SELECT * FROM uctest a, uctest b WHERE a.f1 = b.f1 + 5 FOR UPDATE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH 1 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
  -- fail
ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c1 CURSOR FOR SELECT * FROM uctest a, uctest b WHERE a.f1 = b.f1 + 5 FOR SHARE OF a;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH 1 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

UPDATE uctest SET f1 = f1 + 10 WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT * FROM uctest;
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:

ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


-- Check various error cases

DELETE FROM uctest WHERE CURRENT OF c1;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
  -- fail, no such cursor
DECLARE cx CURSOR WITH HOLD FOR SELECT * FROM uctest;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DELETE FROM uctest WHERE CURRENT OF cx;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
  -- fail, can/* REPLACED */''t use held cursor
BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c CURSOR FOR SELECT * FROM tenk2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DELETE FROM uctest WHERE CURRENT OF c;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
  -- fail, cursor on wrong table
ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c CURSOR FOR SELECT * FROM tenk2 FOR SHARE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DELETE FROM uctest WHERE CURRENT OF c;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
  -- fail, cursor on wrong table
ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c CURSOR FOR SELECT * FROM tenk1 JOIN tenk2 USING (unique1);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DELETE FROM tenk1 WHERE CURRENT OF c;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
  -- fail, cursor is on a join
ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c CURSOR FOR SELECT f1,count(*) FROM uctest GROUP BY f1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DELETE FROM uctest WHERE CURRENT OF c;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
  -- fail, cursor is on aggregation
ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c1 CURSOR FOR SELECT * FROM uctest;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DELETE FROM uctest WHERE CURRENT OF c1;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- fail, no current row
ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c1 CURSOR FOR SELECT MIN(f1) FROM uctest FOR UPDATE;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


-- WHERE CURRENT OF may someday work with views, but today is not that day.
-- For now, just make sure it errors out cleanly.
CREATE TEMP VIEW ucview AS SELECT * FROM uctest;
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:

CREATE RULE ucrule AS ON DELETE TO ucview DO INSTEAD
  DELETE FROM uctest WHERE f1 = OLD.f1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DECLARE c1 CURSOR FOR SELECT * FROM ucview;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DELETE FROM ucview WHERE CURRENT OF c1;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:
 -- fail, views not supported
ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


-- Check WHERE CURRENT OF with an index-only scan
BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

EXPLAIN (costs off)
DECLARE c1 CURSOR FOR SELECT stringu1 FROM onek WHERE stringu1 = 'DZAAAA';
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DECLARE c1 CURSOR FOR SELECT stringu1 FROM onek WHERE stringu1 = 'DZAAAA';
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DELETE FROM onek WHERE CURRENT OF c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

SELECT stringu1 FROM onek WHERE stringu1 = 'DZAAAA';
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


-- Check behavior with rewinding to a previous child scan node,
-- as per bug #15395
BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

CREATE TABLE current_check (currentid int, payload text);
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

CREATE TABLE current_check_1 () INHERITS (current_check);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

CREATE TABLE current_check_2 () INHERITS (current_check);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO current_check_1 SELECT i, 'p' || i FROM generate_series(1,9) i;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

INSERT INTO current_check_2 SELECT i, 'P' || i FROM generate_series(10,19) i;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


DECLARE c1 SCROLL CURSOR FOR SELECT * FROM current_check;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- This tests the fetch-backwards code path
FETCH ABSOLUTE 12 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH ABSOLUTE 8 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DELETE FROM current_check WHERE CURRENT OF c1 RETURNING *;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- This tests the ExecutorRewind code path
FETCH ABSOLUTE 13 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

FETCH ABSOLUTE 1 FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

DELETE FROM current_check WHERE CURRENT OF c1 RETURNING *;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


SELECT * FROM current_check;
RESULT: [duckdb: DIFFERENT, mySQL: DIFFERENT]

-----------
QUERY:

ROLLBACK;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


-- Make sure snapshot management works okay, per bug report in
-- 235395b90909301035v7228ce63q392931f15aa74b31@mail.gmail.com
BEGIN;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

CREATE TABLE cursor (a int);
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:

INSERT INTO cursor VALUES (1);
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:

DECLARE c1 NO SCROLL CURSOR FOR SELECT * FROM cursor FOR UPDATE;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

UPDATE cursor SET a = 2;
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:

FETCH ALL FROM c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

COMMIT;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

DROP TABLE cursor;
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:


-- Check rewinding a cursor containing a stable function in LIMIT,
-- per bug report in 8336843.9833.1399385291498.JavaMail.root@quick
begin;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

create function nochange(int) returns int
  as 'select $1 limit 1' language sql stable;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

declare c cursor for select * from int8_tbl limit nochange(3);
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

fetch all from c;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

move backward all in c;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

fetch all from c;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

rollback;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


-- Check handling of non-backwards-scan-capable plans with scroll cursors
begin;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

explain (costs off) declare c1 cursor for select (select 42) as x;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

explain (costs off) declare c1 scroll cursor for select (select 42) as x;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

declare c1 scroll cursor for select (select 42) as x;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

fetch all in c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

fetch backward all in c1;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

rollback;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

begin;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:

explain (costs off) declare c2 cursor for select generate_series(1,3) as g;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

explain (costs off) declare c2 scroll cursor for select generate_series(1,3) as g;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

declare c2 scroll cursor for select generate_series(1,3) as g;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

fetch all in c2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

fetch backward all in c2;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

rollback;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


-- Check fetching of toasted datums via cursors.
begin;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


-- Other compression algorithms may cause the compressed data to be stored
-- inline.  Use pglz to ensure consistent results.
set default_toast_compression = 'pglz';
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


create table toasted_data (f1 int[]);
RESULT: [duckdb: SAME, mySQL: ERROR]

-----------
QUERY:

insert into toasted_data
  select array_agg(i) from generate_series(12345678, 12345678 + 1000) i;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


declare local_portal cursor for select * from toasted_data;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

fetch all in local_portal;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


declare held_portal cursor with hold for select * from toasted_data;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


commit;
RESULT: [duckdb: SAME, mySQL: SAME]

-----------
QUERY:


drop table toasted_data;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


fetch all in held_portal;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


reset default_toast_compression;
RESULT: [duckdb: ERROR, mySQL: ERROR]
=========================================
Summary for test case portals/test.sql of postgres
=========================================

=================
Results for duckdb
SAME: 106 queries, which is 30.29%
DIFFERENT: 21 queries, which is 6.00%
ERROR: 223 queries, which is 63.71%

=================
Results for mySQL
SAME: 86 queries, which is 24.57%
DIFFERENT: 1 queries, which is 0.29%
ERROR: 263 queries, which is 75.14%
