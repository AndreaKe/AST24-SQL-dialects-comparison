
-----------
QUERY:
-- Regression tests for prepareable statements. We query the content
-- of the pg_prepared_statements view as prepared statements are
-- created and removed.

SELECT name, statement, parameter_types, result_types FROM pg_prepared_statements;
RESULT:
	[]

-----------
QUERY:


PREPARE q1 AS SELECT 1 AS a;
RESULT:
	[]

-----------
QUERY:

EXECUTE q1;
RESULT:
	[(1,)]

-----------
QUERY:


SELECT name, statement, parameter_types, result_types FROM pg_prepared_statements;
RESULT:
	[('q1', '\n\nPREPARE q1 AS SELECT 1 AS a;', '{}', '{integer}')]

-----------
QUERY:


-- should fail
PREPARE q1 AS SELECT 2;
RESULT:
	ERROR - prepared statement "q1" already exists


-----------
QUERY:


-- should succeed
DEALLOCATE q1;
RESULT:
	[]

-----------
QUERY:

PREPARE q1 AS SELECT 2;
RESULT:
	[]

-----------
QUERY:

EXECUTE q1;
RESULT:
	[(2,)]

-----------
QUERY:


PREPARE q2 AS SELECT 2 AS b;
RESULT:
	[]

-----------
QUERY:

SELECT name, statement, parameter_types, result_types FROM pg_prepared_statements;
RESULT:
	[('q1', '\nPREPARE q1 AS SELECT 2;', '{}', '{integer}'), ('q2', '\n\nPREPARE q2 AS SELECT 2 AS b;', '{}', '{integer}')]

-----------
QUERY:


-- sql92 syntax
DEALLOCATE PREPARE q1;
RESULT:
	[]

-----------
QUERY:


SELECT name, statement, parameter_types, result_types FROM pg_prepared_statements;
RESULT:
	[('q2', '\n\nPREPARE q2 AS SELECT 2 AS b;', '{}', '{integer}')]

-----------
QUERY:


DEALLOCATE PREPARE q2;
RESULT:
	[]

-----------
QUERY:

-- the view should return the empty set again
SELECT name, statement, parameter_types, result_types FROM pg_prepared_statements;
RESULT:
	[]

-----------
QUERY:


-- parameterized queries
PREPARE q2(text) AS
	SELECT datname, datistemplate, datallowconn
	FROM pg_database WHERE datname = $1;
RESULT:
	[]

-----------
QUERY:


EXECUTE q2('postgres');
RESULT:
	[('postgres', False, True)]

-----------
QUERY:


PREPARE q3(text, int, float, boolean, smallint) AS
	SELECT * FROM tenk1 WHERE string4 = $1 AND (four = $2 OR
	ten = $3::bigint OR true = $4 OR odd = $5::int)
	ORDER BY unique1;
RESULT:
	[]

-----------
QUERY:


EXECUTE q3('AAAAxx', 5::smallint, 10.5::float, false, 4::bigint);
RESULT:
	[]

-----------
QUERY:


-- too few params
EXECUTE q3('bool');
RESULT:
	ERROR - wrong number of parameters for prepared statement "q3"
DETAIL:  Expected 5 parameters but got 1.


-----------
QUERY:


-- too many params
EXECUTE q3('bytea', 5::smallint, 10.5::float, false, 4::bigint, true);
RESULT:
	ERROR - wrong number of parameters for prepared statement "q3"
DETAIL:  Expected 5 parameters but got 6.


-----------
QUERY:


-- wrong param types
EXECUTE q3(5::smallint, 10.5::float, false, 4::bigint, 'bytea');
RESULT:
	ERROR - parameter $3 of type boolean cannot be coerced to the expected type double precision
LINE 4: EXECUTE q3(5::smallint, 10.5::float, false, 4::bigint, 'byte...
                                             ^
HINT:  You will need to rewrite or cast the expression.


-----------
QUERY:


-- invalid type
PREPARE q4(nonexistenttype) AS SELECT $1;
RESULT:
	ERROR - type "nonexistenttype" does not exist
LINE 4: PREPARE q4(nonexistenttype) AS SELECT $1;
                   ^


-----------
QUERY:


-- create table as execute
PREPARE q5(int, text) AS
	SELECT * FROM tenk1 WHERE unique1 = $1 OR stringu1 = $2
	ORDER BY unique1;
RESULT:
	[]

-----------
QUERY:

CREATE TEMPORARY TABLE q5_prep_results AS EXECUTE q5(200, 'DTAAAA');
RESULT:
	[]

-----------
QUERY:

SELECT * FROM q5_prep_results;
RESULT:
	[]

-----------
QUERY:

CREATE TEMPORARY TABLE q5_prep_nodata AS EXECUTE q5(200, 'DTAAAA')
    WITH NO DATA;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM q5_prep_nodata;
RESULT:
	[]

-----------
QUERY:


-- unknown or unspecified parameter types: should succeed
PREPARE q6 AS
    SELECT * FROM tenk1 WHERE unique1 = $1 AND stringu1 = $2;
RESULT:
	[]

-----------
QUERY:

PREPARE q7(unknown) AS
    SELECT * FROM road WHERE thepath = $1;
RESULT:
	[]

-----------
QUERY:


-- DML statements
PREPARE q8 AS
    UPDATE tenk1 SET stringu1 = $2 WHERE unique1 = $1;
RESULT:
	[]

-----------
QUERY:


SELECT name, statement, parameter_types, result_types FROM pg_prepared_statements
    ORDER BY name;
RESULT:
	[('q2', '\n\n-- parameterized queries\nPREPARE q2(text) AS\n\tSELECT datname, datistemplate, datallowconn\n\tFROM pg_database WHERE datname = $1;', '{text}', '{name,boolean,boolean}'), ('q3', '\n\nPREPARE q3(text, int, float, boolean, smallint) AS\n\tSELECT * FROM tenk1 WHERE string4 = $1 AND (four = $2 OR\n\tten = $3::bigint OR true = $4 OR odd = $5::int)\n\tORDER BY unique1;', '{text,integer,"double precision",boolean,smallint}', '{integer,integer,integer,integer,integer,integer,integer,integer,integer,integer,integer,integer,integer,name,name,name}'), ('q5', '\n\n-- create table as execute\nPREPARE q5(int, text) AS\n\tSELECT * FROM tenk1 WHERE unique1 = $1 OR stringu1 = $2\n\tORDER BY unique1;', '{integer,text}', '{integer,integer,integer,integer,integer,integer,integer,integer,integer,integer,integer,integer,integer,name,name,name}'), ('q6', '\n\n-- unknown or unspecified parameter types: should succeed\nPREPARE q6 AS\n    SELECT * FROM tenk1 WHERE unique1 = $1 AND stringu1 = $2;', '{integer,name}', '{integer,integer,integer,integer,integer,integer,integer,integer,integer,integer,integer,integer,integer,name,name,name}'), ('q7', '\nPREPARE q7(unknown) AS\n    SELECT * FROM road WHERE thepath = $1;', '{path}', '{text,path}'), ('q8', '\n\n-- DML statements\nPREPARE q8 AS\n    UPDATE tenk1 SET stringu1 = $2 WHERE unique1 = $1;', '{integer,name}', None)]

-----------
QUERY:


-- test DEALLOCATE ALL /* REPLACED */ ,
DEALLOCATE ALL;
RESULT:
	[]

-----------
QUERY:

SELECT name, statement, parameter_types FROM pg_prepared_statements
    ORDER BY name;
RESULT:
	[]
