
-----------
QUERY:
CREATE TABLE rngfunc2(rngfuncid int, f2 int);
RESULT:
	[]

-----------
QUERY:

INSERT INTO rngfunc2 VALUES(1, 11);
RESULT:
	[]

-----------
QUERY:

INSERT INTO rngfunc2 VALUES(2, 22);
RESULT:
	[]

-----------
QUERY:

INSERT INTO rngfunc2 VALUES(1, 111);
RESULT:
	[]

-----------
QUERY:


CREATE FUNCTION rngfunct(int) returns setof rngfunc2 as 'SELECT * FROM rngfunc2 WHERE rngfuncid = $1 ORDER BY f2;
RESULT:
	ERROR - unterminated quoted string at or near "'SELECT * FROM rngfunc2 WHERE rngfuncid = $1 ORDER BY f2;"
LINE 3: ... FUNCTION rngfunct(int) returns setof rngfunc2 as 'SELECT * ...
                                                             ^


-----------
QUERY:
' LANGUAGE SQL;
RESULT:
	ERROR - unterminated quoted string at or near "' LANGUAGE SQL;"
LINE 1: ' LANGUAGE SQL;
        ^


-----------
QUERY:


-- function with ORDINALITY
select * from rngfunct(1) with ordinality as z(a,b,ord);
RESULT:
	ERROR - function rngfunct(integer) does not exist
LINE 4: select * from rngfunct(1) with ordinality as z(a,b,ord);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

select * from rngfunct(1) with ordinality as z(a,b,ord) where b > 100;
RESULT:
	ERROR - function rngfunct(integer) does not exist
LINE 2: select * from rngfunct(1) with ordinality as z(a,b,ord) wher...
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:
   -- ordinal 2, not 1
-- ordinality vs. column names and types
select a,b,ord from rngfunct(1) with ordinality as z(a,b,ord);
RESULT:
	ERROR - function rngfunct(integer) does not exist
LINE 3: select a,b,ord from rngfunct(1) with ordinality as z(a,b,ord...
                            ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

select a,ord from unnest(array['a','b']) with ordinality as z(a,ord);
RESULT:
	[('a', 1), ('b', 2)]

-----------
QUERY:

select * from unnest(array['a','b']) with ordinality as z(a,ord);
RESULT:
	[('a', 1), ('b', 2)]

-----------
QUERY:

select a,ord from unnest(array[1.0::float8]) with ordinality as z(a,ord);
RESULT:
	[(1.0, 1)]

-----------
QUERY:

select * from unnest(array[1.0::float8]) with ordinality as z(a,ord);
RESULT:
	[(1.0, 1)]

-----------
QUERY:

select row_to_json(s.*) from generate_series(11,14) with ordinality s;
RESULT:
	[({'s': 11, 'ordinality': 1},), ({'s': 12, 'ordinality': 2},), ({'s': 13, 'ordinality': 3},), ({'s': 14, 'ordinality': 4},)]

-----------
QUERY:

-- ordinality vs. views
create temporary view vw_ord as select * from (values (1)) v(n) join rngfunct(1) with ordinality as z(a,b,ord) on (n=ord);
RESULT:
	ERROR - function rngfunct(integer) does not exist
LINE 3: ...ew vw_ord as select * from (values (1)) v(n) join rngfunct(1...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

select * from vw_ord;
RESULT:
	ERROR - relation "vw_ord" does not exist
LINE 2: select * from vw_ord;
                      ^


-----------
QUERY:

select definition from pg_views where viewname='vw_ord';
RESULT:
	[]

-----------
QUERY:

drop view vw_ord;
RESULT:
	ERROR - view "vw_ord" does not exist


-----------
QUERY:


-- multiple functions
select * from rows from(rngfunct(1),rngfunct(2)) with ordinality as z(a,b,c,d,ord);
RESULT:
	ERROR - function rngfunct(integer) does not exist
LINE 4: select * from rows from(rngfunct(1),rngfunct(2)) with ordina...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

create temporary view vw_ord as select * from (values (1)) v(n) join rows from(rngfunct(1),rngfunct(2)) with ordinality as z(a,b,c,d,ord) on (n=ord);
RESULT:
	ERROR - function rngfunct(integer) does not exist
LINE 2: ...as select * from (values (1)) v(n) join rows from(rngfunct(1...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

select * from vw_ord;
RESULT:
	ERROR - relation "vw_ord" does not exist
LINE 2: select * from vw_ord;
                      ^


-----------
QUERY:

select definition from pg_views where viewname='vw_ord';
RESULT:
	[]

-----------
QUERY:

drop view vw_ord;
RESULT:
	ERROR - view "vw_ord" does not exist


-----------
QUERY:


-- expansions of unnest()
select * from unnest(array[10,20],array['foo','bar'],array[1.0]);
RESULT:
	[(10, 'foo', Decimal('1.0')), (20, 'bar', None)]

-----------
QUERY:

select * from unnest(array[10,20],array['foo','bar'],array[1.0]) with ordinality as z(a,b,c,ord);
RESULT:
	[(10, 'foo', Decimal('1.0'), 1), (20, 'bar', None, 2)]

-----------
QUERY:

select * from rows from(unnest(array[10,20],array['foo','bar'],array[1.0])) with ordinality as z(a,b,c,ord);
RESULT:
	[(10, 'foo', Decimal('1.0'), 1), (20, 'bar', None, 2)]

-----------
QUERY:

select * from rows from(unnest(array[10,20],array['foo','bar']), generate_series(101,102)) with ordinality as z(a,b,c,ord);
RESULT:
	[(10, 'foo', 101, 1), (20, 'bar', 102, 2)]

-----------
QUERY:

create temporary view vw_ord as select * from unnest(array[10,20],array['foo','bar'],array[1.0]) as z(a,b,c);
RESULT:
	[]

-----------
QUERY:

select * from vw_ord;
RESULT:
	[(10, 'foo', Decimal('1.0')), (20, 'bar', None)]

-----------
QUERY:

select definition from pg_views where viewname='vw_ord';
RESULT:
	[(" SELECT a,\n    b,\n    c\n   FROM UNNEST(ARRAY[10, 20], ARRAY['foo'::text, 'bar'::text], ARRAY[1.0]) z(a, b, c);",)]

-----------
QUERY:

drop view vw_ord;
RESULT:
	[]

-----------
QUERY:

create temporary view vw_ord as select * from rows from(unnest(array[10,20],array['foo','bar'],array[1.0])) as z(a,b,c);
RESULT:
	[]

-----------
QUERY:

select * from vw_ord;
RESULT:
	[(10, 'foo', Decimal('1.0')), (20, 'bar', None)]

-----------
QUERY:

select definition from pg_views where viewname='vw_ord';
RESULT:
	[(" SELECT a,\n    b,\n    c\n   FROM UNNEST(ARRAY[10, 20], ARRAY['foo'::text, 'bar'::text], ARRAY[1.0]) z(a, b, c);",)]

-----------
QUERY:

drop view vw_ord;
RESULT:
	[]

-----------
QUERY:

create temporary view vw_ord as select * from rows from(unnest(array[10,20],array['foo','bar']), generate_series(1,2)) as z(a,b,c);
RESULT:
	[]

-----------
QUERY:

select * from vw_ord;
RESULT:
	[(10, 'foo', 1), (20, 'bar', 2)]

-----------
QUERY:

select definition from pg_views where viewname='vw_ord';
RESULT:
	[(" SELECT a,\n    b,\n    c\n   FROM ROWS FROM(unnest(ARRAY[10, 20]), unnest(ARRAY['foo'::text, 'bar'::text]), generate_series(1, 2)) z(a, b, c);",)]

-----------
QUERY:

drop view vw_ord;
RESULT:
	[]

-----------
QUERY:


-- ordinality and multiple functions vs. rewind and reverse scan
begin;
RESULT:
	[]

-----------
QUERY:

declare rf_cur scroll cursor for select * from rows from(generate_series(1,5),generate_series(1,2)) with ordinality as g(i,j,o);
RESULT:
	[]

-----------
QUERY:

fetch all from rf_cur;
RESULT:
	[(1, 1, 1), (2, 2, 2), (3, None, 3), (4, None, 4), (5, None, 5)]

-----------
QUERY:

fetch backward all from rf_cur;
RESULT:
	[(5, None, 5), (4, None, 4), (3, None, 3), (2, 2, 2), (1, 1, 1)]

-----------
QUERY:

fetch all from rf_cur;
RESULT:
	[(1, 1, 1), (2, 2, 2), (3, None, 3), (4, None, 4), (5, None, 5)]

-----------
QUERY:

fetch next from rf_cur;
RESULT:
	[]

-----------
QUERY:

fetch next from rf_cur;
RESULT:
	[]

-----------
QUERY:

fetch prior from rf_cur;
RESULT:
	[(5, None, 5)]

-----------
QUERY:

fetch absolute 1 from rf_cur;
RESULT:
	[(1, 1, 1)]

-----------
QUERY:

fetch next from rf_cur;
RESULT:
	[(2, 2, 2)]

-----------
QUERY:

fetch next from rf_cur;
RESULT:
	[(3, None, 3)]

-----------
QUERY:

fetch next from rf_cur;
RESULT:
	[(4, None, 4)]

-----------
QUERY:

fetch prior from rf_cur;
RESULT:
	[(3, None, 3)]

-----------
QUERY:

fetch prior from rf_cur;
RESULT:
	[(2, 2, 2)]

-----------
QUERY:

fetch prior from rf_cur;
RESULT:
	[(1, 1, 1)]

-----------
QUERY:

commit;
RESULT:
	[]

-----------
QUERY:


-- function with implicit LATERAL
select * from rngfunc2, rngfunct(rngfunc2.rngfuncid) z where rngfunc2.f2 = z.f2;
RESULT:
	ERROR - function rngfunct(integer) does not exist
LINE 4: select * from rngfunc2, rngfunct(rngfunc2.rngfuncid) z where...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


-- function with implicit LATERAL and explicit ORDINALITY
select * from rngfunc2, rngfunct(rngfunc2.rngfuncid) with ordinality as z(rngfuncid,f2,ord) where rngfunc2.f2 = z.f2;
RESULT:
	ERROR - function rngfunct(integer) does not exist
LINE 4: select * from rngfunc2, rngfunct(rngfunc2.rngfuncid) with or...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


-- function in subselect
select * from rngfunc2 where f2 in (select f2 from rngfunct(rngfunc2.rngfuncid) z where z.rngfuncid = rngfunc2.rngfuncid) ORDER BY 1,2;
RESULT:
	ERROR - function rngfunct(integer) does not exist
LINE 4: ...elect * from rngfunc2 where f2 in (select f2 from rngfunct(r...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


-- function in subselect
select * from rngfunc2 where f2 in (select f2 from rngfunct(1) z where z.rngfuncid = rngfunc2.rngfuncid) ORDER BY 1,2;
RESULT:
	ERROR - function rngfunct(integer) does not exist
LINE 4: ...elect * from rngfunc2 where f2 in (select f2 from rngfunct(1...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


-- function in subselect
select * from rngfunc2 where f2 in (select f2 from rngfunct(rngfunc2.rngfuncid) z where z.rngfuncid = 1) ORDER BY 1,2;
RESULT:
	ERROR - function rngfunct(integer) does not exist
LINE 4: ...elect * from rngfunc2 where f2 in (select f2 from rngfunct(r...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


-- nested functions
select rngfunct.rngfuncid, rngfunct.f2 from rngfunct(sin(pi()/2)::int) ORDER BY 1,2;
RESULT:
	ERROR - function rngfunct(integer) does not exist
LINE 4: select rngfunct.rngfuncid, rngfunct.f2 from rngfunct(sin(pi(...
                                                    ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


CREATE TABLE rngfunc (rngfuncid int, rngfuncsubid int, rngfuncname text, primary key(rngfuncid,rngfuncsubid));
RESULT:
	[]

-----------
QUERY:

INSERT INTO rngfunc VALUES(1,1,'Joe');
RESULT:
	[]

-----------
QUERY:

INSERT INTO rngfunc VALUES(1,2,'Ed');
RESULT:
	[]

-----------
QUERY:

INSERT INTO rngfunc VALUES(2,1,'Mary');
RESULT:
	[]

-----------
QUERY:


-- sql, proretset = f, prorettype = b
CREATE FUNCTION getrngfunc1(int) RETURNS int AS 'SELECT $1;
RESULT:
	ERROR - unterminated quoted string at or near "'SELECT $1;"
LINE 4: CREATE FUNCTION getrngfunc1(int) RETURNS int AS 'SELECT $1;
                                                        ^


-----------
QUERY:
' LANGUAGE SQL;
RESULT:
	ERROR - unterminated quoted string at or near "' LANGUAGE SQL;"
LINE 1: ' LANGUAGE SQL;
        ^


-----------
QUERY:

SELECT * FROM getrngfunc1(1) AS t1;
RESULT:
	ERROR - function getrngfunc1(integer) does not exist
LINE 2: SELECT * FROM getrngfunc1(1) AS t1;
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM getrngfunc1(1) WITH ORDINALITY AS t1(v,o);
RESULT:
	ERROR - function getrngfunc1(integer) does not exist
LINE 2: SELECT * FROM getrngfunc1(1) WITH ORDINALITY AS t1(v,o);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc1(1);
RESULT:
	ERROR - function getrngfunc1(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc1(1);
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc1(1) WITH ORDINALITY as t1(v,o);
RESULT:
	ERROR - function getrngfunc1(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc1(1) WI...
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:


-- sql, proretset = t, prorettype = b
CREATE FUNCTION getrngfunc2(int) RETURNS setof int AS 'SELECT rngfuncid FROM rngfunc WHERE rngfuncid = $1;
RESULT:
	ERROR - unterminated quoted string at or near "'SELECT rngfuncid FROM rngfunc WHERE rngfuncid = $1;"
LINE 4: ...TE FUNCTION getrngfunc2(int) RETURNS setof int AS 'SELECT rn...
                                                             ^


-----------
QUERY:
' LANGUAGE SQL;
RESULT:
	ERROR - unterminated quoted string at or near "' LANGUAGE SQL;"
LINE 1: ' LANGUAGE SQL;
        ^


-----------
QUERY:

SELECT * FROM getrngfunc2(1) AS t1;
RESULT:
	ERROR - function getrngfunc2(integer) does not exist
LINE 2: SELECT * FROM getrngfunc2(1) AS t1;
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM getrngfunc2(1) WITH ORDINALITY AS t1(v,o);
RESULT:
	ERROR - function getrngfunc2(integer) does not exist
LINE 2: SELECT * FROM getrngfunc2(1) WITH ORDINALITY AS t1(v,o);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc2(1);
RESULT:
	ERROR - function getrngfunc2(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc2(1);
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc2(1) WITH ORDINALITY AS t1(v,o);
RESULT:
	ERROR - function getrngfunc2(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc2(1) WI...
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:


-- sql, proretset = t, prorettype = b
CREATE FUNCTION getrngfunc3(int) RETURNS setof text AS 'SELECT rngfuncname FROM rngfunc WHERE rngfuncid = $1;
RESULT:
	ERROR - unterminated quoted string at or near "'SELECT rngfuncname FROM rngfunc WHERE rngfuncid = $1;"
LINE 4: ...E FUNCTION getrngfunc3(int) RETURNS setof text AS 'SELECT rn...
                                                             ^


-----------
QUERY:
' LANGUAGE SQL;
RESULT:
	ERROR - unterminated quoted string at or near "' LANGUAGE SQL;"
LINE 1: ' LANGUAGE SQL;
        ^


-----------
QUERY:

SELECT * FROM getrngfunc3(1) AS t1;
RESULT:
	ERROR - function getrngfunc3(integer) does not exist
LINE 2: SELECT * FROM getrngfunc3(1) AS t1;
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM getrngfunc3(1) WITH ORDINALITY AS t1(v,o);
RESULT:
	ERROR - function getrngfunc3(integer) does not exist
LINE 2: SELECT * FROM getrngfunc3(1) WITH ORDINALITY AS t1(v,o);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc3(1);
RESULT:
	ERROR - function getrngfunc3(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc3(1);
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc3(1) WITH ORDINALITY AS t1(v,o);
RESULT:
	ERROR - function getrngfunc3(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc3(1) WI...
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:


-- sql, proretset = f, prorettype = c
CREATE FUNCTION getrngfunc4(int) RETURNS rngfunc AS 'SELECT * FROM rngfunc WHERE rngfuncid = $1;
RESULT:
	ERROR - unterminated quoted string at or near "'SELECT * FROM rngfunc WHERE rngfuncid = $1;"
LINE 4: ...EATE FUNCTION getrngfunc4(int) RETURNS rngfunc AS 'SELECT * ...
                                                             ^


-----------
QUERY:
' LANGUAGE SQL;
RESULT:
	ERROR - unterminated quoted string at or near "' LANGUAGE SQL;"
LINE 1: ' LANGUAGE SQL;
        ^


-----------
QUERY:

SELECT * FROM getrngfunc4(1) AS t1;
RESULT:
	ERROR - function getrngfunc4(integer) does not exist
LINE 2: SELECT * FROM getrngfunc4(1) AS t1;
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM getrngfunc4(1) WITH ORDINALITY AS t1(a,b,c,o);
RESULT:
	ERROR - function getrngfunc4(integer) does not exist
LINE 2: SELECT * FROM getrngfunc4(1) WITH ORDINALITY AS t1(a,b,c,o);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc4(1);
RESULT:
	ERROR - function getrngfunc4(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc4(1);
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc4(1) WITH ORDINALITY AS t1(a,b,c,o);
RESULT:
	ERROR - function getrngfunc4(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc4(1) WI...
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:


-- sql, proretset = t, prorettype = c
CREATE FUNCTION getrngfunc5(int) RETURNS setof rngfunc AS 'SELECT * FROM rngfunc WHERE rngfuncid = $1;
RESULT:
	ERROR - unterminated quoted string at or near "'SELECT * FROM rngfunc WHERE rngfuncid = $1;"
LINE 4: ...UNCTION getrngfunc5(int) RETURNS setof rngfunc AS 'SELECT * ...
                                                             ^


-----------
QUERY:
' LANGUAGE SQL;
RESULT:
	ERROR - unterminated quoted string at or near "' LANGUAGE SQL;"
LINE 1: ' LANGUAGE SQL;
        ^


-----------
QUERY:

SELECT * FROM getrngfunc5(1) AS t1;
RESULT:
	ERROR - function getrngfunc5(integer) does not exist
LINE 2: SELECT * FROM getrngfunc5(1) AS t1;
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM getrngfunc5(1) WITH ORDINALITY AS t1(a,b,c,o);
RESULT:
	ERROR - function getrngfunc5(integer) does not exist
LINE 2: SELECT * FROM getrngfunc5(1) WITH ORDINALITY AS t1(a,b,c,o);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc5(1);
RESULT:
	ERROR - function getrngfunc5(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc5(1);
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc5(1) WITH ORDINALITY AS t1(a,b,c,o);
RESULT:
	ERROR - function getrngfunc5(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc5(1) WI...
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:


-- sql, proretset = f, prorettype = record
CREATE FUNCTION getrngfunc6(int) RETURNS RECORD AS 'SELECT * FROM rngfunc WHERE rngfuncid = $1;
RESULT:
	ERROR - unterminated quoted string at or near "'SELECT * FROM rngfunc WHERE rngfuncid = $1;"
LINE 4: ...REATE FUNCTION getrngfunc6(int) RETURNS RECORD AS 'SELECT * ...
                                                             ^


-----------
QUERY:
' LANGUAGE SQL;
RESULT:
	ERROR - unterminated quoted string at or near "' LANGUAGE SQL;"
LINE 1: ' LANGUAGE SQL;
        ^


-----------
QUERY:

SELECT * FROM getrngfunc6(1) AS t1(rngfuncid int, rngfuncsubid int, rngfuncname text);
RESULT:
	ERROR - function getrngfunc6(integer) does not exist
LINE 2: SELECT * FROM getrngfunc6(1) AS t1(rngfuncid int, rngfuncsub...
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM ROWS FROM( getrngfunc6(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text) ) WITH ORDINALITY;
RESULT:
	ERROR - function getrngfunc6(integer) does not exist
LINE 2: SELECT * FROM ROWS FROM( getrngfunc6(1) AS (rngfuncid int, r...
                                 ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc6(1) AS
(rngfuncid int, rngfuncsubid int, rngfuncname text);
RESULT:
	ERROR - function getrngfunc6(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc6(1) AS
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS
  SELECT * FROM ROWS FROM( getrngfunc6(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text) )
                WITH ORDINALITY;
RESULT:
	ERROR - function getrngfunc6(integer) does not exist
LINE 3:   SELECT * FROM ROWS FROM( getrngfunc6(1) AS (rngfuncid int,...
                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:


-- sql, proretset = t, prorettype = record
CREATE FUNCTION getrngfunc7(int) RETURNS setof record AS 'SELECT * FROM rngfunc WHERE rngfuncid = $1;
RESULT:
	ERROR - unterminated quoted string at or near "'SELECT * FROM rngfunc WHERE rngfuncid = $1;"
LINE 4: ...FUNCTION getrngfunc7(int) RETURNS setof record AS 'SELECT * ...
                                                             ^


-----------
QUERY:
' LANGUAGE SQL;
RESULT:
	ERROR - unterminated quoted string at or near "' LANGUAGE SQL;"
LINE 1: ' LANGUAGE SQL;
        ^


-----------
QUERY:

SELECT * FROM getrngfunc7(1) AS t1(rngfuncid int, rngfuncsubid int, rngfuncname text);
RESULT:
	ERROR - function getrngfunc7(integer) does not exist
LINE 2: SELECT * FROM getrngfunc7(1) AS t1(rngfuncid int, rngfuncsub...
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM ROWS FROM( getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text) ) WITH ORDINALITY;
RESULT:
	ERROR - function getrngfunc7(integer) does not exist
LINE 2: SELECT * FROM ROWS FROM( getrngfunc7(1) AS (rngfuncid int, r...
                                 ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc7(1) AS
(rngfuncid int, rngfuncsubid int, rngfuncname text);
RESULT:
	ERROR - function getrngfunc7(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc7(1) AS
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS
  SELECT * FROM ROWS FROM( getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text) )
                WITH ORDINALITY;
RESULT:
	ERROR - function getrngfunc7(integer) does not exist
LINE 3:   SELECT * FROM ROWS FROM( getrngfunc7(1) AS (rngfuncid int,...
                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:


-- plpgsql, proretset = f, prorettype = b
CREATE FUNCTION getrngfunc8(int) RETURNS int AS 'DECLARE rngfuncint int;
RESULT:
	ERROR - unterminated quoted string at or near "'DECLARE rngfuncint int;"
LINE 4: CREATE FUNCTION getrngfunc8(int) RETURNS int AS 'DECLARE rng...
                                                        ^


-----------
QUERY:
 BEGIN SELECT rngfuncid into rngfuncint FROM rngfunc WHERE rngfuncid = $1;
RESULT:
	ERROR - syntax error at or near "SELECT"
LINE 1:  BEGIN SELECT rngfuncid into rngfuncint FROM rngfunc WHERE r...
               ^


-----------
QUERY:
 RETURN rngfuncint;
RESULT:
	ERROR - syntax error at or near "RETURN"
LINE 1:  RETURN rngfuncint;
         ^


-----------
QUERY:
 END;
RESULT:
	[]

-----------
QUERY:
' LANGUAGE plpgsql;
RESULT:
	ERROR - unterminated quoted string at or near "' LANGUAGE plpgsql;"
LINE 1: ' LANGUAGE plpgsql;
        ^


-----------
QUERY:

SELECT * FROM getrngfunc8(1) AS t1;
RESULT:
	ERROR - function getrngfunc8(integer) does not exist
LINE 2: SELECT * FROM getrngfunc8(1) AS t1;
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM getrngfunc8(1) WITH ORDINALITY AS t1(v,o);
RESULT:
	ERROR - function getrngfunc8(integer) does not exist
LINE 2: SELECT * FROM getrngfunc8(1) WITH ORDINALITY AS t1(v,o);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc8(1);
RESULT:
	ERROR - function getrngfunc8(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc8(1);
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc8(1) WITH ORDINALITY AS t1(v,o);
RESULT:
	ERROR - function getrngfunc8(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc8(1) WI...
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:


-- plpgsql, proretset = f, prorettype = c
CREATE FUNCTION getrngfunc9(int) RETURNS rngfunc AS 'DECLARE rngfunctup rngfunc%ROWTYPE;
RESULT:
	ERROR - unterminated quoted string at or near "'DECLARE rngfunctup rngfunc%ROWTYPE;"
LINE 4: ...EATE FUNCTION getrngfunc9(int) RETURNS rngfunc AS 'DECLARE r...
                                                             ^


-----------
QUERY:
 BEGIN SELECT * into rngfunctup FROM rngfunc WHERE rngfuncid = $1;
RESULT:
	ERROR - syntax error at or near "SELECT"
LINE 1:  BEGIN SELECT * into rngfunctup FROM rngfunc WHERE rngfuncid...
               ^


-----------
QUERY:
 RETURN rngfunctup;
RESULT:
	ERROR - syntax error at or near "RETURN"
LINE 1:  RETURN rngfunctup;
         ^


-----------
QUERY:
 END;
RESULT:
	[]

-----------
QUERY:
' LANGUAGE plpgsql;
RESULT:
	ERROR - unterminated quoted string at or near "' LANGUAGE plpgsql;"
LINE 1: ' LANGUAGE plpgsql;
        ^


-----------
QUERY:

SELECT * FROM getrngfunc9(1) AS t1;
RESULT:
	ERROR - function getrngfunc9(integer) does not exist
LINE 2: SELECT * FROM getrngfunc9(1) AS t1;
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM getrngfunc9(1) WITH ORDINALITY AS t1(a,b,c,o);
RESULT:
	ERROR - function getrngfunc9(integer) does not exist
LINE 2: SELECT * FROM getrngfunc9(1) WITH ORDINALITY AS t1(a,b,c,o);
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc9(1);
RESULT:
	ERROR - function getrngfunc9(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc9(1);
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:

CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc9(1) WITH ORDINALITY AS t1(a,b,c,o);
RESULT:
	ERROR - function getrngfunc9(integer) does not exist
LINE 2: CREATE VIEW vw_getrngfunc AS SELECT * FROM getrngfunc9(1) WI...
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT * FROM vw_getrngfunc;
RESULT:
	ERROR - relation "vw_getrngfunc" does not exist
LINE 2: SELECT * FROM vw_getrngfunc;
                      ^


-----------
QUERY:

DROP VIEW vw_getrngfunc;
RESULT:
	ERROR - view "vw_getrngfunc" does not exist


-----------
QUERY:


-- mix /* REPLACED */ ''n match kinds, to exercise expandRTE and related logic

select * from rows from(getrngfunc1(1),getrngfunc2(1),getrngfunc3(1),getrngfunc4(1),getrngfunc5(1),
                    getrngfunc6(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),
                    getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),
                    getrngfunc8(1),getrngfunc9(1))
              with ordinality as t1(a,b,c,d,e,f,g,h,i,j,k,l,m,o,p,q,r,s,t,u);
RESULT:
	ERROR - function getrngfunc1(integer) does not exist
LINE 5: select * from rows from(getrngfunc1(1),getrngfunc2(1),getrng...
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

select * from rows from(getrngfunc9(1),getrngfunc8(1),
                    getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),
                    getrngfunc6(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),
                    getrngfunc5(1),getrngfunc4(1),getrngfunc3(1),getrngfunc2(1),getrngfunc1(1))
              with ordinality as t1(a,b,c,d,e,f,g,h,i,j,k,l,m,o,p,q,r,s,t,u);
RESULT:
	ERROR - function getrngfunc9(integer) does not exist
LINE 2: select * from rows from(getrngfunc9(1),getrngfunc8(1),
                                ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


create temporary view vw_rngfunc as
  select * from rows from(getrngfunc9(1),
                      getrngfunc7(1) AS (rngfuncid int, rngfuncsubid int, rngfuncname text),
                      getrngfunc1(1))
                with ordinality as t1(a,b,c,d,e,f,g,n);
RESULT:
	ERROR - function getrngfunc9(integer) does not exist
LINE 4:   select * from rows from(getrngfunc9(1),
                                  ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

select * from vw_rngfunc;
RESULT:
	ERROR - relation "vw_rngfunc" does not exist
LINE 2: select * from vw_rngfunc;
                      ^


-----------
QUERY:

select pg_get_viewdef('vw_rngfunc');
RESULT:
	ERROR - relation "vw_rngfunc" does not exist


-----------
QUERY:

drop view vw_rngfunc;
RESULT:
	ERROR - view "vw_rngfunc" does not exist


-----------
QUERY:


DROP FUNCTION getrngfunc1(int);
RESULT:
	ERROR - function getrngfunc1(integer) does not exist


-----------
QUERY:

DROP FUNCTION getrngfunc2(int);
RESULT:
	ERROR - function getrngfunc2(integer) does not exist


-----------
QUERY:

DROP FUNCTION getrngfunc3(int);
RESULT:
	ERROR - function getrngfunc3(integer) does not exist


-----------
QUERY:

DROP FUNCTION getrngfunc4(int);
RESULT:
	ERROR - function getrngfunc4(integer) does not exist


-----------
QUERY:

DROP FUNCTION getrngfunc5(int);
RESULT:
	ERROR - function getrngfunc5(integer) does not exist


-----------
QUERY:

DROP FUNCTION getrngfunc6(int);
RESULT:
	ERROR - function getrngfunc6(integer) does not exist


-----------
QUERY:

DROP FUNCTION getrngfunc7(int);
RESULT:
	ERROR - function getrngfunc7(integer) does not exist


-----------
QUERY:

DROP FUNCTION getrngfunc8(int);
RESULT:
	ERROR - function getrngfunc8(integer) does not exist


-----------
QUERY:

DROP FUNCTION getrngfunc9(int);
RESULT:
	ERROR - function getrngfunc9(integer) does not exist


-----------
QUERY:

DROP FUNCTION rngfunct(int);
RESULT:
	ERROR - function rngfunct(integer) does not exist


-----------
QUERY:

DROP TABLE rngfunc2;
RESULT:
	[]

-----------
QUERY:

DROP TABLE rngfunc;
RESULT:
	[]

-----------
QUERY:


-- Rescan tests --
CREATE TEMPORARY SEQUENCE rngfunc_rescan_seq1;
RESULT:
	[]

-----------
QUERY:

CREATE TEMPORARY SEQUENCE rngfunc_rescan_seq2;
RESULT:
	[]

-----------
QUERY:

CREATE TYPE rngfunc_rescan_t AS (i integer, s bigint);
RESULT:
	[]

-----------
QUERY:


CREATE FUNCTION rngfunc_sql(int,int) RETURNS setof rngfunc_rescan_t AS 'SELECT i, nextval(''rngfunc_rescan_seq1'') FROM generate_series($1,$2) i;
RESULT:
	ERROR - unterminated quoted string at or near "'SELECT i, nextval(''rngfunc_rescan_seq1'') FROM generate_series($1,$2) i;"
LINE 3: ...nc_sql(int,int) RETURNS setof rngfunc_rescan_t AS 'SELECT i,...
                                                             ^


-----------
QUERY:
' LANGUAGE SQL;
RESULT:
	ERROR - unterminated quoted string at or near "' LANGUAGE SQL;"
LINE 1: ' LANGUAGE SQL;
        ^


-----------
QUERY:

-- plpgsql functions use materialize mode
CREATE FUNCTION rngfunc_mat(int,int) RETURNS setof rngfunc_rescan_t AS 'begin for i in $1..$2 loop return next (i, nextval(''rngfunc_rescan_seq2''));
RESULT:
	ERROR - unterminated quoted string at or near "'begin for i in $1..$2 loop return next (i, nextval(''rngfunc_rescan_seq2''));"
LINE 3: ...nc_mat(int,int) RETURNS setof rngfunc_rescan_t AS 'begin for...
                                                             ^


-----------
QUERY:
 end loop;
RESULT:
	ERROR - syntax error at or near "loop"
LINE 1:  end loop;
             ^


-----------
QUERY:
 end;
RESULT:
	[]

-----------
QUERY:
' LANGUAGE plpgsql;
RESULT:
	ERROR - unterminated quoted string at or near "' LANGUAGE plpgsql;"
LINE 1: ' LANGUAGE plpgsql;
        ^


-----------
QUERY:


--invokes ExecReScanFunctionScan - all these cases should materialize the function only once
-- LEFT JOIN on a condition that the planner can/* REPLACED */ ''t prove to be true is used to ensure the function
-- is on the inner path of a nestloop join

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN rngfunc_sql(11,13) ON (r+i)<100;
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist
LINE 2: SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN rngfunc_sq...
                                                          ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN rngfunc_sql(11,13) WITH ORDINALITY AS f(i,s,o) ON (r+i)<100;
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist
LINE 2: SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN rngfunc_sq...
                                                          ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN rngfunc_mat(11,13) ON (r+i)<100;
RESULT:
	ERROR - function rngfunc_mat(integer, integer) does not exist
LINE 2: SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN rngfunc_ma...
                                                          ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN rngfunc_mat(11,13) WITH ORDINALITY AS f(i,s,o) ON (r+i)<100;
RESULT:
	ERROR - function rngfunc_mat(integer, integer) does not exist
LINE 2: SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN rngfunc_ma...
                                                          ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN ROWS FROM( rngfunc_sql(11,13), rngfunc_mat(11,13) ) WITH ORDINALITY AS f(i1,s1,i2,s2,o) ON (r+i1+i2)<100;
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist
LINE 2: ...OM (VALUES (1),(2),(3)) v(r) LEFT JOIN ROWS FROM( rngfunc_sq...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN generate_series(11,13) f(i) ON (r+i)<100;
RESULT:
	[(1, 11), (1, 12), (1, 13), (2, 11), (2, 12), (2, 13), (3, 11), (3, 12), (3, 13)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN generate_series(11,13) WITH ORDINALITY AS f(i,o) ON (r+i)<100;
RESULT:
	[(1, 11, 1), (1, 12, 2), (1, 13, 3), (2, 11, 1), (2, 12, 2), (2, 13, 3), (3, 11, 1), (3, 12, 2), (3, 13, 3)]

-----------
QUERY:


SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN unnest(array[10,20,30]) f(i) ON (r+i)<100;
RESULT:
	[(1, 10), (1, 20), (1, 30), (2, 10), (2, 20), (2, 30), (3, 10), (3, 20), (3, 30)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r) LEFT JOIN unnest(array[10,20,30]) WITH ORDINALITY AS f(i,o) ON (r+i)<100;
RESULT:
	[(1, 10, 1), (1, 20, 2), (1, 30, 3), (2, 10, 1), (2, 20, 2), (2, 30, 3), (3, 10, 1), (3, 20, 2), (3, 30, 3)]

-----------
QUERY:


--invokes ExecReScanFunctionScan with chgParam != NULL (using implied LATERAL)

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_sql(10+r,13);
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist
LINE 2: SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_sql(10+r,13...
                                                 ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_sql(10+r,13) WITH ORDINALITY AS f(i,s,o);
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist
LINE 2: SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_sql(10+r,13...
                                                 ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_sql(11,10+r);
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist
LINE 2: SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_sql(11,10+r...
                                                 ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_sql(11,10+r) WITH ORDINALITY AS f(i,s,o);
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist
LINE 2: SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_sql(11,10+r...
                                                 ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (11,12),(13,15),(16,20)) v(r1,r2), rngfunc_sql(r1,r2);
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist
LINE 2: ...* FROM (VALUES (11,12),(13,15),(16,20)) v(r1,r2), rngfunc_sq...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (11,12),(13,15),(16,20)) v(r1,r2), rngfunc_sql(r1,r2) WITH ORDINALITY AS f(i,s,o);
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist
LINE 2: ...* FROM (VALUES (11,12),(13,15),(16,20)) v(r1,r2), rngfunc_sq...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_mat(10+r,13);
RESULT:
	ERROR - function rngfunc_mat(integer, integer) does not exist
LINE 2: SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_mat(10+r,13...
                                                 ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_mat(10+r,13) WITH ORDINALITY AS f(i,s,o);
RESULT:
	ERROR - function rngfunc_mat(integer, integer) does not exist
LINE 2: SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_mat(10+r,13...
                                                 ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_mat(11,10+r);
RESULT:
	ERROR - function rngfunc_mat(integer, integer) does not exist
LINE 2: SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_mat(11,10+r...
                                                 ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_mat(11,10+r) WITH ORDINALITY AS f(i,s,o);
RESULT:
	ERROR - function rngfunc_mat(integer, integer) does not exist
LINE 2: SELECT * FROM (VALUES (1),(2),(3)) v(r), rngfunc_mat(11,10+r...
                                                 ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (11,12),(13,15),(16,20)) v(r1,r2), rngfunc_mat(r1,r2);
RESULT:
	ERROR - function rngfunc_mat(integer, integer) does not exist
LINE 2: ...* FROM (VALUES (11,12),(13,15),(16,20)) v(r1,r2), rngfunc_ma...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (11,12),(13,15),(16,20)) v(r1,r2), rngfunc_mat(r1,r2) WITH ORDINALITY AS f(i,s,o);
RESULT:
	ERROR - function rngfunc_mat(integer, integer) does not exist
LINE 2: ...* FROM (VALUES (11,12),(13,15),(16,20)) v(r1,r2), rngfunc_ma...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


-- selective rescan of multiple functions:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r), ROWS FROM( rngfunc_sql(11,11), rngfunc_mat(10+r,13) );
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist
LINE 2: ...LECT * FROM (VALUES (1),(2),(3)) v(r), ROWS FROM( rngfunc_sq...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r), ROWS FROM( rngfunc_sql(10+r,13), rngfunc_mat(11,11) );
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist
LINE 2: ...LECT * FROM (VALUES (1),(2),(3)) v(r), ROWS FROM( rngfunc_sq...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r), ROWS FROM( rngfunc_sql(10+r,13), rngfunc_mat(10+r,13) );
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist
LINE 2: ...LECT * FROM (VALUES (1),(2),(3)) v(r), ROWS FROM( rngfunc_sq...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


SELECT setval('rngfunc_rescan_seq1',1,false),setval('rngfunc_rescan_seq2',1,false);
RESULT:
	[(1, 1)]

-----------
QUERY:

SELECT * FROM generate_series(1,2) r1, generate_series(r1,3) r2, ROWS FROM( rngfunc_sql(10+r1,13), rngfunc_mat(10+r2,13) );
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist
LINE 2: ...ies(1,2) r1, generate_series(r1,3) r2, ROWS FROM( rngfunc_sq...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


SELECT * FROM (VALUES (1),(2),(3)) v(r), generate_series(10+r,20-r) f(i);
RESULT:
	[(1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17), (1, 18), (1, 19), (2, 12), (2, 13), (2, 14), (2, 15), (2, 16), (2, 17), (2, 18), (3, 13), (3, 14), (3, 15), (3, 16), (3, 17)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r), generate_series(10+r,20-r) WITH ORDINALITY AS f(i,o);
RESULT:
	[(1, 11, 1), (1, 12, 2), (1, 13, 3), (1, 14, 4), (1, 15, 5), (1, 16, 6), (1, 17, 7), (1, 18, 8), (1, 19, 9), (2, 12, 1), (2, 13, 2), (2, 14, 3), (2, 15, 4), (2, 16, 5), (2, 17, 6), (2, 18, 7), (3, 13, 1), (3, 14, 2), (3, 15, 3), (3, 16, 4), (3, 17, 5)]

-----------
QUERY:


SELECT * FROM (VALUES (1),(2),(3)) v(r), unnest(array[r*10,r*20,r*30]) f(i);
RESULT:
	[(1, 10), (1, 20), (1, 30), (2, 20), (2, 40), (2, 60), (3, 30), (3, 60), (3, 90)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v(r), unnest(array[r*10,r*20,r*30]) WITH ORDINALITY AS f(i,o);
RESULT:
	[(1, 10, 1), (1, 20, 2), (1, 30, 3), (2, 20, 1), (2, 40, 2), (2, 60, 3), (3, 30, 1), (3, 60, 2), (3, 90, 3)]

-----------
QUERY:


-- deep nesting

SELECT * FROM (VALUES (1),(2),(3)) v1(r1),
              LATERAL (SELECT r1, * FROM (VALUES (10),(20),(30)) v2(r2)
                                         LEFT JOIN generate_series(21,23) f(i) ON ((r2+i)<100) OFFSET 0) s1;
RESULT:
	[(1, 1, 10, 21), (1, 1, 10, 22), (1, 1, 10, 23), (1, 1, 20, 21), (1, 1, 20, 22), (1, 1, 20, 23), (1, 1, 30, 21), (1, 1, 30, 22), (1, 1, 30, 23), (2, 2, 10, 21), (2, 2, 10, 22), (2, 2, 10, 23), (2, 2, 20, 21), (2, 2, 20, 22), (2, 2, 20, 23), (2, 2, 30, 21), (2, 2, 30, 22), (2, 2, 30, 23), (3, 3, 10, 21), (3, 3, 10, 22), (3, 3, 10, 23), (3, 3, 20, 21), (3, 3, 20, 22), (3, 3, 20, 23), (3, 3, 30, 21), (3, 3, 30, 22), (3, 3, 30, 23)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v1(r1),
              LATERAL (SELECT r1, * FROM (VALUES (10),(20),(30)) v2(r2)
                                         LEFT JOIN generate_series(20+r1,23) f(i) ON ((r2+i)<100) OFFSET 0) s1;
RESULT:
	[(1, 1, 10, 21), (1, 1, 10, 22), (1, 1, 10, 23), (1, 1, 20, 21), (1, 1, 20, 22), (1, 1, 20, 23), (1, 1, 30, 21), (1, 1, 30, 22), (1, 1, 30, 23), (2, 2, 10, 22), (2, 2, 10, 23), (2, 2, 20, 22), (2, 2, 20, 23), (2, 2, 30, 22), (2, 2, 30, 23), (3, 3, 10, 23), (3, 3, 20, 23), (3, 3, 30, 23)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v1(r1),
              LATERAL (SELECT r1, * FROM (VALUES (10),(20),(30)) v2(r2)
                                         LEFT JOIN generate_series(r2,r2+3) f(i) ON ((r2+i)<100) OFFSET 0) s1;
RESULT:
	[(1, 1, 10, 10), (1, 1, 10, 11), (1, 1, 10, 12), (1, 1, 10, 13), (1, 1, 20, 20), (1, 1, 20, 21), (1, 1, 20, 22), (1, 1, 20, 23), (1, 1, 30, 30), (1, 1, 30, 31), (1, 1, 30, 32), (1, 1, 30, 33), (2, 2, 10, 10), (2, 2, 10, 11), (2, 2, 10, 12), (2, 2, 10, 13), (2, 2, 20, 20), (2, 2, 20, 21), (2, 2, 20, 22), (2, 2, 20, 23), (2, 2, 30, 30), (2, 2, 30, 31), (2, 2, 30, 32), (2, 2, 30, 33), (3, 3, 10, 10), (3, 3, 10, 11), (3, 3, 10, 12), (3, 3, 10, 13), (3, 3, 20, 20), (3, 3, 20, 21), (3, 3, 20, 22), (3, 3, 20, 23), (3, 3, 30, 30), (3, 3, 30, 31), (3, 3, 30, 32), (3, 3, 30, 33)]

-----------
QUERY:

SELECT * FROM (VALUES (1),(2),(3)) v1(r1),
              LATERAL (SELECT r1, * FROM (VALUES (10),(20),(30)) v2(r2)
                                         LEFT JOIN generate_series(r1,2+r2/5) f(i) ON ((r2+i)<100) OFFSET 0) s1;
RESULT:
	[(1, 1, 10, 1), (1, 1, 10, 2), (1, 1, 10, 3), (1, 1, 10, 4), (1, 1, 20, 1), (1, 1, 20, 2), (1, 1, 20, 3), (1, 1, 20, 4), (1, 1, 20, 5), (1, 1, 20, 6), (1, 1, 30, 1), (1, 1, 30, 2), (1, 1, 30, 3), (1, 1, 30, 4), (1, 1, 30, 5), (1, 1, 30, 6), (1, 1, 30, 7), (1, 1, 30, 8), (2, 2, 10, 2), (2, 2, 10, 3), (2, 2, 10, 4), (2, 2, 20, 2), (2, 2, 20, 3), (2, 2, 20, 4), (2, 2, 20, 5), (2, 2, 20, 6), (2, 2, 30, 2), (2, 2, 30, 3), (2, 2, 30, 4), (2, 2, 30, 5), (2, 2, 30, 6), (2, 2, 30, 7), (2, 2, 30, 8), (3, 3, 10, 3), (3, 3, 10, 4), (3, 3, 20, 3), (3, 3, 20, 4), (3, 3, 20, 5), (3, 3, 20, 6), (3, 3, 30, 3), (3, 3, 30, 4), (3, 3, 30, 5), (3, 3, 30, 6), (3, 3, 30, 7), (3, 3, 30, 8)]

-----------
QUERY:


-- check handling of FULL JOIN with multiple lateral references (bug #15741)

SELECT *
FROM (VALUES (1),(2)) v1(r1)
    LEFT JOIN LATERAL (
        SELECT *
        FROM generate_series(1, v1.r1) AS gs1
        LEFT JOIN LATERAL (
            SELECT *
            FROM generate_series(1, gs1) AS gs2
            LEFT JOIN generate_series(1, gs2) AS gs3 ON TRUE
        ) AS ss1 ON TRUE
        FULL JOIN generate_series(1, v1.r1) AS gs4 ON FALSE
    ) AS ss0 ON TRUE;
RESULT:
	[(1, None, None, None, 1), (1, 1, 1, 1, None), (2, None, None, None, 1), (2, None, None, None, 2), (2, 1, 1, 1, None), (2, 2, 1, 1, None), (2, 2, 2, 1, None), (2, 2, 2, 2, None)]

-----------
QUERY:


DROP FUNCTION rngfunc_sql(int,int);
RESULT:
	ERROR - function rngfunc_sql(integer, integer) does not exist


-----------
QUERY:

DROP FUNCTION rngfunc_mat(int,int);
RESULT:
	ERROR - function rngfunc_mat(integer, integer) does not exist


-----------
QUERY:

DROP SEQUENCE rngfunc_rescan_seq1;
RESULT:
	[]

-----------
QUERY:

DROP SEQUENCE rngfunc_rescan_seq2;
RESULT:
	[]

-----------
QUERY:


--
-- Test cases involving OUT parameters
--

CREATE FUNCTION rngfunc(in f1 int, out f2 int)
AS 'select $1+1' LANGUAGE sql;
RESULT:
	[]

-----------
QUERY:

SELECT rngfunc(42);
RESULT:
	[(43,)]

-----------
QUERY:

SELECT * FROM rngfunc(42);
RESULT:
	[(43,)]

-----------
QUERY:

SELECT * FROM rngfunc(42) AS p(x);
RESULT:
	[(43,)]

-----------
QUERY:


-- explicit spec of return type is OK
CREATE OR REPLACE FUNCTION rngfunc(in f1 int, out f2 int) RETURNS int
AS 'select $1+1' LANGUAGE sql;
RESULT:
	[]

-----------
QUERY:

-- error, wrong result type
CREATE OR REPLACE FUNCTION rngfunc(in f1 int, out f2 int) RETURNS float
AS 'select $1+1' LANGUAGE sql;
RESULT:
	ERROR - function result type must be integer because of OUT parameters


-----------
QUERY:

-- with multiple OUT params you must get a RECORD result
CREATE OR REPLACE FUNCTION rngfunc(in f1 int, out f2 int, out f3 text) RETURNS int
AS 'select $1+1' LANGUAGE sql;
RESULT:
	ERROR - function result type must be record because of OUT parameters


-----------
QUERY:

CREATE OR REPLACE FUNCTION rngfunc(in f1 int, out f2 int, out f3 text)
RETURNS record
AS 'select $1+1' LANGUAGE sql;
RESULT:
	ERROR - cannot change return type of existing function
HINT:  Use DROP FUNCTION rngfunc(integer) first.


-----------
QUERY:


CREATE OR REPLACE FUNCTION rngfuncr(in f1 int, out f2 int, out text)
AS $$select $1-1, $1::text || 'z'$$ LANGUAGE sql;
RESULT:
	[]

-----------
QUERY:

SELECT f1, rngfuncr(f1) FROM int4_tbl;
RESULT:
	[(0, '(-1,0z)'), (123456, '(123455,123456z)'), (-123456, '(-123457,-123456z)'), (2147483647, '(2147483646,2147483647z)'), (-2147483647, '(-2147483648,-2147483647z)')]

-----------
QUERY:

SELECT * FROM rngfuncr(42);
RESULT:
	[(41, '42z')]

-----------
QUERY:

SELECT * FROM rngfuncr(42) AS p(a,b);
RESULT:
	[(41, '42z')]

-----------
QUERY:


CREATE OR REPLACE FUNCTION rngfuncb(in f1 int, inout f2 int, out text)
AS $$select $2-1, $1::text || 'z'$$ LANGUAGE sql;
RESULT:
	[]

-----------
QUERY:

SELECT f1, rngfuncb(f1, f1/2) FROM int4_tbl;
RESULT:
	[(0, '(-1,0z)'), (123456, '(61727,123456z)'), (-123456, '(-61729,-123456z)'), (2147483647, '(1073741822,2147483647z)'), (-2147483647, '(-1073741824,-2147483647z)')]

-----------
QUERY:

SELECT * FROM rngfuncb(42, 99);
RESULT:
	[(98, '42z')]

-----------
QUERY:

SELECT * FROM rngfuncb(42, 99) AS p(a,b);
RESULT:
	[(98, '42z')]

-----------
QUERY:


-- Can reference function with or without OUT params for DROP, etc
DROP FUNCTION rngfunc(int);
RESULT:
	[]

-----------
QUERY:

DROP FUNCTION rngfuncr(in f2 int, out f1 int, out text);
RESULT:
	[]

-----------
QUERY:

DROP FUNCTION rngfuncb(in f1 int, inout f2 int);
RESULT:
	[]

-----------
QUERY:


--
-- For my next trick, polymorphic OUT parameters
--

CREATE FUNCTION dup (f1 anyelement, f2 out anyelement, f3 out anyarray)
AS 'select $1, array[$1,$1]' LANGUAGE sql;
RESULT:
	[]

-----------
QUERY:

SELECT dup(22);
RESULT:
	[('(22,"{22,22}")',)]

-----------
QUERY:

SELECT dup('xyz');
RESULT:
	ERROR - could not determine polymorphic type because input has type unknown


-----------
QUERY:
	-- fails
SELECT dup('xyz'::text);
RESULT:
	[('(xyz,"{xyz,xyz}")',)]

-----------
QUERY:

SELECT * FROM dup('xyz'::text);
RESULT:
	[('xyz', ['xyz', 'xyz'])]

-----------
QUERY:


-- fails, as we are attempting to rename first argument
CREATE OR REPLACE FUNCTION dup (inout f2 anyelement, out f3 anyarray)
AS 'select $1, array[$1,$1]' LANGUAGE sql;
RESULT:
	ERROR - cannot change name of input parameter "f1"
HINT:  Use DROP FUNCTION dup(anyelement) first.


-----------
QUERY:


DROP FUNCTION dup(anyelement);
RESULT:
	[]

-----------
QUERY:


-- equivalent behavior, though different name exposed for input arg
CREATE OR REPLACE FUNCTION dup (inout f2 anyelement, out f3 anyarray)
AS 'select $1, array[$1,$1]' LANGUAGE sql;
RESULT:
	[]

-----------
QUERY:

SELECT dup(22);
RESULT:
	[('(22,"{22,22}")',)]

-----------
QUERY:


DROP FUNCTION dup(anyelement);
RESULT:
	[]

-----------
QUERY:


-- fails, no way to deduce outputs
CREATE FUNCTION bad (f1 int, out f2 anyelement, out f3 anyarray)
AS 'select $1, array[$1,$1]' LANGUAGE sql;
RESULT:
	ERROR - cannot determine result data type
DETAIL:  A result of type anyelement requires at least one input of type anyelement, anyarray, anynonarray, anyenum, anyrange, or anymultirange.


-----------
QUERY:


CREATE FUNCTION dup (f1 anycompatible, f2 anycompatiblearray, f3 out anycompatible, f4 out anycompatiblearray)
AS 'select $1, $2' LANGUAGE sql;
RESULT:
	[]

-----------
QUERY:

SELECT dup(22, array[44]);
RESULT:
	[('(22,{44})',)]

-----------
QUERY:

SELECT dup(4.5, array[44]);
RESULT:
	[('(4.5,{44})',)]

-----------
QUERY:

SELECT dup(22, array[44::bigint]);
RESULT:
	[('(22,{44})',)]

-----------
QUERY:

SELECT *, pg_typeof(f3), pg_typeof(f4) FROM dup(22, array[44::bigint]);
RESULT:
	[(22, [44], 'bigint', 'bigint[]')]

-----------
QUERY:


DROP FUNCTION dup(f1 anycompatible, f2 anycompatiblearray);
RESULT:
	[]

-----------
QUERY:


CREATE FUNCTION dup (f1 anycompatiblerange, f2 out anycompatible, f3 out anycompatiblearray, f4 out anycompatiblerange)
AS 'select lower($1), array[lower($1), upper($1)], $1' LANGUAGE sql;
RESULT:
	[]

-----------
QUERY:

SELECT dup(int4range(4,7));
RESULT:
	[('(4,"{4,7}","[4,7)")',)]

-----------
QUERY:

SELECT dup(numrange(4,7));
RESULT:
	[('(4,"{4,7}","[4,7)")',)]

-----------
QUERY:

SELECT dup(textrange('aaa', 'bbb'));
RESULT:
	[('(aaa,"{aaa,bbb}","[aaa,bbb)")',)]

-----------
QUERY:


DROP FUNCTION dup(f1 anycompatiblerange);
RESULT:
	[]

-----------
QUERY:


-- fails, no way to deduce outputs
CREATE FUNCTION bad (f1 anyarray, out f2 anycompatible, out f3 anycompatiblearray)
AS 'select $1, array[$1,$1]' LANGUAGE sql;
RESULT:
	ERROR - cannot determine result data type
DETAIL:  A result of type anycompatible requires at least one input of type anycompatible, anycompatiblearray, anycompatiblenonarray, anycompatiblerange, or anycompatiblemultirange.


-----------
QUERY:


--
-- table functions
--

CREATE OR REPLACE FUNCTION rngfunc()
RETURNS TABLE(a int)
AS $$ SELECT a FROM generate_series(1,5) a(a) $$ LANGUAGE sql;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM rngfunc();
RESULT:
	[(1,), (2,), (3,), (4,), (5,)]

-----------
QUERY:

DROP FUNCTION rngfunc();
RESULT:
	[]

-----------
QUERY:


CREATE OR REPLACE FUNCTION rngfunc(int)
RETURNS TABLE(a int, b int)
AS $$ SELECT a, b
         FROM generate_series(1,$1) a(a),
              generate_series(1,$1) b(b) $$ LANGUAGE sql;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM rngfunc(3);
RESULT:
	[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]

-----------
QUERY:

DROP FUNCTION rngfunc(int);
RESULT:
	[]

-----------
QUERY:


-- case that causes change of typmod knowledge during inlining
CREATE OR REPLACE FUNCTION rngfunc()
RETURNS TABLE(a varchar(5))
AS $$ SELECT 'hello'::varchar(5) $$ LANGUAGE sql STABLE;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM rngfunc() GROUP BY 1;
RESULT:
	[('hello',)]

-----------
QUERY:

DROP FUNCTION rngfunc();
RESULT:
	[]

-----------
QUERY:


--
-- some tests on SQL functions with RETURNING
--

create temp table tt(f1 serial, data text);
RESULT:
	[]

-----------
QUERY:


create function insert_tt(text) returns int as
$$ insert into tt(data) values($1) returning f1 $$
language sql;
RESULT:
	[]

-----------
QUERY:


select insert_tt('foo');
RESULT:
	[(1,)]

-----------
QUERY:

select insert_tt('bar');
RESULT:
	[(2,)]

-----------
QUERY:

select * from tt;
RESULT:
	[(1, 'foo'), (2, 'bar')]

-----------
QUERY:


-- insert will execute to completion even if function needs just 1 row
create or replace function insert_tt(text) returns int as
$$ insert into tt(data) values($1),($1||$1) returning f1 $$
language sql;
RESULT:
	[]

-----------
QUERY:


select insert_tt('fool');
RESULT:
	[(3,)]

-----------
QUERY:

select * from tt;
RESULT:
	[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool')]

-----------
QUERY:


-- setof does what/* REPLACED */ ''s expected
create or replace function insert_tt2(text,text) returns setof int as
$$ insert into tt(data) values($1),($2) returning f1 $$
language sql;
RESULT:
	[]

-----------
QUERY:


select insert_tt2('foolish','barrish');
RESULT:
	[(5,), (6,)]

-----------
QUERY:

select * from insert_tt2('baz','quux');
RESULT:
	[(7,), (8,)]

-----------
QUERY:

select * from tt;
RESULT:
	[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool'), (5, 'foolish'), (6, 'barrish'), (7, 'baz'), (8, 'quux')]

-----------
QUERY:


-- limit doesn/* REPLACED */ ''t prevent execution to completion
select insert_tt2('foolish','barrish') limit 1;
RESULT:
	[(9,)]

-----------
QUERY:

select * from tt;
RESULT:
	[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool'), (5, 'foolish'), (6, 'barrish'), (7, 'baz'), (8, 'quux'), (9, 'foolish'), (10, 'barrish')]

-----------
QUERY:


-- triggers will fire, too
create function noticetrigger() returns trigger as $$
begin
  raise notice 'noticetrigger % %', new.f1, new.data;
  return null;
end $$ language plpgsql;
RESULT:
	[]

-----------
QUERY:

create trigger tnoticetrigger after insert on tt for each row
execute procedure noticetrigger();
RESULT:
	[]

-----------
QUERY:


select insert_tt2('foolme','barme') limit 1;
RESULT:
	[(11,)]

-----------
QUERY:

select * from tt;
RESULT:
	[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool'), (5, 'foolish'), (6, 'barrish'), (7, 'baz'), (8, 'quux'), (9, 'foolish'), (10, 'barrish'), (11, 'foolme'), (12, 'barme')]

-----------
QUERY:


-- and rules work
create temp table tt_log(f1 int, data text);
RESULT:
	[]

-----------
QUERY:


create rule insert_tt_rule as on insert to tt do also
  insert into tt_log values(new.*);
RESULT:
	[]

-----------
QUERY:


select insert_tt2('foollog','barlog') limit 1;
RESULT:
	[(13,)]

-----------
QUERY:

select * from tt;
RESULT:
	[(1, 'foo'), (2, 'bar'), (3, 'fool'), (4, 'foolfool'), (5, 'foolish'), (6, 'barrish'), (7, 'baz'), (8, 'quux'), (9, 'foolish'), (10, 'barrish'), (11, 'foolme'), (12, 'barme'), (13, 'foollog'), (14, 'barlog')]

-----------
QUERY:

-- note that nextval() gets executed a second time in the rule expansion,
-- which is expected.
select * from tt_log;
RESULT:
	[(15, 'foollog'), (16, 'barlog')]

-----------
QUERY:


-- test case for a whole-row-variable bug
create function rngfunc1(n integer, out a text, out b text)
  returns setof record
  language sql
  as $$ select 'foo ' || i, 'bar ' || i from generate_series(1,$1) i $$;
RESULT:
	[]

-----------
QUERY:


set work_mem='64kB';
RESULT:
	[]

-----------
QUERY:

select t.a, t, t.a from rngfunc1(10000) t limit 1;
RESULT:
	[('foo 1', '("foo 1","bar 1")', 'foo 1')]

-----------
QUERY:

reset work_mem;
RESULT:
	[]

-----------
QUERY:

select t.a, t, t.a from rngfunc1(10000) t limit 1;
RESULT:
	[('foo 1', '("foo 1","bar 1")', 'foo 1')]

-----------
QUERY:


drop function rngfunc1(n integer);
RESULT:
	[]

-----------
QUERY:


-- test use of SQL functions returning record
-- this is supported in some cases where the query doesn/* REPLACED */ ''t specify
-- the actual record type ...

create function array_to_set(anyarray) returns setof record as $$
  select i AS "index", $1[i] AS "value" from generate_subscripts($1, 1) i
$$ language sql strict immutable;
RESULT:
	[]

-----------
QUERY:


select array_to_set(array['one', 'two']);
RESULT:
	[('(1,one)',), ('(2,two)',)]

-----------
QUERY:

select * from array_to_set(array['one', 'two']) as t(f1 int,f2 text);
RESULT:
	[(1, 'one'), (2, 'two')]

-----------
QUERY:

select * from array_to_set(array['one', 'two']);
RESULT:
	ERROR - a column definition list is required for functions returning "record"
LINE 2: select * from array_to_set(array['one', 'two']);
                      ^


-----------
QUERY:
 -- fail
-- after-the-fact coercion of the columns is now possible, too
select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text);
RESULT:
	[(Decimal('1.00'), 'one'), (Decimal('2.00'), 'two')]

-----------
QUERY:

-- and if it doesn/* REPLACED */ ''t work, you get a compile-time not run-time error
select * from array_to_set(array['one', 'two']) as t(f1 point,f2 text);
RESULT:
	ERROR - return type mismatch in function declared to return record
DETAIL:  Final statement returns integer instead of point at column 1.
CONTEXT:  SQL function "array_to_set" during startup


-----------
QUERY:


-- with /* REPLACED */ ''strict/* REPLACED */ '', this function can/* REPLACED */ ''t be inlined in FROM
explain (verbose, costs off)
  select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text);
RESULT:
	[('Function Scan on public.array_to_set t',), ('  Output: f1, f2',), ("  Function Call: array_to_set('{one,two}'::text[])",)]

-----------
QUERY:


-- but without, it can be:

create or replace function array_to_set(anyarray) returns setof record as $$
  select i AS "index", $1[i] AS "value" from generate_subscripts($1, 1) i
$$ language sql immutable;
RESULT:
	[]

-----------
QUERY:


select array_to_set(array['one', 'two']);
RESULT:
	[('(1,one)',), ('(2,two)',)]

-----------
QUERY:

select * from array_to_set(array['one', 'two']) as t(f1 int,f2 text);
RESULT:
	[(1, 'one'), (2, 'two')]

-----------
QUERY:

select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text);
RESULT:
	[(Decimal('1.00'), 'one'), (Decimal('2.00'), 'two')]

-----------
QUERY:

select * from array_to_set(array['one', 'two']) as t(f1 point,f2 text);
RESULT:
	ERROR - return type mismatch in function declared to return record
DETAIL:  Final statement returns integer instead of point at column 1.
CONTEXT:  SQL function "array_to_set" during inlining


-----------
QUERY:

explain (verbose, costs off)
  select * from array_to_set(array['one', 'two']) as t(f1 numeric(4,2),f2 text);
RESULT:
	[('Function Scan on pg_catalog.generate_subscripts i',), ("  Output: i.i, ('{one,two}'::text[])[i.i]",), ("  Function Call: generate_subscripts('{one,two}'::text[], 1)",)]

-----------
QUERY:


create temp table rngfunc(f1 int8, f2 int8);
RESULT:
	[]

-----------
QUERY:


create function testrngfunc() returns record as $$
  insert into rngfunc values (1,2) returning *;
$$ language sql;
RESULT:
	[]

-----------
QUERY:


select testrngfunc();
RESULT:
	[('(1,2)',)]

-----------
QUERY:

select * from testrngfunc() as t(f1 int8,f2 int8);
RESULT:
	[(1, 2)]

-----------
QUERY:

select * from testrngfunc();
RESULT:
	ERROR - a column definition list is required for functions returning "record"
LINE 2: select * from testrngfunc();
                      ^


-----------
QUERY:
 -- fail

drop function testrngfunc();
RESULT:
	[]

-----------
QUERY:


create function testrngfunc() returns setof record as $$
  insert into rngfunc values (1,2), (3,4) returning *;
$$ language sql;
RESULT:
	[]

-----------
QUERY:


select testrngfunc();
RESULT:
	[('(1,2)',), ('(3,4)',)]

-----------
QUERY:

select * from testrngfunc() as t(f1 int8,f2 int8);
RESULT:
	[(1, 2), (3, 4)]

-----------
QUERY:

select * from testrngfunc();
RESULT:
	ERROR - a column definition list is required for functions returning "record"
LINE 2: select * from testrngfunc();
                      ^


-----------
QUERY:
 -- fail

drop function testrngfunc();
RESULT:
	[]

-----------
QUERY:


-- Check that typmod imposed by a composite type is honored
create type rngfunc_type as (f1 numeric(35,6), f2 numeric(35,2));
RESULT:
	[]

-----------
QUERY:


create function testrngfunc() returns rngfunc_type as $$
  select 7.136178319899999964, 7.136178319899999964;
$$ language sql immutable;
RESULT:
	[]

-----------
QUERY:


explain (verbose, costs off)
select testrngfunc();
RESULT:
	[('Result',), ("  Output: '(7.136178,7.14)'::rngfunc_type",)]

-----------
QUERY:

select testrngfunc();
RESULT:
	[('(7.136178,7.14)',)]

-----------
QUERY:

explain (verbose, costs off)
select * from testrngfunc();
RESULT:
	[('Function Scan on testrngfunc',), ('  Output: f1, f2',), ("  Function Call: '(7.136178,7.14)'::rngfunc_type",)]

-----------
QUERY:

select * from testrngfunc();
RESULT:
	[(Decimal('7.136178'), Decimal('7.14'))]

-----------
QUERY:


create or replace function testrngfunc() returns rngfunc_type as $$
  select 7.136178319899999964, 7.136178319899999964;
$$ language sql volatile;
RESULT:
	[]

-----------
QUERY:


explain (verbose, costs off)
select testrngfunc();
RESULT:
	[('Result',), ('  Output: testrngfunc()',)]

-----------
QUERY:

select testrngfunc();
RESULT:
	[('(7.136178,7.14)',)]

-----------
QUERY:

explain (verbose, costs off)
select * from testrngfunc();
RESULT:
	[('Function Scan on public.testrngfunc',), ('  Output: f1, f2',), ('  Function Call: testrngfunc()',)]

-----------
QUERY:

select * from testrngfunc();
RESULT:
	[(Decimal('7.136178'), Decimal('7.14'))]

-----------
QUERY:


drop function testrngfunc();
RESULT:
	[]

-----------
QUERY:


create function testrngfunc() returns setof rngfunc_type as $$
  select 7.136178319899999964, 7.136178319899999964;
$$ language sql immutable;
RESULT:
	[]

-----------
QUERY:


explain (verbose, costs off)
select testrngfunc();
RESULT:
	[('ProjectSet',), ('  Output: testrngfunc()',), ('  ->  Result',)]

-----------
QUERY:

select testrngfunc();
RESULT:
	[('(7.136178,7.14)',)]

-----------
QUERY:

explain (verbose, costs off)
select * from testrngfunc();
RESULT:
	[('Result',), ('  Output: 7.136178::numeric(35,6), 7.14::numeric(35,2)',)]

-----------
QUERY:

select * from testrngfunc();
RESULT:
	[(Decimal('7.136178'), Decimal('7.14'))]

-----------
QUERY:


create or replace function testrngfunc() returns setof rngfunc_type as $$
  select 7.136178319899999964, 7.136178319899999964;
$$ language sql volatile;
RESULT:
	[]

-----------
QUERY:


explain (verbose, costs off)
select testrngfunc();
RESULT:
	[('ProjectSet',), ('  Output: testrngfunc()',), ('  ->  Result',)]

-----------
QUERY:

select testrngfunc();
RESULT:
	[('(7.136178,7.14)',)]

-----------
QUERY:

explain (verbose, costs off)
select * from testrngfunc();
RESULT:
	[('Function Scan on public.testrngfunc',), ('  Output: f1, f2',), ('  Function Call: testrngfunc()',)]

-----------
QUERY:

select * from testrngfunc();
RESULT:
	[(Decimal('7.136178'), Decimal('7.14'))]

-----------
QUERY:


create or replace function testrngfunc() returns setof rngfunc_type as $$
  select 1, 2 union select 3, 4 order by 1;
$$ language sql immutable;
RESULT:
	[]

-----------
QUERY:


explain (verbose, costs off)
select testrngfunc();
RESULT:
	[('ProjectSet',), ('  Output: testrngfunc()',), ('  ->  Result',)]

-----------
QUERY:

select testrngfunc();
RESULT:
	[('(1.000000,2.00)',), ('(3.000000,4.00)',)]

-----------
QUERY:

explain (verbose, costs off)
select * from testrngfunc();
RESULT:
	[('Subquery Scan on "*SELECT*"',), ('  Output: "*SELECT*"."?column?", "*SELECT*"."?column?_1"',), ('  ->  Unique',), ('        Output: (1), (2)',), ('        ->  Sort',), ('              Output: (1), (2)',), ('              Sort Key: (1), (2)',), ('              ->  Append',), ('                    ->  Result',), ('                          Output: 1, 2',), ('                    ->  Result',), ('                          Output: 3, 4',)]

-----------
QUERY:

select * from testrngfunc();
RESULT:
	[(Decimal('1.000000'), Decimal('2.00')), (Decimal('3.000000'), Decimal('4.00'))]

-----------
QUERY:


-- Check a couple of error cases while we/* REPLACED */ ''re here
select * from testrngfunc() as t(f1 int8,f2 int8);
RESULT:
	ERROR - a column definition list is redundant for a function returning a named composite type
LINE 4: select * from testrngfunc() as t(f1 int8,f2 int8);
                                         ^


-----------
QUERY:
  -- fail, composite result
select * from pg_get_keywords() as t(f1 int8,f2 int8);
RESULT:
	ERROR - a column definition list is redundant for a function with OUT parameters
LINE 2: select * from pg_get_keywords() as t(f1 int8,f2 int8);
                                             ^


-----------
QUERY:
  -- fail, OUT params
select * from sin(3) as t(f1 int8,f2 int8);
RESULT:
	ERROR - a column definition list is only allowed for functions returning "record"
LINE 2: select * from sin(3) as t(f1 int8,f2 int8);
                                  ^


-----------
QUERY:
  -- fail, scalar result type

drop type rngfunc_type cascade;
RESULT:
	[]

-----------
QUERY:


--
-- Check some cases involving added/dropped columns in a rowtype result
--

create temp table users (userid text, seq int, email text, todrop bool, moredrop int, enabled bool);
RESULT:
	[]

-----------
QUERY:

insert into users values ('id',1,'email',true,11,true);
RESULT:
	[]

-----------
QUERY:

insert into users values ('id2',2,'email2',true,12,true);
RESULT:
	[]

-----------
QUERY:

alter table users drop column todrop;
RESULT:
	[]

-----------
QUERY:


create or replace function get_first_user() returns users as
$$ SELECT * FROM users ORDER BY userid LIMIT 1; $$
language sql stable;
RESULT:
	[]

-----------
QUERY:


SELECT get_first_user();
RESULT:
	[('(id,1,email,11,t)',)]

-----------
QUERY:

SELECT * FROM get_first_user();
RESULT:
	[('id', 1, 'email', 11, True)]

-----------
QUERY:


create or replace function get_users() returns setof users as
$$ SELECT * FROM users ORDER BY userid; $$
language sql stable;
RESULT:
	[]

-----------
QUERY:


SELECT get_users();
RESULT:
	[('(id,1,email,11,t)',), ('(id2,2,email2,12,t)',)]

-----------
QUERY:

SELECT * FROM get_users();
RESULT:
	[('id', 1, 'email', 11, True), ('id2', 2, 'email2', 12, True)]

-----------
QUERY:

SELECT * FROM get_users() WITH ORDINALITY;
RESULT:
	[('id', 1, 'email', 11, True, 1), ('id2', 2, 'email2', 12, True, 2)]

-----------
QUERY:
   -- make sure ordinality copes

-- multiple functions vs. dropped columns
SELECT * FROM ROWS FROM(generate_series(10,11), get_users()) WITH ORDINALITY;
RESULT:
	[(10, 'id', 1, 'email', 11, True, 1), (11, 'id2', 2, 'email2', 12, True, 2)]

-----------
QUERY:

SELECT * FROM ROWS FROM(get_users(), generate_series(10,11)) WITH ORDINALITY;
RESULT:
	[('id', 1, 'email', 11, True, 10, 1), ('id2', 2, 'email2', 12, True, 11, 2)]

-----------
QUERY:


-- check that we can cope with post-parsing changes in rowtypes
create temp view usersview as
SELECT * FROM ROWS FROM(get_users(), generate_series(10,11)) WITH ORDINALITY;
RESULT:
	[]

-----------
QUERY:


select * from usersview;
RESULT:
	[('id', 1, 'email', 11, True, 10, 1), ('id2', 2, 'email2', 12, True, 11, 2)]

-----------
QUERY:

alter table users add column junk text;
RESULT:
	[]

-----------
QUERY:

select * from usersview;
RESULT:
	[('id', 1, 'email', 11, True, 10, 1), ('id2', 2, 'email2', 12, True, 11, 2)]

-----------
QUERY:


alter table users drop column moredrop;
RESULT:
	ERROR - cannot drop column moredrop of table users because other objects depend on it
DETAIL:  view usersview depends on column moredrop of table users
HINT:  Use DROP ... CASCADE to drop the dependent objects too.


-----------
QUERY:
  -- fail, view has reference

-- We used to have a bug that would allow the above to succeed, posing
-- hazards for later execution of the view.  Check that the internal
-- defenses for those hazards haven/* REPLACED */ ''t bit-rotted, in case some other
-- bug with similar symptoms emerges.
begin;
RESULT:
	[]

-----------
QUERY:


-- destroy the dependency entry that prevents the DROP:
delete from pg_depend where
  objid = (select oid from pg_rewrite
           where ev_class = 'usersview'::regclass and rulename = '_RETURN')
  and refobjsubid = 5
returning pg_describe_object(classid, objid, objsubid) as obj,
          pg_describe_object(refclassid, refobjid, refobjsubid) as ref,
          deptype;
RESULT:
	[('rule _RETURN on view usersview', 'column moredrop of table users', 'n')]

-----------
QUERY:


alter table users drop column moredrop;
RESULT:
	[]

-----------
QUERY:

select * from usersview;
RESULT:
	ERROR - attribute 5 of type record has been dropped


-----------
QUERY:
  -- expect clean failure
rollback;
RESULT:
	[]

-----------
QUERY:


alter table users alter column seq type numeric;
RESULT:
	ERROR - cannot alter type of a column used by a view or rule
DETAIL:  rule _RETURN on view usersview depends on column "seq"


-----------
QUERY:
  -- fail, view has reference

-- likewise, check we don/* REPLACED */ ''t crash if the dependency goes wrong
begin;
RESULT:
	[]

-----------
QUERY:


-- destroy the dependency entry that prevents the ALTER:
delete from pg_depend where
  objid = (select oid from pg_rewrite
           where ev_class = 'usersview'::regclass and rulename = '_RETURN')
  and refobjsubid = 2
returning pg_describe_object(classid, objid, objsubid) as obj,
          pg_describe_object(refclassid, refobjid, refobjsubid) as ref,
          deptype;
RESULT:
	[('rule _RETURN on view usersview', 'column seq of table users', 'n')]

-----------
QUERY:


alter table users alter column seq type numeric;
RESULT:
	[]

-----------
QUERY:

select * from usersview;
RESULT:
	ERROR - attribute 2 of type record has wrong type
DETAIL:  Table has type numeric, but query expects integer.


-----------
QUERY:
  -- expect clean failure
rollback;
RESULT:
	[]

-----------
QUERY:


drop view usersview;
RESULT:
	[]

-----------
QUERY:

drop function get_first_user();
RESULT:
	[]

-----------
QUERY:

drop function get_users();
RESULT:
	[]

-----------
QUERY:

drop table users;
RESULT:
	[]

-----------
QUERY:


-- check behavior with type coercion required for a set-op

create or replace function rngfuncbar() returns setof text as
$$ select 'foo'::varchar union all select 'bar'::varchar ; $$
language sql stable;
RESULT:
	[]

-----------
QUERY:


select rngfuncbar();
RESULT:
	[('foo',), ('bar',)]

-----------
QUERY:

select * from rngfuncbar();
RESULT:
	[('foo',), ('bar',)]

-----------
QUERY:

-- this function is now inlinable, too:
explain (verbose, costs off) select * from rngfuncbar();
RESULT:
	[('Result',), ("  Output: ('foo'::character varying)",), ('  ->  Append',), ('        ->  Result',), ("              Output: 'foo'::character varying",), ('        ->  Result',), ("              Output: 'bar'::character varying",)]

-----------
QUERY:


drop function rngfuncbar();
RESULT:
	[]

-----------
QUERY:


-- check handling of a SQL function with multiple OUT params (bug #5777)

create or replace function rngfuncbar(out integer, out numeric) as
$$ select (1, 2.1) $$ language sql;
RESULT:
	[]

-----------
QUERY:


select * from rngfuncbar();
RESULT:
	[(1, Decimal('2.1'))]

-----------
QUERY:


create or replace function rngfuncbar(out integer, out numeric) as
$$ select (1, 2) $$ language sql;
RESULT:
	[]

-----------
QUERY:


select * from rngfuncbar();
RESULT:
	ERROR - function return row and query-specified return row do not match
DETAIL:  Returned type integer at ordinal position 2, but query expects numeric.


-----------
QUERY:
  -- fail

create or replace function rngfuncbar(out integer, out numeric) as
$$ select (1, 2.1, 3) $$ language sql;
RESULT:
	[]

-----------
QUERY:


select * from rngfuncbar();
RESULT:
	ERROR - function return row and query-specified return row do not match
DETAIL:  Returned row contains 3 attributes, but query expects 2.


-----------
QUERY:
  -- fail

drop function rngfuncbar();
RESULT:
	[]

-----------
QUERY:


-- check whole-row-Var handling in nested lateral functions (bug #11703)

create function extractq2(t int8_tbl) returns int8 as $$
  select t.q2
$$ language sql immutable;
RESULT:
	[]

-----------
QUERY:


explain (verbose, costs off)
select x from int8_tbl, extractq2(int8_tbl) f(x);
RESULT:
	[('Nested Loop',), ('  Output: f.x',), ('  ->  Seq Scan on public.int8_tbl',), ('        Output: int8_tbl.q1, int8_tbl.q2',), ('  ->  Function Scan on f',), ('        Output: f.x',), ('        Function Call: int8_tbl.q2',)]

-----------
QUERY:


select x from int8_tbl, extractq2(int8_tbl) f(x);
RESULT:
	[(456,), (4567890123456789,), (123,), (4567890123456789,), (-4567890123456789,)]

-----------
QUERY:


create function extractq2_2(t int8_tbl) returns table(ret1 int8) as $$
  select extractq2(t) offset 0
$$ language sql immutable;
RESULT:
	[]

-----------
QUERY:


explain (verbose, costs off)
select x from int8_tbl, extractq2_2(int8_tbl) f(x);
RESULT:
	[('Nested Loop',), ('  Output: ((int8_tbl.*).q2)',), ('  ->  Seq Scan on public.int8_tbl',), ('        Output: int8_tbl.*',), ('  ->  Result',), ('        Output: (int8_tbl.*).q2',)]

-----------
QUERY:


select x from int8_tbl, extractq2_2(int8_tbl) f(x);
RESULT:
	[(456,), (4567890123456789,), (123,), (4567890123456789,), (-4567890123456789,)]

-----------
QUERY:


-- without the /* REPLACED */ ''offset 0/* REPLACED */ '', this function gets optimized quite differently

create function extractq2_2_opt(t int8_tbl) returns table(ret1 int8) as $$
  select extractq2(t)
$$ language sql immutable;
RESULT:
	[]

-----------
QUERY:


explain (verbose, costs off)
select x from int8_tbl, extractq2_2_opt(int8_tbl) f(x);
RESULT:
	[('Seq Scan on public.int8_tbl',), ('  Output: int8_tbl.q2',)]

-----------
QUERY:


select x from int8_tbl, extractq2_2_opt(int8_tbl) f(x);
RESULT:
	[(456,), (4567890123456789,), (123,), (4567890123456789,), (-4567890123456789,)]

-----------
QUERY:


-- check handling of nulls in SRF results (bug #7808)

create type rngfunc2 as (a integer, b text);
RESULT:
	[]

-----------
QUERY:


select *, row_to_json(u) from unnest(array[(1,'foo')::rngfunc2, null::rngfunc2]) u;
RESULT:
	[(1, 'foo', {'a': 1, 'b': 'foo'}), (None, None, {'a': None, 'b': None})]

-----------
QUERY:

select *, row_to_json(u) from unnest(array[null::rngfunc2, null::rngfunc2]) u;
RESULT:
	[(None, None, {'a': None, 'b': None}), (None, None, {'a': None, 'b': None})]

-----------
QUERY:

select *, row_to_json(u) from unnest(array[null::rngfunc2, (1,'foo')::rngfunc2, null::rngfunc2]) u;
RESULT:
	[(None, None, {'a': None, 'b': None}), (1, 'foo', {'a': 1, 'b': 'foo'}), (None, None, {'a': None, 'b': None})]

-----------
QUERY:

select *, row_to_json(u) from unnest(array[]::rngfunc2[]) u;
RESULT:
	[]

-----------
QUERY:


drop type rngfunc2;
RESULT:
	[]

-----------
QUERY:


-- check handling of functions pulled up into function RTEs (bug #17227)

explain (verbose, costs off)
select * from
  (select jsonb_path_query_array(module->'lectures', '$[*]') as lecture
   from unnest(array['{"lectures": [{"id": "1"}]}'::jsonb])
        as unnested_modules(module)) as ss,
  jsonb_to_recordset(ss.lecture) as j (id text);
RESULT:
	[('Nested Loop',), ("  Output: jsonb_path_query_array((unnested_modules.module -> 'lectures'::text), '$[*]'::jsonpath, '{}'::jsonb, false), j.id",), ('  ->  Function Scan on pg_catalog.unnest unnested_modules',), ('        Output: unnested_modules.module',), ('        Function Call: unnest(\'{"{\\"lectures\\": [{\\"id\\": \\"1\\"}]}"}\'::jsonb[])',), ('  ->  Function Scan on pg_catalog.jsonb_to_recordset j',), ('        Output: j.id',), ("        Function Call: jsonb_to_recordset(jsonb_path_query_array((unnested_modules.module -> 'lectures'::text), '$[*]'::jsonpath, '{}'::jsonb, false))",)]

-----------
QUERY:


select * from
  (select jsonb_path_query_array(module->'lectures', '$[*]') as lecture
   from unnest(array['{"lectures": [{"id": "1"}]}'::jsonb])
        as unnested_modules(module)) as ss,
  jsonb_to_recordset(ss.lecture) as j (id text);
RESULT:
	[([{'id': '1'}], '1')]

-----------
QUERY:


-- check detection of mismatching record types with a const-folded expression

with a(b) as (values (row(1,2,3)))
select * from a, coalesce(b) as c(d int, e int);
RESULT:
	ERROR - function return row and query-specified return row do not match
DETAIL:  Returned row contains 3 attributes, but query expects 2.


-----------
QUERY:
  -- fail
with a(b) as (values (row(1,2,3)))
select * from a, coalesce(b) as c(d int, e int, f int, g int);
RESULT:
	ERROR - function return row and query-specified return row do not match
DETAIL:  Returned row contains 3 attributes, but query expects 4.


-----------
QUERY:
  -- fail
with a(b) as (values (row(1,2,3)))
select * from a, coalesce(b) as c(d int, e int, f float);
RESULT:
	ERROR - function return row and query-specified return row do not match
DETAIL:  Returned type integer at ordinal position 3, but query expects double precision.

