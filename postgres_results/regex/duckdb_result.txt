
-----------
QUERY:
--
-- Regular expression tests
--

-- Don/* REPLACED */ ''t want to have to double backslashes in regexes
set standard_conforming_strings = on;
RESULT:
	ERROR - Parser Error: syntax error at or near "on"

-----------
QUERY:


-- Test simple quantified backrefs
select 'bbbbb' ~ '^([bc])\1*$' as t;
RESULT:
	ERROR - Invalid Input Error: invalid escape sequence: \1

-----------
QUERY:

select 'ccc' ~ '^([bc])\1*$' as t;
RESULT:
	ERROR - Invalid Input Error: invalid escape sequence: \1

-----------
QUERY:

select 'xxx' ~ '^([bc])\1*$' as f;
RESULT:
	ERROR - Invalid Input Error: invalid escape sequence: \1

-----------
QUERY:

select 'bbc' ~ '^([bc])\1*$' as f;
RESULT:
	ERROR - Invalid Input Error: invalid escape sequence: \1

-----------
QUERY:

select 'b' ~ '^([bc])\1*$' as t;
RESULT:
	ERROR - Invalid Input Error: invalid escape sequence: \1

-----------
QUERY:


-- Test quantified backref within a larger expression
select 'abc abc abc' ~ '^(\w+)( \1)+$' as t;
RESULT:
	ERROR - Invalid Input Error: invalid escape sequence: \1

-----------
QUERY:

select 'abc abd abc' ~ '^(\w+)( \1)+$' as f;
RESULT:
	ERROR - Invalid Input Error: invalid escape sequence: \1

-----------
QUERY:

select 'abc abc abd' ~ '^(\w+)( \1)+$' as f;
RESULT:
	ERROR - Invalid Input Error: invalid escape sequence: \1

-----------
QUERY:

select 'abc abc abc' ~ '^(.+)( \1)+$' as t;
RESULT:
	ERROR - Invalid Input Error: invalid escape sequence: \1

-----------
QUERY:

select 'abc abd abc' ~ '^(.+)( \1)+$' as f;
RESULT:
	ERROR - Invalid Input Error: invalid escape sequence: \1

-----------
QUERY:

select 'abc abc abd' ~ '^(.+)( \1)+$' as f;
RESULT:
	ERROR - Invalid Input Error: invalid escape sequence: \1

-----------
QUERY:


-- Test some cases that crashed in 9.2beta1 due to pmatch[] array overrun
select substring('asd TO foo' from ' TO (([a-z0-9._]+|"([^"]+|"")+")+)');
RESULT:
	ERROR - Conversion Error: Could not convert string ' TO (([a-z0-9._]+|"([^"]+|"")+")+)' to INT64

-----------
QUERY:

select substring('a' from '((a))+');
RESULT:
	ERROR - Conversion Error: Could not convert string '((a))+' to INT64

-----------
QUERY:

select substring('a' from '((a)+)');
RESULT:
	ERROR - Conversion Error: Could not convert string '((a)+)' to INT64

-----------
QUERY:


-- Test regexp_match()
select regexp_match('abc', '');
RESULT:
	ERROR - Catalog Error: Scalar Function with name regexp_match does not exist!
Did you mean "regexp_matches"?

-----------
QUERY:

select regexp_match('abc', 'bc');
RESULT:
	ERROR - Catalog Error: Scalar Function with name regexp_match does not exist!
Did you mean "regexp_matches"?

-----------
QUERY:

select regexp_match('abc', 'd') is null;
RESULT:
	ERROR - Catalog Error: Scalar Function with name regexp_match does not exist!
Did you mean "regexp_matches"?

-----------
QUERY:

select regexp_match('abc', '(B)(c)', 'i');
RESULT:
	ERROR - Catalog Error: Scalar Function with name regexp_match does not exist!
Did you mean "regexp_matches"?

-----------
QUERY:

select regexp_match('abc', 'Bd', 'ig');
RESULT:
	ERROR - Catalog Error: Scalar Function with name regexp_match does not exist!
Did you mean "regexp_matches"?

-----------
QUERY:
 -- error

-- Test lookahead constraints
select regexp_matches('ab', 'a(?=b)b*');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?=

-----------
QUERY:

select regexp_matches('a', 'a(?=b)b*');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?=

-----------
QUERY:

select regexp_matches('abc', 'a(?=b)b*(?=c)c*');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?=

-----------
QUERY:

select regexp_matches('ab', 'a(?=b)b*(?=c)c*');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?=

-----------
QUERY:

select regexp_matches('ab', 'a(?!b)b*');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?!

-----------
QUERY:

select regexp_matches('a', 'a(?!b)b*');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?!

-----------
QUERY:

select regexp_matches('b', '(?=b)b');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?=

-----------
QUERY:

select regexp_matches('a', '(?=b)b');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?=

-----------
QUERY:


-- Test lookbehind constraints
select regexp_matches('abb', '(?<=a)b*');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select regexp_matches('a', 'a(?<=a)b*');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select regexp_matches('abc', 'a(?<=a)b*(?<=b)c*');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select regexp_matches('ab', 'a(?<=a)b*(?<=b)c*');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select regexp_matches('ab', 'a*(?<!a)b*');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select regexp_matches('ab', 'a*(?<!a)b+');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select regexp_matches('b', 'a*(?<!a)b+');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select regexp_matches('a', 'a(?<!a)b*');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select regexp_matches('b', '(?<=b)b');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select regexp_matches('foobar', '(?<=f)b+');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select regexp_matches('foobar', '(?<=foo)b+');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select regexp_matches('foobar', '(?<=oo)b+');
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:


-- Test optimization of single-chr-or-bracket-expression lookaround constraints
select 'xz' ~ 'x(?=[xy])';
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?=

-----------
QUERY:

select 'xy' ~ 'x(?=[xy])';
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?=

-----------
QUERY:

select 'xz' ~ 'x(?![xy])';
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?!

-----------
QUERY:

select 'xy' ~ 'x(?![xy])';
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?!

-----------
QUERY:

select 'x'  ~ 'x(?![xy])';
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?!

-----------
QUERY:

select 'xyy' ~ '(?<=[xy])yy+';
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select 'zyy' ~ '(?<=[xy])yy+';
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select 'xyy' ~ '(?<![xy])yy+';
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:

select 'zyy' ~ '(?<![xy])yy+';
RESULT:
	ERROR - Invalid Input Error: invalid perl operator: (?<

-----------
QUERY:


-- Test conversion of regex patterns to indexable conditions
explain (costs off) select * from pg_proc where proname ~ 'abc';
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

explain (costs off) select * from pg_proc where proname ~ '^abc';
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

explain (costs off) select * from pg_proc where proname ~ '^abc$';
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

explain (costs off) select * from pg_proc where proname ~ '^abcd*e';
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

explain (costs off) select * from pg_proc where proname ~ '^abc+d';
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

explain (costs off) select * from pg_proc where proname ~ '^(abc)(def)';
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

explain (costs off) select * from pg_proc where proname ~ '^(abc)$';
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

explain (costs off) select * from pg_proc where proname ~ '^(abc)?d';
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

explain (costs off) select * from pg_proc where proname ~ '^abcd(x|(?=\w\w)q)';
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


-- Test for infinite loop in pullback() (CVE-2007-4772)
select 'a' ~ '($|^)*';
RESULT:
	[(False,)]

-----------
QUERY:


-- These cases expose a bug in the original fix for CVE-2007-4772
select 'a' ~ '(^)+^';
RESULT:
	[(False,)]
