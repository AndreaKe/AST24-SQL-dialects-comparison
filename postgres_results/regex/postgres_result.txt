
-----------
QUERY:
--
-- Regular expression tests
--

-- Don/* REPLACED */''t want to have to double backslashes in regexes
set standard_conforming_strings = on
RESULT:
	postgres: None

-----------
QUERY:
-- Test simple quantified backrefs
select 'bbbbb' ~ '^([bc])\1*$' as t
RESULT:
	postgres: [(True,)]

-----------
QUERY:
select 'ccc' ~ '^([bc])\1*$' as t
RESULT:
	postgres: [(True,)]

-----------
QUERY:
select 'xxx' ~ '^([bc])\1*$' as f
RESULT:
	postgres: [(False,)]

-----------
QUERY:
select 'bbc' ~ '^([bc])\1*$' as f
RESULT:
	postgres: [(False,)]

-----------
QUERY:
select 'b' ~ '^([bc])\1*$' as t
RESULT:
	postgres: [(True,)]

-----------
QUERY:
-- Test quantified backref within a larger expression
select 'abc abc abc' ~ '^(\w+)( \1)+$' as t
RESULT:
	postgres: [(True,)]

-----------
QUERY:
select 'abc abd abc' ~ '^(\w+)( \1)+$' as f
RESULT:
	postgres: [(False,)]

-----------
QUERY:
select 'abc abc abd' ~ '^(\w+)( \1)+$' as f
RESULT:
	postgres: [(False,)]

-----------
QUERY:
select 'abc abc abc' ~ '^(.+)( \1)+$' as t
RESULT:
	postgres: [(True,)]

-----------
QUERY:
select 'abc abd abc' ~ '^(.+)( \1)+$' as f
RESULT:
	postgres: [(False,)]

-----------
QUERY:
select 'abc abc abd' ~ '^(.+)( \1)+$' as f
RESULT:
	postgres: [(False,)]

-----------
QUERY:
-- Test some cases that crashed in 9.2beta1 due to pmatch[] array overrun
select substring('asd TO foo' from ' TO (([a-z0-9._]+|"([^"]+|"")+")+)')
RESULT:
	postgres: [('foo',)]

-----------
QUERY:
select substring('a' from '((a))+')
RESULT:
	postgres: [('a',)]

-----------
QUERY:
select substring('a' from '((a)+)')
RESULT:
	postgres: [('a',)]

-----------
QUERY:
-- Test regexp_match()
select regexp_match('abc', '')
RESULT:
	postgres: [([''],)]

-----------
QUERY:
select regexp_match('abc', 'bc')
RESULT:
	postgres: [(['bc'],)]

-----------
QUERY:
select regexp_match('abc', 'd') is null
RESULT:
	postgres: [(True,)]

-----------
QUERY:
select regexp_match('abc', '(B)(c)', 'i')
RESULT:
	postgres: [(['b', 'c'],)]

-----------
QUERY:
select regexp_match('abc', 'Bd', 'ig')
RESULT:
	postgres: regexp_match() does not support the "global" option
HINT:  Use the regexp_matches function instead.


-----------
QUERY:
-- error

-- Test lookahead constraints
select regexp_matches('ab', 'a(?=b)b*')
RESULT:
	postgres: [(['ab'],)]

-----------
QUERY:
select regexp_matches('a', 'a(?=b)b*')
RESULT:
	postgres: []

-----------
QUERY:
select regexp_matches('abc', 'a(?=b)b*(?=c)c*')
RESULT:
	postgres: [(['abc'],)]

-----------
QUERY:
select regexp_matches('ab', 'a(?=b)b*(?=c)c*')
RESULT:
	postgres: []

-----------
QUERY:
select regexp_matches('ab', 'a(?!b)b*')
RESULT:
	postgres: []

-----------
QUERY:
select regexp_matches('a', 'a(?!b)b*')
RESULT:
	postgres: [(['a'],)]

-----------
QUERY:
select regexp_matches('b', '(?=b)b')
RESULT:
	postgres: [(['b'],)]

-----------
QUERY:
select regexp_matches('a', '(?=b)b')
RESULT:
	postgres: []

-----------
QUERY:
-- Test lookbehind constraints
select regexp_matches('abb', '(?<=a)b*')
RESULT:
	postgres: [(['bb'],)]

-----------
QUERY:
select regexp_matches('a', 'a(?<=a)b*')
RESULT:
	postgres: [(['a'],)]

-----------
QUERY:
select regexp_matches('abc', 'a(?<=a)b*(?<=b)c*')
RESULT:
	postgres: [(['abc'],)]

-----------
QUERY:
select regexp_matches('ab', 'a(?<=a)b*(?<=b)c*')
RESULT:
	postgres: [(['ab'],)]

-----------
QUERY:
select regexp_matches('ab', 'a*(?<!a)b*')
RESULT:
	postgres: [([''],)]

-----------
QUERY:
select regexp_matches('ab', 'a*(?<!a)b+')
RESULT:
	postgres: []

-----------
QUERY:
select regexp_matches('b', 'a*(?<!a)b+')
RESULT:
	postgres: [(['b'],)]

-----------
QUERY:
select regexp_matches('a', 'a(?<!a)b*')
RESULT:
	postgres: []

-----------
QUERY:
select regexp_matches('b', '(?<=b)b')
RESULT:
	postgres: []

-----------
QUERY:
select regexp_matches('foobar', '(?<=f)b+')
RESULT:
	postgres: []

-----------
QUERY:
select regexp_matches('foobar', '(?<=foo)b+')
RESULT:
	postgres: [(['b'],)]

-----------
QUERY:
select regexp_matches('foobar', '(?<=oo)b+')
RESULT:
	postgres: [(['b'],)]

-----------
QUERY:
-- Test optimization of single-chr-or-bracket-expression lookaround constraints
select 'xz' ~ 'x(?=[xy])'
RESULT:
	postgres: [(False,)]

-----------
QUERY:
select 'xy' ~ 'x(?=[xy])'
RESULT:
	postgres: [(True,)]

-----------
QUERY:
select 'xz' ~ 'x(?![xy])'
RESULT:
	postgres: [(True,)]

-----------
QUERY:
select 'xy' ~ 'x(?![xy])'
RESULT:
	postgres: [(False,)]

-----------
QUERY:
select 'x'  ~ 'x(?![xy])'
RESULT:
	postgres: [(True,)]

-----------
QUERY:
select 'xyy' ~ '(?<=[xy])yy+'
RESULT:
	postgres: [(True,)]

-----------
QUERY:
select 'zyy' ~ '(?<=[xy])yy+'
RESULT:
	postgres: [(False,)]

-----------
QUERY:
select 'xyy' ~ '(?<![xy])yy+'
RESULT:
	postgres: [(False,)]

-----------
QUERY:
select 'zyy' ~ '(?<![xy])yy+'
RESULT:
	postgres: [(True,)]

-----------
QUERY:
-- Test conversion of regex patterns to indexable conditions
explain (costs off) select * from pg_proc where proname ~ 'abc'
RESULT:
	postgres: [('Seq Scan on pg_proc',), ("  Filter: (proname ~ 'abc'::text)",)]

-----------
QUERY:
explain (costs off) select * from pg_proc where proname ~ '^abc'
RESULT:
	postgres: [('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), ("  Index Cond: ((proname >= 'abc'::text) AND (proname < 'abd'::text))",), ("  Filter: (proname ~ '^abc'::text)",)]

-----------
QUERY:
explain (costs off) select * from pg_proc where proname ~ '^abc$'
RESULT:
	postgres: [('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), ("  Index Cond: (proname = 'abc'::text)",), ("  Filter: (proname ~ '^abc$'::text)",)]

-----------
QUERY:
explain (costs off) select * from pg_proc where proname ~ '^abcd*e'
RESULT:
	postgres: [('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), ("  Index Cond: ((proname >= 'abc'::text) AND (proname < 'abd'::text))",), ("  Filter: (proname ~ '^abcd*e'::text)",)]

-----------
QUERY:
explain (costs off) select * from pg_proc where proname ~ '^abc+d'
RESULT:
	postgres: [('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), ("  Index Cond: ((proname >= 'abc'::text) AND (proname < 'abd'::text))",), ("  Filter: (proname ~ '^abc+d'::text)",)]

-----------
QUERY:
explain (costs off) select * from pg_proc where proname ~ '^(abc)(def)'
RESULT:
	postgres: [('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), ("  Index Cond: ((proname >= 'abcdef'::text) AND (proname < 'abcdeg'::text))",), ("  Filter: (proname ~ '^(abc)(def)'::text)",)]

-----------
QUERY:
explain (costs off) select * from pg_proc where proname ~ '^(abc)$'
RESULT:
	postgres: [('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), ("  Index Cond: (proname = 'abc'::text)",), ("  Filter: (proname ~ '^(abc)$'::text)",)]

-----------
QUERY:
explain (costs off) select * from pg_proc where proname ~ '^(abc)?d'
RESULT:
	postgres: [('Seq Scan on pg_proc',), ("  Filter: (proname ~ '^(abc)?d'::text)",)]

-----------
QUERY:
explain (costs off) select * from pg_proc where proname ~ '^abcd(x|(?=\w\w)q)'
RESULT:
	postgres: [('Index Scan using pg_proc_proname_args_nsp_index on pg_proc',), ("  Index Cond: ((proname >= 'abcd'::text) AND (proname < 'abce'::text))",), ("  Filter: (proname ~ '^abcd(x|(?=\\w\\w)q)'::text)",)]

-----------
QUERY:
-- Test for infinite loop in pullback() (CVE-2007-4772)
select 'a' ~ '($|^)*'
RESULT:
	postgres: [(True,)]

-----------
QUERY:
-- These cases expose a bug in the original fix for CVE-2007-4772
select 'a' ~ '(^)+^'
RESULT:
	postgres: [(True,)]
