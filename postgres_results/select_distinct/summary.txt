Guest DBMS identified: postgres
-----------
QUERY:
--
-- SELECT_DISTINCT
--

--
-- awk /* REPLACED */ ''{print $3 /* REPLACED */ ,}/* REPLACED */ '' onek.data | sort -n | uniq
--
SELECT DISTINCT two FROM onek ORDER BY 1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- awk /* REPLACED */ ''{print $5 /* REPLACED */ ,}/* REPLACED */ '' onek.data | sort -n | uniq
--
SELECT DISTINCT ten FROM onek ORDER BY 1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- awk /* REPLACED */ ''{print $16 /* REPLACED */ ,}/* REPLACED */ '' onek.data | sort -d | uniq
--
SELECT DISTINCT string4 FROM onek ORDER BY 1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- awk /* REPLACED */ ''{print $3,$16,$5 /* REPLACED */ ,}/* REPLACED */ '' onek.data | sort -d | uniq |
-- sort +0n -1 +1d -2 +2n -3
--
SELECT DISTINCT two, string4, ten
   FROM onek
   ORDER BY two using <, string4 using <, ten using <;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- awk /* REPLACED */ ''{print $2 /* REPLACED */ ,}/* REPLACED */ '' person.data |
-- awk /* REPLACED */ ''{if(NF!=1){print $2 /* REPLACED */ ,}else{print /* REPLACED */ ,}}/* REPLACED */ '' - emp.data |
-- awk /* REPLACED */ ''{if(NF!=1){print $2 /* REPLACED */ ,}else{print /* REPLACED */ ,}}/* REPLACED */ '' - student.data |
-- awk /* REPLACED */ ''BEGIN{FS=/* REPLACED */ ''      /* REPLACED */ '' /* REPLACED */ ,}{if(NF!=1){print $5 /* REPLACED */ ,}else{print /* REPLACED */ ,}}/* REPLACED */ '' - stud_emp.data |
-- sort -n -r | uniq
--
SELECT DISTINCT p.age FROM person* p ORDER BY age using >;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- Check mentioning same column more than once
--

EXPLAIN (VERBOSE, COSTS OFF)
SELECT count(*) FROM
  (SELECT DISTINCT two, four, two FROM tenk1) ss;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT count(*) FROM
  (SELECT DISTINCT two, four, two FROM tenk1) ss;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- Compare results between plans using sorting and plans using hash
-- aggregation. Force spilling in both cases by setting work_mem low.
--

SET work_mem='64kB';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Produce results with sorting.

SET enable_hashagg=FALSE;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SET jit_above_cost=0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


EXPLAIN (costs off)
SELECT DISTINCT g%1000 FROM generate_series(0,9999) g;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


CREATE TABLE distinct_group_1 AS
SELECT DISTINCT g%1000 FROM generate_series(0,9999) g;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SET jit_above_cost TO DEFAULT;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


CREATE TABLE distinct_group_2 AS
SELECT DISTINCT (g%1000)::text FROM generate_series(0,9999) g;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SET enable_seqscan = 0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Check to see we get an incremental sort plan
EXPLAIN (costs off)
SELECT DISTINCT hundred, two FROM tenk1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


RESET enable_seqscan;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SET enable_hashagg=TRUE;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Produce results with hash aggregation.

SET enable_sort=FALSE;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SET jit_above_cost=0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


EXPLAIN (costs off)
SELECT DISTINCT g%1000 FROM generate_series(0,9999) g;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


CREATE TABLE distinct_hash_1 AS
SELECT DISTINCT g%1000 FROM generate_series(0,9999) g;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SET jit_above_cost TO DEFAULT;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


CREATE TABLE distinct_hash_2 AS
SELECT DISTINCT (g%1000)::text FROM generate_series(0,9999) g;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SET enable_sort=TRUE;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SET work_mem TO DEFAULT;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Compare results

(SELECT * FROM distinct_hash_1 EXCEPT SELECT * FROM distinct_group_1)
  UNION ALL
(SELECT * FROM distinct_group_1 EXCEPT SELECT * FROM distinct_hash_1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


(SELECT * FROM distinct_hash_1 EXCEPT SELECT * FROM distinct_group_1)
  UNION ALL
(SELECT * FROM distinct_group_1 EXCEPT SELECT * FROM distinct_hash_1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


DROP TABLE distinct_hash_1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

DROP TABLE distinct_hash_2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

DROP TABLE distinct_group_1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

DROP TABLE distinct_group_2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Test parallel DISTINCT
SET parallel_tuple_cost=0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SET parallel_setup_cost=0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SET min_parallel_table_scan_size=0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SET max_parallel_workers_per_gather=2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Ensure we get a parallel plan
EXPLAIN (costs off)
SELECT DISTINCT four FROM tenk1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Ensure the parallel plan produces the correct results
SELECT DISTINCT four FROM tenk1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


CREATE OR REPLACE FUNCTION distinct_func(a INT) RETURNS INT AS $$
  BEGIN
    RETURN a;
  END;
$$ LANGUAGE plpgsql PARALLEL UNSAFE;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Ensure we don/* REPLACED */ ''t do parallel distinct with a parallel unsafe function
EXPLAIN (COSTS OFF)
SELECT DISTINCT distinct_func(1) FROM tenk1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- make the function parallel safe
CREATE OR REPLACE FUNCTION distinct_func(a INT) RETURNS INT AS $$
  BEGIN
    RETURN a;
  END;
$$ LANGUAGE plpgsql PARALLEL SAFE;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Ensure we do parallel distinct now that the function is parallel safe
EXPLAIN (COSTS OFF)
SELECT DISTINCT distinct_func(1) FROM tenk1;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


RESET max_parallel_workers_per_gather;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

RESET min_parallel_table_scan_size;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

RESET parallel_setup_cost;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

RESET parallel_tuple_cost;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- Test the planner/* REPLACED */ ''s ability to use a LIMIT 1 instead of a Unique node when
-- all of the distinct_pathkeys have been marked as redundant
--

-- Ensure we get a plan with a Limit 1
EXPLAIN (COSTS OFF)
SELECT DISTINCT four FROM tenk1 WHERE four = 0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Ensure the above gives us the correct result
SELECT DISTINCT four FROM tenk1 WHERE four = 0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Ensure we get a plan with a Limit 1
EXPLAIN (COSTS OFF)
SELECT DISTINCT four FROM tenk1 WHERE four = 0 AND two <> 0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Ensure no rows are returned
SELECT DISTINCT four FROM tenk1 WHERE four = 0 AND two <> 0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Ensure we get a plan with a Limit 1 when the SELECT list contains constants
EXPLAIN (COSTS OFF)
SELECT DISTINCT four,1,2,3 FROM tenk1 WHERE four = 0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Ensure we only get 1 row
SELECT DISTINCT four,1,2,3 FROM tenk1 WHERE four = 0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SET parallel_setup_cost=0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SET min_parallel_table_scan_size=0;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SET max_parallel_workers_per_gather=2;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Ensure we get a plan with a Limit 1 in both partial distinct and final
-- distinct
EXPLAIN (COSTS OFF)
SELECT DISTINCT four FROM tenk1 WHERE four = 10;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


RESET max_parallel_workers_per_gather;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

RESET min_parallel_table_scan_size;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

RESET parallel_setup_cost;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- Also, some tests of IS DISTINCT FROM, which doesn/* REPLACED */ ''t quite deserve its
-- very own regression file.
--

CREATE TEMP TABLE disttable (f1 integer);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

INSERT INTO DISTTABLE VALUES(1);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

INSERT INTO DISTTABLE VALUES(2);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

INSERT INTO DISTTABLE VALUES(3);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

INSERT INTO DISTTABLE VALUES(NULL);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- basic cases
SELECT f1, f1 IS DISTINCT FROM 2 as "not 2" FROM disttable;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT f1, f1 IS DISTINCT FROM NULL as "not null" FROM disttable;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT f1, f1 IS DISTINCT FROM f1 as "false" FROM disttable;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT f1, f1 IS DISTINCT FROM f1+1 as "not null" FROM disttable;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- check that optimizer constant-folds it properly
SELECT 1 IS DISTINCT FROM 2 as "yes";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 2 IS DISTINCT FROM 2 as "no";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 2 IS DISTINCT FROM null as "yes";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT null IS DISTINCT FROM null as "no";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- negated form
SELECT 1 IS NOT DISTINCT FROM 2 as "no";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 2 IS NOT DISTINCT FROM 2 as "yes";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 2 IS NOT DISTINCT FROM null as "no";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT null IS NOT DISTINCT FROM null as "yes";
RESULT: [duckdb: SAME, mysql: ERROR]


=========================================
Summary for test case select_distinct/test.sql of postgres
=========================================

=================
Results for duckdb
SAME      :	17 queries	22.37%
DIFFERENT :	0 queries	0.00%
ERROR     :	59 queries	77.63%

=================
Results for mysql
SAME      :	0 queries	0.00%
DIFFERENT :	0 queries	0.00%
ERROR     :	76 queries	100.00%
Guest results are identical to expected results