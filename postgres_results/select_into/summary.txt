Guest DBMS identified: postgres
-----------
QUERY:
--
-- SELECT_INTO
--

SELECT *
   INTO TABLE sitmp1
   FROM onek
   WHERE onek.unique1 < 2
RESULT: ['duckdb: ERROR']

-----------
QUERY:
DROP TABLE sitmp1
RESULT: ['duckdb: ERROR']

-----------
QUERY:
SELECT *
   INTO TABLE sitmp1
   FROM onek2
   WHERE onek2.unique1 < 2
RESULT: ['duckdb: ERROR']

-----------
QUERY:
DROP TABLE sitmp1
RESULT: ['duckdb: ERROR']

-----------
QUERY:
--
-- SELECT INTO and INSERT permission, if owner is not allowed to insert.
--
CREATE SCHEMA selinto_schema
RESULT: ['duckdb: SAME']

-----------
QUERY:
CREATE USER regress_selinto_user
RESULT: ['duckdb: ERROR']

-----------
QUERY:
ALTER DEFAULT PRIVILEGES FOR ROLE regress_selinto_user
	  REVOKE INSERT ON TABLES FROM regress_selinto_user
RESULT: ['duckdb: ERROR']

-----------
QUERY:
GRANT ALL ON SCHEMA selinto_schema TO public
RESULT: ['duckdb: ERROR']

-----------
QUERY:
SET SESSION AUTHORIZATION regress_selinto_user
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- WITH DATA, passes.
CREATE TABLE selinto_schema.tbl_withdata1 (a)
  AS SELECT generate_series(1,3) WITH DATA
RESULT: ['duckdb: ERROR']

-----------
QUERY:
INSERT INTO selinto_schema.tbl_withdata1 VALUES (4)
RESULT: ['duckdb: SAME']

-----------
QUERY:
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE selinto_schema.tbl_withdata2 (a) AS
  SELECT generate_series(1,3) WITH DATA
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- WITH NO DATA, passes.
CREATE TABLE selinto_schema.tbl_nodata1 (a) AS
  SELECT generate_series(1,3) WITH NO DATA
RESULT: ['duckdb: ERROR']

-----------
QUERY:
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE selinto_schema.tbl_nodata2 (a) AS
  SELECT generate_series(1,3) WITH NO DATA
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- EXECUTE and WITH DATA, passes.
PREPARE data_sel AS SELECT generate_series(1,3)
RESULT: ['duckdb: SAME']

-----------
QUERY:
CREATE TABLE selinto_schema.tbl_withdata3 (a) AS
  EXECUTE data_sel WITH DATA
RESULT: ['duckdb: ERROR']

-----------
QUERY:
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE selinto_schema.tbl_withdata4 (a) AS
  EXECUTE data_sel WITH DATA
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- EXECUTE and WITH NO DATA, passes.
CREATE TABLE selinto_schema.tbl_nodata3 (a) AS
  EXECUTE data_sel WITH NO DATA
RESULT: ['duckdb: ERROR']

-----------
QUERY:
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE selinto_schema.tbl_nodata4 (a) AS
  EXECUTE data_sel WITH NO DATA
RESULT: ['duckdb: ERROR']

-----------
QUERY:
RESET SESSION AUTHORIZATION
RESULT: ['duckdb: ERROR']

-----------
QUERY:
ALTER DEFAULT PRIVILEGES FOR ROLE regress_selinto_user
	  GRANT INSERT ON TABLES TO regress_selinto_user
RESULT: ['duckdb: ERROR']

-----------
QUERY:
SET SESSION AUTHORIZATION regress_selinto_user
RESULT: ['duckdb: ERROR']

-----------
QUERY:
RESET SESSION AUTHORIZATION
RESULT: ['duckdb: ERROR']

-----------
QUERY:
DEALLOCATE data_sel
RESULT: ['duckdb: SAME']

-----------
QUERY:
DROP SCHEMA selinto_schema CASCADE
RESULT: ['duckdb: SAME']

-----------
QUERY:
DROP USER regress_selinto_user
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- Tests for WITH NO DATA and column name consistency
CREATE TABLE ctas_base (i int, j int)
RESULT: ['duckdb: SAME']

-----------
QUERY:
INSERT INTO ctas_base VALUES (1, 2)
RESULT: ['duckdb: SAME']

-----------
QUERY:
CREATE TABLE ctas_nodata (ii, jj, kk) AS SELECT i, j FROM ctas_base
RESULT: ['duckdb: SAME']

-----------
QUERY:
-- Error
CREATE TABLE ctas_nodata (ii, jj, kk) AS SELECT i, j FROM ctas_base WITH NO DATA
RESULT: ['duckdb: SAME']

-----------
QUERY:
-- Error
CREATE TABLE ctas_nodata (ii, jj) AS SELECT i, j FROM ctas_base
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- OK
CREATE TABLE ctas_nodata_2 (ii, jj) AS SELECT i, j FROM ctas_base WITH NO DATA
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- OK
CREATE TABLE ctas_nodata_3 (ii) AS SELECT i, j FROM ctas_base
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- OK
CREATE TABLE ctas_nodata_4 (ii) AS SELECT i, j FROM ctas_base WITH NO DATA
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- OK
SELECT * FROM ctas_nodata
RESULT: ['duckdb: ERROR']

-----------
QUERY:
SELECT * FROM ctas_nodata_2
RESULT: ['duckdb: ERROR']

-----------
QUERY:
SELECT * FROM ctas_nodata_3
RESULT: ['duckdb: ERROR']

-----------
QUERY:
SELECT * FROM ctas_nodata_4
RESULT: ['duckdb: ERROR']

-----------
QUERY:
DROP TABLE ctas_base
RESULT: ['duckdb: SAME']

-----------
QUERY:
DROP TABLE ctas_nodata
RESULT: ['duckdb: ERROR']

-----------
QUERY:
DROP TABLE ctas_nodata_2
RESULT: ['duckdb: ERROR']

-----------
QUERY:
DROP TABLE ctas_nodata_3
RESULT: ['duckdb: ERROR']

-----------
QUERY:
DROP TABLE ctas_nodata_4
RESULT: ['duckdb: ERROR']

-----------
QUERY:
--
-- CREATE TABLE AS/SELECT INTO as last command in a SQL function
-- have been known to cause problems
--
CREATE FUNCTION make_table() RETURNS VOID
AS $$
  CREATE TABLE created_table AS SELECT * FROM int8_tbl;
$$ LANGUAGE SQL
RESULT: ['duckdb: ERROR']

-----------
QUERY:
SELECT make_table()
RESULT: ['duckdb: ERROR']

-----------
QUERY:
SELECT * FROM created_table
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- Try EXPLAIN ANALYZE SELECT INTO and EXPLAIN ANALYZE CREATE TABLE AS
-- WITH NO DATA, but hide the outputs since they won/* REPLACED */''t be stable.
DO $$
BEGIN
	EXECUTE 'EXPLAIN ANALYZE SELECT * INTO TABLE easi FROM int8_tbl';
	EXECUTE 'EXPLAIN ANALYZE CREATE TABLE easi2 AS SELECT * FROM int8_tbl WITH NO DATA';
END$$
RESULT: ['duckdb: ERROR']

-----------
QUERY:
DROP TABLE created_table
RESULT: ['duckdb: ERROR']

-----------
QUERY:
DROP TABLE easi, easi2
RESULT: ['duckdb: ERROR']

-----------
QUERY:
--
-- Disallowed uses of SELECT ... INTO.  All should fail
--
DECLARE foo CURSOR FOR SELECT 1 INTO int4_tbl
RESULT: ['duckdb: SAME']

-----------
QUERY:
COPY (SELECT 1 INTO frak UNION SELECT 2) TO 'blob'
RESULT: ['duckdb: ERROR']

-----------
QUERY:
SELECT * FROM (SELECT 1 INTO f) bar
RESULT: ['duckdb: SAME']

-----------
QUERY:
CREATE VIEW foo AS SELECT 1 INTO int4_tbl
RESULT: ['duckdb: ERROR']

-----------
QUERY:
INSERT INTO int4_tbl SELECT 1 INTO f
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- Test CREATE TABLE AS ... IF NOT EXISTS
CREATE TABLE ctas_ine_tbl AS SELECT 1
RESULT: ['duckdb: SAME']

-----------
QUERY:
CREATE TABLE ctas_ine_tbl AS SELECT 1 / 0
RESULT: ['duckdb: SAME']

-----------
QUERY:
-- error
CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS SELECT 1 / 0
RESULT: ['duckdb: SAME']

-----------
QUERY:
-- ok
CREATE TABLE ctas_ine_tbl AS SELECT 1 / 0 WITH NO DATA
RESULT: ['duckdb: SAME']

-----------
QUERY:
-- error
CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS SELECT 1 / 0 WITH NO DATA
RESULT: ['duckdb: SAME']

-----------
QUERY:
-- ok
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE ctas_ine_tbl AS SELECT 1 / 0
RESULT: ['duckdb: SAME']

-----------
QUERY:
-- error
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS SELECT 1 / 0
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- ok
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE ctas_ine_tbl AS SELECT 1 / 0 WITH NO DATA
RESULT: ['duckdb: SAME']

-----------
QUERY:
-- error
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS SELECT 1 / 0 WITH NO DATA
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- ok
PREPARE ctas_ine_query AS SELECT 1 / 0
RESULT: ['duckdb: SAME']

-----------
QUERY:
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE ctas_ine_tbl AS EXECUTE ctas_ine_query
RESULT: ['duckdb: SAME']

-----------
QUERY:
-- error
EXPLAIN (ANALYZE, COSTS OFF, SUMMARY OFF, TIMING OFF)
  CREATE TABLE IF NOT EXISTS ctas_ine_tbl AS EXECUTE ctas_ine_query
RESULT: ['duckdb: ERROR']

-----------
QUERY:
-- ok
DROP TABLE ctas_ine_tbl
RESULT: ['duckdb: SAME']
=========================================
Summary for test case select_into/test.sql of postgres
=========================================

=================
Results for duckdb
SAME: 22 queries, which is 32.84%
DIFFERENT: 0 queries, which is 0.00%
ERROR: 45 queries, which is 67.16%
Guest results are identical to expected results