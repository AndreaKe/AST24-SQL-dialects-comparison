-- JSON()
SELECT JSON()
ProgrammingError: -- JSON()
SELECT JSON()

syntax error at or near ")"
LINE 2: SELECT JSON()
                    ^


SELECT JSON(NULL)
RESULT: 
	[(None,)]

SELECT JSON('{ "a" : 1 } ')
RESULT: 
	[({'a': 1},)]

SELECT JSON('{ "a" : 1 } ' FORMAT JSON)
RESULT: 
	[({'a': 1},)]

SELECT JSON('{ "a" : 1 } ' FORMAT JSON ENCODING UTF8)
ProgrammingError: 
SELECT JSON('{ "a" : 1 } ' FORMAT JSON ENCODING UTF8)

JSON ENCODING clause is only allowed for bytea input type
LINE 2: SELECT JSON('{ "a" : 1 } ' FORMAT JSON ENCODING UTF8)
                                   ^


SELECT JSON('{ "a" : 1 } '::bytea FORMAT JSON ENCODING UTF8)
RESULT: 
	[({'a': 1},)]

SELECT pg_typeof(JSON('{ "a" : 1 } '))
RESULT: 
	[('json',)]


SELECT JSON('   1   '::json)
RESULT: 
	[(1,)]

SELECT JSON('   1   '::jsonb)
RESULT: 
	[(1,)]

SELECT JSON('   1   '::json WITH UNIQUE KEYS)
ProgrammingError: 
SELECT JSON('   1   '::json WITH UNIQUE KEYS)

cannot use non-string types with WITH UNIQUE KEYS clause
LINE 2: SELECT JSON('   1   '::json WITH UNIQUE KEYS)
               ^


SELECT JSON(123)
ProgrammingError: 
SELECT JSON(123)

cannot cast type integer to json
LINE 2: SELECT JSON(123)
                    ^



SELECT JSON('{"a": 1, "a": 2}')
RESULT: 
	[({'a': 2},)]

SELECT JSON('{"a": 1, "a": 2}' WITH UNIQUE KEYS)
ERROR: 
SELECT JSON('{"a": 1, "a": 2}' WITH UNIQUE KEYS)

duplicate JSON object key value


SELECT JSON('{"a": 1, "a": 2}' WITHOUT UNIQUE KEYS)
RESULT: 
	[({'a': 2},)]


EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON('123')
RESULT: 
	[('Result',), ("  Output: JSON('123'::json)",)]

EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON('123' FORMAT JSON)
RESULT: 
	[('Result',), ("  Output: JSON('123'::json)",)]

EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON('123'::bytea FORMAT JSON)
RESULT: 
	[('Result',), ("  Output: JSON('\\x313233'::bytea FORMAT JSON)",)]

EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON('123'::bytea FORMAT JSON ENCODING UTF8)
RESULT: 
	[('Result',), ("  Output: JSON('\\x313233'::bytea FORMAT JSON ENCODING UTF8)",)]

EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON('123' WITH UNIQUE KEYS)
RESULT: 
	[('Result',), ("  Output: JSON('123'::text WITH UNIQUE KEYS)",)]

EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON('123' WITHOUT UNIQUE KEYS)
RESULT: 
	[('Result',), ("  Output: JSON('123'::json)",)]


EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON('123')
RESULT: 
	[('Result',), ("  Output: JSON('123'::json)",)]

SELECT pg_typeof(JSON('123'))
RESULT: 
	[('json',)]


-- JSON_SCALAR()
SELECT JSON_SCALAR()
ProgrammingError: 

-- JSON_SCALAR()
SELECT JSON_SCALAR()

syntax error at or near ")"
LINE 4: SELECT JSON_SCALAR()
                           ^


SELECT JSON_SCALAR(NULL)
RESULT: 
	[(None,)]

SELECT JSON_SCALAR(NULL::int)
RESULT: 
	[(None,)]

SELECT JSON_SCALAR(123)
RESULT: 
	[(123,)]

SELECT JSON_SCALAR(123.45)
RESULT: 
	[(123.45,)]

SELECT JSON_SCALAR(123.45::numeric)
RESULT: 
	[(123.45,)]

SELECT JSON_SCALAR(true)
RESULT: 
	[(True,)]

SELECT JSON_SCALAR(false)
RESULT: 
	[(False,)]

SELECT JSON_SCALAR(' 123.45')
RESULT: 
	[(' 123.45',)]

SELECT JSON_SCALAR('2020-06-07'::date)
RESULT: 
	[('2020-06-07',)]

SELECT JSON_SCALAR('2020-06-07 01:02:03'::timestamp)
RESULT: 
	[('2020-06-07T01:02:03',)]

SELECT JSON_SCALAR('{}'::json)
RESULT: 
	[({},)]

SELECT JSON_SCALAR('{}'::jsonb)
RESULT: 
	[({},)]


EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_SCALAR(123)
RESULT: 
	[('Result',), ('  Output: JSON_SCALAR(123)',)]

EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_SCALAR('123')
RESULT: 
	[('Result',), ("  Output: JSON_SCALAR('123'::text)",)]


-- JSON_SERIALIZE()
SELECT JSON_SERIALIZE()
ProgrammingError: 

-- JSON_SERIALIZE()
SELECT JSON_SERIALIZE()

syntax error at or near ")"
LINE 4: SELECT JSON_SERIALIZE()
                              ^


SELECT JSON_SERIALIZE(NULL)
RESULT: 
	[(None,)]

SELECT JSON_SERIALIZE(JSON('{ "a" : 1 } '))
RESULT: 
	[('{ "a" : 1 } ',)]

SELECT JSON_SERIALIZE('{ "a" : 1 } ')
RESULT: 
	[('{ "a" : 1 } ',)]

SELECT JSON_SERIALIZE('1')
RESULT: 
	[('1',)]

SELECT JSON_SERIALIZE('1' FORMAT JSON)
RESULT: 
	[('1',)]

SELECT JSON_SERIALIZE('{ "a" : 1 } ' RETURNING bytea)
RESULT: 
	[(<memory at 0x73c231cc5a80>,)]

SELECT JSON_SERIALIZE('{ "a" : 1 } ' RETURNING varchar)
RESULT: 
	[('{ "a" : 1 } ',)]

SELECT pg_typeof(JSON_SERIALIZE(NULL))
RESULT: 
	[('text',)]


-- only string types or bytea allowed
SELECT JSON_SERIALIZE('{ "a" : 1 } ' RETURNING jsonb)
ProgrammingError: 

-- only string types or bytea allowed
SELECT JSON_SERIALIZE('{ "a" : 1 } ' RETURNING jsonb)

cannot use RETURNING type jsonb in JSON_SERIALIZE()
HINT:  Try returning a string type or bytea.




EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_SERIALIZE('{}')
RESULT: 
	[('Result',), ("  Output: JSON_SERIALIZE('{}'::json RETURNING text)",)]

EXPLAIN (VERBOSE, COSTS OFF) SELECT JSON_SERIALIZE('{}' RETURNING bytea)
RESULT: 
	[('Result',), ("  Output: JSON_SERIALIZE('{}'::json RETURNING bytea)",)]


-- JSON_OBJECT()
SELECT JSON_OBJECT()
RESULT: 
	[({},)]

SELECT JSON_OBJECT(RETURNING json)
RESULT: 
	[({},)]

SELECT JSON_OBJECT(RETURNING json FORMAT JSON)
RESULT: 
	[({},)]

SELECT JSON_OBJECT(RETURNING jsonb)
RESULT: 
	[({},)]

SELECT JSON_OBJECT(RETURNING jsonb FORMAT JSON)
RESULT: 
	[({},)]

SELECT JSON_OBJECT(RETURNING text)
RESULT: 
	[('{}',)]

SELECT JSON_OBJECT(RETURNING text FORMAT JSON)
RESULT: 
	[('{}',)]

SELECT JSON_OBJECT(RETURNING text FORMAT JSON ENCODING UTF8)
ERROR: 
SELECT JSON_OBJECT(RETURNING text FORMAT JSON ENCODING UTF8)

cannot set JSON encoding for non-bytea output types
LINE 2: SELECT JSON_OBJECT(RETURNING text FORMAT JSON ENCODING UTF8)
                                          ^


SELECT JSON_OBJECT(RETURNING text FORMAT JSON ENCODING INVALID_ENCODING)
ERROR: 
SELECT JSON_OBJECT(RETURNING text FORMAT JSON ENCODING INVALID_ENCODING)

unrecognized JSON encoding: invalid_encoding


SELECT JSON_OBJECT(RETURNING bytea)
RESULT: 
	[(<memory at 0x73c231cc5a80>,)]

SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON)
RESULT: 
	[(<memory at 0x73c231cc5a80>,)]

SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF8)
RESULT: 
	[(<memory at 0x73c231cc5a80>,)]

SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF16)
ERROR: 
SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF16)

unsupported JSON encoding
LINE 2: SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF1...
                                           ^
HINT:  Only UTF8 JSON encoding is supported.


SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF32)
ERROR: 
SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF32)

unsupported JSON encoding
LINE 2: SELECT JSON_OBJECT(RETURNING bytea FORMAT JSON ENCODING UTF3...
                                           ^
HINT:  Only UTF8 JSON encoding is supported.



SELECT JSON_OBJECT('foo': NULL::int FORMAT JSON)
ProgrammingError: 

SELECT JSON_OBJECT('foo': NULL::int FORMAT JSON)

cannot use non-string types with explicit FORMAT JSON clause
LINE 3: SELECT JSON_OBJECT('foo': NULL::int FORMAT JSON)
                                            ^


SELECT JSON_OBJECT('foo': NULL::int FORMAT JSON ENCODING UTF8)
ProgrammingError: 
SELECT JSON_OBJECT('foo': NULL::int FORMAT JSON ENCODING UTF8)

JSON ENCODING clause is only allowed for bytea input type
LINE 2: SELECT JSON_OBJECT('foo': NULL::int FORMAT JSON ENCODING UTF...
                                            ^


SELECT JSON_OBJECT('foo': NULL::json FORMAT JSON)
RESULT: 
	[({'foo': None},)]

SELECT JSON_OBJECT('foo': NULL::json FORMAT JSON ENCODING UTF8)
ProgrammingError: 
SELECT JSON_OBJECT('foo': NULL::json FORMAT JSON ENCODING UTF8)

JSON ENCODING clause is only allowed for bytea input type
LINE 2: SELECT JSON_OBJECT('foo': NULL::json FORMAT JSON ENCODING UT...
                                             ^


SELECT JSON_OBJECT('foo': NULL::jsonb FORMAT JSON)
RESULT: 
	[({'foo': None},)]

SELECT JSON_OBJECT('foo': NULL::jsonb FORMAT JSON ENCODING UTF8)
ProgrammingError: 
SELECT JSON_OBJECT('foo': NULL::jsonb FORMAT JSON ENCODING UTF8)

JSON ENCODING clause is only allowed for bytea input type
LINE 2: SELECT JSON_OBJECT('foo': NULL::jsonb FORMAT JSON ENCODING U...
                                              ^



SELECT JSON_OBJECT(NULL: 1)
ERROR: 

SELECT JSON_OBJECT(NULL: 1)

null value not allowed for object key


SELECT JSON_OBJECT('a': 2 + 3)
RESULT: 
	[({'a': 5},)]

SELECT JSON_OBJECT('a' VALUE 2 + 3)
RESULT: 
	[({'a': 5},)]

--SELECT JSON_OBJECT(KEY ''a'' VALUE 2 + 3) /* REPLACED */,
SELECT JSON_OBJECT('a' || 2: 1)
RESULT: 
	[({'a2': 1},)]

SELECT JSON_OBJECT(('a' || 2) VALUE 1)
RESULT: 
	[({'a2': 1},)]

--SELECT JSON_OBJECT(''a'' || 2 VALUE 1) /* REPLACED */,
--SELECT JSON_OBJECT(KEY ''a'' || 2 VALUE 1) /* REPLACED */,
SELECT JSON_OBJECT('a': 2::text)
RESULT: 
	[({'a': '2'},)]

SELECT JSON_OBJECT('a' VALUE 2::text)
RESULT: 
	[({'a': '2'},)]

--SELECT JSON_OBJECT(KEY ''a'' VALUE 2::text) /* REPLACED */,
SELECT JSON_OBJECT(1::text: 2)
RESULT: 
	[({'1': 2},)]

SELECT JSON_OBJECT((1::text) VALUE 2)
RESULT: 
	[({'1': 2},)]

--SELECT JSON_OBJECT(1::text VALUE 2) /* REPLACED */,
--SELECT JSON_OBJECT(KEY 1::text VALUE 2) /* REPLACED */,
SELECT JSON_OBJECT(json '[1]': 123)
ERROR: 
--SELECT JSON_OBJECT(1::text VALUE 2) /* REPLACED */,
--SELECT JSON_OBJECT(KEY 1::text VALUE 2) /* REPLACED */,
SELECT JSON_OBJECT(json '[1]': 123)

key value must be scalar, not array, composite, or json


SELECT JSON_OBJECT(ARRAY[1,2,3]: 'aaa')
ERROR: 
SELECT JSON_OBJECT(ARRAY[1,2,3]: 'aaa')

key value must be scalar, not array, composite, or json



SELECT JSON_OBJECT(
	'a': '123',
	1.23: 123,
	'c': json '[ 1,true,{ } ]',
	'd': jsonb '{ "x" : 123.45 }'
)
RESULT: 
	[({'a': '123', 'c': [1, True, {}], 'd': {'x': 123.45}, '1.23': 123},)]


SELECT JSON_OBJECT(
	'a': '123',
	1.23: 123,
	'c': json '[ 1,true,{ } ]',
	'd': jsonb '{ "x" : 123.45 }'
	RETURNING jsonb
)
RESULT: 
	[({'a': '123', 'c': [1, True, {}], 'd': {'x': 123.45}, '1.23': 123},)]


/*
SELECT JSON_OBJECT(
	'a': '123',
	KEY 1.23 VALUE 123,
	'c' VALUE json '[1, true, {}]'
)
ProgrammingError: 

/*
SELECT JSON_OBJECT(
	'a': '123',
	KEY 1.23 VALUE 123,
	'c' VALUE json '[1, true, {}]'
)

unterminated /* comment at or near "/*
SELECT JSON_OBJECT(
	'a': '123',
	KEY 1.23 VALUE 123,
	'c' VALUE json '[1, true, {}]'
)
"
LINE 3: /*
        ^


*/

SELECT JSON_OBJECT('a': '123', 'b': JSON_OBJECT('a': 111, 'b': 'aaa'))
ProgrammingError: 
*/

SELECT JSON_OBJECT('a': '123', 'b': JSON_OBJECT('a': 111, 'b': 'aaa'))

syntax error at or near "*/"
LINE 2: */
        ^


SELECT JSON_OBJECT('a': '123', 'b': JSON_OBJECT('a': 111, 'b': 'aaa' RETURNING jsonb))
RESULT: 
	[({'a': '123', 'b': {'a': 111, 'b': 'aaa'}},)]


SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text))
RESULT: 
	[({'a': '{"b" : 1}'},)]

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING text) FORMAT JSON)
RESULT: 
	[({'a': {'b': 1}},)]

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea))
RESULT: 
	[({'a': '\\x7b226222203a20317d'},)]

SELECT JSON_OBJECT('a': JSON_OBJECT('b': 1 RETURNING bytea) FORMAT JSON)
RESULT: 
	[({'a': {'b': 1}},)]


SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2)
RESULT: 
	[({'a': '1', 'b': None, 'c': 2},)]

SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2 NULL ON NULL)
RESULT: 
	[({'a': '1', 'b': None, 'c': 2},)]

SELECT JSON_OBJECT('a': '1', 'b': NULL, 'c': 2 ABSENT ON NULL)
RESULT: 
	[({'a': '1', 'c': 2},)]


SELECT JSON_OBJECT(1: 1, '1': NULL WITH UNIQUE)
ERROR: 

SELECT JSON_OBJECT(1: 1, '1': NULL WITH UNIQUE)

duplicate JSON object key value: "1"


SELECT JSON_OBJECT(1: 1, '1': NULL ABSENT ON NULL WITH UNIQUE)
ERROR: 
SELECT JSON_OBJECT(1: 1, '1': NULL ABSENT ON NULL WITH UNIQUE)

duplicate JSON object key value: "1"


SELECT JSON_OBJECT(1: 1, '1': NULL NULL ON NULL WITH UNIQUE RETURNING jsonb)
ERROR: 
SELECT JSON_OBJECT(1: 1, '1': NULL NULL ON NULL WITH UNIQUE RETURNING jsonb)

duplicate JSON object key value


SELECT JSON_OBJECT(1: 1, '1': NULL ABSENT ON NULL WITH UNIQUE RETURNING jsonb)
ERROR: 
SELECT JSON_OBJECT(1: 1, '1': NULL ABSENT ON NULL WITH UNIQUE RETURNING jsonb)

duplicate JSON object key value



SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 NULL ON NULL WITH UNIQUE)
ERROR: 

SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 NULL ON NULL WITH UNIQUE)

duplicate JSON object key value: "1"


SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITH UNIQUE)
ERROR: 
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITH UNIQUE)

duplicate JSON object key value: "1"


SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITHOUT UNIQUE)
RESULT: 
	[({'1': 1},)]

SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITH UNIQUE RETURNING jsonb)
ERROR: 
SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITH UNIQUE RETURNING jsonb)

duplicate JSON object key value


SELECT JSON_OBJECT(1: 1, '2': NULL, '1': 1 ABSENT ON NULL WITHOUT UNIQUE RETURNING jsonb)
RESULT: 
	[({'1': 1},)]

SELECT JSON_OBJECT(1: 1, '2': NULL, '3': 1, 4: NULL, '5': 'a' ABSENT ON NULL WITH UNIQUE RETURNING jsonb)
RESULT: 
	[({'1': 1, '3': 1, '5': 'a'},)]



-- JSON_ARRAY()
SELECT JSON_ARRAY()
RESULT: 
	[([],)]

SELECT JSON_ARRAY(RETURNING json)
RESULT: 
	[([],)]

SELECT JSON_ARRAY(RETURNING json FORMAT JSON)
RESULT: 
	[([],)]

SELECT JSON_ARRAY(RETURNING jsonb)
RESULT: 
	[([],)]

SELECT JSON_ARRAY(RETURNING jsonb FORMAT JSON)
RESULT: 
	[([],)]

SELECT JSON_ARRAY(RETURNING text)
RESULT: 
	[('[]',)]

SELECT JSON_ARRAY(RETURNING text FORMAT JSON)
RESULT: 
	[('[]',)]

SELECT JSON_ARRAY(RETURNING text FORMAT JSON ENCODING UTF8)
ERROR: 
SELECT JSON_ARRAY(RETURNING text FORMAT JSON ENCODING UTF8)

cannot set JSON encoding for non-bytea output types
LINE 2: SELECT JSON_ARRAY(RETURNING text FORMAT JSON ENCODING UTF8)
                                         ^


SELECT JSON_ARRAY(RETURNING text FORMAT JSON ENCODING INVALID_ENCODING)
ERROR: 
SELECT JSON_ARRAY(RETURNING text FORMAT JSON ENCODING INVALID_ENCODING)

unrecognized JSON encoding: invalid_encoding


SELECT JSON_ARRAY(RETURNING bytea)
RESULT: 
	[(<memory at 0x73c231cc5a80>,)]

SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON)
RESULT: 
	[(<memory at 0x73c231cc5a80>,)]

SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF8)
RESULT: 
	[(<memory at 0x73c231cc5a80>,)]

SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF16)
ERROR: 
SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF16)

unsupported JSON encoding
LINE 2: SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF16...
                                          ^
HINT:  Only UTF8 JSON encoding is supported.


SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF32)
ERROR: 
SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF32)

unsupported JSON encoding
LINE 2: SELECT JSON_ARRAY(RETURNING bytea FORMAT JSON ENCODING UTF32...
                                          ^
HINT:  Only UTF8 JSON encoding is supported.



SELECT JSON_ARRAY('aaa', 111, true, array[1,2,3], NULL, json '{"a": [1]}', jsonb '["a",3]')
RESULT: 
	[(['aaa', 111, True, [1, 2, 3], {'a': [1]}, ['a', 3]],)]


SELECT JSON_ARRAY('a',  NULL, 'b' NULL   ON NULL)
RESULT: 
	[(['a', None, 'b'],)]

SELECT JSON_ARRAY('a',  NULL, 'b' ABSENT ON NULL)
RESULT: 
	[(['a', 'b'],)]

SELECT JSON_ARRAY(NULL, NULL, 'b' ABSENT ON NULL)
RESULT: 
	[(['b'],)]

SELECT JSON_ARRAY('a',  NULL, 'b' NULL   ON NULL RETURNING jsonb)
RESULT: 
	[(['a', None, 'b'],)]

SELECT JSON_ARRAY('a',  NULL, 'b' ABSENT ON NULL RETURNING jsonb)
RESULT: 
	[(['a', 'b'],)]

SELECT JSON_ARRAY(NULL, NULL, 'b' ABSENT ON NULL RETURNING jsonb)
RESULT: 
	[(['b'],)]


SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' RETURNING text))
RESULT: 
	[(['["{ \\"a\\" : 123 }"]'],)]

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING text))
RESULT: 
	[(['[{ "a" : 123 }]'],)]

SELECT JSON_ARRAY(JSON_ARRAY('{ "a" : 123 }' FORMAT JSON RETURNING text) FORMAT JSON)
RESULT: 
	[([[{'a': 123}]],)]


SELECT JSON_ARRAY(SELECT i FROM (VALUES (1), (2), (NULL), (4)) foo(i))
RESULT: 
	[([1, 2, 4],)]

SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i))
RESULT: 
	[([[1, 2], [3, 4]],)]

SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), ('{1,2}'), (NULL), (NULL), ('{3,4}'), (NULL)) foo(i) RETURNING jsonb)
RESULT: 
	[([[1, 2], [3, 4]],)]

--SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), (''{1,2}''), (NULL), (NULL), (''{3,4}''), (NULL)) foo(i) NULL ON NULL) /* REPLACED */,
--SELECT JSON_ARRAY(SELECT i FROM (VALUES (NULL::int[]), (''{1,2}''), (NULL), (NULL), (''{3,4}''), (NULL)) foo(i) NULL ON NULL RETURNING jsonb) /* REPLACED */,
SELECT JSON_ARRAY(SELECT i FROM (VALUES (3), (1), (NULL), (2)) foo(i) ORDER BY i)
RESULT: 
	[([1, 2, 3],)]

-- Should fail
SELECT JSON_ARRAY(SELECT FROM (VALUES (1)) foo(i))
ProgrammingError: 
-- Should fail
SELECT JSON_ARRAY(SELECT FROM (VALUES (1)) foo(i))

subquery must return only one column
LINE 3: SELECT JSON_ARRAY(SELECT FROM (VALUES (1)) foo(i))
               ^


SELECT JSON_ARRAY(SELECT i, i FROM (VALUES (1)) foo(i))
ProgrammingError: 
SELECT JSON_ARRAY(SELECT i, i FROM (VALUES (1)) foo(i))

subquery must return only one column
LINE 2: SELECT JSON_ARRAY(SELECT i, i FROM (VALUES (1)) foo(i))
               ^


SELECT JSON_ARRAY(SELECT * FROM (VALUES (1, 2)) foo(i, j))
ProgrammingError: 
SELECT JSON_ARRAY(SELECT * FROM (VALUES (1, 2)) foo(i, j))

subquery must return only one column
LINE 2: SELECT JSON_ARRAY(SELECT * FROM (VALUES (1, 2)) foo(i, j))
               ^



-- JSON_ARRAYAGG()
SELECT	JSON_ARRAYAGG(i) IS NULL,
		JSON_ARRAYAGG(i RETURNING jsonb) IS NULL
FROM generate_series(1, 0) i
RESULT: 
	[(True, True)]


SELECT	JSON_ARRAYAGG(i),
		JSON_ARRAYAGG(i RETURNING jsonb)
FROM generate_series(1, 5) i
RESULT: 
	[([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])]


SELECT JSON_ARRAYAGG(i ORDER BY i DESC)
FROM generate_series(1, 5) i
RESULT: 
	[([5, 4, 3, 2, 1],)]


SELECT JSON_ARRAYAGG(i::text::json)
FROM generate_series(1, 5) i
RESULT: 
	[([1, 2, 3, 4, 5],)]


SELECT JSON_ARRAYAGG(JSON_ARRAY(i, i + 1 RETURNING text) FORMAT JSON)
FROM generate_series(1, 5) i
RESULT: 
	[([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]],)]


SELECT	JSON_ARRAYAGG(NULL),
		JSON_ARRAYAGG(NULL RETURNING jsonb)
FROM generate_series(1, 5)
RESULT: 
	[([], [])]


SELECT	JSON_ARRAYAGG(NULL NULL ON NULL),
		JSON_ARRAYAGG(NULL NULL ON NULL RETURNING jsonb)
FROM generate_series(1, 5)
RESULT: 
	[([None, None, None, None, None], [None, None, None, None, None])]


\x
SELECT
	JSON_ARRAYAGG(bar) as no_options,
	JSON_ARRAYAGG(bar RETURNING jsonb) as returning_jsonb,
	JSON_ARRAYAGG(bar ABSENT ON NULL) as absent_on_null,
	JSON_ARRAYAGG(bar ABSENT ON NULL RETURNING jsonb) as absentonnull_returning_jsonb,
	JSON_ARRAYAGG(bar NULL ON NULL) as null_on_null,
	JSON_ARRAYAGG(bar NULL ON NULL RETURNING jsonb) as nullonnull_returning_jsonb,
	JSON_ARRAYAGG(foo) as row_no_options,
	JSON_ARRAYAGG(foo RETURNING jsonb) as row_returning_jsonb,
	JSON_ARRAYAGG(foo ORDER BY bar) FILTER (WHERE bar > 2) as row_filtered_agg,
	JSON_ARRAYAGG(foo ORDER BY bar RETURNING jsonb) FILTER (WHERE bar > 2) as row_filtered_agg_returning_jsonb
FROM
	(VALUES (NULL), (3), (1), (NULL), (NULL), (5), (2), (4), (NULL)) foo(bar)
ProgrammingError: 

\x
SELECT
	JSON_ARRAYAGG(bar) as no_options,
	JSON_ARRAYAGG(bar RETURNING jsonb) as returning_jsonb,
	JSON_ARRAYAGG(bar ABSENT ON NULL) as absent_on_null,
	JSON_ARRAYAGG(bar ABSENT ON NULL RETURNING jsonb) as absentonnull_returning_jsonb,
	JSON_ARRAYAGG(bar NULL ON NULL) as null_on_null,
	JSON_ARRAYAGG(bar NULL ON NULL RETURNING jsonb) as nullonnull_returning_jsonb,
	JSON_ARRAYAGG(foo) as row_no_options,
	JSON_ARRAYAGG(foo RETURNING jsonb) as row_returning_jsonb,
	JSON_ARRAYAGG(foo ORDER BY bar) FILTER (WHERE bar > 2) as row_filtered_agg,
	JSON_ARRAYAGG(foo ORDER BY bar RETURNING jsonb) FILTER (WHERE bar > 2) as row_filtered_agg_returning_jsonb
FROM
	(VALUES (NULL), (3), (1), (NULL), (NULL), (5), (2), (4), (NULL)) foo(bar)

syntax error at or near "\"
LINE 3: \x
        ^


\x

SELECT
	bar, JSON_ARRAYAGG(bar) FILTER (WHERE bar > 2) OVER (PARTITION BY foo.bar % 2)
FROM
	(VALUES (NULL), (3), (1), (NULL), (NULL), (5), (2), (4), (NULL), (5), (4)) foo(bar)
ProgrammingError: 
\x

SELECT
	bar, JSON_ARRAYAGG(bar) FILTER (WHERE bar > 2) OVER (PARTITION BY foo.bar % 2)
FROM
	(VALUES (NULL), (3), (1), (NULL), (NULL), (5), (2), (4), (NULL), (5), (4)) foo(bar)

syntax error at or near "\"
LINE 2: \x
        ^



-- JSON_OBJECTAGG()
SELECT	JSON_OBJECTAGG('key': 1) IS NULL,
		JSON_OBJECTAGG('key': 1 RETURNING jsonb) IS NULL
WHERE FALSE
RESULT: 
	[(True, True)]


SELECT JSON_OBJECTAGG(NULL: 1)
ERROR: 

SELECT JSON_OBJECTAGG(NULL: 1)

null value not allowed for object key



SELECT JSON_OBJECTAGG(NULL: 1 RETURNING jsonb)
ERROR: 

SELECT JSON_OBJECTAGG(NULL: 1 RETURNING jsonb)

field name must not be null



SELECT
	JSON_OBJECTAGG(i: i),
--	JSON_OBJECTAGG(i VALUE i),
--	JSON_OBJECTAGG(KEY i VALUE i),
	JSON_OBJECTAGG(i: i RETURNING jsonb)
FROM
	generate_series(1, 5) i
RESULT: 
	[({'1': 1, '2': 2, '3': 3, '4': 4, '5': 5}, {'1': 1, '2': 2, '3': 3, '4': 4, '5': 5})]


SELECT
	JSON_OBJECTAGG(k: v),
	JSON_OBJECTAGG(k: v NULL ON NULL),
	JSON_OBJECTAGG(k: v ABSENT ON NULL),
	JSON_OBJECTAGG(k: v RETURNING jsonb),
	JSON_OBJECTAGG(k: v NULL ON NULL RETURNING jsonb),
	JSON_OBJECTAGG(k: v ABSENT ON NULL RETURNING jsonb)
FROM
	(VALUES (1, 1), (1, NULL), (2, NULL), (3, 3)) foo(k, v)
RESULT: 
	[({'1': None, '2': None, '3': 3}, {'1': None, '2': None, '3': 3}, {'1': 1, '3': 3}, {'1': None, '2': None, '3': 3}, {'1': None, '2': None, '3': 3}, {'1': 1, '3': 3})]


SELECT JSON_OBJECTAGG(k: v WITH UNIQUE KEYS)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v)
ERROR: 

SELECT JSON_OBJECTAGG(k: v WITH UNIQUE KEYS)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v)

duplicate JSON object key value: "1"



SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v)
ERROR: 

SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v)

duplicate JSON object key value: "1"



SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS)
FROM (VALUES (1, 1), (0, NULL), (3, NULL), (2, 2), (4, NULL)) foo(k, v)
RESULT: 
	[({'1': 1, '2': 2},)]


SELECT JSON_OBJECTAGG(k: v WITH UNIQUE KEYS RETURNING jsonb)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v)
ERROR: 

SELECT JSON_OBJECTAGG(k: v WITH UNIQUE KEYS RETURNING jsonb)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v)

duplicate JSON object key value



SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS RETURNING jsonb)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v)
ERROR: 

SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS RETURNING jsonb)
FROM (VALUES (1, 1), (1, NULL), (2, 2)) foo(k, v)

duplicate JSON object key value



SELECT JSON_OBJECTAGG(k: v ABSENT ON NULL WITH UNIQUE KEYS RETURNING jsonb)
FROM (VALUES (1, 1), (0, NULL),(4, null), (5, null),(6, null),(2, 2)) foo(k, v)
RESULT: 
	[({'1': 1, '2': 2},)]


-- Test JSON_OBJECT deparsing
EXPLAIN (VERBOSE, COSTS OFF)
SELECT JSON_OBJECT('foo' : '1' FORMAT JSON, 'bar' : 'baz' RETURNING json)
RESULT: 
	[('Result',), ("  Output: JSON_OBJECT('foo' : '1'::json, 'bar' : 'baz'::text RETURNING json)",)]


CREATE VIEW json_object_view AS
SELECT JSON_OBJECT('foo' : '1' FORMAT JSON, 'bar' : 'baz' RETURNING json)


\sv json_object_view

DROP VIEW json_object_view
ProgrammingError: 

\sv json_object_view

DROP VIEW json_object_view

syntax error at or near "\"
LINE 3: \sv json_object_view
        ^



SELECT to_json(a) AS a, JSON_OBJECTAGG(k : v WITH UNIQUE KEYS) OVER (ORDER BY k)
FROM (VALUES (1,1), (2,2)) a(k,v)
RESULT: 
	[({'k': 1, 'v': 1}, {'1': 1}), ({'k': 2, 'v': 2}, {'1': 1, '2': 2})]


SELECT to_json(a) AS a, JSON_OBJECTAGG(k : v WITH UNIQUE KEYS) OVER (ORDER BY k)
FROM (VALUES (1,1), (1,2), (2,2)) a(k,v)
ERROR: 

SELECT to_json(a) AS a, JSON_OBJECTAGG(k : v WITH UNIQUE KEYS) OVER (ORDER BY k)
FROM (VALUES (1,1), (1,2), (2,2)) a(k,v)

duplicate JSON object key value: "1"



SELECT to_json(a) AS a, JSON_OBJECTAGG(k : v ABSENT ON NULL WITH UNIQUE KEYS)
   OVER (ORDER BY k)
FROM (VALUES (1,1), (1,null), (2,2)) a(k,v)
ERROR: 

SELECT to_json(a) AS a, JSON_OBJECTAGG(k : v ABSENT ON NULL WITH UNIQUE KEYS)
   OVER (ORDER BY k)
FROM (VALUES (1,1), (1,null), (2,2)) a(k,v)

duplicate JSON object key value: "1"



SELECT to_json(a) AS a, JSON_OBJECTAGG(k : v ABSENT ON NULL)
OVER (ORDER BY k)
FROM (VALUES (1,1), (1,null), (2,2)) a(k,v)
RESULT: 
	[({'k': 1, 'v': 1}, {'1': 1}), ({'k': 1, 'v': None}, {'1': 1}), ({'k': 2, 'v': 2}, {'1': 1, '2': 2})]


SELECT to_json(a) AS a, JSON_OBJECTAGG(k : v ABSENT ON NULL)
OVER (ORDER BY k RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
FROM (VALUES (1,1), (1,null), (2,2)) a(k,v)
RESULT: 
	[({'k': 1, 'v': 1}, {'1': 1, '2': 2}), ({'k': 1, 'v': None}, {'1': 1, '2': 2}), ({'k': 2, 'v': 2}, {'1': 1, '2': 2})]


-- Test JSON_ARRAY deparsing
EXPLAIN (VERBOSE, COSTS OFF)
SELECT JSON_ARRAY('1' FORMAT JSON, 2 RETURNING json)
RESULT: 
	[('Result',), ("  Output: JSON_ARRAY('1'::json, 2 RETURNING json)",)]


CREATE VIEW json_array_view AS
SELECT JSON_ARRAY('1' FORMAT JSON, 2 RETURNING json)


\sv json_array_view

DROP VIEW json_array_view
ProgrammingError: 

\sv json_array_view

DROP VIEW json_array_view

syntax error at or near "\"
LINE 3: \sv json_array_view
        ^



-- Test JSON_OBJECTAGG deparsing
EXPLAIN (VERBOSE, COSTS OFF)
SELECT JSON_OBJECTAGG(i: ('111' || i)::bytea FORMAT JSON WITH UNIQUE RETURNING text) FILTER (WHERE i > 3)
FROM generate_series(1,5) i
RESULT: 
	[('Aggregate',), ("  Output: JSON_OBJECTAGG(i : (('111'::text || (i)::text))::bytea FORMAT JSON WITH UNIQUE KEYS RETURNING text) FILTER (WHERE (i > 3))",), ('  ->  Function Scan on pg_catalog.generate_series i',), ('        Output: i',), ('        Function Call: generate_series(1, 5)',)]


EXPLAIN (VERBOSE, COSTS OFF)
SELECT JSON_OBJECTAGG(i: ('111' || i)::bytea FORMAT JSON WITH UNIQUE RETURNING text) OVER (PARTITION BY i % 2)
FROM generate_series(1,5) i
RESULT: 
	[('WindowAgg',), ("  Output: JSON_OBJECTAGG(i : (('111'::text || (i)::text))::bytea FORMAT JSON WITH UNIQUE KEYS RETURNING text) OVER (?), ((i % 2))",), ('  ->  Sort',), ('        Output: ((i % 2)), i',), ('        Sort Key: ((i.i % 2))',), ('        ->  Function Scan on pg_catalog.generate_series i',), ('              Output: (i % 2), i',), ('              Function Call: generate_series(1, 5)',)]


CREATE VIEW json_objectagg_view AS
SELECT JSON_OBJECTAGG(i: ('111' || i)::bytea FORMAT JSON WITH UNIQUE RETURNING text) FILTER (WHERE i > 3)
FROM generate_series(1,5) i


\sv json_objectagg_view

DROP VIEW json_objectagg_view
ProgrammingError: 

\sv json_objectagg_view

DROP VIEW json_objectagg_view

syntax error at or near "\"
LINE 3: \sv json_objectagg_view
        ^



-- Test JSON_ARRAYAGG deparsing
EXPLAIN (VERBOSE, COSTS OFF)
SELECT JSON_ARRAYAGG(('111' || i)::bytea FORMAT JSON NULL ON NULL RETURNING text) FILTER (WHERE i > 3)
FROM generate_series(1,5) i
RESULT: 
	[('Aggregate',), ("  Output: JSON_ARRAYAGG((('111'::text || (i)::text))::bytea FORMAT JSON NULL ON NULL RETURNING text) FILTER (WHERE (i > 3))",), ('  ->  Function Scan on pg_catalog.generate_series i',), ('        Output: i',), ('        Function Call: generate_series(1, 5)',)]


EXPLAIN (VERBOSE, COSTS OFF)
SELECT JSON_ARRAYAGG(('111' || i)::bytea FORMAT JSON NULL ON NULL RETURNING text) OVER (PARTITION BY i % 2)
FROM generate_series(1,5) i
RESULT: 
	[('WindowAgg',), ("  Output: JSON_ARRAYAGG((('111'::text || (i)::text))::bytea FORMAT JSON NULL ON NULL RETURNING text) OVER (?), ((i % 2))",), ('  ->  Sort',), ('        Output: ((i % 2)), i',), ('        Sort Key: ((i.i % 2))',), ('        ->  Function Scan on pg_catalog.generate_series i',), ('              Output: (i % 2), i',), ('              Function Call: generate_series(1, 5)',)]


CREATE VIEW json_arrayagg_view AS
SELECT JSON_ARRAYAGG(('111' || i)::bytea FORMAT JSON NULL ON NULL RETURNING text) FILTER (WHERE i > 3)
FROM generate_series(1,5) i


\sv json_arrayagg_view

DROP VIEW json_arrayagg_view
ProgrammingError: 

\sv json_arrayagg_view

DROP VIEW json_arrayagg_view

syntax error at or near "\"
LINE 3: \sv json_arrayagg_view
        ^



-- Test JSON_ARRAY(subquery) deparsing
EXPLAIN (VERBOSE, COSTS OFF)
SELECT JSON_ARRAY(SELECT i FROM (VALUES (1), (2), (NULL), (4)) foo(i) RETURNING jsonb)
RESULT: 
	[('Result',), ('  Output: (InitPlan 1).col1',), ('  InitPlan 1',), ('    ->  Aggregate',), ('          Output: JSON_ARRAYAGG("*VALUES*".column1 RETURNING jsonb)',), ('          ->  Values Scan on "*VALUES*"',), ('                Output: "*VALUES*".column1',)]


CREATE VIEW json_array_subquery_view AS
SELECT JSON_ARRAY(SELECT i FROM (VALUES (1), (2), (NULL), (4)) foo(i) RETURNING jsonb)


\sv json_array_subquery_view

DROP VIEW json_array_subquery_view
ProgrammingError: 

\sv json_array_subquery_view

DROP VIEW json_array_subquery_view

syntax error at or near "\"
LINE 3: \sv json_array_subquery_view
        ^



-- IS JSON predicate
SELECT NULL IS JSON
RESULT: 
	[(None,)]

SELECT NULL IS NOT JSON
RESULT: 
	[(None,)]

SELECT NULL::json IS JSON
RESULT: 
	[(None,)]

SELECT NULL::jsonb IS JSON
RESULT: 
	[(None,)]

SELECT NULL::text IS JSON
RESULT: 
	[(None,)]

SELECT NULL::bytea IS JSON
RESULT: 
	[(None,)]

SELECT NULL::int IS JSON
ProgrammingError: 
SELECT NULL::int IS JSON

cannot use type integer in IS JSON predicate



SELECT '' IS JSON
RESULT: 
	[(False,)]


SELECT bytea '\x00' IS JSON
ERROR: 

SELECT bytea '\x00' IS JSON

invalid byte sequence for encoding "UTF8": 0x00



CREATE TABLE test_is_json (js text)


INSERT INTO test_is_json VALUES
 (NULL),
 (''),
 ('123'),
 ('"aaa "'),
 ('true'),
 ('null'),
 ('[]'),
 ('[1, "2", {}]'),
 ('{}'),
 ('{ "a": 1, "b": null }'),
 ('{ "a": 1, "a": null }'),
 ('{ "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }'),
 ('{ "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] }'),
 ('aaa'),
 ('{a:1}'),
 ('["a",]')


SELECT
	js,
	js IS JSON "IS JSON",
	js IS NOT JSON "IS NOT JSON",
	js IS JSON VALUE "IS VALUE",
	js IS JSON OBJECT "IS OBJECT",
	js IS JSON ARRAY "IS ARRAY",
	js IS JSON SCALAR "IS SCALAR",
	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE"
FROM
	test_is_json
RESULT: 
	[(None, None, None, None, None, None, None, None, None), ('', False, True, False, False, False, False, False, False), ('123', True, False, True, False, False, True, True, True), ('"aaa "', True, False, True, False, False, True, True, True), ('true', True, False, True, False, False, True, True, True), ('null', True, False, True, False, False, True, True, True), ('[]', True, False, True, False, True, False, True, True), ('[1, "2", {}]', True, False, True, False, True, False, True, True), ('{}', True, False, True, True, False, False, True, True), ('{ "a": 1, "b": null }', True, False, True, True, False, False, True, True), ('{ "a": 1, "a": null }', True, False, True, True, False, False, True, False), ('{ "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }', True, False, True, True, False, False, True, True), ('{ "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] }', True, False, True, True, False, False, True, False), ('aaa', False, True, False, False, False, False, False, False), ('{a:1}', False, True, False, False, False, False, False, False), ('["a",]', False, True, False, False, False, False, False, False)]


SELECT
	js,
	js IS JSON "IS JSON",
	js IS NOT JSON "IS NOT JSON",
	js IS JSON VALUE "IS VALUE",
	js IS JSON OBJECT "IS OBJECT",
	js IS JSON ARRAY "IS ARRAY",
	js IS JSON SCALAR "IS SCALAR",
	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE"
FROM
	(SELECT js::json FROM test_is_json WHERE js IS JSON) foo(js)
RESULT: 
	[(123, True, False, True, False, False, True, True, True), ('aaa ', True, False, True, False, False, True, True, True), (True, True, False, True, False, False, True, True, True), (None, True, False, True, False, False, True, True, True), ([], True, False, True, False, True, False, True, True), ([1, '2', {}], True, False, True, False, True, False, True, True), ({}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': None}, True, False, True, True, False, False, True, True), ({'a': None}, True, False, True, True, False, False, True, False), ({'a': 1, 'b': [{'a': 1}, {'a': 2}]}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': [{'a': 2, 'b': 0}]}, True, False, True, True, False, False, True, False)]


SELECT
	js0,
	js IS JSON "IS JSON",
	js IS NOT JSON "IS NOT JSON",
	js IS JSON VALUE "IS VALUE",
	js IS JSON OBJECT "IS OBJECT",
	js IS JSON ARRAY "IS ARRAY",
	js IS JSON SCALAR "IS SCALAR",
	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE"
FROM
	(SELECT js, js::bytea FROM test_is_json WHERE js IS JSON) foo(js0, js)
RESULT: 
	[('123', True, False, True, False, False, True, True, True), ('"aaa "', True, False, True, False, False, True, True, True), ('true', True, False, True, False, False, True, True, True), ('null', True, False, True, False, False, True, True, True), ('[]', True, False, True, False, True, False, True, True), ('[1, "2", {}]', True, False, True, False, True, False, True, True), ('{}', True, False, True, True, False, False, True, True), ('{ "a": 1, "b": null }', True, False, True, True, False, False, True, True), ('{ "a": 1, "a": null }', True, False, True, True, False, False, True, False), ('{ "a": 1, "b": [{ "a": 1 }, { "a": 2 }] }', True, False, True, True, False, False, True, True), ('{ "a": 1, "b": [{ "a": 1, "b": 0, "a": 2 }] }', True, False, True, True, False, False, True, False)]


SELECT
	js,
	js IS JSON "IS JSON",
	js IS NOT JSON "IS NOT JSON",
	js IS JSON VALUE "IS VALUE",
	js IS JSON OBJECT "IS OBJECT",
	js IS JSON ARRAY "IS ARRAY",
	js IS JSON SCALAR "IS SCALAR",
	js IS JSON WITHOUT UNIQUE KEYS "WITHOUT UNIQUE",
	js IS JSON WITH UNIQUE KEYS "WITH UNIQUE"
FROM
	(SELECT js::jsonb FROM test_is_json WHERE js IS JSON) foo(js)
RESULT: 
	[(123, True, False, True, False, False, True, True, True), ('aaa ', True, False, True, False, False, True, True, True), (True, True, False, True, False, False, True, True, True), (None, True, False, True, False, False, True, True, True), ([], True, False, True, False, True, False, True, True), ([1, '2', {}], True, False, True, False, True, False, True, True), ({}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': None}, True, False, True, True, False, False, True, True), ({'a': None}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': [{'a': 1}, {'a': 2}]}, True, False, True, True, False, False, True, True), ({'a': 1, 'b': [{'a': 2, 'b': 0}]}, True, False, True, True, False, False, True, True)]


-- Test IS JSON deparsing
EXPLAIN (VERBOSE, COSTS OFF)
SELECT '1' IS JSON AS "any", ('1' || i) IS JSON SCALAR AS "scalar", '[]' IS NOT JSON ARRAY AS "array", '{}' IS JSON OBJECT WITH UNIQUE AS "object" FROM generate_series(1, 3) i
RESULT: 
	[('Function Scan on pg_catalog.generate_series i',), ("  Output: ('1'::text IS JSON), (('1'::text || (i)::text) IS JSON SCALAR), (NOT ('[]'::text IS JSON ARRAY)), ('{}'::text IS JSON OBJECT WITH UNIQUE KEYS)",), ('  Function Call: generate_series(1, 3)',)]


CREATE VIEW is_json_view AS
SELECT '1' IS JSON AS "any", ('1' || i) IS JSON SCALAR AS "scalar", '[]' IS NOT JSON ARRAY AS "array", '{}' IS JSON OBJECT WITH UNIQUE AS "object" FROM generate_series(1, 3) i


\sv is_json_view

DROP VIEW is_json_view
ProgrammingError: 

\sv is_json_view

DROP VIEW is_json_view

syntax error at or near "\"
LINE 3: \sv is_json_view
        ^



