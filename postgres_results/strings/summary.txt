Guest DBMS identified: postgres
-----------
QUERY:
--
-- STRINGS
-- Test various data entry syntaxes.
--

-- SQL string continuation syntax
-- E021-03 character string literals
SELECT 'first line'
' - next line'
	' - third line'
	AS "Three lines to one";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- illegal string continuation syntax
SELECT 'first line'
' - next line' /* this comment is not allowed here */
' - third line'
	AS "Illegal comment within continuation";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- Unicode escapes
SET standard_conforming_strings TO on;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT U&'d\0061t\+000061' AS U&"d\0061t\+000061";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT U&'d!0061t\+000061' UESCAPE '!' AS U&"d*0061t\+000061" UESCAPE '*';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT U&'a\\b' AS "a\b";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT U&' \' UESCAPE '!' AS "tricky";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT 'tricky' AS U&"\" UESCAPE '!';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT U&'wrong: \061';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT U&'wrong: \+0061';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT U&'wrong: +0061' UESCAPE +;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT U&'wrong: +0061' UESCAPE '+';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT U&'wrong: \db99';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT U&'wrong: \db99xy';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT U&'wrong: \db99\\';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT U&'wrong: \db99\0061';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT U&'wrong: \+00db99\+000061';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT U&'wrong: \+2FFFFF';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- while we/* REPLACED */ ''re here, check the same cases in E-style literals
SELECT E'd\u0061t\U00000061' AS "data";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT E'a\\b' AS "a\b";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT E'wrong: \u061';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT E'wrong: \U0061';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT E'wrong: \udb99';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT E'wrong: \udb99xy';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT E'wrong: \udb99\\';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT E'wrong: \udb99\u0061';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT E'wrong: \U0000db99\U00000061';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT E'wrong: \U002FFFFF';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SET standard_conforming_strings TO off;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT U&'d\0061t\+000061' AS U&"d\0061t\+000061";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT U&'d!0061t\+000061' UESCAPE '!' AS U&"d*0061t\+000061" UESCAPE '*';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT U&' \' UESCAPE '!' AS "tricky";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'tricky' AS U&"\" UESCAPE '!';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT U&'wrong: \061';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT U&'wrong: \+0061';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT U&'wrong: +0061' UESCAPE '+';
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


RESET standard_conforming_strings;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- bytea
SET bytea_output TO hex;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT E'\\xDeAdBeE'::bytea;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT E'\\xDeAdBeEx'::bytea;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT E'De\\678dBeEf'::bytea;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SET bytea_output TO escape;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Test non-error-throwing API too
SELECT pg_input_is_valid(E'\\xDeAdBeE', 'bytea');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info(E'\\xDeAdBeE', 'bytea');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info(E'\\xDeAdBeEx', 'bytea');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info(E'foo\\99bar', 'bytea');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- test conversions between various string types
-- E021-10 implicit casting among the character data types
--

SELECT CAST(f1 AS text) AS "text(char)" FROM CHAR_TBL;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


SELECT CAST(f1 AS text) AS "text(varchar)" FROM VARCHAR_TBL;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


SELECT CAST(name 'namefield' AS text) AS "text(name)";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- since this is an explicit cast, it should truncate w/o error:
SELECT CAST(f1 AS char(10)) AS "char(text)" FROM TEXT_TBL;
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:

-- note: implicit-cast case is tested in char.sql

SELECT CAST(f1 AS char(20)) AS "char(text)" FROM TEXT_TBL;
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


SELECT CAST(f1 AS char(10)) AS "char(varchar)" FROM VARCHAR_TBL;
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


SELECT CAST(name 'namefield' AS char(10)) AS "char(name)";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT CAST(f1 AS varchar) AS "varchar(text)" FROM TEXT_TBL;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT CAST(f1 AS varchar) AS "varchar(char)" FROM CHAR_TBL;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


SELECT CAST(name 'namefield' AS varchar) AS "varchar(name)";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- test SQL string functions
-- E### and T### are feature reference numbers from SQL99
--

-- E021-09 trim function
SELECT TRIM(BOTH FROM '  bunch o blanks  ') = 'bunch o blanks' AS "bunch o blanks";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT TRIM(LEADING FROM '  bunch o blanks  ') = 'bunch o blanks  ' AS "bunch o blanks  ";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT TRIM(TRAILING FROM '  bunch o blanks  ') = '  bunch o blanks' AS "  bunch o blanks";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT TRIM(BOTH 'x' FROM 'xxxxxsome Xsxxxxx') = 'some Xs' AS "some Xs";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- E021-06 substring expression
SELECT SUBSTRING('1234567890' FROM 3) = '34567890' AS "34567890";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT SUBSTRING('1234567890' FROM 4 FOR 3) = '456' AS "456";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- test overflow cases
SELECT SUBSTRING('string' FROM 2 FOR 2147483646) AS "tring";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT SUBSTRING('string' FROM -10 FOR 2147483646) AS "string";
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:

SELECT SUBSTRING('string' FROM -10 FOR -2147483646) AS "error";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- T581 regular expression substring (with SQL/* REPLACED */ ''s bizarre regexp syntax)
SELECT SUBSTRING('abcdefg' SIMILAR 'a#"(b_d)#"%' ESCAPE '#') AS "bcd";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- obsolete SQL99 syntax
SELECT SUBSTRING('abcdefg' FROM 'a#"(b_d)#"%' FOR '#') AS "bcd";
RESULT: [duckdb: ERROR, mysql: DIFFERENT]

-----------
QUERY:


-- No match should return NULL
SELECT SUBSTRING('abcdefg' SIMILAR '#"(b_d)#"%' ESCAPE '#') IS NULL AS "True";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Null inputs should return NULL
SELECT SUBSTRING('abcdefg' SIMILAR '%' ESCAPE NULL) IS NULL AS "True";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT SUBSTRING(NULL SIMILAR '%' ESCAPE '#') IS NULL AS "True";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT SUBSTRING('abcdefg' SIMILAR NULL ESCAPE '#') IS NULL AS "True";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- The first and last parts should act non-greedy
SELECT SUBSTRING('abcdefg' SIMILAR 'a#"%#"g' ESCAPE '#') AS "bcdef";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT SUBSTRING('abcdefg' SIMILAR 'a*#"%#"g*' ESCAPE '#') AS "abcdefg";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Vertical bar in any part affects only that part
SELECT SUBSTRING('abcdefg' SIMILAR 'a|b#"%#"g' ESCAPE '#') AS "bcdef";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT SUBSTRING('abcdefg' SIMILAR 'a#"%#"x|g' ESCAPE '#') AS "bcdef";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT SUBSTRING('abcdefg' SIMILAR 'a#"%|ab#"g' ESCAPE '#') AS "bcdef";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- Can/* REPLACED */ ''t have more than two part separators
SELECT SUBSTRING('abcdefg' SIMILAR 'a*#"%#"g*#"x' ESCAPE '#') AS "error";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Postgres extension: with 0 or 1 separator, assume parts 1 and 3 are empty
SELECT SUBSTRING('abcdefg' SIMILAR 'a#"%g' ESCAPE '#') AS "bcdefg";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT SUBSTRING('abcdefg' SIMILAR 'a%g' ESCAPE '#') AS "abcdefg";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- substring() with just two arguments is not allowed by SQL spec /* REPLACED */ ,
-- we accept it, but we interpret the pattern as a POSIX regexp not SQL
SELECT SUBSTRING('abcdefg' FROM 'c.e') AS "cde";
RESULT: [duckdb: ERROR, mysql: DIFFERENT]

-----------
QUERY:


-- With a parenthesized subexpression, return only what matches the subexpr
SELECT SUBSTRING('abcdefg' FROM 'b(.*)f') AS "cde";
RESULT: [duckdb: ERROR, mysql: DIFFERENT]

-----------
QUERY:

-- Check case where we have a match, but not a subexpression match
SELECT SUBSTRING('foo' FROM 'foo(bar)?') IS NULL AS t;
RESULT: [duckdb: ERROR, mysql: DIFFERENT]

-----------
QUERY:


-- Check behavior of SIMILAR TO, which uses largely the same regexp variant
SELECT 'abcdefg' SIMILAR TO '_bcd%' AS true;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

SELECT 'abcdefg' SIMILAR TO 'bcd%' AS false;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 'abcdefg' SIMILAR TO '_bcd#%' ESCAPE '#' AS false;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT 'abcd%' SIMILAR TO '_bcd#%' ESCAPE '#' AS true;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- Postgres uses /* REPLACED */ ''\/* REPLACED */ '' as the default escape character, which is not per spec
SELECT 'abcdefg' SIMILAR TO '_bcd\%' AS false;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

-- and an empty string to mean /* REPLACED */ ''no escape/* REPLACED */ '', which is also not per spec
SELECT 'abcd\efg' SIMILAR TO '_bcd\%' ESCAPE '' AS true;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- these behaviors are per spec, though:
SELECT 'abcdefg' SIMILAR TO '_bcd%' ESCAPE NULL AS null;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

SELECT 'abcdefg' SIMILAR TO '_bcd#%' ESCAPE '##' AS error;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- Test backslash escapes in regexp_replace/* REPLACED */ ''s replacement string
SELECT regexp_replace('1112223333', E'(\\d{3})(\\d{3})(\\d{4})', E'(\\1) \\2-\\3');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT regexp_replace('foobarrbazz', E'(.)\\1', E'X\\&Y', 'g');
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

SELECT regexp_replace('foobarrbazz', E'(.)\\1', E'X\\\\Y', 'g');
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

-- not an error, though perhaps it should be:
SELECT regexp_replace('foobarrbazz', E'(.)\\1', E'X\\Y\\1Z\\');
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


SELECT regexp_replace('AAA   BBB   CCC   ', E'\\s+', ' ', 'g');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT regexp_replace('AAA', '^|$', 'Z', 'g');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT regexp_replace('AAA aaa', 'A+', 'Z', 'gi');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

-- invalid regexp option
SELECT regexp_replace('AAA aaa', 'A+', 'Z', 'z');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- extended regexp_replace tests
SELECT regexp_replace('A PostgreSQL function', 'A|e|i|o|u', 'X', 1);
RESULT: [duckdb: ERROR, mysql: DIFFERENT]

-----------
QUERY:

SELECT regexp_replace('A PostgreSQL function', 'A|e|i|o|u', 'X', 1, 2);
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 0, 'i');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 1, 'i');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 2, 'i');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 3, 'i');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 9, 'i');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_replace('A PostgreSQL function', 'A|e|i|o|u', 'X', 7, 0, 'i');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

-- /* REPLACED */ ''g/* REPLACED */ '' flag should be ignored when N is specified
SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, 1, 'g');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- errors
SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', -1, 0, 'i');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', 1, -1, 'i');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

-- erroneous invocation of non-extended form
SELECT regexp_replace('A PostgreSQL function', 'a|e|i|o|u', 'X', '1');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


--  regexp_count tests
SELECT regexp_count('123123123123123', '(12)3');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_count('123123123123', '123', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_count('123123123123', '123', 3);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_count('123123123123', '123', 33);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_count('ABCABCABCABC', 'Abc', 1, '');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_count('ABCABCABCABC', 'Abc', 1, 'i');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- errors
SELECT regexp_count('123123123123', '123', 0);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT regexp_count('123123123123', '123', -3);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- regexp_like tests
SELECT regexp_like('Steven', '^Ste(v|ph)en$');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_like('a'||CHR(10)||'d', 'a.d', 'n');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_like('a'||CHR(10)||'d', 'a.d', 's');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_like('abc', ' a . c ', 'x');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_like('abc', 'a.c', 'g');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- error

-- regexp_instr tests
SELECT regexp_instr('abcdefghi', 'd.f');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_instr('abcdefghi', 'd.q');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_instr('abcabcabc', 'a.c');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_instr('abcabcabc', 'a.c', 2);
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_instr('abcabcabc', 'a.c', 1, 3);
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_instr('abcabcabc', 'a.c', 1, 4);
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_instr('abcabcabc', 'A.C', 1, 2, 0, 'i');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 0, 'i', 0);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 0, 'i', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 0, 'i', 2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 0, 'i', 3);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 0, 'i', 4);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 0, 'i', 5);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 1, 'i', 0);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 1, 'i', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 1, 'i', 2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 1, 'i', 3);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 1, 'i', 4);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_instr('1234567890', '(123)(4(56)(78))', 1, 1, 1, 'i', 5);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- Check case where we have a match, but not a subexpression match
SELECT regexp_instr('foo', 'foo(bar)?', 1, 1, 0, '', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- errors
SELECT regexp_instr('abcabcabc', 'a.c', 0, 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT regexp_instr('abcabcabc', 'a.c', 1, 0);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT regexp_instr('abcabcabc', 'a.c', 1, 1, -1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT regexp_instr('abcabcabc', 'a.c', 1, 1, 2);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT regexp_instr('abcabcabc', 'a.c', 1, 1, 0, 'g');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT regexp_instr('abcabcabc', 'a.c', 1, 1, 0, '', -1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- regexp_substr tests
SELECT regexp_substr('abcdefghi', 'd.f');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_substr('abcdefghi', 'd.q') IS NULL AS t;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_substr('abcabcabc', 'a.c');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_substr('abcabcabc', 'a.c', 2);
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_substr('abcabcabc', 'a.c', 1, 3);
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_substr('abcabcabc', 'a.c', 1, 4) IS NULL AS t;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_substr('abcabcabc', 'A.C', 1, 2, 'i');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

SELECT regexp_substr('1234567890', '(123)(4(56)(78))', 1, 1, 'i', 0);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_substr('1234567890', '(123)(4(56)(78))', 1, 1, 'i', 1);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_substr('1234567890', '(123)(4(56)(78))', 1, 1, 'i', 2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_substr('1234567890', '(123)(4(56)(78))', 1, 1, 'i', 3);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_substr('1234567890', '(123)(4(56)(78))', 1, 1, 'i', 4);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_substr('1234567890', '(123)(4(56)(78))', 1, 1, 'i', 5) IS NULL AS t;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- Check case where we have a match, but not a subexpression match
SELECT regexp_substr('foo', 'foo(bar)?', 1, 1, '', 1) IS NULL AS t;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- errors
SELECT regexp_substr('abcabcabc', 'a.c', 0, 1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT regexp_substr('abcabcabc', 'a.c', 1, 0);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT regexp_substr('abcabcabc', 'a.c', 1, 1, 'g');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT regexp_substr('abcabcabc', 'a.c', 1, 1, '', -1);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- set so we can tell NULL from empty string
-- \pset null /* REPLACED */ ''\\N/* REPLACED */ ''

-- return all matches from regexp
SELECT regexp_matches('foobarbequebaz', $re$(bar)(beque)$re$);
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


-- test case insensitive
SELECT regexp_matches('foObARbEqUEbAz', $re$(bar)(beque)$re$, 'i');
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


-- global option - more than one match
SELECT regexp_matches('foobarbequebazilbarfbonk', $re$(b[^b]+)(b[^b]+)$re$, 'g');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- empty capture group (matched empty string)
SELECT regexp_matches('foobarbequebaz', $re$(bar)(.*)(beque)$re$);
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

-- no match
SELECT regexp_matches('foobarbequebaz', $re$(bar)(.+)(beque)$re$);
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

-- optional capture group did not match, null entry in array
SELECT regexp_matches('foobarbequebaz', $re$(bar)(.+)?(beque)$re$);
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


-- no capture groups
SELECT regexp_matches('foobarbequebaz', $re$barbeque$re$);
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


-- start/end-of-line matches are of zero length
SELECT regexp_matches('foo' || chr(10) || 'bar' || chr(10) || 'bequq' || chr(10) || 'baz', '^', 'mg');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_matches('foo' || chr(10) || 'bar' || chr(10) || 'bequq' || chr(10) || 'baz', '$', 'mg');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_matches('1' || chr(10) || '2' || chr(10) || '3' || chr(10) || '4' || chr(10), '^.?', 'mg');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_matches(chr(10) || '1' || chr(10) || '2' || chr(10) || '3' || chr(10) || '4' || chr(10), '.?$', 'mg');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_matches(chr(10) || '1' || chr(10) || '2' || chr(10) || '3' || chr(10) || '4', '.?$', 'mg');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- give me errors
SELECT regexp_matches('foobarbequebaz', $re$(bar)(beque)$re$, 'gz');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT regexp_matches('foobarbequebaz', $re$(barbeque$re$);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT regexp_matches('foobarbequebaz', $re$(bar)(beque){2,1}$re$);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- split string on regexp
SELECT foo, length(foo) FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', $re$\s+$re$) AS foo;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', $re$\s+$re$);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT foo, length(foo) FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', $re$\s*$re$) AS foo;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', $re$\s*$re$);
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

SELECT foo, length(foo) FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', '') AS foo;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', '');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

-- case insensitive
SELECT foo, length(foo) FROM regexp_split_to_table('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'i') AS foo;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_split_to_array('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'i');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

-- no match of pattern
SELECT foo, length(foo) FROM regexp_split_to_table('the quick brown fox jumps over the lazy dog', 'nomatch') AS foo;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT regexp_split_to_array('the quick brown fox jumps over the lazy dog', 'nomatch');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

-- some corner cases
SELECT regexp_split_to_array('123456','1');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT regexp_split_to_array('123456','6');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT regexp_split_to_array('123456','.');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT regexp_split_to_array('123456','');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT regexp_split_to_array('123456','(?:)');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT regexp_split_to_array('1','');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

-- errors
SELECT foo, length(foo) FROM regexp_split_to_table('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'zippy') AS foo;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT regexp_split_to_array('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'iz');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- global option meaningless for regexp_split
SELECT foo, length(foo) FROM regexp_split_to_table('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'g') AS foo;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT regexp_split_to_array('thE QUick bROWn FOx jUMPs ovEr The lazy dOG', 'e', 'g');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- change NULL-display back
-- \pset null /* REPLACED */ ''/* REPLACED */ ''

-- E021-11 position expression
SELECT POSITION('4' IN '1234567890') = '4' AS "4";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT POSITION('5' IN '1234567890') = '5' AS "5";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- T312 character overlay function
SELECT OVERLAY('abcdef' PLACING '45' FROM 4) AS "abc45f";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT OVERLAY('yabadoo' PLACING 'daba' FROM 5) AS "yabadaba";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT OVERLAY('yabadoo' PLACING 'daba' FROM 5 FOR 0) AS "yabadabadoo";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT OVERLAY('babosa' PLACING 'ubb' FROM 2 FOR 4) AS "bubba";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- test LIKE
-- Be sure to form every test as a LIKE/NOT LIKE pair.
--

-- simplest examples
-- E061-04 like predicate
SELECT 'hawkeye' LIKE 'h%' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'hawkeye' NOT LIKE 'h%' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'hawkeye' LIKE 'H%' AS "false";
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:

SELECT 'hawkeye' NOT LIKE 'H%' AS "true";
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:


SELECT 'hawkeye' LIKE 'indio%' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'hawkeye' NOT LIKE 'indio%' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'hawkeye' LIKE 'h%eye' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'hawkeye' NOT LIKE 'h%eye' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'indio' LIKE '_ndio' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'indio' NOT LIKE '_ndio' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'indio' LIKE 'in__o' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'indio' NOT LIKE 'in__o' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'indio' LIKE 'in_o' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'indio' NOT LIKE 'in_o' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'abc'::name LIKE '_b_' AS "true";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT 'abc'::name NOT LIKE '_b_' AS "false";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT 'abc'::bytea LIKE '_b_'::bytea AS "true";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT 'abc'::bytea NOT LIKE '_b_'::bytea AS "false";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- unused escape character
SELECT 'hawkeye' LIKE 'h%' ESCAPE '#' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'hawkeye' NOT LIKE 'h%' ESCAPE '#' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'indio' LIKE 'ind_o' ESCAPE '$' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'indio' NOT LIKE 'ind_o' ESCAPE '$' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


-- escape character
-- E061-05 like predicate with escape clause
SELECT 'h%' LIKE 'h#%' ESCAPE '#' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'h%' NOT LIKE 'h#%' ESCAPE '#' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'h%wkeye' LIKE 'h#%' ESCAPE '#' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'h%wkeye' NOT LIKE 'h#%' ESCAPE '#' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'h%wkeye' LIKE 'h#%%' ESCAPE '#' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'h%wkeye' NOT LIKE 'h#%%' ESCAPE '#' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'h%awkeye' LIKE 'h#%a%k%e' ESCAPE '#' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'h%awkeye' NOT LIKE 'h#%a%k%e' ESCAPE '#' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'indio' LIKE '_ndio' ESCAPE '$' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'indio' NOT LIKE '_ndio' ESCAPE '$' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'i_dio' LIKE 'i$_d_o' ESCAPE '$' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'i_dio' NOT LIKE 'i$_d_o' ESCAPE '$' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'i_dio' LIKE 'i$_nd_o' ESCAPE '$' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'i_dio' NOT LIKE 'i$_nd_o' ESCAPE '$' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'i_dio' LIKE 'i$_d%o' ESCAPE '$' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'i_dio' NOT LIKE 'i$_d%o' ESCAPE '$' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'a_c'::bytea LIKE 'a$__'::bytea ESCAPE '$'::bytea AS "true";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT 'a_c'::bytea NOT LIKE 'a$__'::bytea ESCAPE '$'::bytea AS "false";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- escape character same as pattern character
SELECT 'maca' LIKE 'm%aca' ESCAPE '%' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'maca' NOT LIKE 'm%aca' ESCAPE '%' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'ma%a' LIKE 'm%a%%a' ESCAPE '%' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'ma%a' NOT LIKE 'm%a%%a' ESCAPE '%' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'bear' LIKE 'b_ear' ESCAPE '_' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'bear' NOT LIKE 'b_ear' ESCAPE '_' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'be_r' LIKE 'b_e__r' ESCAPE '_' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'be_r' NOT LIKE 'b_e__r' ESCAPE '_' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'be_r' LIKE '__e__r' ESCAPE '_' AS "false";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'be_r' NOT LIKE '__e__r' ESCAPE '_' AS "true";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:



--
-- test ILIKE (case-insensitive LIKE)
-- Be sure to form every test as an ILIKE/NOT ILIKE pair.
--

SELECT 'hawkeye' ILIKE 'h%' AS "true";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 'hawkeye' NOT ILIKE 'h%' AS "false";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT 'hawkeye' ILIKE 'H%' AS "true";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 'hawkeye' NOT ILIKE 'H%' AS "false";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT 'hawkeye' ILIKE 'H%Eye' AS "true";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 'hawkeye' NOT ILIKE 'H%Eye' AS "false";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT 'Hawkeye' ILIKE 'h%' AS "true";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT 'Hawkeye' NOT ILIKE 'h%' AS "false";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT 'ABC'::name ILIKE '_b_' AS "true";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT 'ABC'::name NOT ILIKE '_b_' AS "false";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- test %/_ combination cases, cf bugs #4821 and #5478
--

SELECT 'foo' LIKE '_%' as t, 'f' LIKE '_%' as t, '' LIKE '_%' as f;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'foo' LIKE '%_' as t, 'f' LIKE '%_' as t, '' LIKE '%_' as f;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'foo' LIKE '__%' as t, 'foo' LIKE '___%' as t, 'foo' LIKE '____%' as f;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT 'foo' LIKE '%__' as t, 'foo' LIKE '%___' as t, 'foo' LIKE '%____' as f;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT 'jack' LIKE '%____%' AS t;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:



--
-- basic tests of LIKE with indexes
--

CREATE TABLE texttest (a text PRIMARY KEY, b int);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT * FROM texttest WHERE a LIKE '%1%';
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


CREATE TABLE byteatest (a bytea PRIMARY KEY, b int);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT * FROM byteatest WHERE a LIKE '%1%';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


DROP TABLE texttest, byteatest;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:



--
-- test implicit type conversion
--

-- E021-07 character concatenation
SELECT 'unknown' || ' and unknown' AS "Concat unknown types";
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:


SELECT text 'text' || ' and unknown' AS "Concat text to unknown type";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT char(20) 'characters' || ' and text' AS "Concat char to unknown type";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT text 'text' || char(20) ' and characters' AS "Concat text to char";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT text 'text' || varchar ' and varchar' AS "Concat text to varchar";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


--
-- test substr with toasted text values
--
CREATE TABLE toasttest(f1 text);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


insert into toasttest values(repeat('1234567890',10000));
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

insert into toasttest values(repeat('1234567890',10000));
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


--
-- Ensure that some values are uncompressed, to test the faster substring
-- operation used in that case
--
alter table toasttest alter column f1 set storage external;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into toasttest values(repeat('1234567890',10000));
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

insert into toasttest values(repeat('1234567890',10000));
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- If the starting position is zero or less, then return from the start of the string
-- adjusting the length to be consistent with the /* REPLACED */ ''negative start/* REPLACED */ '' per SQL.
SELECT substr(f1, -1, 5) from toasttest;
RESULT: [duckdb: DIFFERENT, mysql: DIFFERENT]

-----------
QUERY:


-- If the length is less than zero, an ERROR is thrown.
SELECT substr(f1, 5, -1) from toasttest;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- If no third argument (length) is provided, the length to the end of the
-- string is assumed.
SELECT substr(f1, 99995) from toasttest;
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:


-- If start plus length is > string length, the result is truncated to
-- string length
SELECT substr(f1, 99995, 10) from toasttest;
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:


TRUNCATE TABLE toasttest;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO toasttest values (repeat('1234567890',300));
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO toasttest values (repeat('1234567890',300));
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO toasttest values (repeat('1234567890',300));
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO toasttest values (repeat('1234567890',300));
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- expect >0 blocks
SELECT pg_relation_size(reltoastrelid) = 0 AS is_empty
  FROM pg_class where relname = 'toasttest';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


TRUNCATE TABLE toasttest;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

ALTER TABLE toasttest set (toast_tuple_target = 4080);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

INSERT INTO toasttest values (repeat('1234567890',300));
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO toasttest values (repeat('1234567890',300));
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO toasttest values (repeat('1234567890',300));
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

INSERT INTO toasttest values (repeat('1234567890',300));
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

-- expect 0 blocks
SELECT pg_relation_size(reltoastrelid) = 0 AS is_empty
  FROM pg_class where relname = 'toasttest';
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


DROP TABLE toasttest;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


--
-- test substr with toasted bytea values
--
CREATE TABLE toasttest(f1 bytea);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


insert into toasttest values(decode(repeat('1234567890',10000),'escape'));
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into toasttest values(decode(repeat('1234567890',10000),'escape'));
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- Ensure that some values are uncompressed, to test the faster substring
-- operation used in that case
--
alter table toasttest alter column f1 set storage external;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into toasttest values(decode(repeat('1234567890',10000),'escape'));
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

insert into toasttest values(decode(repeat('1234567890',10000),'escape'));
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


-- If the length is less than zero, an ERROR is thrown.
SELECT substr(f1, 5, -1) from toasttest;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


DROP TABLE toasttest;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


-- test internally compressing datums

-- this tests compressing a datum to a very small size which exercises a
-- corner case in packed-varlena handling: even though small, the compressed
-- datum must be given a 4-byte header because there are no bits to indicate
-- compression in a 1-byte header

CREATE TABLE toasttest (c char(4096));
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

INSERT INTO toasttest VALUES('x');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT length(c), c::text FROM toasttest;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT c FROM toasttest;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

DROP TABLE toasttest;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


--
-- test length
--

SELECT length('abcdef') AS "length_6";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


--
-- test strpos
--

SELECT strpos('abcdef', 'cd') AS "pos_3";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT strpos('abcdef', 'xy') AS "pos_0";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT strpos('abcdef', '') AS "pos_1";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT strpos('', 'xy') AS "pos_0";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT strpos('', '') AS "pos_1";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


--
-- test replace
--
SELECT replace('abcdef', 'de', '45') AS "abc45f";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT replace('yabadabadoo', 'ba', '123') AS "ya123da123doo";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT replace('yabadoo', 'bad', '') AS "yaoo";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


--
-- test split_part
--
select split_part('','@',1) AS "empty string";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select split_part('','@',-1) AS "empty string";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select split_part('joeuser@mydatabase','',1) AS "joeuser@mydatabase";
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


select split_part('joeuser@mydatabase','',2) AS "empty string";
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


select split_part('joeuser@mydatabase','',-1) AS "joeuser@mydatabase";
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


select split_part('joeuser@mydatabase','',-2) AS "empty string";
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


select split_part('joeuser@mydatabase','@',0) AS "an error";
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:


select split_part('joeuser@mydatabase','@@',1) AS "joeuser@mydatabase";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select split_part('joeuser@mydatabase','@@',2) AS "empty string";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select split_part('joeuser@mydatabase','@',1) AS "joeuser";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select split_part('joeuser@mydatabase','@',2) AS "mydatabase";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select split_part('joeuser@mydatabase','@',3) AS "empty string";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select split_part('@joeuser@mydatabase@','@',2) AS "joeuser";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select split_part('joeuser@mydatabase','@',-1) AS "mydatabase";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select split_part('joeuser@mydatabase','@',-2) AS "joeuser";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select split_part('joeuser@mydatabase','@',-3) AS "empty string";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


select split_part('@joeuser@mydatabase@','@',-2) AS "mydatabase";
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


--
-- test to_bin, to_oct, and to_hex
--
select to_bin(-1234) AS "11111111111111111111101100101110";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select to_bin(-1234::bigint);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select to_bin(256*256*256 - 1) AS "111111111111111111111111";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select to_bin(256::bigint*256::bigint*256::bigint*256::bigint - 1) AS "11111111111111111111111111111111";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select to_oct(-1234) AS "37777775456";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select to_oct(-1234::bigint) AS "1777777777777777775456";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select to_oct(256*256*256 - 1) AS "77777777";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

select to_oct(256::bigint*256::bigint*256::bigint*256::bigint - 1) AS "37777777777";
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select to_hex(-1234) AS "fffffb2e";
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

select to_hex(-1234::bigint) AS "fffffffffffffb2e";
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

select to_hex(256*256*256 - 1) AS "ffffff";
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

select to_hex(256::bigint*256::bigint*256::bigint*256::bigint - 1) AS "ffffffff";
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


--
-- SHA-2
--
SET bytea_output TO hex;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- encode/decode
--
SELECT encode('\x1234567890abcdef00', 'hex');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT encode(('\x' || repeat('1234567890abcdef0001', 7))::bytea, 'base64');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT encode('\x1234567890abcdef00', 'escape');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- get_bit/set_bit etc
--
SELECT get_bit('\x1234567890abcdef00'::bytea, 43);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT get_bit('\x1234567890abcdef00'::bytea, 99);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT set_bit('\x1234567890abcdef00'::bytea, 99, 0);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- error
SELECT get_byte('\x1234567890abcdef00'::bytea, 3);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT get_byte('\x1234567890abcdef00'::bytea, 99);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT set_byte('\x1234567890abcdef00'::bytea, 99, 11);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- error

--
-- test behavior of escape_string_warning and standard_conforming_strings options
--
set escape_string_warning = off;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

set standard_conforming_strings = off;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


show escape_string_warning;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

show standard_conforming_strings;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


set escape_string_warning = on;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

set standard_conforming_strings = on;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


show escape_string_warning;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

show standard_conforming_strings;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select 'a\bcd' as f1, 'a\b''cd' as f2, 'a\b''''cd' as f3, 'abcd\'   as f4, 'ab\''cd' as f5, '\\' as f6;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


set standard_conforming_strings = off;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select 'a\\bcd' as f1, 'a\\b\'cd' as f2, 'a\\b\'''cd' as f3, 'abcd\\'   as f4, 'ab\\\'cd' as f5, '\\\\' as f6;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:


set escape_string_warning = off;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

set standard_conforming_strings = on;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select 'a\bcd' as f1, 'a\b''cd' as f2, 'a\b''''cd' as f3, 'abcd\'   as f4, 'ab\''cd' as f5, '\\' as f6;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


set standard_conforming_strings = off;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


select 'a\\bcd' as f1, 'a\\b\'cd' as f2, 'a\\b\'''cd' as f3, 'abcd\\'   as f4, 'ab\\\'cd' as f5, '\\\\' as f6;
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:


reset standard_conforming_strings;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:



--
-- Additional string functions
--
SET bytea_output TO escape;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT initcap('hi THOMAS');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT lpad('hi', 5, 'xy');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT lpad('hi', 5);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT lpad('hi', -5, 'xy');
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:

SELECT lpad('hello', 2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT lpad('hi', 5, '');
RESULT: [duckdb: ERROR, mysql: DIFFERENT]

-----------
QUERY:


SELECT rpad('hi', 5, 'xy');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT rpad('hi', 5);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT rpad('hi', -5, 'xy');
RESULT: [duckdb: SAME, mysql: DIFFERENT]

-----------
QUERY:

SELECT rpad('hello', 2);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT rpad('hi', 5, '');
RESULT: [duckdb: ERROR, mysql: DIFFERENT]

-----------
QUERY:


SELECT ltrim('zzzytrim', 'xyz');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT translate('', '14', 'ax');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT translate('12345', '14', 'ax');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT translate('12345', '134', 'a');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


SELECT ascii('x');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT ascii('');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:


SELECT chr(65);
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT chr(0);
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:


SELECT repeat('Pg', 4);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT repeat('Pg', -4);
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT SUBSTRING('string'::bytea FROM -10 FOR -2147483646) AS "error";
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT encode(overlay(E'Th\\000omas'::bytea placing E'Th\\001omas'::bytea from 2),'escape');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT encode(overlay(E'Th\\000omas'::bytea placing E'\\002\\003'::bytea from 8),'escape');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT encode(overlay(E'Th\\000omas'::bytea placing E'\\002\\003'::bytea from 5 for 3),'escape');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT bit_count('\x1234567890'::bytea);
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


SELECT unistr('\0064at\+0000610');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT unistr('d\u0061t\U000000610');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT unistr('a\\b');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- errors:
SELECT unistr('wrong: \db99');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT unistr('wrong: \db99\0061');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT unistr('wrong: \+00db99\+000061');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT unistr('wrong: \+2FFFFF');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT unistr('wrong: \udb99\u0061');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT unistr('wrong: \U0000db99\U00000061');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT unistr('wrong: \U002FFFFF');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:

SELECT unistr('wrong: \xyz');
RESULT: [duckdb: SAME, mysql: SAME]


=========================================
Summary for test case strings/test.sql of postgres
=========================================

=================
Results for duckdb
SAME      :	220 queries	52.01%
DIFFERENT :	28 queries	6.62%
ERROR     :	175 queries	41.37%

=================
Results for mysql
SAME      :	168 queries	39.72%
DIFFERENT :	19 queries	4.49%
ERROR     :	236 queries	55.79%
Guest results are identical to expected results