Guest DBMS identified: postgres
-----------
QUERY:
--
-- Test assorted system views
--
-- This test is mainly meant to provide some code coverage for the
-- set-returning functions that underlie certain system views.
-- The output of most of these functions is very environment-dependent,
-- so our ability to test with fixed expected output is pretty limited /* REPLACED */,
-- but even a trivial check of count(*) will exercise the normal code path
-- through the SRF.

select count(*) >= 0 as ok from pg_available_extension_versions;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


select count(*) >= 0 as ok from pg_available_extensions;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- The entire output of pg_backend_memory_contexts is not stable,
-- we test only the existence and basic condition of TopMemoryContext.
select name, ident, parent, level, total_bytes >= free_bytes
  from pg_backend_memory_contexts where level = 0;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- At introduction, pg_config had 23 entries /* REPLACED */, it may grow
select count(*) > 20 as ok from pg_config;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- We expect no cursors in this test /* REPLACED */, see also portals.sql
select count(*) = 0 as ok from pg_cursors;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


select count(*) >= 0 as ok from pg_file_settings;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- There will surely be at least one rule, with no errors.
select count(*) > 0 as ok, count(*) FILTER (WHERE error IS NOT NULL) = 0 AS no_err
  from pg_hba_file_rules;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- There may be no rules, and there should be no errors.
select count(*) >= 0 as ok, count(*) FILTER (WHERE error IS NOT NULL) = 0 AS no_err
  from pg_ident_file_mappings;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- There will surely be at least one active lock
select count(*) > 0 as ok from pg_locks;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- We expect no prepared statements in this test /* REPLACED */, see also prepare.sql
select count(*) = 0 as ok from pg_prepared_statements;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- See also prepared_xacts.sql
select count(*) >= 0 as ok from pg_prepared_xacts;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- There will surely be at least one SLRU cache
select count(*) > 0 as ok from pg_stat_slru;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- There must be only one record
select count(*) = 1 as ok from pg_stat_wal;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- We expect no walreceiver running in this test
select count(*) = 0 as ok from pg_stat_wal_receiver;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- This is to record the prevailing planner enable_foo settings during
-- a regression test run.
select name, setting from pg_settings where name like 'enable%';
RESULT: [duckdb: DIFFERENT, mySQL: ERROR]

-----------
QUERY:


-- There are always wait event descriptions for various types.
select type, count(*) > 0 as ok FROM pg_wait_events
  group by type order by type COLLATE "C";
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:


-- Test that the pg_timezone_names and pg_timezone_abbrevs views are
-- more-or-less working.  We can/* REPLACED */''t test their contents in any great detail
-- without the outputs changing anytime IANA updates the underlying data,
-- but it seems reasonable to expect at least one entry per major meridian.
-- (At the time of writing, the actual counts are around 38 because of
-- zones using fractional GMT offsets, so this is a pretty loose test.)
select count(distinct utc_offset) >= 24 as ok from pg_timezone_names;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

select count(distinct utc_offset) >= 24 as ok from pg_timezone_abbrevs;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

-- Let/* REPLACED */''s check the non-default timezone abbreviation sets, too
set timezone_abbreviations = 'Australia';
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

select count(distinct utc_offset) >= 24 as ok from pg_timezone_abbrevs;
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

set timezone_abbreviations = 'India';
RESULT: [duckdb: ERROR, mySQL: ERROR]

-----------
QUERY:

select count(distinct utc_offset) >= 24 as ok from pg_timezone_abbrevs;
RESULT: [duckdb: ERROR, mySQL: ERROR]
=========================================
Summary for test case sysviews/test.sql of postgres
=========================================

=================
Results for duckdb
SAME: 0 queries, which is 0.00%
DIFFERENT: 1 queries, which is 4.55%
ERROR: 21 queries, which is 95.45%

=================
Results for mySQL
SAME: 0 queries, which is 0.00%
DIFFERENT: 0 queries, which is 0.00%
ERROR: 22 queries, which is 100.00%
