-- relative tablespace locations are not allowed
CREATE TABLESPACE regress_tblspace LOCATION 'relative'
ProgrammingError: -- relative tablespace locations are not allowed
CREATE TABLESPACE regress_tblspace LOCATION 'relative'

tablespace location must be an absolute path

 -- fail

-- empty tablespace locations are not usually allowed
CREATE TABLESPACE regress_tblspace LOCATION ''
ProgrammingError:  -- fail

-- empty tablespace locations are not usually allowed
CREATE TABLESPACE regress_tblspace LOCATION ''

tablespace "regress_tblspace" already exists

 -- fail

-- as a special developer-only option to allow us to use tablespaces
-- with streaming replication on the same server, an empty location
-- can be allowed as a way to say that the tablespace should be created
-- as a directory in pg_tblspc, rather than being a symlink
SET allow_in_place_tablespaces = true


-- create a tablespace using WITH clause
CREATE TABLESPACE regress_tblspacewith LOCATION '' WITH (some_nonexistent_parameter = true)
ERROR: 

-- create a tablespace using WITH clause
CREATE TABLESPACE regress_tblspacewith LOCATION '' WITH (some_nonexistent_parameter = true)

unrecognized parameter "some_nonexistent_parameter"

 -- fail
CREATE TABLESPACE regress_tblspacewith LOCATION '' WITH (random_page_cost = 3.0)
 -- ok

-- check to see the parameter was used
SELECT spcoptions FROM pg_tablespace WHERE spcname = 'regress_tblspacewith'
RESULT: 
	[(['random_page_cost=3.0'],)]


-- drop the tablespace so we can re-use the location
DROP TABLESPACE regress_tblspacewith


-- This returns a relative path as of an effect of allow_in_place_tablespaces,
-- masking the tablespace OID used in the path name.
SELECT regexp_replace(pg_tablespace_location(oid), '(pg_tblspc)/(\d+)', '\1/NNN')
  FROM pg_tablespace  WHERE spcname = 'regress_tblspace'
RESULT: 
	[('pg_tblspc/NNN',)]


-- try setting and resetting some properties for the new tablespace
ALTER TABLESPACE regress_tblspace SET (random_page_cost = 1.0, seq_page_cost = 1.1)

ALTER TABLESPACE regress_tblspace SET (some_nonexistent_parameter = true)
ERROR: 
ALTER TABLESPACE regress_tblspace SET (some_nonexistent_parameter = true)

unrecognized parameter "some_nonexistent_parameter"

  -- fail
ALTER TABLESPACE regress_tblspace RESET (random_page_cost = 2.0)
ProgrammingError:   -- fail
ALTER TABLESPACE regress_tblspace RESET (random_page_cost = 2.0)

RESET must not include values for parameters

 -- fail
ALTER TABLESPACE regress_tblspace RESET (random_page_cost, effective_io_concurrency)
 -- ok

-- REINDEX (TABLESPACE)
-- catalogs and system tablespaces
-- system catalog, fail
REINDEX (TABLESPACE regress_tblspace) TABLE pg_am
ERROR:  -- ok

-- REINDEX (TABLESPACE)
-- catalogs and system tablespaces
-- system catalog, fail
REINDEX (TABLESPACE regress_tblspace) TABLE pg_am

cannot move system relation "pg_am_name_index"


REINDEX (TABLESPACE regress_tblspace) TABLE CONCURRENTLY pg_am
ERROR: 
REINDEX (TABLESPACE regress_tblspace) TABLE CONCURRENTLY pg_am

cannot reindex system catalogs concurrently


-- shared catalog, fail
REINDEX (TABLESPACE regress_tblspace) TABLE pg_authid
ERROR: 
-- shared catalog, fail
REINDEX (TABLESPACE regress_tblspace) TABLE pg_authid

cannot move system relation "pg_authid_rolname_index"


REINDEX (TABLESPACE regress_tblspace) TABLE CONCURRENTLY pg_authid
ERROR: 
REINDEX (TABLESPACE regress_tblspace) TABLE CONCURRENTLY pg_authid

cannot reindex system catalogs concurrently


-- toast relations, fail
REINDEX (TABLESPACE regress_tblspace) INDEX pg_toast.pg_toast_1260_index
ERROR: 
-- toast relations, fail
REINDEX (TABLESPACE regress_tblspace) INDEX pg_toast.pg_toast_1260_index

cannot move system relation "pg_toast_1260_index"


REINDEX (TABLESPACE regress_tblspace) INDEX CONCURRENTLY pg_toast.pg_toast_1260_index
ERROR: 
REINDEX (TABLESPACE regress_tblspace) INDEX CONCURRENTLY pg_toast.pg_toast_1260_index

cannot reindex system catalogs concurrently


REINDEX (TABLESPACE regress_tblspace) TABLE pg_toast.pg_toast_1260
ERROR: 
REINDEX (TABLESPACE regress_tblspace) TABLE pg_toast.pg_toast_1260

cannot move system relation "pg_toast_1260_index"


REINDEX (TABLESPACE regress_tblspace) TABLE CONCURRENTLY pg_toast.pg_toast_1260
ERROR: 
REINDEX (TABLESPACE regress_tblspace) TABLE CONCURRENTLY pg_toast.pg_toast_1260

cannot reindex system catalogs concurrently


-- system catalog, fail
REINDEX (TABLESPACE pg_global) TABLE pg_authid
ERROR: 
-- system catalog, fail
REINDEX (TABLESPACE pg_global) TABLE pg_authid

cannot move system relation "pg_authid_rolname_index"


REINDEX (TABLESPACE pg_global) TABLE CONCURRENTLY pg_authid
ERROR: 
REINDEX (TABLESPACE pg_global) TABLE CONCURRENTLY pg_authid

cannot reindex system catalogs concurrently



-- table with toast relation
CREATE TABLE regress_tblspace_test_tbl (num1 bigint, num2 double precision, t text)

INSERT INTO regress_tblspace_test_tbl (num1, num2, t)
  SELECT round(random()*100), random(), 'text'
  FROM generate_series(1, 10) s(i)

CREATE INDEX regress_tblspace_test_tbl_idx ON regress_tblspace_test_tbl (num1)

-- move to global tablespace, fail
REINDEX (TABLESPACE pg_global) INDEX regress_tblspace_test_tbl_idx
ERROR: 
-- move to global tablespace, fail
REINDEX (TABLESPACE pg_global) INDEX regress_tblspace_test_tbl_idx

only shared relations can be placed in pg_global tablespace


REINDEX (TABLESPACE pg_global) INDEX CONCURRENTLY regress_tblspace_test_tbl_idx
ERROR: 
REINDEX (TABLESPACE pg_global) INDEX CONCURRENTLY regress_tblspace_test_tbl_idx

cannot move non-shared relation to tablespace "pg_global"



-- check transactional behavior of REINDEX (TABLESPACE)
BEGIN

REINDEX (TABLESPACE regress_tblspace) INDEX regress_tblspace_test_tbl_idx

REINDEX (TABLESPACE regress_tblspace) TABLE regress_tblspace_test_tbl

ROLLBACK

-- no relation moved to the new tablespace
SELECT c.relname FROM pg_class c, pg_tablespace s
  WHERE c.reltablespace = s.oid AND s.spcname = 'regress_tblspace'
RESULT: 
	[]


-- check that all indexes are moved to a new tablespace with different
-- relfilenode.
-- Save first the existing relfilenode for the toast and main relations.
SELECT relfilenode as main_filenode FROM pg_class
  WHERE relname = 'regress_tblspace_test_tbl_idx' \gset
SELECT relfilenode as toast_filenode FROM pg_class
  WHERE oid =
    (SELECT i.indexrelid
       FROM pg_class c,
            pg_index i
       WHERE i.indrelid = c.reltoastrelid AND
             c.relname = 'regress_tblspace_test_tbl') \gset
REINDEX (TABLESPACE regress_tblspace) TABLE regress_tblspace_test_tbl
ProgrammingError: 

-- check that all indexes are moved to a new tablespace with different
-- relfilenode.
-- Save first the existing relfilenode for the toast and main relations.
SELECT relfilenode as main_filenode FROM pg_class
  WHERE relname = 'regress_tblspace_test_tbl_idx' \gset
SELECT relfilenode as toast_filenode FROM pg_class
  WHERE oid =
    (SELECT i.indexrelid
       FROM pg_class c,
            pg_index i
       WHERE i.indrelid = c.reltoastrelid AND
             c.relname = 'regress_tblspace_test_tbl') \gset
REINDEX (TABLESPACE regress_tblspace) TABLE regress_tblspace_test_tbl

syntax error at or near "\"
LINE 7:   WHERE relname = 'regress_tblspace_test_tbl_idx' \gset
                                                          ^


SELECT c.relname FROM pg_class c, pg_tablespace s
  WHERE c.reltablespace = s.oid AND s.spcname = 'regress_tblspace'
  ORDER BY c.relname
RESULT: 
	[]

ALTER TABLE regress_tblspace_test_tbl SET TABLESPACE regress_tblspace

ALTER TABLE regress_tblspace_test_tbl SET TABLESPACE pg_default

SELECT c.relname FROM pg_class c, pg_tablespace s
  WHERE c.reltablespace = s.oid AND s.spcname = 'regress_tblspace'
  ORDER BY c.relname
RESULT: 
	[]

-- Move back to the default tablespace.
ALTER INDEX regress_tblspace_test_tbl_idx SET TABLESPACE pg_default

SELECT c.relname FROM pg_class c, pg_tablespace s
  WHERE c.reltablespace = s.oid AND s.spcname = 'regress_tblspace'
  ORDER BY c.relname
RESULT: 
	[]

REINDEX (TABLESPACE regress_tblspace, CONCURRENTLY) TABLE regress_tblspace_test_tbl

SELECT c.relname FROM pg_class c, pg_tablespace s
  WHERE c.reltablespace = s.oid AND s.spcname = 'regress_tblspace'
  ORDER BY c.relname
RESULT: 
	[('regress_tblspace_test_tbl_idx',)]

SELECT relfilenode = :main_filenode AS main_same FROM pg_class
  WHERE relname = 'regress_tblspace_test_tbl_idx'
ProgrammingError: 
SELECT relfilenode = :main_filenode AS main_same FROM pg_class
  WHERE relname = 'regress_tblspace_test_tbl_idx'

syntax error at or near ":"
LINE 2: SELECT relfilenode = :main_filenode AS main_same FROM pg_cla...
                             ^


SELECT relfilenode = :toast_filenode as toast_same FROM pg_class
  WHERE oid =
    (SELECT i.indexrelid
       FROM pg_class c,
            pg_index i
       WHERE i.indrelid = c.reltoastrelid AND
             c.relname = 'regress_tblspace_test_tbl')
ProgrammingError: 
SELECT relfilenode = :toast_filenode as toast_same FROM pg_class
  WHERE oid =
    (SELECT i.indexrelid
       FROM pg_class c,
            pg_index i
       WHERE i.indrelid = c.reltoastrelid AND
             c.relname = 'regress_tblspace_test_tbl')

syntax error at or near ":"
LINE 2: SELECT relfilenode = :toast_filenode as toast_same FROM pg_c...
                             ^


DROP TABLE regress_tblspace_test_tbl


-- REINDEX (TABLESPACE) with partitions
-- Create a partition tree and check the set of relations reindexed
-- with their new tablespace.
CREATE TABLE tbspace_reindex_part (c1 int, c2 int) PARTITION BY RANGE (c1)

CREATE TABLE tbspace_reindex_part_0 PARTITION OF tbspace_reindex_part
  FOR VALUES FROM (0) TO (10) PARTITION BY list (c2)

CREATE TABLE tbspace_reindex_part_0_1 PARTITION OF tbspace_reindex_part_0
  FOR VALUES IN (1)

CREATE TABLE tbspace_reindex_part_0_2 PARTITION OF tbspace_reindex_part_0
  FOR VALUES IN (2)

-- This partitioned table will have no partitions.
CREATE TABLE tbspace_reindex_part_10 PARTITION OF tbspace_reindex_part
   FOR VALUES FROM (10) TO (20) PARTITION BY list (c2)

-- Create some partitioned indexes
CREATE INDEX tbspace_reindex_part_index ON ONLY tbspace_reindex_part (c1)

CREATE INDEX tbspace_reindex_part_index_0 ON ONLY tbspace_reindex_part_0 (c1)

ALTER INDEX tbspace_reindex_part_index ATTACH PARTITION tbspace_reindex_part_index_0

-- This partitioned index will have no partitions.
CREATE INDEX tbspace_reindex_part_index_10 ON ONLY tbspace_reindex_part_10 (c1)

ALTER INDEX tbspace_reindex_part_index ATTACH PARTITION tbspace_reindex_part_index_10

CREATE INDEX tbspace_reindex_part_index_0_1 ON ONLY tbspace_reindex_part_0_1 (c1)

ALTER INDEX tbspace_reindex_part_index_0 ATTACH PARTITION tbspace_reindex_part_index_0_1

CREATE INDEX tbspace_reindex_part_index_0_2 ON ONLY tbspace_reindex_part_0_2 (c1)

ALTER INDEX tbspace_reindex_part_index_0 ATTACH PARTITION tbspace_reindex_part_index_0_2

SELECT relid, parentrelid, level FROM pg_partition_tree('tbspace_reindex_part_index')
  ORDER BY relid, level
RESULT: 
	[('tbspace_reindex_part_index', None, 0), ('tbspace_reindex_part_index_0', 'tbspace_reindex_part_index', 1), ('tbspace_reindex_part_index_10', 'tbspace_reindex_part_index', 1), ('tbspace_reindex_part_index_0_1', 'tbspace_reindex_part_index_0', 2), ('tbspace_reindex_part_index_0_2', 'tbspace_reindex_part_index_0', 2)]

-- Track the original tablespace, relfilenode and OID of each index
-- in the tree.
CREATE TEMP TABLE reindex_temp_before AS
  SELECT oid, relname, relfilenode, reltablespace
  FROM pg_class
    WHERE relname ~ 'tbspace_reindex_part_index'

REINDEX (TABLESPACE regress_tblspace, CONCURRENTLY) TABLE tbspace_reindex_part

-- REINDEX CONCURRENTLY changes the OID of the old relation, hence a check
-- based on the relation name below.
SELECT b.relname,
       CASE WHEN a.relfilenode = b.relfilenode THEN 'relfilenode is unchanged'
       ELSE 'relfilenode has changed' END AS filenode,
       CASE WHEN a.reltablespace = b.reltablespace THEN 'reltablespace is unchanged'
       ELSE 'reltablespace has changed' END AS tbspace
  FROM reindex_temp_before b JOIN pg_class a ON b.relname = a.relname
  ORDER BY 1
RESULT: 
	[('tbspace_reindex_part_index', 'relfilenode is unchanged', 'reltablespace is unchanged'), ('tbspace_reindex_part_index_0', 'relfilenode is unchanged', 'reltablespace is unchanged'), ('tbspace_reindex_part_index_0_1', 'relfilenode has changed', 'reltablespace has changed'), ('tbspace_reindex_part_index_0_2', 'relfilenode has changed', 'reltablespace has changed'), ('tbspace_reindex_part_index_10', 'relfilenode is unchanged', 'reltablespace is unchanged')]

DROP TABLE tbspace_reindex_part


-- create a schema we can use
CREATE SCHEMA testschema


-- try a table
CREATE TABLE testschema.foo (i int) TABLESPACE regress_tblspace

SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c
    where c.reltablespace = t.oid AND c.relname = 'foo'
RESULT: 
	[('foo', 'regress_tblspace')]


INSERT INTO testschema.foo VALUES(1)

INSERT INTO testschema.foo VALUES(2)


-- tables from dynamic sources
CREATE TABLE testschema.asselect TABLESPACE regress_tblspace AS SELECT 1

SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c
    where c.reltablespace = t.oid AND c.relname = 'asselect'
RESULT: 
	[('asselect', 'regress_tblspace')]


PREPARE selectsource(int) AS SELECT $1

CREATE TABLE testschema.asexecute TABLESPACE regress_tblspace
    AS EXECUTE selectsource(2)

SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c
    where c.reltablespace = t.oid AND c.relname = 'asexecute'
RESULT: 
	[('asexecute', 'regress_tblspace')]


-- index
CREATE INDEX foo_idx on testschema.foo(i) TABLESPACE regress_tblspace

SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c
    where c.reltablespace = t.oid AND c.relname = 'foo_idx'
RESULT: 
	[('foo_idx', 'regress_tblspace')]


-- check \d output
-- \d testschema.foo
-- \d testschema.foo_idx

--
-- partitioned table
--
CREATE TABLE testschema.part (a int) PARTITION BY LIST (a)

SET default_tablespace TO pg_global

CREATE TABLE testschema.part_1 PARTITION OF testschema.part FOR VALUES IN (1)
ERROR: 
CREATE TABLE testschema.part_1 PARTITION OF testschema.part FOR VALUES IN (1)

only shared relations can be placed in pg_global tablespace


RESET default_tablespace

CREATE TABLE testschema.part_1 PARTITION OF testschema.part FOR VALUES IN (1)

SET default_tablespace TO regress_tblspace

CREATE TABLE testschema.part_2 PARTITION OF testschema.part FOR VALUES IN (2)

SET default_tablespace TO pg_global

CREATE TABLE testschema.part_3 PARTITION OF testschema.part FOR VALUES IN (3)
ERROR: 
CREATE TABLE testschema.part_3 PARTITION OF testschema.part FOR VALUES IN (3)

only shared relations can be placed in pg_global tablespace


ALTER TABLE testschema.part SET TABLESPACE regress_tblspace

CREATE TABLE testschema.part_3 PARTITION OF testschema.part FOR VALUES IN (3)

CREATE TABLE testschema.part_4 PARTITION OF testschema.part FOR VALUES IN (4)
  TABLESPACE pg_default

CREATE TABLE testschema.part_56 PARTITION OF testschema.part FOR VALUES IN (5, 6)
  PARTITION BY LIST (a)

ALTER TABLE testschema.part SET TABLESPACE pg_default

CREATE TABLE testschema.part_78 PARTITION OF testschema.part FOR VALUES IN (7, 8)
  PARTITION BY LIST (a)
ERROR: 
CREATE TABLE testschema.part_78 PARTITION OF testschema.part FOR VALUES IN (7, 8)
  PARTITION BY LIST (a)

only shared relations can be placed in pg_global tablespace


CREATE TABLE testschema.part_910 PARTITION OF testschema.part FOR VALUES IN (9, 10)
  PARTITION BY LIST (a) TABLESPACE regress_tblspace

RESET default_tablespace

CREATE TABLE testschema.part_78 PARTITION OF testschema.part FOR VALUES IN (7, 8)
  PARTITION BY LIST (a)


SELECT relname, spcname FROM pg_catalog.pg_class c
    JOIN pg_catalog.pg_namespace n ON (c.relnamespace = n.oid)
    LEFT JOIN pg_catalog.pg_tablespace t ON c.reltablespace = t.oid
    where c.relname LIKE 'part%' AND n.nspname = 'testschema' order by relname
RESULT: 
	[('part', None), ('part_1', None), ('part_2', 'regress_tblspace'), ('part_3', 'regress_tblspace'), ('part_4', None), ('part_56', 'regress_tblspace'), ('part_78', None), ('part_910', 'regress_tblspace')]

RESET default_tablespace

DROP TABLE testschema.part


-- partitioned index
CREATE TABLE testschema.part (a int) PARTITION BY LIST (a)

CREATE TABLE testschema.part1 PARTITION OF testschema.part FOR VALUES IN (1)

CREATE INDEX part_a_idx ON testschema.part (a) TABLESPACE regress_tblspace

CREATE TABLE testschema.part2 PARTITION OF testschema.part FOR VALUES IN (2)

SELECT relname, spcname FROM pg_catalog.pg_tablespace t, pg_catalog.pg_class c
    where c.reltablespace = t.oid AND c.relname LIKE 'part%_idx' ORDER BY relname
RESULT: 
	[('part1_a_idx', 'regress_tblspace'), ('part2_a_idx', 'regress_tblspace'), ('part_a_idx', 'regress_tblspace')]

-- \d testschema.part
-- \d+ testschema.part
-- \d testschema.part1
-- \d+ testschema.part1
-- \d testschema.part_a_idx
-- \d+ testschema.part_a_idx

-- partitioned rels cannot specify the default tablespace.  These fail:
CREATE TABLE testschema.dflt (a int PRIMARY KEY) PARTITION BY LIST (a) TABLESPACE pg_default
ERROR: 
-- \d testschema.part
-- \d+ testschema.part
-- \d testschema.part1
-- \d+ testschema.part1
-- \d testschema.part_a_idx
-- \d+ testschema.part_a_idx

-- partitioned rels cannot specify the default tablespace.  These fail:
CREATE TABLE testschema.dflt (a int PRIMARY KEY) PARTITION BY LIST (a) TABLESPACE pg_default

cannot specify default tablespace for partitioned relations


CREATE TABLE testschema.dflt (a int PRIMARY KEY USING INDEX TABLESPACE pg_default) PARTITION BY LIST (a)
ERROR: 
CREATE TABLE testschema.dflt (a int PRIMARY KEY USING INDEX TABLESPACE pg_default) PARTITION BY LIST (a)

cannot specify default tablespace for partitioned relations


SET default_tablespace TO 'pg_default'

CREATE TABLE testschema.dflt (a int PRIMARY KEY) PARTITION BY LIST (a) TABLESPACE regress_tblspace
ERROR: 
CREATE TABLE testschema.dflt (a int PRIMARY KEY) PARTITION BY LIST (a) TABLESPACE regress_tblspace

cannot specify default tablespace for partitioned relations


CREATE TABLE testschema.dflt (a int PRIMARY KEY USING INDEX TABLESPACE regress_tblspace) PARTITION BY LIST (a)
ERROR: 
CREATE TABLE testschema.dflt (a int PRIMARY KEY USING INDEX TABLESPACE regress_tblspace) PARTITION BY LIST (a)

cannot specify default tablespace for partitioned relations


-- but these work:
CREATE TABLE testschema.dflt (a int PRIMARY KEY USING INDEX TABLESPACE regress_tblspace) PARTITION BY LIST (a) TABLESPACE regress_tblspace

SET default_tablespace TO ''

CREATE TABLE testschema.dflt2 (a int PRIMARY KEY) PARTITION BY LIST (a)

DROP TABLE testschema.dflt, testschema.dflt2


-- check that default_tablespace doesn''t affect ALTER TABLE index rebuilds
CREATE TABLE testschema.test_default_tab(id bigint) TABLESPACE regress_tblspace

INSERT INTO testschema.test_default_tab VALUES (1)

CREATE INDEX test_index1 on testschema.test_default_tab (id)

CREATE INDEX test_index2 on testschema.test_default_tab (id) TABLESPACE regress_tblspace

ALTER TABLE testschema.test_default_tab ADD CONSTRAINT test_index3 PRIMARY KEY (id)

ALTER TABLE testschema.test_default_tab ADD CONSTRAINT test_index4 UNIQUE (id) USING INDEX TABLESPACE regress_tblspace


-- \d testschema.test_index1
-- \d testschema.test_index2
-- \d testschema.test_index3
-- \d testschema.test_index4
-- use a custom tablespace for default_tablespace
SET default_tablespace TO regress_tblspace

-- tablespace should not change if no rewrite
ALTER TABLE testschema.test_default_tab ALTER id TYPE bigint

-- \d testschema.test_index1
-- \d testschema.test_index2
-- \d testschema.test_index3
-- \d testschema.test_index4
SELECT * FROM testschema.test_default_tab
RESULT: 
	[(1,)]

-- tablespace should not change even if there is an index rewrite
ALTER TABLE testschema.test_default_tab ALTER id TYPE int

-- \d testschema.test_index1
-- \d testschema.test_index2
-- \d testschema.test_index3
-- \d testschema.test_index4
SELECT * FROM testschema.test_default_tab
RESULT: 
	[(1,)]

-- now use the default tablespace for default_tablespace
SET default_tablespace TO ''

-- tablespace should not change if no rewrite
ALTER TABLE testschema.test_default_tab ALTER id TYPE int

-- \d testschema.test_index1
-- \d testschema.test_index2
-- \d testschema.test_index3
-- \d testschema.test_index4
-- tablespace should not change even if there is an index rewrite
ALTER TABLE testschema.test_default_tab ALTER id TYPE bigint

-- \d testschema.test_index1
-- \d testschema.test_index2
-- \d testschema.test_index3
-- \d testschema.test_index4
DROP TABLE testschema.test_default_tab


-- check that default_tablespace doesn''t affect ALTER TABLE index rebuilds
-- (this time with a partitioned table)
CREATE TABLE testschema.test_default_tab_p(id bigint, val bigint)
    PARTITION BY LIST (id) TABLESPACE regress_tblspace

CREATE TABLE testschema.test_default_tab_p1 PARTITION OF testschema.test_default_tab_p
    FOR VALUES IN (1)

INSERT INTO testschema.test_default_tab_p VALUES (1)

CREATE INDEX test_index1 on testschema.test_default_tab_p (val)

CREATE INDEX test_index2 on testschema.test_default_tab_p (val) TABLESPACE regress_tblspace

ALTER TABLE testschema.test_default_tab_p ADD CONSTRAINT test_index3 PRIMARY KEY (id)

ALTER TABLE testschema.test_default_tab_p ADD CONSTRAINT test_index4 UNIQUE (id) USING INDEX TABLESPACE regress_tblspace


-- \d testschema.test_index1
-- \d testschema.test_index2
-- \d testschema.test_index3
-- \d testschema.test_index4
-- use a custom tablespace for default_tablespace
SET default_tablespace TO regress_tblspace

-- tablespace should not change if no rewrite
ALTER TABLE testschema.test_default_tab_p ALTER val TYPE bigint

-- \d testschema.test_index1
-- \d testschema.test_index2
-- \d testschema.test_index3
-- \d testschema.test_index4
SELECT * FROM testschema.test_default_tab_p
RESULT: 
	[(1, None)]

-- tablespace should not change even if there is an index rewrite
ALTER TABLE testschema.test_default_tab_p ALTER val TYPE int

-- \d testschema.test_index1
-- \d testschema.test_index2
-- \d testschema.test_index3
-- \d testschema.test_index4
SELECT * FROM testschema.test_default_tab_p
RESULT: 
	[(1, None)]

-- now use the default tablespace for default_tablespace
SET default_tablespace TO ''

-- tablespace should not change if no rewrite
ALTER TABLE testschema.test_default_tab_p ALTER val TYPE int

-- \d testschema.test_index1
-- \d testschema.test_index2
-- \d testschema.test_index3
-- \d testschema.test_index4
-- tablespace should not change even if there is an index rewrite
ALTER TABLE testschema.test_default_tab_p ALTER val TYPE bigint

-- \d testschema.test_index1
-- \d testschema.test_index2
-- \d testschema.test_index3
-- \d testschema.test_index4
DROP TABLE testschema.test_default_tab_p


-- check that default_tablespace affects index additions in ALTER TABLE
CREATE TABLE testschema.test_tab(id int) TABLESPACE regress_tblspace

INSERT INTO testschema.test_tab VALUES (1)

SET default_tablespace TO regress_tblspace

ALTER TABLE testschema.test_tab ADD CONSTRAINT test_tab_unique UNIQUE (id)

SET default_tablespace TO ''

ALTER TABLE testschema.test_tab ADD CONSTRAINT test_tab_pkey PRIMARY KEY (id)

-- \d testschema.test_tab_unique
-- \d testschema.test_tab_pkey
SELECT * FROM testschema.test_tab
RESULT: 
	[(1,)]

DROP TABLE testschema.test_tab


-- check that default_tablespace is handled correctly by multi-command
-- ALTER TABLE that includes a tablespace-preserving rewrite
CREATE TABLE testschema.test_tab(a int, b int, c int)

SET default_tablespace TO regress_tblspace

ALTER TABLE testschema.test_tab ADD CONSTRAINT test_tab_unique UNIQUE (a)

CREATE INDEX test_tab_a_idx ON testschema.test_tab (a)

SET default_tablespace TO ''

CREATE INDEX test_tab_b_idx ON testschema.test_tab (b)

-- \d testschema.test_tab_unique
-- \d testschema.test_tab_a_idx
-- \d testschema.test_tab_b_idx
ALTER TABLE testschema.test_tab ALTER b TYPE bigint, ADD UNIQUE (c)

-- \d testschema.test_tab_unique
-- \d testschema.test_tab_a_idx
-- \d testschema.test_tab_b_idx
DROP TABLE testschema.test_tab


-- let''s try moving a table from one place to another
CREATE TABLE testschema.atable AS VALUES (1), (2)

CREATE UNIQUE INDEX anindex ON testschema.atable(column1)


ALTER TABLE testschema.atable SET TABLESPACE regress_tblspace

ALTER INDEX testschema.anindex SET TABLESPACE regress_tblspace

ALTER INDEX testschema.part_a_idx SET TABLESPACE pg_global
ERROR: 
ALTER INDEX testschema.part_a_idx SET TABLESPACE pg_global

only shared relations can be placed in pg_global tablespace


ALTER INDEX testschema.part_a_idx SET TABLESPACE pg_default

ALTER INDEX testschema.part_a_idx SET TABLESPACE regress_tblspace


INSERT INTO testschema.atable VALUES(3)
	-- ok
INSERT INTO testschema.atable VALUES(1)
ERROR: 	-- ok
INSERT INTO testschema.atable VALUES(1)

duplicate key value violates unique constraint "anindex"
DETAIL:  Key (column1)=(1) already exists.

	-- fail (checks index)
SELECT COUNT(*) FROM testschema.atable
RESULT: 
	[(3,)]
		-- checks heap

-- let''s try moving a materialized view from one place to another
CREATE MATERIALIZED VIEW testschema.amv AS SELECT * FROM testschema.atable

ALTER MATERIALIZED VIEW testschema.amv SET TABLESPACE regress_tblspace

REFRESH MATERIALIZED VIEW testschema.amv

SELECT COUNT(*) FROM testschema.amv
RESULT: 
	[(3,)]


-- Will fail with bad path
CREATE TABLESPACE regress_badspace LOCATION '/no/such/location'
ERROR: 

-- Will fail with bad path
CREATE TABLESPACE regress_badspace LOCATION '/no/such/location'

directory "/no/such/location" does not exist



-- No such tablespace
CREATE TABLE bar (i int) TABLESPACE regress_nosuchspace
ProgrammingError: 

-- No such tablespace
CREATE TABLE bar (i int) TABLESPACE regress_nosuchspace

tablespace "regress_nosuchspace" does not exist



-- Fail, in use for some partitioned object
DROP TABLESPACE regress_tblspace
ERROR: 

-- Fail, in use for some partitioned object
DROP TABLESPACE regress_tblspace

tablespace "regress_tblspace" cannot be dropped because some objects depend on it
DETAIL:  tablespace for index testschema.part_a_idx


ALTER INDEX testschema.part_a_idx SET TABLESPACE pg_default

-- Fail, not empty
DROP TABLESPACE regress_tblspace
ERROR: 
-- Fail, not empty
DROP TABLESPACE regress_tblspace

tablespace "regress_tblspace" is not empty



CREATE ROLE regress_tablespace_user1 login

CREATE ROLE regress_tablespace_user2 login

GRANT USAGE ON SCHEMA testschema TO regress_tablespace_user2


ALTER TABLESPACE regress_tblspace OWNER TO regress_tablespace_user1


CREATE TABLE testschema.tablespace_acl (c int)

-- new owner lacks permission to create this index from scratch
CREATE INDEX k ON testschema.tablespace_acl (c) TABLESPACE regress_tblspace

ALTER TABLE testschema.tablespace_acl OWNER TO regress_tablespace_user2


SET SESSION ROLE regress_tablespace_user2

CREATE TABLE tablespace_table (i int) TABLESPACE regress_tblspace
ProgrammingError: 
CREATE TABLE tablespace_table (i int) TABLESPACE regress_tblspace

permission denied for tablespace regress_tblspace

 -- fail
ALTER TABLE testschema.tablespace_acl ALTER c TYPE bigint

REINDEX (TABLESPACE regress_tblspace) TABLE tablespace_table
ProgrammingError: 
REINDEX (TABLESPACE regress_tblspace) TABLE tablespace_table

permission denied for tablespace regress_tblspace

 -- fail
REINDEX (TABLESPACE regress_tblspace, CONCURRENTLY) TABLE tablespace_table
ProgrammingError:  -- fail
REINDEX (TABLESPACE regress_tblspace, CONCURRENTLY) TABLE tablespace_table

permission denied for tablespace regress_tblspace

 -- fail
RESET ROLE


ALTER TABLESPACE regress_tblspace RENAME TO regress_tblspace_renamed


ALTER TABLE ALL IN TABLESPACE regress_tblspace_renamed SET TABLESPACE pg_default

ALTER INDEX ALL IN TABLESPACE regress_tblspace_renamed SET TABLESPACE pg_default

ALTER MATERIALIZED VIEW ALL IN TABLESPACE regress_tblspace_renamed SET TABLESPACE pg_default


-- Should show notice that nothing was done
ALTER TABLE ALL IN TABLESPACE regress_tblspace_renamed SET TABLESPACE pg_default

ALTER MATERIALIZED VIEW ALL IN TABLESPACE regress_tblspace_renamed SET TABLESPACE pg_default


-- Should succeed
DROP TABLESPACE regress_tblspace_renamed


DROP SCHEMA testschema CASCADE


DROP ROLE regress_tablespace_user1

DROP ROLE regress_tablespace_user2


