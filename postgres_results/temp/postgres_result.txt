
-----------
QUERY:
--
-- TEMP
-- Test temp relations and indexes
--

-- test temp table/index masking

CREATE TABLE temptest(col int)
RESULT:
	postgres: None

-----------
QUERY:
CREATE INDEX i_temptest ON temptest(col)
RESULT:
	postgres: None

-----------
QUERY:
CREATE TEMP TABLE temptest(tcol int)
RESULT:
	postgres: None

-----------
QUERY:
CREATE INDEX i_temptest ON temptest(tcol)
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: []

-----------
QUERY:
DROP INDEX i_temptest
RESULT:
	postgres: None

-----------
QUERY:
DROP TABLE temptest
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: []

-----------
QUERY:
DROP INDEX i_temptest
RESULT:
	postgres: None

-----------
QUERY:
DROP TABLE temptest
RESULT:
	postgres: None

-----------
QUERY:
-- test temp table selects

CREATE TABLE temptest(col int)
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO temptest VALUES (1)
RESULT:
	postgres: None

-----------
QUERY:
CREATE TEMP TABLE temptest(tcol float)
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO temptest VALUES (2.1)
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: [(2.1,)]

-----------
QUERY:
DROP TABLE temptest
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: [(1,)]

-----------
QUERY:
DROP TABLE temptest
RESULT:
	postgres: None

-----------
QUERY:
-- test temp table deletion

CREATE TEMP TABLE temptest(col int)
RESULT:
	postgres: None

-----------
QUERY:
\c

SELECT * FROM temptest
RESULT:
	postgres: syntax error at or near "\"
LINE 1: \c
        ^


-----------
QUERY:
-- Test ON COMMIT DELETE ROWS

CREATE TEMP TABLE temptest(col int) ON COMMIT DELETE ROWS
RESULT:
	postgres: relation "temptest" already exists


-----------
QUERY:
-- while we/* REPLACED */''re here, verify successful truncation of index with SQL function
CREATE INDEX ON temptest(bit_length(''))
RESULT:
	postgres: None

-----------
QUERY:
BEGIN
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO temptest VALUES (1)
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO temptest VALUES (2)
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: [(1,), (2,)]

-----------
QUERY:
COMMIT
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: [(1,), (2,)]

-----------
QUERY:
DROP TABLE temptest
RESULT:
	postgres: None

-----------
QUERY:
BEGIN
RESULT:
	postgres: None

-----------
QUERY:
CREATE TEMP TABLE temptest(col) ON COMMIT DELETE ROWS AS SELECT 1
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: [(1,)]

-----------
QUERY:
COMMIT
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: []

-----------
QUERY:
DROP TABLE temptest
RESULT:
	postgres: None

-----------
QUERY:
-- Test ON COMMIT DROP

BEGIN
RESULT:
	postgres: None

-----------
QUERY:
CREATE TEMP TABLE temptest(col int) ON COMMIT DROP
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO temptest VALUES (1)
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO temptest VALUES (2)
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: [(1,), (2,)]

-----------
QUERY:
COMMIT
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: relation "temptest" does not exist
LINE 1: SELECT * FROM temptest
                      ^


-----------
QUERY:
BEGIN
RESULT:
	postgres: None

-----------
QUERY:
CREATE TEMP TABLE temptest(col) ON COMMIT DROP AS SELECT 1
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: [(1,)]

-----------
QUERY:
COMMIT
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: relation "temptest" does not exist
LINE 1: SELECT * FROM temptest
                      ^


-----------
QUERY:
-- Test it with a CHECK condition that produces a toasted pg_constraint entry
BEGIN
RESULT:
	postgres: None

-----------
QUERY:
do $$
begin
  execute format($cmd$
    CREATE TEMP TABLE temptest (col text CHECK (col < %L)) ON COMMIT DROP
  $cmd$,
    (SELECT string_agg(g.i::text || ':' || random()::text, '|')
     FROM generate_series(1, 100) g(i)));
end$$
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: []

-----------
QUERY:
COMMIT
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest
RESULT:
	postgres: relation "temptest" does not exist
LINE 1: SELECT * FROM temptest
                      ^


-----------
QUERY:
-- ON COMMIT is only allowed for TEMP

CREATE TABLE temptest(col int) ON COMMIT DELETE ROWS
RESULT:
	postgres: ON COMMIT can only be used on temporary tables


-----------
QUERY:
CREATE TABLE temptest(col) ON COMMIT DELETE ROWS AS SELECT 1
RESULT:
	postgres: ON COMMIT can only be used on temporary tables


-----------
QUERY:
-- Test foreign keys
BEGIN
RESULT:
	postgres: None

-----------
QUERY:
CREATE TEMP TABLE temptest1(col int PRIMARY KEY)
RESULT:
	postgres: None

-----------
QUERY:
CREATE TEMP TABLE temptest2(col int REFERENCES temptest1)
  ON COMMIT DELETE ROWS
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO temptest1 VALUES (1)
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO temptest2 VALUES (1)
RESULT:
	postgres: None

-----------
QUERY:
COMMIT
RESULT:
	postgres: None

-----------
QUERY:
SELECT * FROM temptest1
RESULT:
	postgres: [(1,)]

-----------
QUERY:
SELECT * FROM temptest2
RESULT:
	postgres: []

-----------
QUERY:
BEGIN
RESULT:
	postgres: None

-----------
QUERY:
CREATE TEMP TABLE temptest3(col int PRIMARY KEY) ON COMMIT DELETE ROWS
RESULT:
	postgres: None

-----------
QUERY:
CREATE TEMP TABLE temptest4(col int REFERENCES temptest3)
RESULT:
	postgres: None

-----------
QUERY:
COMMIT
RESULT:
	postgres: unsupported ON COMMIT and foreign key combination
DETAIL:  Table "temptest4" references "temptest3", but they do not have the same ON COMMIT setting.


-----------
QUERY:
-- Test manipulation of temp schema/* REPLACED */''s placement in search path

create table public.whereami (f1 text)
RESULT:
	postgres: None

-----------
QUERY:
insert into public.whereami values ('public')
RESULT:
	postgres: None

-----------
QUERY:
create temp table whereami (f1 text)
RESULT:
	postgres: None

-----------
QUERY:
insert into whereami values ('temp')
RESULT:
	postgres: None

-----------
QUERY:
create function public.whoami() returns text
  as $$select 'public'::text$$ language sql
RESULT:
	postgres: None

-----------
QUERY:
create function pg_temp.whoami() returns text
  as $$select 'temp'::text$$ language sql
RESULT:
	postgres: None

-----------
QUERY:
-- default should have pg_temp implicitly first, but only for tables
select * from whereami
RESULT:
	postgres: [('temp',)]

-----------
QUERY:
select whoami()
RESULT:
	postgres: [('public',)]

-----------
QUERY:
-- can list temp first explicitly, but it still doesn/* REPLACED */''t affect functions
set search_path = pg_temp, public
RESULT:
	postgres: None

-----------
QUERY:
select * from whereami
RESULT:
	postgres: [('temp',)]

-----------
QUERY:
select whoami()
RESULT:
	postgres: [('public',)]

-----------
QUERY:
-- or put it last for security
set search_path = public, pg_temp
RESULT:
	postgres: None

-----------
QUERY:
select * from whereami
RESULT:
	postgres: [('public',)]

-----------
QUERY:
select whoami()
RESULT:
	postgres: [('public',)]

-----------
QUERY:
-- you can invoke a temp function explicitly, though
select pg_temp.whoami()
RESULT:
	postgres: [('temp',)]

-----------
QUERY:
drop table public.whereami
RESULT:
	postgres: None

-----------
QUERY:
-- types in temp schema
set search_path = pg_temp, public
RESULT:
	postgres: None

-----------
QUERY:
create domain pg_temp.nonempty as text check (value <> '')
RESULT:
	postgres: None

-----------
QUERY:
-- function-syntax invocation of types matches rules for functions
select nonempty('')
RESULT:
	postgres: function nonempty(unknown) does not exist
LINE 2: select nonempty('')
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:
select pg_temp.nonempty('')
RESULT:
	postgres: value for domain nonempty violates check constraint "nonempty_check"


-----------
QUERY:
-- other syntax matches rules for tables
select ''::nonempty
RESULT:
	postgres: value for domain nonempty violates check constraint "nonempty_check"


-----------
QUERY:
reset search_path
RESULT:
	postgres: None

-----------
QUERY:
-- For partitioned temp tables, ON COMMIT actions ignore storage-less
-- partitioned tables.
begin
RESULT:
	postgres: None

-----------
QUERY:
create temp table temp_parted_oncommit (a int)
  partition by list (a) on commit delete rows
RESULT:
	postgres: None

-----------
QUERY:
create temp table temp_parted_oncommit_1
  partition of temp_parted_oncommit
  for values in (1) on commit delete rows
RESULT:
	postgres: None

-----------
QUERY:
insert into temp_parted_oncommit values (1)
RESULT:
	postgres: None

-----------
QUERY:
commit
RESULT:
	postgres: None

-----------
QUERY:
-- partitions are emptied by the previous commit
select * from temp_parted_oncommit
RESULT:
	postgres: []

-----------
QUERY:
drop table temp_parted_oncommit
RESULT:
	postgres: None

-----------
QUERY:
-- Check dependencies between ON COMMIT actions with a partitioned
-- table and its partitions.  Using ON COMMIT DROP on a parent removes
-- the whole set.
begin
RESULT:
	postgres: None

-----------
QUERY:
create temp table temp_parted_oncommit_test (a int)
  partition by list (a) on commit drop
RESULT:
	postgres: None

-----------
QUERY:
create temp table temp_parted_oncommit_test1
  partition of temp_parted_oncommit_test
  for values in (1) on commit delete rows
RESULT:
	postgres: None

-----------
QUERY:
create temp table temp_parted_oncommit_test2
  partition of temp_parted_oncommit_test
  for values in (2) on commit drop
RESULT:
	postgres: None

-----------
QUERY:
insert into temp_parted_oncommit_test values (1), (2)
RESULT:
	postgres: None

-----------
QUERY:
commit
RESULT:
	postgres: None

-----------
QUERY:
-- no relations remain in this case.
select relname from pg_class where relname ~ '^temp_parted_oncommit_test'
RESULT:
	postgres: []

-----------
QUERY:
-- Using ON COMMIT DELETE on a partitioned table does not remove
-- all rows if partitions preserve their data.
begin
RESULT:
	postgres: None

-----------
QUERY:
create temp table temp_parted_oncommit_test (a int)
  partition by list (a) on commit delete rows
RESULT:
	postgres: None

-----------
QUERY:
create temp table temp_parted_oncommit_test1
  partition of temp_parted_oncommit_test
  for values in (1) on commit preserve rows
RESULT:
	postgres: None

-----------
QUERY:
create temp table temp_parted_oncommit_test2
  partition of temp_parted_oncommit_test
  for values in (2) on commit drop
RESULT:
	postgres: None

-----------
QUERY:
insert into temp_parted_oncommit_test values (1), (2)
RESULT:
	postgres: None

-----------
QUERY:
commit
RESULT:
	postgres: None

-----------
QUERY:
-- Data from the remaining partition is still here as its rows are
-- preserved.
select * from temp_parted_oncommit_test
RESULT:
	postgres: [(1,)]

-----------
QUERY:
-- two relations remain in this case.
select relname from pg_class where relname ~ '^temp_parted_oncommit_test'
  order by relname
RESULT:
	postgres: [('temp_parted_oncommit_test',), ('temp_parted_oncommit_test1',)]

-----------
QUERY:
drop table temp_parted_oncommit_test
RESULT:
	postgres: None

-----------
QUERY:
-- Check dependencies between ON COMMIT actions with inheritance trees.
-- Using ON COMMIT DROP on a parent removes the whole set.
begin
RESULT:
	postgres: None

-----------
QUERY:
create temp table temp_inh_oncommit_test (a int) on commit drop
RESULT:
	postgres: None

-----------
QUERY:
create temp table temp_inh_oncommit_test1 ()
  inherits(temp_inh_oncommit_test) on commit delete rows
RESULT:
	postgres: None

-----------
QUERY:
insert into temp_inh_oncommit_test1 values (1)
RESULT:
	postgres: None

-----------
QUERY:
commit
RESULT:
	postgres: None

-----------
QUERY:
-- no relations remain in this case
select relname from pg_class where relname ~ '^temp_inh_oncommit_test'
RESULT:
	postgres: []

-----------
QUERY:
-- Data on the parent is removed, and the child goes away.
begin
RESULT:
	postgres: None

-----------
QUERY:
create temp table temp_inh_oncommit_test (a int) on commit delete rows
RESULT:
	postgres: None

-----------
QUERY:
create temp table temp_inh_oncommit_test1 ()
  inherits(temp_inh_oncommit_test) on commit drop
RESULT:
	postgres: None

-----------
QUERY:
insert into temp_inh_oncommit_test1 values (1)
RESULT:
	postgres: None

-----------
QUERY:
insert into temp_inh_oncommit_test values (1)
RESULT:
	postgres: None

-----------
QUERY:
commit
RESULT:
	postgres: None

-----------
QUERY:
select * from temp_inh_oncommit_test
RESULT:
	postgres: []

-----------
QUERY:
-- one relation remains
select relname from pg_class where relname ~ '^temp_inh_oncommit_test'
RESULT:
	postgres: [('temp_inh_oncommit_test',)]

-----------
QUERY:
drop table temp_inh_oncommit_test
RESULT:
	postgres: None

-----------
QUERY:
-- Tests with two-phase commit
-- Transactions creating objects in a temporary namespace cannot be used
-- with two-phase commit.

-- These cases generate errors about temporary namespace.
-- Function creation
begin
RESULT:
	postgres: None

-----------
QUERY:
create function pg_temp.twophase_func() returns void as
  $$ select '2pc_func'::text $$ language sql
RESULT:
	postgres: None

-----------
QUERY:
prepare transaction 'twophase_func'
RESULT:
	postgres: cannot PREPARE a transaction that has operated on temporary objects


-----------
QUERY:
-- Function drop
create function pg_temp.twophase_func() returns void as
  $$ select '2pc_func'::text $$ language sql
RESULT:
	postgres: None

-----------
QUERY:
begin
RESULT:
	postgres: None

-----------
QUERY:
drop function pg_temp.twophase_func()
RESULT:
	postgres: None

-----------
QUERY:
prepare transaction 'twophase_func'
RESULT:
	postgres: cannot PREPARE a transaction that has operated on temporary objects


-----------
QUERY:
-- Operator creation
begin
RESULT:
	postgres: None

-----------
QUERY:
create operator pg_temp.@@ (leftarg = int4, rightarg = int4, procedure = int4mi)
RESULT:
	postgres: None

-----------
QUERY:
prepare transaction 'twophase_operator'
RESULT:
	postgres: cannot PREPARE a transaction that has operated on temporary objects


-----------
QUERY:
-- These generate errors about temporary tables.
begin
RESULT:
	postgres: None

-----------
QUERY:
create type pg_temp.twophase_type as (a int)
RESULT:
	postgres: None

-----------
QUERY:
prepare transaction 'twophase_type'
RESULT:
	postgres: cannot PREPARE a transaction that has operated on temporary objects


-----------
QUERY:
begin
RESULT:
	postgres: None

-----------
QUERY:
create view pg_temp.twophase_view as select 1
RESULT:
	postgres: None

-----------
QUERY:
prepare transaction 'twophase_view'
RESULT:
	postgres: cannot PREPARE a transaction that has operated on temporary objects


-----------
QUERY:
begin
RESULT:
	postgres: None

-----------
QUERY:
create sequence pg_temp.twophase_seq
RESULT:
	postgres: None

-----------
QUERY:
prepare transaction 'twophase_sequence'
RESULT:
	postgres: cannot PREPARE a transaction that has operated on temporary objects


-----------
QUERY:
-- Temporary tables cannot be used with two-phase commit.
create temp table twophase_tab (a int)
RESULT:
	postgres: None

-----------
QUERY:
begin
RESULT:
	postgres: None

-----------
QUERY:
select a from twophase_tab
RESULT:
	postgres: []

-----------
QUERY:
prepare transaction 'twophase_tab'
RESULT:
	postgres: cannot PREPARE a transaction that has operated on temporary objects


-----------
QUERY:
begin
RESULT:
	postgres: None

-----------
QUERY:
insert into twophase_tab values (1)
RESULT:
	postgres: None

-----------
QUERY:
prepare transaction 'twophase_tab'
RESULT:
	postgres: cannot PREPARE a transaction that has operated on temporary objects


-----------
QUERY:
begin
RESULT:
	postgres: None

-----------
QUERY:
lock twophase_tab in access exclusive mode
RESULT:
	postgres: None

-----------
QUERY:
prepare transaction 'twophase_tab'
RESULT:
	postgres: cannot PREPARE a transaction that has operated on temporary objects


-----------
QUERY:
begin
RESULT:
	postgres: None

-----------
QUERY:
drop table twophase_tab
RESULT:
	postgres: None

-----------
QUERY:
prepare transaction 'twophase_tab'
RESULT:
	postgres: cannot PREPARE a transaction that has operated on temporary objects


-----------
QUERY:
-- Corner case: current_schema may create a temporary schema if namespace
-- creation is pending, so check after that.  First reset the connection
-- to remove the temporary namespace.
\c -
SET search_path TO 'pg_temp'
RESULT:
	postgres: syntax error at or near "\"
LINE 4: \c -
        ^


-----------
QUERY:
BEGIN
RESULT:
	postgres: None

-----------
QUERY:
SELECT current_schema() ~ 'pg_temp' AS is_temp_schema
RESULT:
	postgres: [(False,)]

-----------
QUERY:
PREPARE TRANSACTION 'twophase_search'
RESULT:
	postgres: prepared transactions are disabled
HINT:  Set max_prepared_transactions to a nonzero value.

