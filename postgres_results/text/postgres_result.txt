
-----------
QUERY:
--
-- TEXT
--

SELECT text 'this is a text string' = text 'this is a text string' AS true
RESULT:
	postgres: [(True,)]

-----------
QUERY:
SELECT text 'this is a text string' = text 'this is a text strin' AS false
RESULT:
	postgres: [(False,)]

-----------
QUERY:
-- text_tbl was already created and filled in test_setup.sql.
SELECT * FROM TEXT_TBL
RESULT:
	postgres: [('doh!',), ('hi de ho neighbor',)]

-----------
QUERY:
-- As of 8.3 we have removed most implicit casts to text, so that for example
-- this no longer works:

select length(42)
RESULT:
	postgres: function length(integer) does not exist
LINE 4: select length(42)
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:
-- But as a special exception for usability/* REPLACED */''s sake, we still allow implicit
-- casting to text in concatenations, so long as the other input is text or
-- an unknown literal.  So these work:

select 'four: '::text || 2+2
RESULT:
	postgres: [('four: 4',)]

-----------
QUERY:
select 'four: ' || 2+2
RESULT:
	postgres: [('four: 4',)]

-----------
QUERY:
-- but not this:

select 3 || 4.0
RESULT:
	postgres: operator does not exist: integer || numeric
LINE 3: select 3 || 4.0
                 ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:
/*
 * various string functions
 */
select concat('one')
RESULT:
	postgres: [('one',)]

-----------
QUERY:
select concat(1,2,3,'hello',true, false, to_date('20100309','YYYYMMDD'))
RESULT:
	postgres: [('123hellotf2010-03-09',)]

-----------
QUERY:
select concat_ws('#','one')
RESULT:
	postgres: [('one',)]

-----------
QUERY:
select concat_ws('#',1,2,3,'hello',true, false, to_date('20100309','YYYYMMDD'))
RESULT:
	postgres: [('1#2#3#hello#t#f#2010-03-09',)]

-----------
QUERY:
select concat_ws(',',10,20,null,30)
RESULT:
	postgres: [('10,20,30',)]

-----------
QUERY:
select concat_ws('',10,20,null,30)
RESULT:
	postgres: [('102030',)]

-----------
QUERY:
select concat_ws(NULL,10,20,null,30) is null
RESULT:
	postgres: [(True,)]

-----------
QUERY:
select reverse('abcde')
RESULT:
	postgres: [('edcba',)]

-----------
QUERY:
select i, left('ahoj', i), right('ahoj', i) from generate_series(-5, 5) t(i) order by i
RESULT:
	postgres: [(-5, '', ''), (-4, '', ''), (-3, 'a', 'j'), (-2, 'ah', 'oj'), (-1, 'aho', 'hoj'), (0, '', ''), (1, 'a', 'j'), (2, 'ah', 'oj'), (3, 'aho', 'hoj'), (4, 'ahoj', 'ahoj'), (5, 'ahoj', 'ahoj')]

-----------
QUERY:
select quote_literal('')
RESULT:
	postgres: [("''",)]

-----------
QUERY:
select quote_literal('abc''')
RESULT:
	postgres: [("'abc'''",)]

-----------
QUERY:
select quote_literal(e'\\')
RESULT:
	postgres: [("E'\\\\'",)]

-----------
QUERY:
-- check variadic labeled argument
select concat(variadic array[1,2,3])
RESULT:
	postgres: [('123',)]

-----------
QUERY:
select concat_ws(',', variadic array[1,2,3])
RESULT:
	postgres: [('1,2,3',)]

-----------
QUERY:
select concat_ws(',', variadic NULL::int[])
RESULT:
	postgres: [(None,)]

-----------
QUERY:
select concat(variadic NULL::int[]) is NULL
RESULT:
	postgres: [(True,)]

-----------
QUERY:
select concat(variadic '{}'::int[]) = ''
RESULT:
	postgres: [(True,)]

-----------
QUERY:
--should fail
select concat_ws(',', variadic 10)
RESULT:
	postgres: VARIADIC argument must be an array
LINE 2: select concat_ws(',', variadic 10)
                                       ^


-----------
QUERY:
/*
 * format
 */
select format(NULL)
RESULT:
	postgres: [(None,)]

-----------
QUERY:
select format('Hello')
RESULT:
	postgres: [('Hello',)]

-----------
QUERY:
select format('Hello %s', 'World')
RESULT:
	postgres: [('Hello World',)]

-----------
QUERY:
select format('Hello %%')
RESULT:
	postgres: [('Hello %',)]

-----------
QUERY:
select format('Hello %%%%')
RESULT:
	postgres: [('Hello %%',)]

-----------
QUERY:
-- should fail
select format('Hello %s %s', 'World')
RESULT:
	postgres: too few arguments for format()


-----------
QUERY:
select format('Hello %s')
RESULT:
	postgres: too few arguments for format()


-----------
QUERY:
select format('Hello %x', 20)
RESULT:
	postgres: unrecognized format() type specifier "x"
HINT:  For a single "%" use "%%".


-----------
QUERY:
-- check literal and sql identifiers
select format('INSERT INTO %I VALUES(%L,%L)', 'mytab', 10, 'Hello')
RESULT:
	postgres: [("INSERT INTO mytab VALUES('10','Hello')",)]

-----------
QUERY:
select format('%s%s%s','Hello', NULL,'World')
RESULT:
	postgres: [('HelloWorld',)]

-----------
QUERY:
select format('INSERT INTO %I VALUES(%L,%L)', 'mytab', 10, NULL)
RESULT:
	postgres: [("INSERT INTO mytab VALUES('10',NULL)",)]

-----------
QUERY:
select format('INSERT INTO %I VALUES(%L,%L)', 'mytab', NULL, 'Hello')
RESULT:
	postgres: [("INSERT INTO mytab VALUES(NULL,'Hello')",)]

-----------
QUERY:
-- should fail, sql identifier cannot be NULL
select format('INSERT INTO %I VALUES(%L,%L)', NULL, 10, 'Hello')
RESULT:
	postgres: null values cannot be formatted as an SQL identifier


-----------
QUERY:
-- check positional placeholders
select format('%1$s %3$s', 1, 2, 3)
RESULT:
	postgres: [('1 3',)]

-----------
QUERY:
select format('%1$s %12$s', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
RESULT:
	postgres: [('1 12',)]

-----------
QUERY:
-- should fail
select format('%1$s %4$s', 1, 2, 3)
RESULT:
	postgres: too few arguments for format()


-----------
QUERY:
select format('%1$s %13$s', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)
RESULT:
	postgres: too few arguments for format()


-----------
QUERY:
select format('%0$s', 'Hello')
RESULT:
	postgres: format specifies argument 0, but arguments are numbered from 1


-----------
QUERY:
select format('%*0$s', 'Hello')
RESULT:
	postgres: format specifies argument 0, but arguments are numbered from 1


-----------
QUERY:
select format('%1$', 1)
RESULT:
	postgres: unterminated format() type specifier
HINT:  For a single "%" use "%%".


-----------
QUERY:
select format('%1$1', 1)
RESULT:
	postgres: unterminated format() type specifier
HINT:  For a single "%" use "%%".


-----------
QUERY:
-- check mix of positional and ordered placeholders
select format('Hello %s %1$s %s', 'World', 'Hello again')
RESULT:
	postgres: [('Hello World World Hello again',)]

-----------
QUERY:
select format('Hello %s %s, %2$s %2$s', 'World', 'Hello again')
RESULT:
	postgres: [('Hello World Hello again, Hello again Hello again',)]

-----------
QUERY:
-- check variadic labeled arguments
select format('%s, %s', variadic array['Hello','World'])
RESULT:
	postgres: [('Hello, World',)]

-----------
QUERY:
select format('%s, %s', variadic array[1, 2])
RESULT:
	postgres: [('1, 2',)]

-----------
QUERY:
select format('%s, %s', variadic array[true, false])
RESULT:
	postgres: [('t, f',)]

-----------
QUERY:
select format('%s, %s', variadic array[true, false]::text[])
RESULT:
	postgres: [('true, false',)]

-----------
QUERY:
-- check variadic with positional placeholders
select format('%2$s, %1$s', variadic array['first', 'second'])
RESULT:
	postgres: [('second, first',)]

-----------
QUERY:
select format('%2$s, %1$s', variadic array[1, 2])
RESULT:
	postgres: [('2, 1',)]

-----------
QUERY:
-- variadic argument can be array type NULL, but should not be referenced
select format('Hello', variadic NULL::int[])
RESULT:
	postgres: [('Hello',)]

-----------
QUERY:
-- variadic argument allows simulating more than FUNC_MAX_ARGS parameters
select format(string_agg('%s',','), variadic array_agg(i))
from generate_series(1,200) g(i)
RESULT:
	postgres: [('1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200',)]

-----------
QUERY:
-- check field widths and left, right alignment
select format('>>%10s<<', 'Hello')
RESULT:
	postgres: [('>>     Hello<<',)]

-----------
QUERY:
select format('>>%10s<<', NULL)
RESULT:
	postgres: [('>>          <<',)]

-----------
QUERY:
select format('>>%10s<<', '')
RESULT:
	postgres: [('>>          <<',)]

-----------
QUERY:
select format('>>%-10s<<', '')
RESULT:
	postgres: [('>>          <<',)]

-----------
QUERY:
select format('>>%-10s<<', 'Hello')
RESULT:
	postgres: [('>>Hello     <<',)]

-----------
QUERY:
select format('>>%-10s<<', NULL)
RESULT:
	postgres: [('>>          <<',)]

-----------
QUERY:
select format('>>%1$10s<<', 'Hello')
RESULT:
	postgres: [('>>     Hello<<',)]

-----------
QUERY:
select format('>>%1$-10I<<', 'Hello')
RESULT:
	postgres: [('>>"Hello"   <<',)]

-----------
QUERY:
select format('>>%2$*1$L<<', 10, 'Hello')
RESULT:
	postgres: [(">>   'Hello'<<",)]

-----------
QUERY:
select format('>>%2$*1$L<<', 10, NULL)
RESULT:
	postgres: [('>>      NULL<<',)]

-----------
QUERY:
select format('>>%2$*1$L<<', -10, NULL)
RESULT:
	postgres: [('>>NULL      <<',)]

-----------
QUERY:
select format('>>%*s<<', 10, 'Hello')
RESULT:
	postgres: [('>>     Hello<<',)]

-----------
QUERY:
select format('>>%*1$s<<', 10, 'Hello')
RESULT:
	postgres: [('>>     Hello<<',)]

-----------
QUERY:
select format('>>%-s<<', 'Hello')
RESULT:
	postgres: [('>>Hello<<',)]

-----------
QUERY:
select format('>>%10L<<', NULL)
RESULT:
	postgres: [('>>      NULL<<',)]

-----------
QUERY:
select format('>>%2$*1$L<<', NULL, 'Hello')
RESULT:
	postgres: [(">>'Hello'<<",)]

-----------
QUERY:
select format('>>%2$*1$L<<', 0, 'Hello')
RESULT:
	postgres: [(">>'Hello'<<",)]
