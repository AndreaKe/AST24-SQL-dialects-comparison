Guest DBMS identified: postgres
-----------
QUERY:
--
-- TIME
--

CREATE TABLE TIME_TBL (f1 time(2));
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:


INSERT INTO TIME_TBL VALUES ('00:00');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

INSERT INTO TIME_TBL VALUES ('01:00');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

-- as of 7.4, timezone spec should be accepted and ignored
INSERT INTO TIME_TBL VALUES ('02:03 PST');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

INSERT INTO TIME_TBL VALUES ('11:59 EDT');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

INSERT INTO TIME_TBL VALUES ('12:00');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

INSERT INTO TIME_TBL VALUES ('12:01');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

INSERT INTO TIME_TBL VALUES ('23:59');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:

INSERT INTO TIME_TBL VALUES ('11:59:59.99 PM');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


INSERT INTO TIME_TBL VALUES ('2003-03-07 15:36:39 America/New_York');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

INSERT INTO TIME_TBL VALUES ('2003-07-07 15:36:39 America/New_York');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

-- this should fail (the timezone offset is not known)
INSERT INTO TIME_TBL VALUES ('15:36:39 America/New_York');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:



SELECT f1 AS "Time" FROM TIME_TBL;
RESULT: [duckdb: ERROR, mysql: DIFFERENT]

-----------
QUERY:


SELECT f1 AS "Three" FROM TIME_TBL WHERE f1 < '05:06:07';
RESULT: [duckdb: ERROR, mysql: DIFFERENT]

-----------
QUERY:


SELECT f1 AS "Five" FROM TIME_TBL WHERE f1 > '05:06:07';
RESULT: [duckdb: ERROR, mysql: DIFFERENT]

-----------
QUERY:


SELECT f1 AS "None" FROM TIME_TBL WHERE f1 < '00:00';
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:


SELECT f1 AS "Eight" FROM TIME_TBL WHERE f1 >= '00:00';
RESULT: [duckdb: ERROR, mysql: DIFFERENT]

-----------
QUERY:


-- Check edge cases
SELECT '23:59:59.999999'::time;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT '23:59:59.9999999'::time;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:
  -- rounds up
SELECT '23:59:60'::time;
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:
  -- rounds up
SELECT '24:00:00'::time;
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:
  -- allowed
SELECT '24:00:00.01'::time;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- not allowed
SELECT '23:59:60.01'::time;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- not allowed
SELECT '24:01:00'::time;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- not allowed
SELECT '25:00:00'::time;
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- not allowed

-- Test non-error-throwing API
SELECT pg_input_is_valid('12:00:00', 'time');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('25:00:00', 'time');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT pg_input_is_valid('15:36:39 America/New_York', 'time');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('25:00:00', 'time');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:

SELECT * FROM pg_input_error_info('15:36:39 America/New_York', 'time');
RESULT: [duckdb: ERROR, mysql: ERROR]

-----------
QUERY:


--
-- TIME simple math
--
-- We now make a distinction between time and intervals,
-- and adding two times together makes no sense at all.
-- Leave in one query to show that it is rejected,
-- and do the rest of the testing in horology.sql
-- where we do mixed-type arithmetic. - thomas 2000-12-02

SELECT f1 + time '00:01' AS "Illegal" FROM TIME_TBL;
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:


--
-- test EXTRACT
--
SELECT EXTRACT(MICROSECOND FROM TIME '2020-05-26 13:30:25.575401');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT EXTRACT(MILLISECOND FROM TIME '2020-05-26 13:30:25.575401');
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

SELECT EXTRACT(SECOND      FROM TIME '2020-05-26 13:30:25.575401');
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

SELECT EXTRACT(MINUTE      FROM TIME '2020-05-26 13:30:25.575401');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT EXTRACT(HOUR        FROM TIME '2020-05-26 13:30:25.575401');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT EXTRACT(DAY         FROM TIME '2020-05-26 13:30:25.575401');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- error
SELECT EXTRACT(FORTNIGHT   FROM TIME '2020-05-26 13:30:25.575401');
RESULT: [duckdb: SAME, mysql: SAME]

-----------
QUERY:
  -- error
SELECT EXTRACT(TIMEZONE    FROM TIME '2020-05-26 13:30:25.575401');
RESULT: [duckdb: ERROR, mysql: SAME]

-----------
QUERY:
  -- error
SELECT EXTRACT(EPOCH       FROM TIME '2020-05-26 13:30:25.575401');
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:


-- date_part implementation is mostly the same as extract, so only
-- test a few cases for additional coverage.
SELECT date_part('microsecond', TIME '2020-05-26 13:30:25.575401');
RESULT: [duckdb: SAME, mysql: ERROR]

-----------
QUERY:

SELECT date_part('millisecond', TIME '2020-05-26 13:30:25.575401');
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

SELECT date_part('second',      TIME '2020-05-26 13:30:25.575401');
RESULT: [duckdb: DIFFERENT, mysql: ERROR]

-----------
QUERY:

SELECT date_part('epoch',       TIME '2020-05-26 13:30:25.575401');
RESULT: [duckdb: SAME, mysql: ERROR]


=========================================
Summary for test case time/test.sql of postgres
=========================================

=================
Results for duckdb
SAME      :	14 queries	31.82%
DIFFERENT :	7 queries	15.91%
ERROR     :	23 queries	52.27%

=================
Results for mysql
SAME      :	15 queries	34.09%
DIFFERENT :	4 queries	9.09%
ERROR     :	25 queries	56.82%
Guest results are identical to expected results