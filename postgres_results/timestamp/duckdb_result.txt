
-----------
QUERY:
--
-- TIMESTAMP
--

CREATE TABLE TIMESTAMP_TBL (d1 timestamp(2) without time zone)
RESULT:
	duckdb: None

-----------
QUERY:
-- Test shorthand input values
-- We can/* REPLACED */''t just /* REPLACED */''select/* REPLACED */'' the results since they aren/* REPLACED */''t constants /* REPLACED */, test for
-- equality instead.  We can do that by running the test inside a transaction
-- block, within which the value of /* REPLACED */''now/* REPLACED */'' shouldn/* REPLACED */''t change, and so these
-- related values shouldn/* REPLACED */''t either.

BEGIN
RESULT:
	duckdb: None

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('today')
RESULT:
	duckdb: Conversion Error: Could not convert string 'today' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('today')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('yesterday')
RESULT:
	duckdb: Conversion Error: Could not convert string 'yesterday' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('yesterday')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow')
RESULT:
	duckdb: Conversion Error: Could not convert string 'tomorrow' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow')
                                          ^

-----------
QUERY:
-- time zone should be ignored by this data type
INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow EST')
RESULT:
	duckdb: Conversion Error: Could not convert string 'tomorrow EST' to INT64
LINE 2: INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow EST')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow zulu')
RESULT:
	duckdb: Conversion Error: Could not convert string 'tomorrow zulu' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('tomorrow zulu')
                                          ^

-----------
QUERY:
SELECT count(*) AS One FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'today'
RESULT:
	duckdb: TransactionContext Error: Current transaction is aborted (please ROLLBACK)

-----------
QUERY:
SELECT count(*) AS Three FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'tomorrow'
RESULT:
	duckdb: TransactionContext Error: Current transaction is aborted (please ROLLBACK)

-----------
QUERY:
SELECT count(*) AS One FROM TIMESTAMP_TBL WHERE d1 = timestamp without time zone 'yesterday'
RESULT:
	duckdb: TransactionContext Error: Current transaction is aborted (please ROLLBACK)

-----------
QUERY:
COMMIT
RESULT:
	duckdb: None

-----------
QUERY:
DELETE FROM TIMESTAMP_TBL
RESULT:
	duckdb: None

-----------
QUERY:
-- Verify that /* REPLACED */''now/* REPLACED */'' *does* change over a reasonable interval such as 100 msec,
-- and that it doesn/* REPLACED */''t change over the same interval within a transaction block

INSERT INTO TIMESTAMP_TBL VALUES ('now')
RESULT:
	duckdb: Conversion Error: Could not convert string 'now' to INT64
LINE 4: INSERT INTO TIMESTAMP_TBL VALUES ('now')
                                          ^

-----------
QUERY:
SELECT pg_sleep(0.1)
RESULT:
	duckdb: Catalog Error: Scalar Function with name pg_sleep does not exist!
Did you mean "pg_get_expr"?

-----------
QUERY:
BEGIN
RESULT:
	duckdb: None

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('now')
RESULT:
	duckdb: Conversion Error: Could not convert string 'now' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('now')
                                          ^

-----------
QUERY:
SELECT pg_sleep(0.1)
RESULT:
	duckdb: TransactionContext Error: Current transaction is aborted (please ROLLBACK)

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('now')
RESULT:
	duckdb: Conversion Error: Could not convert string 'now' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('now')
                                          ^

-----------
QUERY:
SELECT pg_sleep(0.1)
RESULT:
	duckdb: TransactionContext Error: Current transaction is aborted (please ROLLBACK)

-----------
QUERY:
SELECT count(*) AS two FROM TIMESTAMP_TBL WHERE d1 = timestamp(2) without time zone 'now'
RESULT:
	duckdb: TransactionContext Error: Current transaction is aborted (please ROLLBACK)

-----------
QUERY:
SELECT count(d1) AS three, count(DISTINCT d1) AS two FROM TIMESTAMP_TBL
RESULT:
	duckdb: TransactionContext Error: Current transaction is aborted (please ROLLBACK)

-----------
QUERY:
COMMIT
RESULT:
	duckdb: None

-----------
QUERY:
TRUNCATE TIMESTAMP_TBL
RESULT:
	duckdb: None

-----------
QUERY:
-- Special values
INSERT INTO TIMESTAMP_TBL VALUES ('-infinity')
RESULT:
	duckdb: None

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('infinity')
RESULT:
	duckdb: None

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('epoch')
RESULT:
	duckdb: None

-----------
QUERY:
SELECT timestamp 'infinity' = timestamp '+infinity' AS t
RESULT:
	duckdb: [(False,)]

-----------
QUERY:
-- Postgres v6.0 standard output format
INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01 1997 PST')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Mon Feb 10 17:32:01 1997 PST' to INT64
LINE 2: INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01 1997 PST')
                                          ^

-----------
QUERY:
-- Variations on Postgres v6.1 standard output format
INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.000001 1997 PST')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Mon Feb 10 17:32:01.000001 1997 PST' to INT64
LINE 2: INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.000001 1997 PST')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.999999 1997 PST')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Mon Feb 10 17:32:01.999999 1997 PST' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.999999 1997 PST')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.4 1997 PST')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Mon Feb 10 17:32:01.4 1997 PST' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.4 1997 PST')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.5 1997 PST')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Mon Feb 10 17:32:01.5 1997 PST' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.5 1997 PST')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.6 1997 PST')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Mon Feb 10 17:32:01.6 1997 PST' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Mon Feb 10 17:32:01.6 1997 PST')
                                          ^

-----------
QUERY:
-- ISO 8601 format
INSERT INTO TIMESTAMP_TBL VALUES ('1997-01-02')
RESULT:
	duckdb: None

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('1997-01-02 03:04:05')
RESULT:
	duckdb: None

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('1997-02-10 17:32:01-08')
RESULT:
	duckdb: None

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('1997-02-10 17:32:01-0800')
RESULT:
	duckdb: None

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('1997-02-10 17:32:01 -08:00')
RESULT:
	duckdb: Conversion Error: Could not convert string '1997-02-10 17:32:01 -08:00' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('1997-02-10 17:32:01 -08:00')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('19970210 173201 -0800')
RESULT:
	duckdb: Conversion Error: Could not convert string '19970210 173201 -0800' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('19970210 173201 -0800')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('1997-06-10 17:32:01 -07:00')
RESULT:
	duckdb: Conversion Error: Could not convert string '1997-06-10 17:32:01 -07:00' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('1997-06-10 17:32:01 -07:00')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('2001-09-22T18:19:20')
RESULT:
	duckdb: None

-----------
QUERY:
-- POSIX format (note that the timezone abbrev is just decoration here)
INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 08:14:01 GMT+8')
RESULT:
	duckdb: Conversion Error: Could not convert string '2000-03-15 08:14:01 GMT+8' to INT64
LINE 2: INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 08:14:01 GMT+8')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 13:14:02 GMT-1')
RESULT:
	duckdb: Conversion Error: Could not convert string '2000-03-15 13:14:02 GMT-1' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 13:14:02 GMT-1')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 12:14:03 GMT-2')
RESULT:
	duckdb: Conversion Error: Could not convert string '2000-03-15 12:14:03 GMT-2' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 12:14:03 GMT-2')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 03:14:04 PST+8')
RESULT:
	duckdb: Conversion Error: Could not convert string '2000-03-15 03:14:04 PST+8' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 03:14:04 PST+8')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 02:14:05 MST+7:00')
RESULT:
	duckdb: Conversion Error: Could not convert string '2000-03-15 02:14:05 MST+7:00' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('2000-03-15 02:14:05 MST+7:00')
                                          ^

-----------
QUERY:
-- Variations for acceptable input formats
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 10 17:32:01 1997 -0800')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 10 17:32:01 1997 -0800' to INT64
LINE 2: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 10 17:32:01 1997 -0800')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 10 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 10 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 10 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 10 5:32PM 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 10 5:32PM 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 10 5:32PM 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('1997/02/10 17:32:01-0800')
RESULT:
	duckdb: None

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('1997-02-10 17:32:01 PST')
RESULT:
	duckdb: Conversion Error: Could not convert string '1997-02-10 17:32:01 PST' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('1997-02-10 17:32:01 PST')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb-10-1997 17:32:01 PST')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb-10-1997 17:32:01 PST' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb-10-1997 17:32:01 PST')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('02-10-1997 17:32:01 PST')
RESULT:
	duckdb: Conversion Error: Could not convert string '02-10-1997 17:32:01 PST' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('02-10-1997 17:32:01 PST')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('19970210 173201 PST')
RESULT:
	duckdb: Conversion Error: Could not convert string '19970210 173201 PST' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('19970210 173201 PST')
                                          ^

-----------
QUERY:
set datestyle to ymd
RESULT:
	duckdb: Catalog Error: unrecognized configuration parameter "datestyle"

Did you mean: "user"

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('97FEB10 5:32:01PM UTC')
RESULT:
	duckdb: Conversion Error: Could not convert string '97FEB10 5:32:01PM UTC' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('97FEB10 5:32:01PM UTC')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('97/02/10 17:32:01 UTC')
RESULT:
	duckdb: None

-----------
QUERY:
reset datestyle
RESULT:
	duckdb: Catalog Error: unrecognized configuration parameter "datestyle"

Did you mean: "user"

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('1997.041 17:32:01 UTC')
RESULT:
	duckdb: Conversion Error: Could not convert string '1997.041 17:32:01 UTC' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('1997.041 17:32:01 UTC')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('19970210 173201 America/New_York')
RESULT:
	duckdb: Conversion Error: Could not convert string '19970210 173201 America/New_York' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('19970210 173201 America/New_York')
                                          ^

-----------
QUERY:
-- this fails (even though TZ is a no-op, we still look it up)
INSERT INTO TIMESTAMP_TBL VALUES ('19970710 173201 America/Does_not_exist')
RESULT:
	duckdb: Conversion Error: Could not convert string '19970710 173201 America/Does_not_exist' to INT64
LINE 2: INSERT INT...
                                          ^

-----------
QUERY:
-- Test non-error-throwing API
SELECT pg_input_is_valid('now', 'timestamp')
RESULT:
	duckdb: Catalog Error: Scalar Function with name pg_input_is_valid does not exist!
Did you mean "json_valid"?

-----------
QUERY:
SELECT pg_input_is_valid('garbage', 'timestamp')
RESULT:
	duckdb: Catalog Error: Scalar Function with name pg_input_is_valid does not exist!
Did you mean "json_valid"?

-----------
QUERY:
SELECT pg_input_is_valid('2001-01-01 00:00 Nehwon/Lankhmar', 'timestamp')
RESULT:
	duckdb: Catalog Error: Scalar Function with name pg_input_is_valid does not exist!
Did you mean "json_valid"?

-----------
QUERY:
SELECT * FROM pg_input_error_info('garbage', 'timestamp')
RESULT:
	duckdb: Catalog Error: Table Function with name pg_input_error_info does not exist!
Did you mean "pragma_storage_info"?

-----------
QUERY:
SELECT * FROM pg_input_error_info('2001-01-01 00:00 Nehwon/Lankhmar', 'timestamp')
RESULT:
	duckdb: Catalog Error: Table Function with name pg_input_error_info does not exist!
Did you mean "pragma_storage_info"?

-----------
QUERY:
-- Check date conversion and date arithmetic
INSERT INTO TIMESTAMP_TBL VALUES ('1997-06-10 18:32:01 PDT')
RESULT:
	duckdb: Conversion Error: Could not convert string '1997-06-10 18:32:01 PDT' to INT64
LINE 2: INSERT INTO TIMESTAMP_TBL VALUES ('1997-06-10 18:32:01 PDT')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 10 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 10 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 10 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 11 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 11 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 11 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 12 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 12 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 12 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 13 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 13 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 13 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 14 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 14 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 14 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 15 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 15 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 15 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 16 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 0097 BC')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 16 17:32:01 0097 BC' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 0097 BC')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 0097')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 16 17:32:01 0097' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 0097')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 0597')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 16 17:32:01 0597' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 0597')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1097')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 16 17:32:01 1097' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1097')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1697')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 16 17:32:01 1697' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1697')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1797')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 16 17:32:01 1797' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1797')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1897')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 16 17:32:01 1897' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1897')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 16 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 2097')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 16 17:32:01 2097' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 2097')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 28 17:32:01 1996')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 28 17:32:01 1996' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 28 17:32:01 1996')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 29 17:32:01 1996')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 29 17:32:01 1996' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 29 17:32:01 1996')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Mar 01 17:32:01 1996')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Mar 01 17:32:01 1996' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Mar 01 17:32:01 1996')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Dec 30 17:32:01 1996')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Dec 30 17:32:01 1996' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Dec 30 17:32:01 1996')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Dec 31 17:32:01 1996')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Dec 31 17:32:01 1996' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Dec 31 17:32:01 1996')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Jan 01 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Jan 01 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Jan 01 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 28 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 28 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 28 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 29 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 29 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 29 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Mar 01 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Mar 01 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Mar 01 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Dec 30 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Dec 30 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Dec 30 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Dec 31 17:32:01 1997')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Dec 31 17:32:01 1997' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Dec 31 17:32:01 1997')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Dec 31 17:32:01 1999')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Dec 31 17:32:01 1999' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Dec 31 17:32:01 1999')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Jan 01 17:32:01 2000')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Jan 01 17:32:01 2000' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Jan 01 17:32:01 2000')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Dec 31 17:32:01 2000')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Dec 31 17:32:01 2000' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Dec 31 17:32:01 2000')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Jan 01 17:32:01 2001')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Jan 01 17:32:01 2001' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Jan 01 17:32:01 2001')
                                          ^

-----------
QUERY:
-- Currently unsupported syntax and ranges
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 -0097')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 16 17:32:01 -0097' to INT64
LINE 2: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 -0097')
                                          ^

-----------
QUERY:
INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 5097 BC')
RESULT:
	duckdb: Conversion Error: Could not convert string 'Feb 16 17:32:01 5097 BC' to INT64
LINE 1: INSERT INTO TIMESTAMP_TBL VALUES ('Feb 16 17:32:01 5097 BC')
                                          ^

-----------
QUERY:
SELECT d1 FROM TIMESTAMP_TBL
RESULT:
	duckdb: [(datetime.datetime(1, 1, 1, 0, 0),), (datetime.datetime(9999, 12, 31, 23, 59, 59, 999999),), (datetime.datetime(1970, 1, 1, 0, 0),), (datetime.datetime(1997, 1, 2, 0, 0),), (datetime.datetime(1997, 1, 2, 3, 4, 5),), (datetime.datetime(1997, 2, 11, 1, 32, 1),), (datetime.datetime(1997, 2, 11, 1, 32, 1),), (datetime.datetime(2001, 9, 22, 18, 19, 20),), (datetime.datetime(1997, 2, 11, 1, 32, 1),), (datetime.datetime(97, 2, 10, 17, 32, 1),)]

-----------
QUERY:
-- Check behavior at the boundaries of the timestamp range
SELECT '4714-11-24 00:00:00 BC'::timestamp
RESULT:
	duckdb: Conversion Error: timestamp field value "4714-11-24 00:00:00 BC" has a timestamp that is not UTC.
Use the TIMESTAMPTZ type with the ICU extension loaded to handle non-UTC timestamps.

-----------
QUERY:
SELECT '4714-11-23 23:59:59 BC'::timestamp
RESULT:
	duckdb: Conversion Error: timestamp field value "4714-11-23 23:59:59 BC" has a timestamp that is not UTC.
Use the TIMESTAMPTZ type with the ICU extension loaded to handle non-UTC timestamps.

-----------
QUERY:
-- out of range
SELECT '294276-12-31 23:59:59'::timestamp
RESULT:
	duckdb: Conversion Error: timestamp field value out of range: "294276-12-31 23:59:59", expected format is (YYYY-MM-DD HH:MM:SS[.US][±HH:MM| ZONE])

-----------
QUERY:
SELECT '294277-01-01 00:00:00'::timestamp
RESULT:
	duckdb: Conversion Error: timestamp field value out of range: "294277-01-01 00:00:00", expected format is (YYYY-MM-DD HH:MM:SS[.US][±HH:MM| ZONE])

-----------
QUERY:
-- out of range

-- Demonstrate functions and operators
SELECT d1 FROM TIMESTAMP_TBL
   WHERE d1 > timestamp without time zone '1997-01-02'
RESULT:
	duckdb: [(datetime.datetime(9999, 12, 31, 23, 59, 59, 999999),), (datetime.datetime(1997, 1, 2, 3, 4, 5),), (datetime.datetime(1997, 2, 11, 1, 32, 1),), (datetime.datetime(1997, 2, 11, 1, 32, 1),), (datetime.datetime(2001, 9, 22, 18, 19, 20),), (datetime.datetime(1997, 2, 11, 1, 32, 1),)]

-----------
QUERY:
SELECT d1 FROM TIMESTAMP_TBL
   WHERE d1 < timestamp without time zone '1997-01-02'
RESULT:
	duckdb: [(datetime.datetime(1, 1, 1, 0, 0),), (datetime.datetime(1970, 1, 1, 0, 0),), (datetime.datetime(97, 2, 10, 17, 32, 1),)]

-----------
QUERY:
SELECT d1 FROM TIMESTAMP_TBL
   WHERE d1 = timestamp without time zone '1997-01-02'
RESULT:
	duckdb: [(datetime.datetime(1997, 1, 2, 0, 0),)]

-----------
QUERY:
SELECT d1 FROM TIMESTAMP_TBL
   WHERE d1 != timestamp without time zone '1997-01-02'
RESULT:
	duckdb: [(datetime.datetime(1, 1, 1, 0, 0),), (datetime.datetime(9999, 12, 31, 23, 59, 59, 999999),), (datetime.datetime(1970, 1, 1, 0, 0),), (datetime.datetime(1997, 1, 2, 3, 4, 5),), (datetime.datetime(1997, 2, 11, 1, 32, 1),), (datetime.datetime(1997, 2, 11, 1, 32, 1),), (datetime.datetime(2001, 9, 22, 18, 19, 20),), (datetime.datetime(1997, 2, 11, 1, 32, 1),), (datetime.datetime(97, 2, 10, 17, 32, 1),)]

-----------
QUERY:
SELECT d1 FROM TIMESTAMP_TBL
   WHERE d1 <= timestamp without time zone '1997-01-02'
RESULT:
	duckdb: [(datetime.datetime(1, 1, 1, 0, 0),), (datetime.datetime(1970, 1, 1, 0, 0),), (datetime.datetime(1997, 1, 2, 0, 0),), (datetime.datetime(97, 2, 10, 17, 32, 1),)]

-----------
QUERY:
SELECT d1 FROM TIMESTAMP_TBL
   WHERE d1 >= timestamp without time zone '1997-01-02'
RESULT:
	duckdb: [(datetime.datetime(9999, 12, 31, 23, 59, 59, 999999),), (datetime.datetime(1997, 1, 2, 0, 0),), (datetime.datetime(1997, 1, 2, 3, 4, 5),), (datetime.datetime(1997, 2, 11, 1, 32, 1),), (datetime.datetime(1997, 2, 11, 1, 32, 1),), (datetime.datetime(2001, 9, 22, 18, 19, 20),), (datetime.datetime(1997, 2, 11, 1, 32, 1),)]

-----------
QUERY:
SELECT d1 - timestamp without time zone '1997-01-02' AS diff
   FROM TIMESTAMP_TBL WHERE d1 BETWEEN '1902-01-01' AND '2038-01-01'
RESULT:
	duckdb: [(datetime.timedelta(days=-9863),), (datetime.timedelta(0),), (datetime.timedelta(seconds=11045),), (datetime.timedelta(days=40, seconds=5521),), (datetime.timedelta(days=40, seconds=5521),), (datetime.timedelta(days=1724, seconds=65960),), (datetime.timedelta(days=40, seconds=5521),)]

-----------
QUERY:
SELECT date_trunc( 'week', timestamp '2004-02-29 15:44:17.71393' ) AS week_trunc
RESULT:
	duckdb: [(datetime.date(2004, 2, 23),)]

-----------
QUERY:
-- verify date_bin behaves the same as date_trunc for relevant intervals

-- case 1: AD dates, origin < input
SELECT
  str,
  interval,
  date_trunc(str, ts) = date_bin(interval::interval, ts, timestamp '2001-01-01') AS equal
FROM (
  VALUES
  ('week', '7 d'),
  ('day', '1 d'),
  ('hour', '1 h'),
  ('minute', '1 m'),
  ('second', '1 s'),
  ('millisecond', '1 ms'),
  ('microsecond', '1 us')
) intervals (str, interval),
(VALUES (timestamp '2020-02-29 15:44:17.71393')) ts (ts)
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
-- case 2: BC dates, origin < input
SELECT
  str,
  interval,
  date_trunc(str, ts) = date_bin(interval::interval, ts, timestamp '2000-01-01 BC') AS equal
FROM (
  VALUES
  ('week', '7 d'),
  ('day', '1 d'),
  ('hour', '1 h'),
  ('minute', '1 m'),
  ('second', '1 s'),
  ('millisecond', '1 ms'),
  ('microsecond', '1 us')
) intervals (str, interval),
(VALUES (timestamp '0055-6-10 15:44:17.71393 BC')) ts (ts)
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
-- case 3: AD dates, origin > input
SELECT
  str,
  interval,
  date_trunc(str, ts) = date_bin(interval::interval, ts, timestamp '2020-03-02') AS equal
FROM (
  VALUES
  ('week', '7 d'),
  ('day', '1 d'),
  ('hour', '1 h'),
  ('minute', '1 m'),
  ('second', '1 s'),
  ('millisecond', '1 ms'),
  ('microsecond', '1 us')
) intervals (str, interval),
(VALUES (timestamp '2020-02-29 15:44:17.71393')) ts (ts)
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
-- case 4: BC dates, origin > input
SELECT
  str,
  interval,
  date_trunc(str, ts) = date_bin(interval::interval, ts, timestamp '0055-06-17 BC') AS equal
FROM (
  VALUES
  ('week', '7 d'),
  ('day', '1 d'),
  ('hour', '1 h'),
  ('minute', '1 m'),
  ('second', '1 s'),
  ('millisecond', '1 ms'),
  ('microsecond', '1 us')
) intervals (str, interval),
(VALUES (timestamp '0055-6-10 15:44:17.71393 BC')) ts (ts)
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
-- bin timestamps into arbitrary intervals
SELECT
  interval,
  ts,
  origin,
  date_bin(interval::interval, ts, origin)
FROM (
  VALUES
  ('15 days'),
  ('2 hours'),
  ('1 hour 30 minutes'),
  ('15 minutes'),
  ('10 seconds'),
  ('100 milliseconds'),
  ('250 microseconds')
) intervals (interval),
(VALUES (timestamp '2020-02-11 15:44:17.71393')) ts (ts),
(VALUES (timestamp '2001-01-01')) origin (origin)
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
-- shift bins using the origin parameter:
SELECT date_bin('5 min'::interval, timestamp '2020-02-01 01:01:01', timestamp '2020-02-01 00:02:30')
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
-- test roundoff edge case when source < origin
SELECT date_bin('30 minutes'::interval, timestamp '2024-02-01 15:00:00', timestamp '2024-02-01 17:00:00')
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
-- disallow intervals with months or years
SELECT date_bin('5 months'::interval, timestamp '2020-02-01 01:01:01', timestamp '2001-01-01')
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
SELECT date_bin('5 years'::interval,  timestamp '2020-02-01 01:01:01', timestamp '2001-01-01')
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
-- disallow zero intervals
SELECT date_bin('0 days'::interval, timestamp '1970-01-01 01:00:00' , timestamp '1970-01-01 00:00:00')
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
-- disallow negative intervals
SELECT date_bin('-2 days'::interval, timestamp '1970-01-01 01:00:00' , timestamp '1970-01-01 00:00:00')
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
-- test overflow cases
select date_bin('15 minutes'::interval, timestamp '294276-12-30', timestamp '4000-12-20 BC')
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
select date_bin('200000000 days'::interval, '2024-02-01'::timestamp, '2024-01-01'::timestamp)
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
select date_bin('365000 days'::interval, '4400-01-01 BC'::timestamp, '4000-01-01 BC'::timestamp)
RESULT:
	duckdb: Catalog Error: Scalar Function with name date_bin does not exist!
Did you mean "date_sub"?

-----------
QUERY:
-- Test casting within a BETWEEN qualifier
SELECT d1 - timestamp without time zone '1997-01-02' AS diff
  FROM TIMESTAMP_TBL
  WHERE d1 BETWEEN timestamp without time zone '1902-01-01'
   AND timestamp without time zone '2038-01-01'
RESULT:
	duckdb: [(datetime.timedelta(days=-9863),), (datetime.timedelta(0),), (datetime.timedelta(seconds=11045),), (datetime.timedelta(days=40, seconds=5521),), (datetime.timedelta(days=40, seconds=5521),), (datetime.timedelta(days=1724, seconds=65960),), (datetime.timedelta(days=40, seconds=5521),)]

-----------
QUERY:
-- DATE_PART (timestamp_part)
SELECT d1 as "timestamp",
   date_part( 'year', d1) AS year, date_part( 'month', d1) AS month,
   date_part( 'day', d1) AS day, date_part( 'hour', d1) AS hour,
   date_part( 'minute', d1) AS minute, date_part( 'second', d1) AS second
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: [(datetime.datetime(1, 1, 1, 0, 0), None, None, None, None, None, None), (datetime.datetime(9999, 12, 31, 23, 59, 59, 999999), None, None, None, None, None, None), (datetime.datetime(1970, 1, 1, 0, 0), 1970, 1, 1, 0, 0, 0), (datetime.datetime(1997, 1, 2, 0, 0), 1997, 1, 2, 0, 0, 0), (datetime.datetime(1997, 1, 2, 3, 4, 5), 1997, 1, 2, 3, 4, 5), (datetime.datetime(1997, 2, 11, 1, 32, 1), 1997, 2, 11, 1, 32, 1), (datetime.datetime(1997, 2, 11, 1, 32, 1), 1997, 2, 11, 1, 32, 1), (datetime.datetime(2001, 9, 22, 18, 19, 20), 2001, 9, 22, 18, 19, 20), (datetime.datetime(1997, 2, 11, 1, 32, 1), 1997, 2, 11, 1, 32, 1), (datetime.datetime(97, 2, 10, 17, 32, 1), 97, 2, 10, 17, 32, 1)]

-----------
QUERY:
SELECT d1 as "timestamp",
   date_part( 'quarter', d1) AS quarter, date_part( 'msec', d1) AS msec,
   date_part( 'usec', d1) AS usec
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: [(datetime.datetime(1, 1, 1, 0, 0), None, None, None), (datetime.datetime(9999, 12, 31, 23, 59, 59, 999999), None, None, None), (datetime.datetime(1970, 1, 1, 0, 0), 1, 0, 0), (datetime.datetime(1997, 1, 2, 0, 0), 1, 0, 0), (datetime.datetime(1997, 1, 2, 3, 4, 5), 1, 5000, 5000000), (datetime.datetime(1997, 2, 11, 1, 32, 1), 1, 1000, 1000000), (datetime.datetime(1997, 2, 11, 1, 32, 1), 1, 1000, 1000000), (datetime.datetime(2001, 9, 22, 18, 19, 20), 3, 20000, 20000000), (datetime.datetime(1997, 2, 11, 1, 32, 1), 1, 1000, 1000000), (datetime.datetime(97, 2, 10, 17, 32, 1), 1, 1000, 1000000)]

-----------
QUERY:
SELECT d1 as "timestamp",
   date_part( 'isoyear', d1) AS isoyear, date_part( 'week', d1) AS week,
   date_part( 'isodow', d1) AS isodow, date_part( 'dow', d1) AS dow,
   date_part( 'doy', d1) AS doy
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: [(datetime.datetime(1, 1, 1, 0, 0), None, None, None, None, None), (datetime.datetime(9999, 12, 31, 23, 59, 59, 999999), None, None, None, None, None), (datetime.datetime(1970, 1, 1, 0, 0), 1970, 1, 4, 4, 1), (datetime.datetime(1997, 1, 2, 0, 0), 1997, 1, 4, 4, 2), (datetime.datetime(1997, 1, 2, 3, 4, 5), 1997, 1, 4, 4, 2), (datetime.datetime(1997, 2, 11, 1, 32, 1), 1997, 7, 2, 2, 42), (datetime.datetime(1997, 2, 11, 1, 32, 1), 1997, 7, 2, 2, 42), (datetime.datetime(2001, 9, 22, 18, 19, 20), 2001, 38, 6, 6, 265), (datetime.datetime(1997, 2, 11, 1, 32, 1), 1997, 7, 2, 2, 42), (datetime.datetime(97, 2, 10, 17, 32, 1), 97, 6, 7, 0, 41)]

-----------
QUERY:
SELECT d1 as "timestamp",
   date_part( 'decade', d1) AS decade,
   date_part( 'century', d1) AS century,
   date_part( 'millennium', d1) AS millennium,
   round(date_part( 'julian', d1)) AS julian,
   date_part( 'epoch', d1) AS epoch
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: [(datetime.datetime(1, 1, 1, 0, 0), None, None, None, None, None), (datetime.datetime(9999, 12, 31, 23, 59, 59, 999999), None, None, None, None, None), (datetime.datetime(1970, 1, 1, 0, 0), 197, 20, 2, 2440588.0, 0.0), (datetime.datetime(1997, 1, 2, 0, 0), 199, 20, 2, 2450451.0, 852163200.0), (datetime.datetime(1997, 1, 2, 3, 4, 5), 199, 20, 2, 2450451.0, 852174245.0), (datetime.datetime(1997, 2, 11, 1, 32, 1), 199, 20, 2, 2450491.0, 855624721.0), (datetime.datetime(1997, 2, 11, 1, 32, 1), 199, 20, 2, 2450491.0, 855624721.0), (datetime.datetime(2001, 9, 22, 18, 19, 20), 200, 21, 3, 2452176.0, 1001182760.0), (datetime.datetime(1997, 2, 11, 1, 32, 1), 199, 20, 2, 2450491.0, 855624721.0), (datetime.datetime(97, 2, 10, 17, 32, 1), 9, 1, 1, 1756531.0, -59102548079.0)]

-----------
QUERY:
-- extract implementation is mostly the same as date_part, so only
-- test a few cases for additional coverage.
SELECT d1 as "timestamp",
   extract(microseconds from d1) AS microseconds,
   extract(milliseconds from d1) AS milliseconds,
   extract(seconds from d1) AS seconds,
   round(extract(julian from d1)) AS julian,
   extract(epoch from d1) AS epoch
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: [(datetime.datetime(1, 1, 1, 0, 0), None, None, None, None, None), (datetime.datetime(9999, 12, 31, 23, 59, 59, 999999), None, None, None, None, None), (datetime.datetime(1970, 1, 1, 0, 0), 0, 0, 0, 2440588.0, 0.0), (datetime.datetime(1997, 1, 2, 0, 0), 0, 0, 0, 2450451.0, 852163200.0), (datetime.datetime(1997, 1, 2, 3, 4, 5), 5000000, 5000, 5, 2450451.0, 852174245.0), (datetime.datetime(1997, 2, 11, 1, 32, 1), 1000000, 1000, 1, 2450491.0, 855624721.0), (datetime.datetime(1997, 2, 11, 1, 32, 1), 1000000, 1000, 1, 2450491.0, 855624721.0), (datetime.datetime(2001, 9, 22, 18, 19, 20), 20000000, 20000, 20, 2452176.0, 1001182760.0), (datetime.datetime(1997, 2, 11, 1, 32, 1), 1000000, 1000, 1, 2450491.0, 855624721.0), (datetime.datetime(97, 2, 10, 17, 32, 1), 1000000, 1000, 1, 1756531.0, -59102548079.0)]

-----------
QUERY:
-- value near upper bound uses special case in code
SELECT date_part('epoch', '294270-01-01 00:00:00'::timestamp)
RESULT:
	duckdb: Conversion Error: timestamp field value out of range: "294270-01-01 00:00:00", expected format is (YYYY-MM-DD HH:MM:SS[.US][±HH:MM| ZONE])

-----------
QUERY:
SELECT extract(epoch from '294270-01-01 00:00:00'::timestamp)
RESULT:
	duckdb: Conversion Error: timestamp field value out of range: "294270-01-01 00:00:00", expected format is (YYYY-MM-DD HH:MM:SS[.US][±HH:MM| ZONE])

-----------
QUERY:
-- another internal overflow test case
SELECT extract(epoch from '5000-01-01 00:00:00'::timestamp)
RESULT:
	duckdb: [(95617584000.0,)]

-----------
QUERY:
-- test edge-case overflow in timestamp subtraction
SELECT timestamp '294276-12-31 23:59:59' - timestamp '1999-12-23 19:59:04.224193' AS ok
RESULT:
	duckdb: Conversion Error: timestamp field value out of range: "294276-12-31 23:59:59", expected format is (YYYY-MM-DD HH:MM:SS[.US][±HH:MM| ZONE])

-----------
QUERY:
SELECT timestamp '294276-12-31 23:59:59' - timestamp '1999-12-23 19:59:04.224192' AS overflows
RESULT:
	duckdb: Conversion Error: timestamp field value out of range: "294276-12-31 23:59:59", expected format is (YYYY-MM-DD HH:MM:SS[.US][±HH:MM| ZONE])

-----------
QUERY:
-- TO_CHAR()
SELECT to_char(d1, 'DAY Day day DY Dy dy MONTH Month month RM MON Mon mon')
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: Catalog Error: Scalar Function with name to_char does not exist!
Did you mean "chr"?

-----------
QUERY:
SELECT to_char(d1, 'FMDAY FMDay FMday FMMONTH FMMonth FMmonth FMRM')
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: Catalog Error: Scalar Function with name to_char does not exist!
Did you mean "chr"?

-----------
QUERY:
SELECT to_char(d1, 'Y,YYY YYYY YYY YY Y CC Q MM WW DDD DD D J')
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: Catalog Error: Scalar Function with name to_char does not exist!
Did you mean "chr"?

-----------
QUERY:
SELECT to_char(d1, 'FMY,YYY FMYYYY FMYYY FMYY FMY FMCC FMQ FMMM FMWW FMDDD FMDD FMD FMJ')
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: Catalog Error: Scalar Function with name to_char does not exist!
Did you mean "chr"?

-----------
QUERY:
SELECT to_char(d1, 'HH HH12 HH24 MI SS SSSS')
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: Catalog Error: Scalar Function with name to_char does not exist!
Did you mean "chr"?

-----------
QUERY:
SELECT to_char(d1, E'"HH:MI:SS is" HH:MI:SS "\\"text between quote marks\\""')
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: Catalog Error: Scalar Function with name to_char does not exist!
Did you mean "chr"?

-----------
QUERY:
SELECT to_char(d1, 'HH24--text--MI--text--SS')
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: Catalog Error: Scalar Function with name to_char does not exist!
Did you mean "chr"?

-----------
QUERY:
SELECT to_char(d1, 'YYYYTH YYYYth Jth')
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: Catalog Error: Scalar Function with name to_char does not exist!
Did you mean "chr"?

-----------
QUERY:
SELECT to_char(d1, 'YYYY A.D. YYYY a.d. YYYY bc HH:MI:SS P.M. HH:MI:SS p.m. HH:MI:SS pm')
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: Catalog Error: Scalar Function with name to_char does not exist!
Did you mean "chr"?

-----------
QUERY:
SELECT to_char(d1, 'IYYY IYY IY I IW IDDD ID')
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: Catalog Error: Scalar Function with name to_char does not exist!
Did you mean "chr"?

-----------
QUERY:
SELECT to_char(d1, 'FMIYYY FMIYY FMIY FMI FMIW FMIDDD FMID')
   FROM TIMESTAMP_TBL
RESULT:
	duckdb: Catalog Error: Scalar Function with name to_char does not exist!
Did you mean "chr"?

-----------
QUERY:
SELECT to_char(d, 'FF1 FF2 FF3 FF4 FF5 FF6  ff1 ff2 ff3 ff4 ff5 ff6  MS US')
   FROM (VALUES
       ('2018-11-02 12:34:56'::timestamp),
       ('2018-11-02 12:34:56.78'),
       ('2018-11-02 12:34:56.78901'),
       ('2018-11-02 12:34:56.78901234')
   ) d(d)
RESULT:
	duckdb: Catalog Error: Scalar Function with name to_char does not exist!
Did you mean "chr"?

-----------
QUERY:
-- Roman months, with upper and lower case.
SELECT i,
       to_char(i * interval '1mon', 'rm'),
       to_char(i * interval '1mon', 'RM')
    FROM generate_series(-13, 13) i
RESULT:
	duckdb: Catalog Error: Scalar Function with name to_char does not exist!
Did you mean "chr"?

-----------
QUERY:
-- timestamp numeric fields constructor
SELECT make_timestamp(2014, 12, 28, 6, 30, 45.887)
RESULT:
	duckdb: [(datetime.datetime(2014, 12, 28, 6, 30, 45, 887000),)]

-----------
QUERY:
SELECT make_timestamp(-44, 3, 15, 12, 30, 15)
RESULT:
	duckdb: [('0045-03-15 (BC) 12:30:15',)]

-----------
QUERY:
-- should fail
select make_timestamp(0, 7, 15, 12, 30, 15)
RESULT:
	duckdb: [('0001-07-15 (BC) 12:30:15',)]

-----------
QUERY:
-- generate_series for timestamp
select * from generate_series('2020-01-01 00:00'::timestamp,
                              '2020-01-02 03:00'::timestamp,
                              '1 hour'::interval)
RESULT:
	duckdb: Conversion Error: timestamp field value out of range: "2020-01-01 00:00", expected format is (YYYY-MM-DD HH:MM:SS[.US][±HH:MM| ZONE])

-----------
QUERY:
-- the LIMIT should allow this to terminate in a reasonable amount of time
-- (but that unfortunately doesn/* REPLACED */''t work yet for SELECT * FROM ...)
select generate_series('2022-01-01 00:00'::timestamp,
                       'infinity'::timestamp,
                       '1 month'::interval) limit 10
RESULT:
	duckdb: Conversion Error: timestamp field value out of range: "2022-01-01 00:00", expected format is (YYYY-MM-DD HH:MM:SS[.US][±HH:MM| ZONE])

-----------
QUERY:
-- errors
select * from generate_series('2020-01-01 00:00'::timestamp,
                              '2020-01-02 03:00'::timestamp,
                              '0 hour'::interval)
RESULT:
	duckdb: Conversion Error: timestamp field value out of range: "2020-01-01 00:00", expected format is (YYYY-MM-DD HH:MM:SS[.US][±HH:MM| ZONE])

-----------
QUERY:
select generate_series(timestamp '1995-08-06 12:12:12', timestamp '1996-08-06 12:12:12', interval 'infinity')
RESULT:
	duckdb: Conversion Error: Could not convert string 'infinity' to INTERVAL

-----------
QUERY:
select generate_series(timestamp '1995-08-06 12:12:12', timestamp '1996-08-06 12:12:12', interval '-infinity')
RESULT:
	duckdb: Conversion Error: Could not convert string '-infinity' to INTERVAL

-----------
QUERY:
-- test arithmetic with infinite timestamps
select timestamp 'infinity' - timestamp 'infinity'
RESULT:
	duckdb: Invalid Input Error: Cannot subtract infinite timestamps

-----------
QUERY:
select timestamp 'infinity' - timestamp '-infinity'
RESULT:
	duckdb: Invalid Input Error: Cannot subtract infinite timestamps

-----------
QUERY:
select timestamp '-infinity' - timestamp 'infinity'
RESULT:
	duckdb: Invalid Input Error: Cannot subtract infinite timestamps

-----------
QUERY:
select timestamp '-infinity' - timestamp '-infinity'
RESULT:
	duckdb: Invalid Input Error: Cannot subtract infinite timestamps

-----------
QUERY:
select timestamp 'infinity' - timestamp '1995-08-06 12:12:12'
RESULT:
	duckdb: Invalid Input Error: Cannot subtract infinite timestamps

-----------
QUERY:
select timestamp '-infinity' - timestamp '1995-08-06 12:12:12'
RESULT:
	duckdb: Invalid Input Error: Cannot subtract infinite timestamps

-----------
QUERY:
-- test age() with infinite timestamps
select age(timestamp 'infinity')
RESULT:
	duckdb: [(None,)]

-----------
QUERY:
select age(timestamp '-infinity')
RESULT:
	duckdb: [(None,)]

-----------
QUERY:
select age(timestamp 'infinity', timestamp 'infinity')
RESULT:
	duckdb: [(None,)]

-----------
QUERY:
select age(timestamp 'infinity', timestamp '-infinity')
RESULT:
	duckdb: [(None,)]

-----------
QUERY:
select age(timestamp '-infinity', timestamp 'infinity')
RESULT:
	duckdb: [(None,)]

-----------
QUERY:
select age(timestamp '-infinity', timestamp '-infinity')
RESULT:
	duckdb: [(None,)]
