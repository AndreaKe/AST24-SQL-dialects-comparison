
-----------
QUERY:
--
-- TIMETZ
--

CREATE TABLE TIMETZ_TBL (f1 time(2) with time zone)
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO TIMETZ_TBL VALUES ('00:01 PDT')
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO TIMETZ_TBL VALUES ('01:00 PDT')
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO TIMETZ_TBL VALUES ('02:03 PDT')
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO TIMETZ_TBL VALUES ('07:07 PST')
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO TIMETZ_TBL VALUES ('08:08 EDT')
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO TIMETZ_TBL VALUES ('11:59 PDT')
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO TIMETZ_TBL VALUES ('12:00 PDT')
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO TIMETZ_TBL VALUES ('12:01 PDT')
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO TIMETZ_TBL VALUES ('23:59 PDT')
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO TIMETZ_TBL VALUES ('11:59:59.99 PM PDT')
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO TIMETZ_TBL VALUES ('2003-03-07 15:36:39 America/New_York')
RESULT:
	postgres: None

-----------
QUERY:
INSERT INTO TIMETZ_TBL VALUES ('2003-07-07 15:36:39 America/New_York')
RESULT:
	postgres: None

-----------
QUERY:
-- this should fail (the timezone offset is not known)
INSERT INTO TIMETZ_TBL VALUES ('15:36:39 America/New_York')
RESULT:
	postgres: invalid input syntax for type time with time zone: "15:36:39 America/New_York"
LINE 2: INSERT INTO TIMETZ_TBL VALUES ('15:36:39 America/New_York')
                                       ^


-----------
QUERY:
-- this should fail (timezone not specified without a date)
INSERT INTO TIMETZ_TBL VALUES ('15:36:39 m2')
RESULT:
	postgres: invalid input syntax for type time with time zone: "15:36:39 m2"
LINE 2: INSERT INTO TIMETZ_TBL VALUES ('15:36:39 m2')
                                       ^


-----------
QUERY:
-- this should fail (dynamic timezone abbreviation without a date)
INSERT INTO TIMETZ_TBL VALUES ('15:36:39 MSK m2')
RESULT:
	postgres: invalid input syntax for type time with time zone: "15:36:39 MSK m2"
LINE 2: INSERT INTO TIMETZ_TBL VALUES ('15:36:39 MSK m2')
                                       ^


-----------
QUERY:
SELECT f1 AS "Time TZ" FROM TIMETZ_TBL
RESULT:
	postgres: [(datetime.time(0, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(1, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(2, 3, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(7, 7, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))),), (datetime.time(8, 8, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),), (datetime.time(11, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(12, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(12, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(23, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(23, 59, 59, 990000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))),), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),)]

-----------
QUERY:
SELECT f1 AS "Three" FROM TIMETZ_TBL WHERE f1 < '05:06:07-07'
RESULT:
	postgres: [(datetime.time(0, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(1, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(2, 3, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),)]

-----------
QUERY:
SELECT f1 AS "Seven" FROM TIMETZ_TBL WHERE f1 > '05:06:07-07'
RESULT:
	postgres: [(datetime.time(7, 7, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))),), (datetime.time(8, 8, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),), (datetime.time(11, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(12, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(12, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(23, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(23, 59, 59, 990000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))),), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),)]

-----------
QUERY:
SELECT f1 AS "None" FROM TIMETZ_TBL WHERE f1 < '00:00-07'
RESULT:
	postgres: []

-----------
QUERY:
SELECT f1 AS "Ten" FROM TIMETZ_TBL WHERE f1 >= '00:00-07'
RESULT:
	postgres: [(datetime.time(0, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(1, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(2, 3, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(7, 7, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))),), (datetime.time(8, 8, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),), (datetime.time(11, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(12, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(12, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(23, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(23, 59, 59, 990000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))),), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))),)]

-----------
QUERY:
-- Check edge cases
SELECT '23:59:59.999999 PDT'::timetz
RESULT:
	postgres: [(datetime.time(23, 59, 59, 999999, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),)]

-----------
QUERY:
SELECT '23:59:59.9999999 PDT'::timetz
RESULT:
	postgres: [(datetime.time(0, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),)]

-----------
QUERY:
-- rounds up
SELECT '23:59:60 PDT'::timetz
RESULT:
	postgres: [(datetime.time(0, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),)]

-----------
QUERY:
-- rounds up
SELECT '24:00:00 PDT'::timetz
RESULT:
	postgres: [(datetime.time(0, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))),)]

-----------
QUERY:
-- allowed
SELECT '24:00:00.01 PDT'::timetz
RESULT:
	postgres: date/time field value out of range: "24:00:00.01 PDT"
LINE 2: SELECT '24:00:00.01 PDT'::timetz
               ^


-----------
QUERY:
-- not allowed
SELECT '23:59:60.01 PDT'::timetz
RESULT:
	postgres: date/time field value out of range: "23:59:60.01 PDT"
LINE 2: SELECT '23:59:60.01 PDT'::timetz
               ^


-----------
QUERY:
-- not allowed
SELECT '24:01:00 PDT'::timetz
RESULT:
	postgres: date/time field value out of range: "24:01:00 PDT"
LINE 2: SELECT '24:01:00 PDT'::timetz
               ^


-----------
QUERY:
-- not allowed
SELECT '25:00:00 PDT'::timetz
RESULT:
	postgres: date/time field value out of range: "25:00:00 PDT"
LINE 2: SELECT '25:00:00 PDT'::timetz
               ^


-----------
QUERY:
-- not allowed

-- Test non-error-throwing API
SELECT pg_input_is_valid('12:00:00 PDT', 'timetz')
RESULT:
	postgres: [(True,)]

-----------
QUERY:
SELECT pg_input_is_valid('25:00:00 PDT', 'timetz')
RESULT:
	postgres: [(False,)]

-----------
QUERY:
SELECT pg_input_is_valid('15:36:39 America/New_York', 'timetz')
RESULT:
	postgres: [(False,)]

-----------
QUERY:
SELECT * FROM pg_input_error_info('25:00:00 PDT', 'timetz')
RESULT:
	postgres: [('date/time field value out of range: "25:00:00 PDT"', None, None, '22008')]

-----------
QUERY:
SELECT * FROM pg_input_error_info('15:36:39 America/New_York', 'timetz')
RESULT:
	postgres: [('invalid input syntax for type time with time zone: "15:36:39 America/New_York"', None, None, '22007')]

-----------
QUERY:
--
-- TIME simple math
--
-- We now make a distinction between time and intervals,
-- and adding two times together makes no sense at all.
-- Leave in one query to show that it is rejected,
-- and do the rest of the testing in horology.sql
-- where we do mixed-type arithmetic. - thomas 2000-12-02

SELECT f1 + time with time zone '00:01' AS "Illegal" FROM TIMETZ_TBL
RESULT:
	postgres: operator does not exist: time with time zone + time with time zone
LINE 10: SELECT f1 + time with time zone '00:01' AS "Illegal" FROM TI...
                   ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:
--
-- test EXTRACT
--
SELECT EXTRACT(MICROSECOND FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')
RESULT:
	postgres: [(Decimal('25575401'),)]

-----------
QUERY:
SELECT EXTRACT(MILLISECOND FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')
RESULT:
	postgres: [(Decimal('25575.401'),)]

-----------
QUERY:
SELECT EXTRACT(SECOND      FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')
RESULT:
	postgres: [(Decimal('25.575401'),)]

-----------
QUERY:
SELECT EXTRACT(MINUTE      FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')
RESULT:
	postgres: [(Decimal('30'),)]

-----------
QUERY:
SELECT EXTRACT(HOUR        FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')
RESULT:
	postgres: [(Decimal('13'),)]

-----------
QUERY:
SELECT EXTRACT(DAY         FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')
RESULT:
	postgres: unit "day" not supported for type time with time zone


-----------
QUERY:
-- error
SELECT EXTRACT(FORTNIGHT   FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')
RESULT:
	postgres: unit "fortnight" not recognized for type time with time zone


-----------
QUERY:
-- error
SELECT EXTRACT(TIMEZONE    FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04:30')
RESULT:
	postgres: [(Decimal('-16200'),)]

-----------
QUERY:
SELECT EXTRACT(TIMEZONE_HOUR   FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04:30')
RESULT:
	postgres: [(Decimal('-4'),)]

-----------
QUERY:
SELECT EXTRACT(TIMEZONE_MINUTE FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04:30')
RESULT:
	postgres: [(Decimal('-30'),)]

-----------
QUERY:
SELECT EXTRACT(EPOCH       FROM TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')
RESULT:
	postgres: [(Decimal('63025.575401'),)]

-----------
QUERY:
-- date_part implementation is mostly the same as extract, so only
-- test a few cases for additional coverage.
SELECT date_part('microsecond', TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')
RESULT:
	postgres: [(25575401.0,)]

-----------
QUERY:
SELECT date_part('millisecond', TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')
RESULT:
	postgres: [(25575.401,)]

-----------
QUERY:
SELECT date_part('second',      TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')
RESULT:
	postgres: [(25.575401,)]

-----------
QUERY:
SELECT date_part('epoch',       TIME WITH TIME ZONE '2020-05-26 13:30:25.575401-04')
RESULT:
	postgres: [(63025.575401,)]

-----------
QUERY:
--
-- Test timetz_zone, timetz_izone, AT LOCAL
--
BEGIN
RESULT:
	postgres: None

-----------
QUERY:
SET LOCAL TimeZone TO 'UTC'
RESULT:
	postgres: None

-----------
QUERY:
CREATE VIEW timetz_local_view AS
  SELECT f1 AS dat,
       timezone(f1) AS dat_func,
       f1 AT LOCAL AS dat_at_local,
       f1 AT TIME ZONE current_setting('TimeZone') AS dat_at_tz,
       f1 AT TIME ZONE INTERVAL '00:00' AS dat_at_int
  FROM TIMETZ_TBL
  ORDER BY f1
RESULT:
	postgres: None

-----------
QUERY:
SELECT pg_get_viewdef('timetz_local_view', true)
RESULT:
	postgres: [(" SELECT f1 AS dat,\n    timezone(f1) AS dat_func,\n    (f1 AT LOCAL) AS dat_at_local,\n    (f1 AT TIME ZONE current_setting('TimeZone'::text)) AS dat_at_tz,\n    (f1 AT TIME ZONE '00:00:00'::interval) AS dat_at_int\n   FROM timetz_tbl\n  ORDER BY f1;",)]

-----------
QUERY:
TABLE timetz_local_view
RESULT:
	postgres: [(datetime.time(0, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(7, 1, tzinfo=datetime.timezone.utc), datetime.time(7, 1, tzinfo=datetime.timezone.utc), datetime.time(7, 1, tzinfo=datetime.timezone.utc), datetime.time(7, 1, tzinfo=datetime.timezone.utc)), (datetime.time(1, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(8, 0, tzinfo=datetime.timezone.utc), datetime.time(8, 0, tzinfo=datetime.timezone.utc), datetime.time(8, 0, tzinfo=datetime.timezone.utc), datetime.time(8, 0, tzinfo=datetime.timezone.utc)), (datetime.time(2, 3, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(9, 3, tzinfo=datetime.timezone.utc), datetime.time(9, 3, tzinfo=datetime.timezone.utc), datetime.time(9, 3, tzinfo=datetime.timezone.utc), datetime.time(9, 3, tzinfo=datetime.timezone.utc)), (datetime.time(8, 8, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))), datetime.time(12, 8, tzinfo=datetime.timezone.utc), datetime.time(12, 8, tzinfo=datetime.timezone.utc), datetime.time(12, 8, tzinfo=datetime.timezone.utc), datetime.time(12, 8, tzinfo=datetime.timezone.utc)), (datetime.time(7, 7, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))), datetime.time(15, 7, tzinfo=datetime.timezone.utc), datetime.time(15, 7, tzinfo=datetime.timezone.utc), datetime.time(15, 7, tzinfo=datetime.timezone.utc), datetime.time(15, 7, tzinfo=datetime.timezone.utc)), (datetime.time(11, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(18, 59, tzinfo=datetime.timezone.utc), datetime.time(18, 59, tzinfo=datetime.timezone.utc), datetime.time(18, 59, tzinfo=datetime.timezone.utc), datetime.time(18, 59, tzinfo=datetime.timezone.utc)), (datetime.time(12, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(19, 0, tzinfo=datetime.timezone.utc), datetime.time(19, 0, tzinfo=datetime.timezone.utc), datetime.time(19, 0, tzinfo=datetime.timezone.utc), datetime.time(19, 0, tzinfo=datetime.timezone.utc)), (datetime.time(12, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(19, 1, tzinfo=datetime.timezone.utc), datetime.time(19, 1, tzinfo=datetime.timezone.utc), datetime.time(19, 1, tzinfo=datetime.timezone.utc), datetime.time(19, 1, tzinfo=datetime.timezone.utc)), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))), datetime.time(19, 36, 39, tzinfo=datetime.timezone.utc), datetime.time(19, 36, 39, tzinfo=datetime.timezone.utc), datetime.time(19, 36, 39, tzinfo=datetime.timezone.utc), datetime.time(19, 36, 39, tzinfo=datetime.timezone.utc)), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), datetime.time(20, 36, 39, tzinfo=datetime.timezone.utc), datetime.time(20, 36, 39, tzinfo=datetime.timezone.utc), datetime.time(20, 36, 39, tzinfo=datetime.timezone.utc), datetime.time(20, 36, 39, tzinfo=datetime.timezone.utc)), (datetime.time(23, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(6, 59, tzinfo=datetime.timezone.utc), datetime.time(6, 59, tzinfo=datetime.timezone.utc), datetime.time(6, 59, tzinfo=datetime.timezone.utc), datetime.time(6, 59, tzinfo=datetime.timezone.utc)), (datetime.time(23, 59, 59, 990000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(6, 59, 59, 990000, tzinfo=datetime.timezone.utc), datetime.time(6, 59, 59, 990000, tzinfo=datetime.timezone.utc), datetime.time(6, 59, 59, 990000, tzinfo=datetime.timezone.utc), datetime.time(6, 59, 59, 990000, tzinfo=datetime.timezone.utc))]

-----------
QUERY:
SELECT f1 AS dat,
       f1 AT TIME ZONE 'UTC+10' AS dat_at_tz,
       f1 AT TIME ZONE INTERVAL '-10:00' AS dat_at_int
  FROM TIMETZ_TBL
  ORDER BY f1
RESULT:
	postgres: [(datetime.time(0, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(21, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400))), datetime.time(21, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400)))), (datetime.time(1, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(22, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400))), datetime.time(22, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400)))), (datetime.time(2, 3, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(23, 3, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400))), datetime.time(23, 3, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400)))), (datetime.time(8, 8, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))), datetime.time(2, 8, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400))), datetime.time(2, 8, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400)))), (datetime.time(7, 7, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=57600))), datetime.time(5, 7, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400))), datetime.time(5, 7, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400)))), (datetime.time(11, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(8, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400))), datetime.time(8, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400)))), (datetime.time(12, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(9, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400))), datetime.time(9, 0, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400)))), (datetime.time(12, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(9, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400))), datetime.time(9, 1, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400)))), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=72000))), datetime.time(9, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400))), datetime.time(9, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400)))), (datetime.time(15, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=68400))), datetime.time(10, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400))), datetime.time(10, 36, 39, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400)))), (datetime.time(23, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(20, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400))), datetime.time(20, 59, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400)))), (datetime.time(23, 59, 59, 990000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=61200))), datetime.time(20, 59, 59, 990000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400))), datetime.time(20, 59, 59, 990000, tzinfo=datetime.timezone(datetime.timedelta(days=-1, seconds=50400))))]

-----------
QUERY:
ROLLBACK
RESULT:
	postgres: None
