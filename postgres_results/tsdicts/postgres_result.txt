
-----------
QUERY:
--Test text search dictionaries and configurations

-- Test ISpell dictionary with ispell affix file
CREATE TEXT SEARCH DICTIONARY ispell (
                        Template=ispell,
                        DictFile=ispell_sample,
                        AffFile=ispell_sample
)
RESULT:
	postgres: None

-----------
QUERY:
SELECT ts_lexize('ispell', 'skies')
RESULT:
	postgres: [(['sky'],)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'bookings')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'booking')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'foot')
RESULT:
	postgres: [(['foot'],)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'foots')
RESULT:
	postgres: [(['foot'],)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'rebookings')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'rebooking')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'rebook')
RESULT:
	postgres: [(None,)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'unbookings')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'unbooking')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'unbook')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'footklubber')
RESULT:
	postgres: [(['foot', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'footballklubber')
RESULT:
	postgres: [(['footballklubber', 'foot', 'ball', 'klubber', 'football', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'ballyklubber')
RESULT:
	postgres: [(['ball', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('ispell', 'footballyklubber')
RESULT:
	postgres: [(['foot', 'ball', 'klubber'],)]

-----------
QUERY:
-- Test ISpell dictionary with hunspell affix file
CREATE TEXT SEARCH DICTIONARY hunspell (
                        Template=ispell,
                        DictFile=ispell_sample,
                        AffFile=hunspell_sample
)
RESULT:
	postgres: None

-----------
QUERY:
SELECT ts_lexize('hunspell', 'skies')
RESULT:
	postgres: [(['sky'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'bookings')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'booking')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'foot')
RESULT:
	postgres: [(['foot'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'foots')
RESULT:
	postgres: [(['foot'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'rebookings')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'rebooking')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'rebook')
RESULT:
	postgres: [(None,)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'unbookings')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'unbooking')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'unbook')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'footklubber')
RESULT:
	postgres: [(['foot', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'footballklubber')
RESULT:
	postgres: [(['footballklubber', 'foot', 'ball', 'klubber', 'football', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'ballyklubber')
RESULT:
	postgres: [(['ball', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell', 'footballyklubber')
RESULT:
	postgres: [(['foot', 'ball', 'klubber'],)]

-----------
QUERY:
-- Test ISpell dictionary with hunspell affix file with FLAG long parameter
CREATE TEXT SEARCH DICTIONARY hunspell_long (
                        Template=ispell,
                        DictFile=hunspell_sample_long,
                        AffFile=hunspell_sample_long
)
RESULT:
	postgres: None

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'skies')
RESULT:
	postgres: [(['sky'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'bookings')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'booking')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'foot')
RESULT:
	postgres: [(['foot'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'foots')
RESULT:
	postgres: [(['foot'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'rebookings')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'rebooking')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'rebook')
RESULT:
	postgres: [(None,)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'unbookings')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'unbooking')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'unbook')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'booked')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'footklubber')
RESULT:
	postgres: [(['foot', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'footballklubber')
RESULT:
	postgres: [(['footballklubber', 'foot', 'ball', 'klubber', 'football', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'ballyklubber')
RESULT:
	postgres: [(['ball', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'ballsklubber')
RESULT:
	postgres: [(['ball', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'footballyklubber')
RESULT:
	postgres: [(['foot', 'ball', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_long', 'ex-machina')
RESULT:
	postgres: [(['ex-', 'machina'],)]

-----------
QUERY:
-- Test ISpell dictionary with hunspell affix file with FLAG num parameter
CREATE TEXT SEARCH DICTIONARY hunspell_num (
                        Template=ispell,
                        DictFile=hunspell_sample_num,
                        AffFile=hunspell_sample_num
)
RESULT:
	postgres: None

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'skies')
RESULT:
	postgres: [(['sky'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'sk')
RESULT:
	postgres: [(['sky'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'bookings')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'booking')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'foot')
RESULT:
	postgres: [(['foot'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'foots')
RESULT:
	postgres: [(['foot'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'rebookings')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'rebooking')
RESULT:
	postgres: [(['booking', 'book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'rebook')
RESULT:
	postgres: [(None,)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'unbookings')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'unbooking')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'unbook')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'booked')
RESULT:
	postgres: [(['book'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'footklubber')
RESULT:
	postgres: [(['foot', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'footballklubber')
RESULT:
	postgres: [(['footballklubber', 'foot', 'ball', 'klubber', 'football', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'ballyklubber')
RESULT:
	postgres: [(['ball', 'klubber'],)]

-----------
QUERY:
SELECT ts_lexize('hunspell_num', 'footballyklubber')
RESULT:
	postgres: [(['foot', 'ball', 'klubber'],)]

-----------
QUERY:
-- Test suitability of affix and dict files
CREATE TEXT SEARCH DICTIONARY hunspell_err (
						Template=ispell,
						DictFile=ispell_sample,
						AffFile=hunspell_sample_long
)
RESULT:
	postgres: invalid affix alias "GJUS"


-----------
QUERY:
CREATE TEXT SEARCH DICTIONARY hunspell_err (
						Template=ispell,
						DictFile=ispell_sample,
						AffFile=hunspell_sample_num
)
RESULT:
	postgres: invalid affix flag "SZ\"


-----------
QUERY:
CREATE TEXT SEARCH DICTIONARY hunspell_invalid_1 (
						Template=ispell,
						DictFile=hunspell_sample_long,
						AffFile=ispell_sample
)
RESULT:
	postgres: None

-----------
QUERY:
CREATE TEXT SEARCH DICTIONARY hunspell_invalid_2 (
						Template=ispell,
						DictFile=hunspell_sample_long,
						AffFile=hunspell_sample_num
)
RESULT:
	postgres: None

-----------
QUERY:
CREATE TEXT SEARCH DICTIONARY hunspell_invalid_3 (
						Template=ispell,
						DictFile=hunspell_sample_num,
						AffFile=ispell_sample
)
RESULT:
	postgres: None

-----------
QUERY:
CREATE TEXT SEARCH DICTIONARY hunspell_err (
						Template=ispell,
						DictFile=hunspell_sample_num,
						AffFile=hunspell_sample_long
)
RESULT:
	postgres: invalid affix alias "302,301,202,303"


-----------
QUERY:
-- Synonym dictionary
CREATE TEXT SEARCH DICTIONARY synonym (
						Template=synonym,
						Synonyms=synonym_sample
)
RESULT:
	postgres: None

-----------
QUERY:
SELECT ts_lexize('synonym', 'PoStGrEs')
RESULT:
	postgres: [(['pgsql'],)]

-----------
QUERY:
SELECT ts_lexize('synonym', 'Gogle')
RESULT:
	postgres: [(['googl'],)]

-----------
QUERY:
SELECT ts_lexize('synonym', 'indices')
RESULT:
	postgres: [(['index'],)]

-----------
QUERY:
-- test altering boolean parameters
SELECT dictinitoption FROM pg_ts_dict WHERE dictname = 'synonym'
RESULT:
	postgres: [("synonyms = 'synonym_sample'",)]

-----------
QUERY:
ALTER TEXT SEARCH DICTIONARY synonym (CaseSensitive = 1)
RESULT:
	postgres: None

-----------
QUERY:
SELECT ts_lexize('synonym', 'PoStGrEs')
RESULT:
	postgres: [(None,)]

-----------
QUERY:
SELECT dictinitoption FROM pg_ts_dict WHERE dictname = 'synonym'
RESULT:
	postgres: [("synonyms = 'synonym_sample', casesensitive = 1",)]

-----------
QUERY:
ALTER TEXT SEARCH DICTIONARY synonym (CaseSensitive = 2)
RESULT:
	postgres: casesensitive requires a Boolean value


-----------
QUERY:
-- fail

ALTER TEXT SEARCH DICTIONARY synonym (CaseSensitive = off)
RESULT:
	postgres: None

-----------
QUERY:
SELECT ts_lexize('synonym', 'PoStGrEs')
RESULT:
	postgres: [(['pgsql'],)]

-----------
QUERY:
SELECT dictinitoption FROM pg_ts_dict WHERE dictname = 'synonym'
RESULT:
	postgres: [("synonyms = 'synonym_sample', casesensitive = 'off'",)]

-----------
QUERY:
-- Create and simple test thesaurus dictionary
-- More tests in configuration checks because ts_lexize()
-- cannot pass more than one word to thesaurus.
CREATE TEXT SEARCH DICTIONARY thesaurus (
                        Template=thesaurus,
						DictFile=thesaurus_sample,
						Dictionary=english_stem
)
RESULT:
	postgres: None

-----------
QUERY:
SELECT ts_lexize('thesaurus', 'one')
RESULT:
	postgres: [(['1'],)]

-----------
QUERY:
-- Test ispell dictionary in configuration
CREATE TEXT SEARCH CONFIGURATION ispell_tst (
						COPY=english
)
RESULT:
	postgres: None

-----------
QUERY:
ALTER TEXT SEARCH CONFIGURATION ispell_tst ALTER MAPPING FOR
	word, numword, asciiword, hword, numhword, asciihword, hword_part, hword_numpart, hword_asciipart
	WITH ispell, english_stem
RESULT:
	postgres: None

-----------
QUERY:
SELECT to_tsvector('ispell_tst', 'Booking the skies after rebookings for footballklubber from a foot')
RESULT:
	postgres: [("'ball':7 'book':1,5 'booking':1,5 'foot':7,10 'football':7 'footballklubber':7 'klubber':7 'sky':3",)]

-----------
QUERY:
SELECT to_tsquery('ispell_tst', 'footballklubber')
RESULT:
	postgres: [("'footballklubber' | 'foot' & 'ball' & 'klubber' | 'football' & 'klubber'",)]

-----------
QUERY:
SELECT to_tsquery('ispell_tst', 'footballyklubber:b & rebookings:A & sky')
RESULT:
	postgres: [("'foot':B & 'ball':B & 'klubber':B & ( 'booking':A | 'book':A ) & 'sky'",)]

-----------
QUERY:
-- Test ispell dictionary with hunspell affix in configuration
CREATE TEXT SEARCH CONFIGURATION hunspell_tst (
						COPY=ispell_tst
)
RESULT:
	postgres: None

-----------
QUERY:
ALTER TEXT SEARCH CONFIGURATION hunspell_tst ALTER MAPPING
	REPLACE ispell WITH hunspell
RESULT:
	postgres: None

-----------
QUERY:
SELECT to_tsvector('hunspell_tst', 'Booking the skies after rebookings for footballklubber from a foot')
RESULT:
	postgres: [("'ball':7 'book':1,5 'booking':1,5 'foot':7,10 'football':7 'footballklubber':7 'klubber':7 'sky':3",)]

-----------
QUERY:
SELECT to_tsquery('hunspell_tst', 'footballklubber')
RESULT:
	postgres: [("'footballklubber' | 'foot' & 'ball' & 'klubber' | 'football' & 'klubber'",)]

-----------
QUERY:
SELECT to_tsquery('hunspell_tst', 'footballyklubber:b & rebookings:A & sky')
RESULT:
	postgres: [("'foot':B & 'ball':B & 'klubber':B & ( 'booking':A | 'book':A ) & 'sky'",)]

-----------
QUERY:
SELECT to_tsquery('hunspell_tst', 'footballyklubber:b <-> sky')
RESULT:
	postgres: [("( 'foot':B & 'ball':B & 'klubber':B ) <-> 'sky'",)]

-----------
QUERY:
SELECT phraseto_tsquery('hunspell_tst', 'footballyklubber sky')
RESULT:
	postgres: [("( 'foot' & 'ball' & 'klubber' ) <-> 'sky'",)]

-----------
QUERY:
-- Test ispell dictionary with hunspell affix with FLAG long in configuration
ALTER TEXT SEARCH CONFIGURATION hunspell_tst ALTER MAPPING
	REPLACE hunspell WITH hunspell_long
RESULT:
	postgres: None

-----------
QUERY:
SELECT to_tsvector('hunspell_tst', 'Booking the skies after rebookings for footballklubber from a foot')
RESULT:
	postgres: [("'ball':7 'book':1,5 'booking':1,5 'foot':7,10 'football':7 'footballklubber':7 'klubber':7 'sky':3",)]

-----------
QUERY:
SELECT to_tsquery('hunspell_tst', 'footballklubber')
RESULT:
	postgres: [("'footballklubber' | 'foot' & 'ball' & 'klubber' | 'football' & 'klubber'",)]

-----------
QUERY:
SELECT to_tsquery('hunspell_tst', 'footballyklubber:b & rebookings:A & sky')
RESULT:
	postgres: [("'foot':B & 'ball':B & 'klubber':B & ( 'booking':A | 'book':A ) & 'sky'",)]

-----------
QUERY:
-- Test ispell dictionary with hunspell affix with FLAG num in configuration
ALTER TEXT SEARCH CONFIGURATION hunspell_tst ALTER MAPPING
	REPLACE hunspell_long WITH hunspell_num
RESULT:
	postgres: None

-----------
QUERY:
SELECT to_tsvector('hunspell_tst', 'Booking the skies after rebookings for footballklubber from a foot')
RESULT:
	postgres: [("'ball':7 'book':1,5 'booking':1,5 'foot':7,10 'football':7 'footballklubber':7 'klubber':7 'sky':3",)]

-----------
QUERY:
SELECT to_tsquery('hunspell_tst', 'footballklubber')
RESULT:
	postgres: [("'footballklubber' | 'foot' & 'ball' & 'klubber' | 'football' & 'klubber'",)]

-----------
QUERY:
SELECT to_tsquery('hunspell_tst', 'footballyklubber:b & rebookings:A & sky')
RESULT:
	postgres: [("'foot':B & 'ball':B & 'klubber':B & ( 'booking':A | 'book':A ) & 'sky'",)]

-----------
QUERY:
-- Test synonym dictionary in configuration
CREATE TEXT SEARCH CONFIGURATION synonym_tst (
						COPY=english
)
RESULT:
	postgres: None

-----------
QUERY:
ALTER TEXT SEARCH CONFIGURATION synonym_tst ALTER MAPPING FOR
	asciiword, hword_asciipart, asciihword
	WITH synonym, english_stem
RESULT:
	postgres: None

-----------
QUERY:
SELECT to_tsvector('synonym_tst', 'Postgresql is often called as postgres or pgsql and pronounced as postgre')
RESULT:
	postgres: [("'call':4 'often':3 'pgsql':1,6,8,12 'pronounc':10",)]

-----------
QUERY:
SELECT to_tsvector('synonym_tst', 'Most common mistake is to write Gogle instead of Google')
RESULT:
	postgres: [("'common':2 'googl':7,10 'instead':8 'mistak':3 'write':6",)]

-----------
QUERY:
SELECT to_tsvector('synonym_tst', 'Indexes or indices - Which is right plural form of index?')
RESULT:
	postgres: [("'form':8 'index':1,3,10 'plural':7 'right':6",)]

-----------
QUERY:
SELECT to_tsquery('synonym_tst', 'Index & indices')
RESULT:
	postgres: [("'index' & 'index':*",)]

-----------
QUERY:
-- test thesaurus in configuration
-- see thesaurus_sample.ths to understand /* REPLACED */''odd/* REPLACED */'' resulting tsvector
CREATE TEXT SEARCH CONFIGURATION thesaurus_tst (
						COPY=synonym_tst
)
RESULT:
	postgres: None

-----------
QUERY:
ALTER TEXT SEARCH CONFIGURATION thesaurus_tst ALTER MAPPING FOR
	asciiword, hword_asciipart, asciihword
	WITH synonym, thesaurus, english_stem
RESULT:
	postgres: None

-----------
QUERY:
SELECT to_tsvector('thesaurus_tst', 'one postgres one two one two three one')
RESULT:
	postgres: [("'1':1,5 '12':3 '123':4 'pgsql':2",)]

-----------
QUERY:
SELECT to_tsvector('thesaurus_tst', 'Supernovae star is very new star and usually called supernovae (abbreviation SN)')
RESULT:
	postgres: [("'abbrevi':10 'call':8 'new':4 'sn':1,9,11 'star':5 'usual':7",)]

-----------
QUERY:
SELECT to_tsvector('thesaurus_tst', 'Booking tickets is looking like a booking a tickets')
RESULT:
	postgres: [("'card':3,10 'invit':2,9 'like':6 'look':5 'order':1,8",)]

-----------
QUERY:
-- invalid: non-lowercase quoted identifiers
CREATE TEXT SEARCH DICTIONARY tsdict_case
(
	Template = ispell,
	"DictFile" = ispell_sample,
	"AffFile" = ispell_sample
)
RESULT:
	postgres: unrecognized Ispell parameter: "DictFile"


-----------
QUERY:
-- Test grammar for configurations
CREATE TEXT SEARCH CONFIGURATION dummy_tst (COPY=english)
RESULT:
	postgres: None

-----------
QUERY:
-- Overriden mapping change with duplicated tokens.
ALTER TEXT SEARCH CONFIGURATION dummy_tst
  ALTER MAPPING FOR word, word WITH ispell
RESULT:
	postgres: None

-----------
QUERY:
-- Not a token supported by the configuration/* REPLACED */''s parser, fails.
ALTER TEXT SEARCH CONFIGURATION dummy_tst
  DROP MAPPING FOR not_a_token, not_a_token
RESULT:
	postgres: token type "not_a_token" does not exist


-----------
QUERY:
-- Not a token supported by the configuration/* REPLACED */''s parser, fails even
-- with IF EXISTS.
ALTER TEXT SEARCH CONFIGURATION dummy_tst
  DROP MAPPING IF EXISTS FOR not_a_token, not_a_token
RESULT:
	postgres: token type "not_a_token" does not exist


-----------
QUERY:
-- Token supported by the configuration/* REPLACED */''s parser, succeeds.
ALTER TEXT SEARCH CONFIGURATION dummy_tst
  DROP MAPPING FOR word, word
RESULT:
	postgres: None

-----------
QUERY:
-- No mapping for token supported by the configuration/* REPLACED */''s parser, fails.
ALTER TEXT SEARCH CONFIGURATION dummy_tst
  DROP MAPPING FOR word
RESULT:
	postgres: mapping for token type "word" does not exist


-----------
QUERY:
-- Token supported by the configuration/* REPLACED */''s parser, cannot be found,
-- succeeds with IF EXISTS.
ALTER TEXT SEARCH CONFIGURATION dummy_tst
  DROP MAPPING IF EXISTS FOR word, word
RESULT:
	postgres: None

-----------
QUERY:
-- Re-add mapping, with duplicated tokens supported by the parser.
ALTER TEXT SEARCH CONFIGURATION dummy_tst
  ADD MAPPING FOR word, word WITH ispell
RESULT:
	postgres: None

-----------
QUERY:
-- Not a token supported by the configuration/* REPLACED */''s parser, fails.
ALTER TEXT SEARCH CONFIGURATION dummy_tst
  ADD MAPPING FOR not_a_token WITH ispell
RESULT:
	postgres: token type "not_a_token" does not exist


-----------
QUERY:
DROP TEXT SEARCH CONFIGURATION dummy_tst
RESULT:
	postgres: None
