
-----------
QUERY:
--
-- tsrf - targetlist set returning function tests
--

-- simple srf
SELECT generate_series(1, 3);
RESULT:
	[([1, 2, 3],)]

-----------
QUERY:


-- parallel iteration
SELECT generate_series(1, 3), generate_series(3,5);
RESULT:
	[([1, 2, 3], [3, 4, 5])]

-----------
QUERY:


-- parallel iteration, different number of rows
SELECT generate_series(1, 2), generate_series(1,4);
RESULT:
	[([1, 2], [1, 2, 3, 4])]

-----------
QUERY:


-- srf, with SRF argument
SELECT generate_series(1, generate_series(1, 3));
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'generate_series(INTEGER_LITERAL, BIGINT[])'. You might need to add explicit type casts.
	Candidate functions:
	generate_series(BIGINT) -> BIGINT[]
	generate_series(BIGINT, BIGINT) -> BIGINT[]
	generate_series(BIGINT, BIGINT, BIGINT) -> BIGINT[]
	generate_series(TIMESTAMP, TIMESTAMP, INTERVAL) -> TIMESTAMP[]
	generate_series(TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH TIME ZONE, INTERVAL) -> TIMESTAMP WITH TIME ZONE[]


-----------
QUERY:


-- but we/* REPLACED */ ''ve traditionally rejected the same in FROM
SELECT * FROM generate_series(1, generate_series(1, 3));
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'generate_series(INTEGER, BIGINT[])'. You might need to add explicit type casts.
	Candidate functions:
	generate_series(BIGINT)
	generate_series(BIGINT, BIGINT)
	generate_series(BIGINT, BIGINT, BIGINT)
	generate_series(TIMESTAMP, TIMESTAMP, INTERVAL)
	generate_series(TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH TIME ZONE, INTERVAL)


-----------
QUERY:


-- srf, with two SRF arguments
SELECT generate_series(generate_series(1,3), generate_series(2, 4));
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'generate_series(BIGINT[], BIGINT[])'. You might need to add explicit type casts.
	Candidate functions:
	generate_series(BIGINT) -> BIGINT[]
	generate_series(BIGINT, BIGINT) -> BIGINT[]
	generate_series(BIGINT, BIGINT, BIGINT) -> BIGINT[]
	generate_series(TIMESTAMP, TIMESTAMP, INTERVAL) -> TIMESTAMP[]
	generate_series(TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH TIME ZONE, INTERVAL) -> TIMESTAMP WITH TIME ZONE[]


-----------
QUERY:


-- check proper nesting of SRFs in different expressions
explain (verbose, costs off)
SELECT generate_series(1, generate_series(1, 3)), generate_series(2, 4);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: verbose

-----------
QUERY:

SELECT generate_series(1, generate_series(1, 3)), generate_series(2, 4);
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types 'generate_series(INTEGER_LITERAL, BIGINT[])'. You might need to add explicit type casts.
	Candidate functions:
	generate_series(BIGINT) -> BIGINT[]
	generate_series(BIGINT, BIGINT) -> BIGINT[]
	generate_series(BIGINT, BIGINT, BIGINT) -> BIGINT[]
	generate_series(TIMESTAMP, TIMESTAMP, INTERVAL) -> TIMESTAMP[]
	generate_series(TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH TIME ZONE, INTERVAL) -> TIMESTAMP WITH TIME ZONE[]


-----------
QUERY:


CREATE TABLE few(id int, dataa text, datab text);
RESULT:
	[]

-----------
QUERY:

INSERT INTO few VALUES(1, 'a', 'foo'),(2, 'a', 'bar'),(3, 'b', 'bar');
RESULT:
	[]

-----------
QUERY:


-- SRF with a provably-dummy relation
explain (verbose, costs off)
SELECT unnest(ARRAY[1, 2]) FROM few WHERE false;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: verbose

-----------
QUERY:

SELECT unnest(ARRAY[1, 2]) FROM few WHERE false;
RESULT:
	[]

-----------
QUERY:


-- SRF shouldn/* REPLACED */ ''t prevent upper query from recognizing lower as dummy
explain (verbose, costs off)
SELECT * FROM few f1,
  (SELECT unnest(ARRAY[1,2]) FROM few f2 WHERE false OFFSET 0) ss;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: verbose

-----------
QUERY:

SELECT * FROM few f1,
  (SELECT unnest(ARRAY[1,2]) FROM few f2 WHERE false OFFSET 0) ss;
RESULT:
	[]

-----------
QUERY:


-- SRF output order of sorting is maintained, if SRF is not referenced
SELECT few.id, generate_series(1,3) g FROM few ORDER BY id DESC;
RESULT:
	[(3, [1, 2, 3]), (2, [1, 2, 3]), (1, [1, 2, 3])]

-----------
QUERY:


-- but SRFs can be referenced in sort
SELECT few.id, generate_series(1,3) g FROM few ORDER BY id, g DESC;
RESULT:
	[(1, [1, 2, 3]), (2, [1, 2, 3]), (3, [1, 2, 3])]

-----------
QUERY:

SELECT few.id, generate_series(1,3) g FROM few ORDER BY id, generate_series(1,3) DESC;
RESULT:
	[(1, [1, 2, 3]), (2, [1, 2, 3]), (3, [1, 2, 3])]

-----------
QUERY:


-- it/* REPLACED */ ''s weird to have ORDER BYs that increase the number of results
SELECT few.id FROM few ORDER BY id, generate_series(1,3) DESC;
RESULT:
	[(1,), (2,), (3,)]

-----------
QUERY:


-- SRFs are computed after aggregation
SET enable_hashagg TO 0;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:
 -- stable output order
SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa;
RESULT:
	ERROR - Conversion Error: Type VARCHAR with value '{1,1,3}' can't be cast to the destination type LIST

-----------
QUERY:

-- unless referenced in GROUP BY clause
SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa, unnest('{1,1,3}'::int[]);
RESULT:
	ERROR - Binder Error: UNNEST not supported here

-----------
QUERY:

SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa, 5;
RESULT:
	ERROR - Binder Error: UNNEST not supported here

-----------
QUERY:

RESET enable_hashagg;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:


-- check HAVING works when GROUP BY does [not] reference SRF output
SELECT dataa, generate_series(1,1), count(*) FROM few GROUP BY 1 HAVING count(*) > 1;
RESULT:
	[('a', [1], 2)]

-----------
QUERY:

SELECT dataa, generate_series(1,1), count(*) FROM few GROUP BY 1, 2 HAVING count(*) > 1;
RESULT:
	[('a', [1], 2)]

-----------
QUERY:


-- it/* REPLACED */ ''s weird to have GROUP BYs that increase the number of results
SELECT few.dataa, count(*) FROM few WHERE dataa = 'a' GROUP BY few.dataa ORDER BY 2;
RESULT:
	[('a', 2)]

-----------
QUERY:

SELECT few.dataa, count(*) FROM few WHERE dataa = 'a' GROUP BY few.dataa, unnest('{1,1,3}'::int[]) ORDER BY 2;
RESULT:
	ERROR - Binder Error: UNNEST not supported here

-----------
QUERY:


-- SRFs are not allowed if they/* REPLACED */ ''d need to be conditionally executed
SELECT q1, case when q1 > 0 then generate_series(1,3) else 0 end FROM int8_tbl;
RESULT:
	ERROR - Binder Error: Cannot mix values of type INTEGER_LITERAL and BIGINT[] in CASE expression - an explicit cast is required

-----------
QUERY:

SELECT q1, coalesce(generate_series(1,3), 0) FROM int8_tbl;
RESULT:
	ERROR - Binder Error: Cannot mix values of type BIGINT[] and INTEGER_LITERAL in COALESCE operator - an explicit cast is required

-----------
QUERY:


-- SRFs are not allowed in aggregate arguments
SELECT min(generate_series(1, 3)) FROM few;
RESULT:
	[([1, 2, 3],)]

-----------
QUERY:


-- ... unless they/* REPLACED */ ''re within a sub-select
SELECT sum((3 = ANY(SELECT generate_series(1,4)))::int);
RESULT:
	ERROR - Binder Error: Cannot compare values of type INTEGER_LITERAL and BIGINT[] in IN/ANY/ALL clause - an explicit cast is required

-----------
QUERY:


SELECT sum((3 = ANY(SELECT lag(x) over(order by x)
                    FROM generate_series(1,4) x))::int);
RESULT:
	ERROR - Binder Error: Cannot compare values of type INTEGER_LITERAL and STRUCT(generate_series BIGINT) in IN/ANY/ALL clause - an explicit cast is required

-----------
QUERY:


-- SRFs are not allowed in window function arguments, either
SELECT min(generate_series(1, 3)) OVER() FROM few;
RESULT:
	[([1, 2, 3],), ([1, 2, 3],), ([1, 2, 3],)]

-----------
QUERY:


-- SRFs are normally computed after window functions
SELECT id,lag(id) OVER(), count(*) OVER(), generate_series(1,3) FROM few;
RESULT:
	[(1, None, 3, [1, 2, 3]), (2, 1, 3, [1, 2, 3]), (3, 2, 3, [1, 2, 3])]

-----------
QUERY:

-- unless referencing SRFs
SELECT SUM(count(*)) OVER(PARTITION BY generate_series(1,3) ORDER BY generate_series(1,3)), generate_series(1,3) g FROM few GROUP BY g;
RESULT:
	[(3, [1, 2, 3])]

-----------
QUERY:


-- sorting + grouping
SELECT few.dataa, count(*), min(id), max(id), generate_series(1,3) FROM few GROUP BY few.dataa ORDER BY 5, 1;
RESULT:
	[('a', 2, 1, 2, [1, 2, 3]), ('b', 1, 3, 3, [1, 2, 3])]

-----------
QUERY:


-- grouping sets are a bit special, they produce NULLs in columns not actually NULL
set enable_hashagg = false;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:

SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab);
RESULT:
	[(None, None, [1, 2], 3), ('a', 'bar', [1, 2], 1), ('a', None, [1, 2], 2), (None, 'foo', [1, 2], 1), ('a', 'foo', [1, 2], 1), ('b', 'bar', [1, 2], 1), ('b', None, [1, 2], 1), (None, 'bar', [1, 2], 2)]

-----------
QUERY:

SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY dataa;
RESULT:
	[('a', 'foo', [1, 2], 1), ('a', None, [1, 2], 2), ('a', 'bar', [1, 2], 1), ('b', None, [1, 2], 1), ('b', 'bar', [1, 2], 1), (None, 'bar', [1, 2], 2), (None, None, [1, 2], 3), (None, 'foo', [1, 2], 1)]

-----------
QUERY:

SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY g;
RESULT:
	[(None, None, [1, 2], 3), (None, 'foo', [1, 2], 1), ('b', 'bar', [1, 2], 1), ('a', 'foo', [1, 2], 1), ('b', None, [1, 2], 1), ('a', 'bar', [1, 2], 1), (None, 'bar', [1, 2], 2), ('a', None, [1, 2], 2)]

-----------
QUERY:

SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g);
RESULT:
	[('a', 'foo', [1, 2], 1), (None, None, None, 3), ('a', None, None, 2), ('a', 'bar', None, 1), ('b', 'bar', None, 1), ('a', 'bar', [1, 2], 1), ('b', 'bar', [1, 2], 1), ('a', None, [1, 2], 2), (None, 'foo', [1, 2], 1), ('b', None, None, 1), ('a', 'foo', None, 1), ('b', None, [1, 2], 1), (None, 'bar', None, 2), (None, None, [1, 2], 3), (None, 'foo', None, 1), (None, 'bar', [1, 2], 2)]

-----------
QUERY:

SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g) ORDER BY dataa;
RESULT:
	[('a', None, None, 2), ('a', 'bar', [1, 2], 1), ('a', 'foo', None, 1), ('a', 'foo', [1, 2], 1), ('a', None, [1, 2], 2), ('a', 'bar', None, 1), ('b', 'bar', [1, 2], 1), ('b', None, None, 1), ('b', None, [1, 2], 1), ('b', 'bar', None, 1), (None, 'foo', None, 1), (None, None, None, 3), (None, None, [1, 2], 3), (None, 'bar', [1, 2], 2), (None, 'foo', [1, 2], 1), (None, 'bar', None, 2)]

-----------
QUERY:

SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g) ORDER BY g;
RESULT:
	[('a', 'bar', [1, 2], 1), ('b', 'bar', [1, 2], 1), (None, 'bar', [1, 2], 2), ('a', 'foo', [1, 2], 1), (None, None, [1, 2], 3), (None, 'foo', [1, 2], 1), ('b', None, [1, 2], 1), ('a', None, [1, 2], 2), ('a', 'foo', None, 1), (None, None, None, 3), ('b', 'bar', None, 1), ('a', 'bar', None, 1), (None, 'bar', None, 2), ('a', None, None, 2), (None, 'foo', None, 1), ('b', None, None, 1)]

-----------
QUERY:

reset enable_hashagg;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:


-- case with degenerate ORDER BY
explain (verbose, costs off)
select 'foo' as f, generate_series(1,2) as g from few order by 1;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: verbose

-----------
QUERY:

select 'foo' as f, generate_series(1,2) as g from few order by 1;
RESULT:
	[('foo', [1, 2]), ('foo', [1, 2]), ('foo', [1, 2])]

-----------
QUERY:


-- data modification
CREATE TABLE fewmore AS SELECT generate_series(1,3) AS data;
RESULT:
	[]

-----------
QUERY:

INSERT INTO fewmore VALUES(generate_series(4,5));
RESULT:
	[]

-----------
QUERY:

SELECT * FROM fewmore;
RESULT:
	[([1, 2, 3],), ([4, 5],)]

-----------
QUERY:


-- SRFs are not allowed in UPDATE (they once were, but it was nonsense)
UPDATE fewmore SET data = generate_series(4,9);
RESULT:
	[]

-----------
QUERY:


-- SRFs are not allowed in RETURNING
INSERT INTO fewmore VALUES(1) RETURNING generate_series(1,3);
RESULT:
	ERROR - Conversion Error: Unimplemented type for cast (INTEGER -> BIGINT[])
LINE 4: INSERT INTO fewmore VALUES(1) RETURNING generate_series(1,3);
                                   ^

-----------
QUERY:


-- nor standalone VALUES (but surely this is a bug?)
VALUES(1, generate_series(1,2));
RESULT:
	[(1, [1, 2])]

-----------
QUERY:


-- We allow tSRFs that are not at top level
SELECT int4mul(generate_series(1,2), 10);
RESULT:
	ERROR - Catalog Error: Scalar Function with name int4mul does not exist!
Did you mean "bin"?

-----------
QUERY:

SELECT generate_series(1,3) IS DISTINCT FROM 2;
RESULT:
	ERROR - Conversion Error: Unimplemented type for cast (INTEGER -> BIGINT[])

-----------
QUERY:


-- but SRFs in function RTEs must be at top level (annoying restriction)
SELECT * FROM int4mul(generate_series(1,2), 10);
RESULT:
	ERROR - Catalog Error: Table Function with name int4mul does not exist!
Did you mean "glob"?

-----------
QUERY:


-- DISTINCT ON is evaluated before tSRF evaluation if SRF is not
-- referenced either in ORDER BY or in the DISTINCT ON list. The ORDER
-- BY reference can be implicitly generated, if there/* REPLACED */ ''s no other ORDER BY.

-- implicit reference (via implicit ORDER) to all columns
SELECT DISTINCT ON (a) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b);
RESULT:
	[(1, 1, [1, 2, 3]), (3, 2, [1, 2, 3]), (5, 3, [1, 2, 3])]

-----------
QUERY:


-- unreferenced in DISTINCT ON or ORDER BY
SELECT DISTINCT ON (a) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)
ORDER BY a, b DESC;
RESULT:
	[(1, 4, [1, 2, 3]), (3, 2, [1, 2, 3]), (5, 3, [1, 2, 3])]

-----------
QUERY:


-- referenced in ORDER BY
SELECT DISTINCT ON (a) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)
ORDER BY a, b DESC, g DESC;
RESULT:
	[(1, 4, [1, 2, 3]), (3, 2, [1, 2, 3]), (5, 3, [1, 2, 3])]

-----------
QUERY:


-- referenced in ORDER BY and DISTINCT ON
SELECT DISTINCT ON (a, b, g) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)
ORDER BY a, b DESC, g DESC;
RESULT:
	[(1, 4, [1, 2, 3]), (1, 1, [1, 2, 3]), (3, 2, [1, 2, 3]), (3, 1, [1, 2, 3]), (5, 3, [1, 2, 3]), (5, 1, [1, 2, 3])]

-----------
QUERY:


-- only SRF mentioned in DISTINCT ON
SELECT DISTINCT ON (g) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b);
RESULT:
	[(3, 2, [1, 2, 3])]

-----------
QUERY:


-- LIMIT / OFFSET is evaluated after SRF evaluation
SELECT a, generate_series(1,2) FROM (VALUES(1),(2),(3)) r(a) LIMIT 2 OFFSET 2;
RESULT:
	[(3, [1, 2])]

-----------
QUERY:

-- SRFs are not allowed in LIMIT.
SELECT 1 LIMIT generate_series(1,3);
RESULT:
	ERROR - Conversion Error: Unimplemented type for cast (BIGINT[] -> BIGINT)

-----------
QUERY:


-- tSRF in correlated subquery, referencing table outside
SELECT (SELECT generate_series(1,3) LIMIT 1 OFFSET few.id) FROM few;
RESULT:
	ERROR - Binder Error: Correlated columns not supported in LIMIT/OFFSET

-----------
QUERY:

-- tSRF in correlated subquery, referencing SRF outside
SELECT (SELECT generate_series(1,3) LIMIT 1 OFFSET g.i) FROM generate_series(0,3) g(i);
RESULT:
	ERROR - Binder Error: Correlated columns not supported in LIMIT/OFFSET

-----------
QUERY:


-- Operators can return sets too
CREATE OPERATOR |@| (PROCEDURE = unnest, RIGHTARG = ANYARRAY);
RESULT:
	ERROR - Parser Error: syntax error at or near "OPERATOR"

-----------
QUERY:

SELECT |@|ARRAY[1,2,3];
RESULT:
	ERROR - Catalog Error: Scalar Function with name |@| does not exist!
Did you mean "||"?

-----------
QUERY:


-- Some fun cases involving duplicate SRF calls
explain (verbose, costs off)
select generate_series(1,3) as x, generate_series(1,3) + 1 as xp1;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: verbose

-----------
QUERY:

select generate_series(1,3) as x, generate_series(1,3) + 1 as xp1;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types '+(BIGINT[], INTEGER_LITERAL)'. You might need to add explicit type casts.
	Candidate functions:
	+(TINYINT) -> TINYINT
	+(TINYINT, TINYINT) -> TINYINT
	+(SMALLINT) -> SMALLINT
	+(SMALLINT, SMALLINT) -> SMALLINT
	+(INTEGER) -> INTEGER
	+(INTEGER, INTEGER) -> INTEGER
	+(BIGINT) -> BIGINT
	+(BIGINT, BIGINT) -> BIGINT
	+(HUGEINT) -> HUGEINT
	+(HUGEINT, HUGEINT) -> HUGEINT
	+(FLOAT) -> FLOAT
	+(FLOAT, FLOAT) -> FLOAT
	+(DOUBLE) -> DOUBLE
	+(DOUBLE, DOUBLE) -> DOUBLE
	+(DECIMAL) -> DECIMAL
	+(DECIMAL, DECIMAL) -> DECIMAL
	+(UTINYINT) -> UTINYINT
	+(UTINYINT, UTINYINT) -> UTINYINT
	+(USMALLINT) -> USMALLINT
	+(USMALLINT, USMALLINT) -> USMALLINT
	+(UINTEGER) -> UINTEGER
	+(UINTEGER, UINTEGER) -> UINTEGER
	+(UBIGINT) -> UBIGINT
	+(UBIGINT, UBIGINT) -> UBIGINT
	+(UHUGEINT) -> UHUGEINT
	+(UHUGEINT, UHUGEINT) -> UHUGEINT
	+(DATE, INTEGER) -> DATE
	+(INTEGER, DATE) -> DATE
	+(INTERVAL, INTERVAL) -> INTERVAL
	+(DATE, INTERVAL) -> TIMESTAMP
	+(INTERVAL, DATE) -> TIMESTAMP
	+(TIME, INTERVAL) -> TIME
	+(INTERVAL, TIME) -> TIME
	+(TIMESTAMP, INTERVAL) -> TIMESTAMP
	+(INTERVAL, TIMESTAMP) -> TIMESTAMP
	+(TIME WITH TIME ZONE, INTERVAL) -> TIME WITH TIME ZONE
	+(INTERVAL, TIME WITH TIME ZONE) -> TIME WITH TIME ZONE
	+(TIME, DATE) -> TIMESTAMP
	+(DATE, TIME) -> TIMESTAMP
	+(TIME WITH TIME ZONE, DATE) -> TIMESTAMP WITH TIME ZONE
	+(DATE, TIME WITH TIME ZONE) -> TIMESTAMP WITH TIME ZONE
	+(ANY[], ANY[]) -> ANY[]
	+(TIMESTAMP WITH TIME ZONE, INTERVAL) -> TIMESTAMP WITH TIME ZONE
	+(INTERVAL, TIMESTAMP WITH TIME ZONE) -> TIMESTAMP WITH TIME ZONE


-----------
QUERY:

explain (verbose, costs off)
select generate_series(1,3)+1 order by generate_series(1,3);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: verbose

-----------
QUERY:

select generate_series(1,3)+1 order by generate_series(1,3);
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types '+(BIGINT[], INTEGER_LITERAL)'. You might need to add explicit type casts.
	Candidate functions:
	+(TINYINT) -> TINYINT
	+(TINYINT, TINYINT) -> TINYINT
	+(SMALLINT) -> SMALLINT
	+(SMALLINT, SMALLINT) -> SMALLINT
	+(INTEGER) -> INTEGER
	+(INTEGER, INTEGER) -> INTEGER
	+(BIGINT) -> BIGINT
	+(BIGINT, BIGINT) -> BIGINT
	+(HUGEINT) -> HUGEINT
	+(HUGEINT, HUGEINT) -> HUGEINT
	+(FLOAT) -> FLOAT
	+(FLOAT, FLOAT) -> FLOAT
	+(DOUBLE) -> DOUBLE
	+(DOUBLE, DOUBLE) -> DOUBLE
	+(DECIMAL) -> DECIMAL
	+(DECIMAL, DECIMAL) -> DECIMAL
	+(UTINYINT) -> UTINYINT
	+(UTINYINT, UTINYINT) -> UTINYINT
	+(USMALLINT) -> USMALLINT
	+(USMALLINT, USMALLINT) -> USMALLINT
	+(UINTEGER) -> UINTEGER
	+(UINTEGER, UINTEGER) -> UINTEGER
	+(UBIGINT) -> UBIGINT
	+(UBIGINT, UBIGINT) -> UBIGINT
	+(UHUGEINT) -> UHUGEINT
	+(UHUGEINT, UHUGEINT) -> UHUGEINT
	+(DATE, INTEGER) -> DATE
	+(INTEGER, DATE) -> DATE
	+(INTERVAL, INTERVAL) -> INTERVAL
	+(DATE, INTERVAL) -> TIMESTAMP
	+(INTERVAL, DATE) -> TIMESTAMP
	+(TIME, INTERVAL) -> TIME
	+(INTERVAL, TIME) -> TIME
	+(TIMESTAMP, INTERVAL) -> TIMESTAMP
	+(INTERVAL, TIMESTAMP) -> TIMESTAMP
	+(TIME WITH TIME ZONE, INTERVAL) -> TIME WITH TIME ZONE
	+(INTERVAL, TIME WITH TIME ZONE) -> TIME WITH TIME ZONE
	+(TIME, DATE) -> TIMESTAMP
	+(DATE, TIME) -> TIMESTAMP
	+(TIME WITH TIME ZONE, DATE) -> TIMESTAMP WITH TIME ZONE
	+(DATE, TIME WITH TIME ZONE) -> TIMESTAMP WITH TIME ZONE
	+(ANY[], ANY[]) -> ANY[]
	+(TIMESTAMP WITH TIME ZONE, INTERVAL) -> TIMESTAMP WITH TIME ZONE
	+(INTERVAL, TIMESTAMP WITH TIME ZONE) -> TIMESTAMP WITH TIME ZONE


-----------
QUERY:


-- Check that SRFs of same nesting level run in lockstep
explain (verbose, costs off)
select generate_series(1,3) as x, generate_series(3,6) + 1 as y;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: verbose

-----------
QUERY:

select generate_series(1,3) as x, generate_series(3,6) + 1 as y;
RESULT:
	ERROR - Binder Error: No function matches the given name and argument types '+(BIGINT[], INTEGER_LITERAL)'. You might need to add explicit type casts.
	Candidate functions:
	+(TINYINT) -> TINYINT
	+(TINYINT, TINYINT) -> TINYINT
	+(SMALLINT) -> SMALLINT
	+(SMALLINT, SMALLINT) -> SMALLINT
	+(INTEGER) -> INTEGER
	+(INTEGER, INTEGER) -> INTEGER
	+(BIGINT) -> BIGINT
	+(BIGINT, BIGINT) -> BIGINT
	+(HUGEINT) -> HUGEINT
	+(HUGEINT, HUGEINT) -> HUGEINT
	+(FLOAT) -> FLOAT
	+(FLOAT, FLOAT) -> FLOAT
	+(DOUBLE) -> DOUBLE
	+(DOUBLE, DOUBLE) -> DOUBLE
	+(DECIMAL) -> DECIMAL
	+(DECIMAL, DECIMAL) -> DECIMAL
	+(UTINYINT) -> UTINYINT
	+(UTINYINT, UTINYINT) -> UTINYINT
	+(USMALLINT) -> USMALLINT
	+(USMALLINT, USMALLINT) -> USMALLINT
	+(UINTEGER) -> UINTEGER
	+(UINTEGER, UINTEGER) -> UINTEGER
	+(UBIGINT) -> UBIGINT
	+(UBIGINT, UBIGINT) -> UBIGINT
	+(UHUGEINT) -> UHUGEINT
	+(UHUGEINT, UHUGEINT) -> UHUGEINT
	+(DATE, INTEGER) -> DATE
	+(INTEGER, DATE) -> DATE
	+(INTERVAL, INTERVAL) -> INTERVAL
	+(DATE, INTERVAL) -> TIMESTAMP
	+(INTERVAL, DATE) -> TIMESTAMP
	+(TIME, INTERVAL) -> TIME
	+(INTERVAL, TIME) -> TIME
	+(TIMESTAMP, INTERVAL) -> TIMESTAMP
	+(INTERVAL, TIMESTAMP) -> TIMESTAMP
	+(TIME WITH TIME ZONE, INTERVAL) -> TIME WITH TIME ZONE
	+(INTERVAL, TIME WITH TIME ZONE) -> TIME WITH TIME ZONE
	+(TIME, DATE) -> TIMESTAMP
	+(DATE, TIME) -> TIMESTAMP
	+(TIME WITH TIME ZONE, DATE) -> TIMESTAMP WITH TIME ZONE
	+(DATE, TIME WITH TIME ZONE) -> TIMESTAMP WITH TIME ZONE
	+(ANY[], ANY[]) -> ANY[]
	+(TIMESTAMP WITH TIME ZONE, INTERVAL) -> TIMESTAMP WITH TIME ZONE
	+(INTERVAL, TIMESTAMP WITH TIME ZONE) -> TIMESTAMP WITH TIME ZONE


-----------
QUERY:


-- Clean up
DROP TABLE few;
RESULT:
	[]

-----------
QUERY:

DROP TABLE fewmore;
RESULT:
	[]
