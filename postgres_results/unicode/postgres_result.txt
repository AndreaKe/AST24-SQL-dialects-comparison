
-----------
QUERY:
SELECT getdatabaseencoding() <> 'UTF8' AS skip_test \gset
-- \if :skip_test
-- \quit
-- \endif

SELECT U&'\0061\0308bc' <> U&'\00E4bc' COLLATE "C" AS sanity_check;
RESULT:
	ERROR - syntax error at or near "\"
LINE 1: SELECT getdatabaseencoding() <> 'UTF8' AS skip_test \gset
                                                            ^


-----------
QUERY:


SELECT unicode_version() IS NOT NULL;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT unicode_assigned(U&'abc');
RESULT:
	[(True,)]

-----------
QUERY:

SELECT unicode_assigned(U&'abc\+10FFFF');
RESULT:
	[(False,)]

-----------
QUERY:


SELECT normalize('');
RESULT:
	[('',)]

-----------
QUERY:

SELECT normalize(U&'\0061\0308\24D1c') = U&'\00E4\24D1c' COLLATE "C" AS test_default;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT normalize(U&'\0061\0308\24D1c', NFC) = U&'\00E4\24D1c' COLLATE "C" AS test_nfc;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT normalize(U&'\00E4bc', NFC) = U&'\00E4bc' COLLATE "C" AS test_nfc_idem;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT normalize(U&'\00E4\24D1c', NFD) = U&'\0061\0308\24D1c' COLLATE "C" AS test_nfd;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT normalize(U&'\0061\0308\24D1c', NFKC) = U&'\00E4bc' COLLATE "C" AS test_nfkc;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT normalize(U&'\00E4\24D1c', NFKD) = U&'\0061\0308bc' COLLATE "C" AS test_nfkd;
RESULT:
	[(True,)]

-----------
QUERY:


SELECT "normalize"('abc', 'def');
RESULT:
	ERROR - invalid normalization form: def


-----------
QUERY:
  -- run-time error

SELECT U&'\00E4\24D1c' IS NORMALIZED AS test_default;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT U&'\00E4\24D1c' IS NFC NORMALIZED AS test_nfc;
RESULT:
	[(True,)]

-----------
QUERY:


SELECT num, val,
    val IS NFC NORMALIZED AS NFC,
    val IS NFD NORMALIZED AS NFD,
    val IS NFKC NORMALIZED AS NFKC,
    val IS NFKD NORMALIZED AS NFKD
FROM
  (VALUES (1, U&'\00E4bc'),
          (2, U&'\0061\0308bc'),
          (3, U&'\00E4\24D1c'),
          (4, U&'\0061\0308\24D1c'),
          (5, '')) vals (num, val)
ORDER BY num;
RESULT:
	[(1, 'äbc', True, False, True, False), (2, 'äbc', False, True, False, True), (3, 'äⓑc', True, False, False, False), (4, 'äⓑc', False, True, False, False), (5, '', True, True, True, True)]

-----------
QUERY:


SELECT is_normalized('abc', 'def');
RESULT:
	ERROR - invalid normalization form: def

