
-----------
QUERY:
--
-- UNION (also INTERSECT, EXCEPT)
--

-- Simple UNION constructs

SELECT 1 AS two UNION SELECT 2 ORDER BY 1;
RESULT:
	[(1,), (2,)]

-----------
QUERY:


SELECT 1 AS one UNION SELECT 1 ORDER BY 1;
RESULT:
	[(1,)]

-----------
QUERY:


SELECT 1 AS two UNION ALL SELECT 2;
RESULT:
	[(1,), (2,)]

-----------
QUERY:


SELECT 1 AS two UNION ALL SELECT 1;
RESULT:
	[(1,), (1,)]

-----------
QUERY:


SELECT 1 AS three UNION SELECT 2 UNION SELECT 3 ORDER BY 1;
RESULT:
	[(1,), (2,), (3,)]

-----------
QUERY:


SELECT 1 AS two UNION SELECT 2 UNION SELECT 2 ORDER BY 1;
RESULT:
	[(1,), (2,)]

-----------
QUERY:


SELECT 1 AS three UNION SELECT 2 UNION ALL SELECT 2 ORDER BY 1;
RESULT:
	[(1,), (2,), (2,)]

-----------
QUERY:


SELECT 1.1 AS two UNION SELECT 2.2 ORDER BY 1;
RESULT:
	[(Decimal('1.1'),), (Decimal('2.2'),)]

-----------
QUERY:


-- Mixed types

SELECT 1.1 AS two UNION SELECT 2 ORDER BY 1;
RESULT:
	[(Decimal('1.1'),), (Decimal('2.0'),)]

-----------
QUERY:


SELECT 1 AS two UNION SELECT 2.2 ORDER BY 1;
RESULT:
	[(Decimal('1.0'),), (Decimal('2.2'),)]

-----------
QUERY:


SELECT 1 AS one UNION SELECT 1.0::float8 ORDER BY 1;
RESULT:
	[(1.0,)]

-----------
QUERY:


SELECT 1.1 AS two UNION ALL SELECT 2 ORDER BY 1;
RESULT:
	[(Decimal('1.1'),), (Decimal('2.0'),)]

-----------
QUERY:


SELECT 1.0::float8 AS two UNION ALL SELECT 1 ORDER BY 1;
RESULT:
	[(1.0,), (1.0,)]

-----------
QUERY:


SELECT 1.1 AS three UNION SELECT 2 UNION SELECT 3 ORDER BY 1;
RESULT:
	[(Decimal('1.1'),), (Decimal('2.0'),), (Decimal('3.0'),)]

-----------
QUERY:


SELECT 1.1::float8 AS two UNION SELECT 2 UNION SELECT 2.0::float8 ORDER BY 1;
RESULT:
	[(1.1,), (2.0,)]

-----------
QUERY:


SELECT 1.1 AS three UNION SELECT 2 UNION ALL SELECT 2 ORDER BY 1;
RESULT:
	[(Decimal('1.1'),), (Decimal('2.0'),), (Decimal('2.0'),)]

-----------
QUERY:


SELECT 1.1 AS two UNION (SELECT 2 UNION ALL SELECT 2) ORDER BY 1;
RESULT:
	[(Decimal('1.1'),), (Decimal('2.0'),)]

-----------
QUERY:


--
-- Try testing from tables...
--

SELECT f1 AS five FROM FLOAT8_TBL
UNION
SELECT f1 FROM FLOAT8_TBL
ORDER BY 1;
RESULT:
	[(-1.2345678901234e+200,), (-1004.3,), (-34.84,), (-1.2345678901234e-200,), (0.0,)]

-----------
QUERY:


SELECT f1 AS ten FROM FLOAT8_TBL
UNION ALL
SELECT f1 FROM FLOAT8_TBL;
RESULT:
	[(0.0,), (-34.84,), (-1004.3,), (-1.2345678901234e+200,), (-1.2345678901234e-200,), (0.0,), (-34.84,), (-1004.3,), (-1.2345678901234e+200,), (-1.2345678901234e-200,)]

-----------
QUERY:


SELECT f1 AS nine FROM FLOAT8_TBL
UNION
SELECT f1 FROM INT4_TBL
ORDER BY 1;
RESULT:
	[(-1.2345678901234e+200,), (-2147483647.0,), (-123456.0,), (-1004.3,), (-34.84,), (-1.2345678901234e-200,), (0.0,), (123456.0,), (2147483647.0,)]

-----------
QUERY:


SELECT f1 AS ten FROM FLOAT8_TBL
UNION ALL
SELECT f1 FROM INT4_TBL;
RESULT:
	[(0.0,), (-34.84,), (-1004.3,), (-1.2345678901234e+200,), (-1.2345678901234e-200,), (0.0,), (123456.0,), (-123456.0,), (2147483647.0,), (-2147483647.0,)]

-----------
QUERY:


SELECT f1 AS five FROM FLOAT8_TBL
  WHERE f1 BETWEEN -1e6 AND 1e6
UNION
SELECT f1 FROM INT4_TBL
  WHERE f1 BETWEEN 0 AND 1000000
ORDER BY 1;
RESULT:
	[(-1004.3,), (-34.84,), (-1.2345678901234e-200,), (0.0,), (123456.0,)]

-----------
QUERY:


SELECT CAST(f1 AS char(4)) AS three FROM VARCHAR_TBL
UNION
SELECT f1 FROM CHAR_TBL
ORDER BY 1;
RESULT:
	[('a',), ('ab',), ('abcd',), ('abcd    ',)]

-----------
QUERY:


SELECT f1 AS three FROM VARCHAR_TBL
UNION
SELECT CAST(f1 AS varchar) FROM CHAR_TBL
ORDER BY 1;
RESULT:
	[('a',), ('ab',), ('abcd',), ('abcd    ',)]

-----------
QUERY:


SELECT f1 AS eight FROM VARCHAR_TBL
UNION ALL
SELECT f1 FROM CHAR_TBL;
RESULT:
	[('a',), ('ab',), ('abcd',), ('abcd    ',), ('a',), ('ab',), ('abcd',), ('abcd    ',)]

-----------
QUERY:


SELECT f1 AS five FROM TEXT_TBL
UNION
SELECT f1 FROM VARCHAR_TBL
UNION
SELECT TRIM(TRAILING FROM f1) FROM CHAR_TBL
ORDER BY 1;
RESULT:
	[('a',), ('ab',), ('abcd',), ('abcd    ',), ('doh!',), ('hi de ho neighbor',)]

-----------
QUERY:


--
-- INTERSECT and EXCEPT
--

SELECT q2 FROM int8_tbl INTERSECT SELECT q1 FROM int8_tbl ORDER BY 1;
RESULT:
	[(123,), (4567890123456789,)]

-----------
QUERY:


SELECT q2 FROM int8_tbl INTERSECT ALL SELECT q1 FROM int8_tbl ORDER BY 1;
RESULT:
	[(123,), (4567890123456789,), (4567890123456789,)]

-----------
QUERY:


SELECT q2 FROM int8_tbl EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1;
RESULT:
	[(-4567890123456789,), (456,)]

-----------
QUERY:


SELECT q2 FROM int8_tbl EXCEPT ALL SELECT q1 FROM int8_tbl ORDER BY 1;
RESULT:
	[(-4567890123456789,), (456,)]

-----------
QUERY:


SELECT q2 FROM int8_tbl EXCEPT ALL SELECT DISTINCT q1 FROM int8_tbl ORDER BY 1;
RESULT:
	[(-4567890123456789,), (456,), (4567890123456789,)]

-----------
QUERY:


SELECT q1 FROM int8_tbl EXCEPT SELECT q2 FROM int8_tbl ORDER BY 1;
RESULT:
	[]

-----------
QUERY:


SELECT q1 FROM int8_tbl EXCEPT ALL SELECT q2 FROM int8_tbl ORDER BY 1;
RESULT:
	[(123,), (4567890123456789,)]

-----------
QUERY:


SELECT q1 FROM int8_tbl EXCEPT ALL SELECT DISTINCT q2 FROM int8_tbl ORDER BY 1;
RESULT:
	[(123,), (4567890123456789,), (4567890123456789,)]

-----------
QUERY:


SELECT q1 FROM int8_tbl EXCEPT ALL SELECT q1 FROM int8_tbl FOR NO KEY UPDATE;
RESULT:
	ERROR - Parser Error: SELECT locking clause is not supported!

-----------
QUERY:


-- nested cases
(SELECT 1,2,3 UNION SELECT 4,5,6) INTERSECT SELECT 4,5,6;
RESULT:
	[(4, 5, 6)]

-----------
QUERY:

(SELECT 1,2,3 UNION SELECT 4,5,6 ORDER BY 1,2) INTERSECT SELECT 4,5,6;
RESULT:
	[(4, 5, 6)]

-----------
QUERY:

(SELECT 1,2,3 UNION SELECT 4,5,6) EXCEPT SELECT 4,5,6;
RESULT:
	[(1, 2, 3)]

-----------
QUERY:

(SELECT 1,2,3 UNION SELECT 4,5,6 ORDER BY 1,2) EXCEPT SELECT 4,5,6;
RESULT:
	[(1, 2, 3)]

-----------
QUERY:


-- exercise both hashed and sorted implementations of UNION/INTERSECT/EXCEPT

set enable_hashagg to on;
RESULT:
	ERROR - Parser Error: syntax error at or near "on"

-----------
QUERY:


explain (costs off)
select count(*) from
  ( select unique1 from tenk1 union select fivethous from tenk1 ) ss;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select count(*) from
  ( select unique1 from tenk1 union select fivethous from tenk1 ) ss;
RESULT:
	ERROR - Catalog Error: Table with name tenk1 does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:


explain (costs off)
select count(*) from
  ( select unique1 from tenk1 intersect select fivethous from tenk1 ) ss;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select count(*) from
  ( select unique1 from tenk1 intersect select fivethous from tenk1 ) ss;
RESULT:
	ERROR - Catalog Error: Table with name tenk1 does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:


explain (costs off)
select unique1 from tenk1 except select unique2 from tenk1 where unique2 != 10;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select unique1 from tenk1 except select unique2 from tenk1 where unique2 != 10;
RESULT:
	ERROR - Catalog Error: Table with name tenk1 does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:


set enable_hashagg to off;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:


explain (costs off)
select count(*) from
  ( select unique1 from tenk1 union select fivethous from tenk1 ) ss;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select count(*) from
  ( select unique1 from tenk1 union select fivethous from tenk1 ) ss;
RESULT:
	ERROR - Catalog Error: Table with name tenk1 does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:


explain (costs off)
select count(*) from
  ( select unique1 from tenk1 intersect select fivethous from tenk1 ) ss;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select count(*) from
  ( select unique1 from tenk1 intersect select fivethous from tenk1 ) ss;
RESULT:
	ERROR - Catalog Error: Table with name tenk1 does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:


explain (costs off)
select unique1 from tenk1 except select unique2 from tenk1 where unique2 != 10;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select unique1 from tenk1 except select unique2 from tenk1 where unique2 != 10;
RESULT:
	ERROR - Catalog Error: Table with name tenk1 does not exist!
Did you mean "temp.information_schema.tables"?

-----------
QUERY:


reset enable_hashagg;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:


-- non-hashable type
set enable_hashagg to on;
RESULT:
	ERROR - Parser Error: syntax error at or near "on"

-----------
QUERY:


explain (costs off)
select x from (values ('11'::varbit), ('10'::varbit)) _(x) union select x from (values ('11'::varbit), ('10'::varbit)) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


set enable_hashagg to off;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:


explain (costs off)
select x from (values ('11'::varbit), ('10'::varbit)) _(x) union select x from (values ('11'::varbit), ('10'::varbit)) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


reset enable_hashagg;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:


-- arrays
set enable_hashagg to on;
RESULT:
	ERROR - Parser Error: syntax error at or near "on"

-----------
QUERY:


explain (costs off)
select x from (values (array[1, 2]), (array[1, 3])) _(x) union select x from (values (array[1, 2]), (array[1, 4])) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (array[1, 2]), (array[1, 3])) _(x) union select x from (values (array[1, 2]), (array[1, 4])) _(x);
RESULT:
	[([1, 3],), ([1, 4],), ([1, 2],)]

-----------
QUERY:

explain (costs off)
select x from (values (array[1, 2]), (array[1, 3])) _(x) intersect select x from (values (array[1, 2]), (array[1, 4])) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (array[1, 2]), (array[1, 3])) _(x) intersect select x from (values (array[1, 2]), (array[1, 4])) _(x);
RESULT:
	[([1, 2],)]

-----------
QUERY:

explain (costs off)
select x from (values (array[1, 2]), (array[1, 3])) _(x) except select x from (values (array[1, 2]), (array[1, 4])) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (array[1, 2]), (array[1, 3])) _(x) except select x from (values (array[1, 2]), (array[1, 4])) _(x);
RESULT:
	[([1, 3],)]

-----------
QUERY:


-- non-hashable type
explain (costs off)
select x from (values (array['10'::varbit]), (array['11'::varbit])) _(x) union select x from (values (array['10'::varbit]), (array['01'::varbit])) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (array['10'::varbit]), (array['11'::varbit])) _(x) union select x from (values (array['10'::varbit]), (array['01'::varbit])) _(x);
RESULT:
	ERROR - Catalog Error: Type with name varbit does not exist!
Did you mean "bit"?

-----------
QUERY:


set enable_hashagg to off;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:


explain (costs off)
select x from (values (array[1, 2]), (array[1, 3])) _(x) union select x from (values (array[1, 2]), (array[1, 4])) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (array[1, 2]), (array[1, 3])) _(x) union select x from (values (array[1, 2]), (array[1, 4])) _(x);
RESULT:
	[([1, 2],), ([1, 4],), ([1, 3],)]

-----------
QUERY:

explain (costs off)
select x from (values (array[1, 2]), (array[1, 3])) _(x) intersect select x from (values (array[1, 2]), (array[1, 4])) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (array[1, 2]), (array[1, 3])) _(x) intersect select x from (values (array[1, 2]), (array[1, 4])) _(x);
RESULT:
	[([1, 2],)]

-----------
QUERY:

explain (costs off)
select x from (values (array[1, 2]), (array[1, 3])) _(x) except select x from (values (array[1, 2]), (array[1, 4])) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (array[1, 2]), (array[1, 3])) _(x) except select x from (values (array[1, 2]), (array[1, 4])) _(x);
RESULT:
	[([1, 3],)]

-----------
QUERY:


reset enable_hashagg;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:


-- records
set enable_hashagg to on;
RESULT:
	ERROR - Parser Error: syntax error at or near "on"

-----------
QUERY:


explain (costs off)
select x from (values (row(1, 2)), (row(1, 3))) _(x) union select x from (values (row(1, 2)), (row(1, 4))) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (row(1, 2)), (row(1, 3))) _(x) union select x from (values (row(1, 2)), (row(1, 4))) _(x);
RESULT:
	[((1, 4),), ((1, 2),), ((1, 3),)]

-----------
QUERY:

explain (costs off)
select x from (values (row(1, 2)), (row(1, 3))) _(x) intersect select x from (values (row(1, 2)), (row(1, 4))) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (row(1, 2)), (row(1, 3))) _(x) intersect select x from (values (row(1, 2)), (row(1, 4))) _(x);
RESULT:
	[((1, 2),)]

-----------
QUERY:

explain (costs off)
select x from (values (row(1, 2)), (row(1, 3))) _(x) except select x from (values (row(1, 2)), (row(1, 4))) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (row(1, 2)), (row(1, 3))) _(x) except select x from (values (row(1, 2)), (row(1, 4))) _(x);
RESULT:
	[((1, 3),)]

-----------
QUERY:


-- non-hashable type

-- With an anonymous row type, the typcache does not report that the
-- type is hashable.  (Otherwise, this would fail at execution time.)
explain (costs off)
select x from (values (row('10'::varbit)), (row('11'::varbit))) _(x) union select x from (values (row('10'::varbit)), (row('01'::varbit))) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (row('10'::varbit)), (row('11'::varbit))) _(x) union select x from (values (row('10'::varbit)), (row('01'::varbit))) _(x);
RESULT:
	ERROR - Catalog Error: Type with name varbit does not exist!
Did you mean "bit"?

-----------
QUERY:


-- With a defined row type, the typcache can inspect the type/* REPLACED */ ''s fields
-- for hashability.
create type ct1 as (f1 varbit);
RESULT:
	ERROR - Parser Error: syntax error at or near "("

-----------
QUERY:

explain (costs off)
select x from (values (row('10'::varbit)::ct1), (row('11'::varbit)::ct1)) _(x) union select x from (values (row('10'::varbit)::ct1), (row('01'::varbit)::ct1)) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (row('10'::varbit)::ct1), (row('11'::varbit)::ct1)) _(x) union select x from (values (row('10'::varbit)::ct1), (row('01'::varbit)::ct1)) _(x);
RESULT:
	ERROR - Catalog Error: Type with name varbit does not exist!
Did you mean "bit"?

-----------
QUERY:

drop type ct1;
RESULT:
	ERROR - Catalog Error: Type with name ct1 does not exist!
Did you mean "int1"?

-----------
QUERY:


set enable_hashagg to off;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:


explain (costs off)
select x from (values (row(1, 2)), (row(1, 3))) _(x) union select x from (values (row(1, 2)), (row(1, 4))) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (row(1, 2)), (row(1, 3))) _(x) union select x from (values (row(1, 2)), (row(1, 4))) _(x);
RESULT:
	[((1, 3),), ((1, 2),), ((1, 4),)]

-----------
QUERY:

explain (costs off)
select x from (values (row(1, 2)), (row(1, 3))) _(x) intersect select x from (values (row(1, 2)), (row(1, 4))) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (row(1, 2)), (row(1, 3))) _(x) intersect select x from (values (row(1, 2)), (row(1, 4))) _(x);
RESULT:
	[((1, 2),)]

-----------
QUERY:

explain (costs off)
select x from (values (row(1, 2)), (row(1, 3))) _(x) except select x from (values (row(1, 2)), (row(1, 4))) _(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select x from (values (row(1, 2)), (row(1, 3))) _(x) except select x from (values (row(1, 2)), (row(1, 4))) _(x);
RESULT:
	[((1, 3),)]

-----------
QUERY:


reset enable_hashagg;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:


--
-- Mixed types
--

SELECT f1 FROM float8_tbl INTERSECT SELECT f1 FROM int4_tbl ORDER BY 1;
RESULT:
	[(0.0,)]

-----------
QUERY:


SELECT f1 FROM float8_tbl EXCEPT SELECT f1 FROM int4_tbl ORDER BY 1;
RESULT:
	[(-1.2345678901234e+200,), (-1004.3,), (-34.84,), (-1.2345678901234e-200,)]

-----------
QUERY:


--
-- Operator precedence and (((((extra))))) parentheses
--

SELECT q1 FROM int8_tbl INTERSECT SELECT q2 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl  ORDER BY 1;
RESULT:
	[(-4567890123456789,), (123,), (123,), (456,), (4567890123456789,), (4567890123456789,), (4567890123456789,)]

-----------
QUERY:


SELECT q1 FROM int8_tbl INTERSECT (((SELECT q2 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl))) ORDER BY 1;
RESULT:
	[(123,), (4567890123456789,)]

-----------
QUERY:


(((SELECT q1 FROM int8_tbl INTERSECT SELECT q2 FROM int8_tbl ORDER BY 1))) UNION ALL SELECT q2 FROM int8_tbl;
RESULT:
	[(123,), (4567890123456789,), (456,), (4567890123456789,), (123,), (4567890123456789,), (-4567890123456789,)]

-----------
QUERY:


SELECT q1 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1;
RESULT:
	[(-4567890123456789,), (456,)]

-----------
QUERY:


SELECT q1 FROM int8_tbl UNION ALL (((SELECT q2 FROM int8_tbl EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1)));
RESULT:
	[(123,), (123,), (4567890123456789,), (4567890123456789,), (4567890123456789,), (-4567890123456789,), (456,)]

-----------
QUERY:


(((SELECT q1 FROM int8_tbl UNION ALL SELECT q2 FROM int8_tbl))) EXCEPT SELECT q1 FROM int8_tbl ORDER BY 1;
RESULT:
	[(-4567890123456789,), (456,)]

-----------
QUERY:


--
-- Subqueries with ORDER BY & LIMIT clauses
--

-- In this syntax, ORDER BY/LIMIT apply to the result of the EXCEPT
SELECT q1,q2 FROM int8_tbl EXCEPT SELECT q2,q1 FROM int8_tbl
ORDER BY q2,q1;
RESULT:
	[(4567890123456789, -4567890123456789), (123, 456)]

-----------
QUERY:


-- This should fail, because q2 isn/* REPLACED */ ''t a name of an EXCEPT output column
SELECT q1 FROM int8_tbl EXCEPT SELECT q2 FROM int8_tbl ORDER BY q2 LIMIT 1;
RESULT:
	[]

-----------
QUERY:


-- But this should work:
SELECT q1 FROM int8_tbl EXCEPT (((SELECT q2 FROM int8_tbl ORDER BY q2 LIMIT 1))) ORDER BY 1;
RESULT:
	[(123,), (4567890123456789,)]

-----------
QUERY:


--
-- New syntaxes (7.1) permit new tests
--

(((((select * from int8_tbl)))));
RESULT:
	[(123, 456), (123, 4567890123456789), (4567890123456789, 123), (4567890123456789, 4567890123456789), (4567890123456789, -4567890123456789)]

-----------
QUERY:


--
-- Check behavior with empty select list (allowed since 9.4)
--

select union select;
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:

select intersect select;
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:

select except select;
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:


-- check hashed implementation
set enable_hashagg = true;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:

set enable_sort = false;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_sort"

Did you mean: "enable_fsst_vectors"

-----------
QUERY:


explain (costs off)
select from generate_series(1,5) union select from generate_series(1,3);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

explain (costs off)
select from generate_series(1,5) intersect select from generate_series(1,3);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


select from generate_series(1,5) union select from generate_series(1,3);
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:

select from generate_series(1,5) union all select from generate_series(1,3);
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:

select from generate_series(1,5) intersect select from generate_series(1,3);
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:

select from generate_series(1,5) intersect all select from generate_series(1,3);
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:

select from generate_series(1,5) except select from generate_series(1,3);
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:

select from generate_series(1,5) except all select from generate_series(1,3);
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:


-- check sorted implementation
set enable_hashagg = false;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:

set enable_sort = true;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_sort"

Did you mean: "enable_fsst_vectors"

-----------
QUERY:


explain (costs off)
select from generate_series(1,5) union select from generate_series(1,3);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

explain (costs off)
select from generate_series(1,5) intersect select from generate_series(1,3);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


select from generate_series(1,5) union select from generate_series(1,3);
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:

select from generate_series(1,5) union all select from generate_series(1,3);
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:

select from generate_series(1,5) intersect select from generate_series(1,3);
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:

select from generate_series(1,5) intersect all select from generate_series(1,3);
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:

select from generate_series(1,5) except select from generate_series(1,3);
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:

select from generate_series(1,5) except all select from generate_series(1,3);
RESULT:
	ERROR - Parser Error: SELECT clause without selection list

-----------
QUERY:


reset enable_hashagg;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_hashagg"

Did you mean: "enable_progress_bar"

-----------
QUERY:

reset enable_sort;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_sort"

Did you mean: "enable_fsst_vectors"

-----------
QUERY:


--
-- Check handling of a case with unknown constants.  We don/* REPLACED */ ''t guarantee
-- an undecorated constant will work in all cases, but historically this
-- usage has worked, so test we don/* REPLACED */ ''t break it.
--

SELECT a.f1 FROM (SELECT 'test' AS f1 FROM varchar_tbl) a
UNION
SELECT b.f1 FROM (SELECT f1 FROM varchar_tbl) b
ORDER BY 1;
RESULT:
	[('a',), ('ab',), ('abcd',), ('abcd    ',), ('test',)]

-----------
QUERY:


-- This should fail, but it should produce an error cursor
SELECT '3.4'::numeric UNION SELECT 'foo';
RESULT:
	[('3.400',), ('foo',)]

-----------
QUERY:


--
-- Test that expression-index constraints can be pushed down through
-- UNION or UNION ALL
--

CREATE TEMP TABLE t1 (a text, b text);
RESULT:
	[]

-----------
QUERY:

CREATE INDEX t1_ab_idx on t1 ((a || b));
RESULT:
	[]

-----------
QUERY:

CREATE TEMP TABLE t2 (ab text primary key);
RESULT:
	[]

-----------
QUERY:

INSERT INTO t1 VALUES ('a', 'b'), ('x', 'y');
RESULT:
	[]

-----------
QUERY:

INSERT INTO t2 VALUES ('ab'), ('xy');
RESULT:
	[]

-----------
QUERY:


set enable_seqscan = off;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_seqscan"

Did you mean: "enable_object_cache"

-----------
QUERY:

set enable_indexscan = on;
RESULT:
	ERROR - Parser Error: syntax error at or near "on"

-----------
QUERY:

set enable_bitmapscan = off;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_bitmapscan"

Did you mean: "enable_object_cache"

-----------
QUERY:


explain (costs off)
 SELECT * FROM
 (SELECT a || b AS ab FROM t1
  UNION ALL
  SELECT * FROM t2) t
 WHERE ab = 'ab';
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


explain (costs off)
 SELECT * FROM
 (SELECT a || b AS ab FROM t1
  UNION
  SELECT * FROM t2) t
 WHERE ab = 'ab';
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


--
-- Test that ORDER BY for UNION ALL can be pushed down to inheritance
-- children.
--

CREATE TEMP TABLE t1c (b text, a text);
RESULT:
	[]

-----------
QUERY:

ALTER TABLE t1c INHERIT t1;
RESULT:
	ERROR - Parser Error: syntax error at or near "INHERIT"

-----------
QUERY:

CREATE TEMP TABLE t2c (primary key (ab)) INHERITS (t2);
RESULT:
	ERROR - Parser Error: syntax error at or near "INHERITS"

-----------
QUERY:

INSERT INTO t1c VALUES ('v', 'w'), ('c', 'd'), ('m', 'n'), ('e', 'f');
RESULT:
	[]

-----------
QUERY:

INSERT INTO t2c VALUES ('vw'), ('cd'), ('mn'), ('ef');
RESULT:
	ERROR - Catalog Error: Table with name t2c does not exist!
Did you mean "t2"?

-----------
QUERY:

CREATE INDEX t1c_ab_idx on t1c ((a || b));
RESULT:
	[]

-----------
QUERY:


set enable_seqscan = on;
RESULT:
	ERROR - Parser Error: syntax error at or near "on"

-----------
QUERY:

set enable_indexonlyscan = off;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_indexonlyscan"

Did you mean: "Calendar"

-----------
QUERY:


explain (costs off)
  SELECT * FROM
  (SELECT a || b AS ab FROM t1
   UNION ALL
   SELECT ab FROM t2) t
  ORDER BY 1 LIMIT 8;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


  SELECT * FROM
  (SELECT a || b AS ab FROM t1
   UNION ALL
   SELECT ab FROM t2) t
  ORDER BY 1 LIMIT 8;
RESULT:
	[('ab',), ('ab',), ('xy',), ('xy',)]

-----------
QUERY:


reset enable_seqscan;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_seqscan"

Did you mean: "enable_object_cache"

-----------
QUERY:

reset enable_indexscan;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_indexscan"

Did you mean: "Calendar"

-----------
QUERY:

reset enable_bitmapscan;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_bitmapscan"

Did you mean: "enable_object_cache"

-----------
QUERY:


-- This simpler variant of the above test has been observed to fail differently

create table events (event_id int primary key);
RESULT:
	[]

-----------
QUERY:

create table other_events (event_id int primary key);
RESULT:
	[]

-----------
QUERY:

create table events_child () inherits (events);
RESULT:
	ERROR - Parser Error: syntax error at or near "inherits"

-----------
QUERY:


explain (costs off)
select event_id
 from (select event_id from events
       union all
       select event_id from other_events) ss
 order by event_id;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


drop table events_child, events, other_events;
RESULT:
	ERROR - Not implemented Error: Can only drop one object at a time

-----------
QUERY:


reset enable_indexonlyscan;
RESULT:
	ERROR - Catalog Error: unrecognized configuration parameter "enable_indexonlyscan"

Did you mean: "Calendar"

-----------
QUERY:


-- Test constraint exclusion of UNION ALL subqueries
explain (costs off)
 SELECT * FROM
  (SELECT 1 AS t, * FROM tenk1 a
   UNION ALL
   SELECT 2 AS t, * FROM tenk1 b) c
 WHERE t = 2;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


-- Test that we push quals into UNION sub-selects only when it/* REPLACED */ ''s safe
explain (costs off)
SELECT * FROM
  (SELECT 1 AS t, 2 AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4
ORDER BY x;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


SELECT * FROM
  (SELECT 1 AS t, 2 AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4
ORDER BY x;
RESULT:
	[(1, 2)]

-----------
QUERY:


explain (costs off)
SELECT * FROM
  (SELECT 1 AS t, generate_series(1,10) AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4
ORDER BY x;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


SELECT * FROM
  (SELECT 1 AS t, generate_series(1,10) AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x < 4
ORDER BY x;
RESULT:
	ERROR - Binder Error: Cannot compare values of type BIGINT[] and type INTEGER_LITERAL - an explicit cast is required

-----------
QUERY:


explain (costs off)
SELECT * FROM
  (SELECT 1 AS t, (random()*3)::int AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x > 3
ORDER BY x;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


SELECT * FROM
  (SELECT 1 AS t, (random()*3)::int AS x
   UNION
   SELECT 2 AS t, 4 AS x) ss
WHERE x > 3
ORDER BY x;
RESULT:
	[(2, 4)]

-----------
QUERY:


-- Test cases where the native ordering of a sub-select has more pathkeys
-- than the outer query cares about
explain (costs off)
select distinct q1 from
  (select distinct * from int8_tbl i81
   union all
   select distinct * from int8_tbl i82) ss
where q2 = q2;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


select distinct q1 from
  (select distinct * from int8_tbl i81
   union all
   select distinct * from int8_tbl i82) ss
where q2 = q2;
RESULT:
	[(123,), (4567890123456789,)]

-----------
QUERY:


explain (costs off)
select distinct q1 from
  (select distinct * from int8_tbl i81
   union all
   select distinct * from int8_tbl i82) ss
where -q1 = q2;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


select distinct q1 from
  (select distinct * from int8_tbl i81
   union all
   select distinct * from int8_tbl i82) ss
where -q1 = q2;
RESULT:
	[(4567890123456789,)]

-----------
QUERY:


-- Test proper handling of parameterized appendrel paths when the
-- potential join qual is expensive
create function expensivefunc(int) returns int
language plpgsql immutable strict cost 10000
as $$begin return $1; end$$;
RESULT:
	ERROR - Parser Error: syntax error at or near "returns"

-----------
QUERY:


create temp table t3 as select generate_series(-1000,1000) as x;
RESULT:
	[]

-----------
QUERY:

create index t3i on t3 (expensivefunc(x));
RESULT:
	ERROR - Catalog Error: Scalar Function with name expensivefunc does not exist!
Did you mean "even"?
LINE 2: create index t3i on t3 (expensivefunc(x));
                                ^

-----------
QUERY:

analyze t3;
RESULT:
	[]

-----------
QUERY:


explain (costs off)
select * from
  (select * from t3 a union all select * from t3 b) ss
  join int4_tbl on f1 = expensivefunc(x);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select * from
  (select * from t3 a union all select * from t3 b) ss
  join int4_tbl on f1 = expensivefunc(x);
RESULT:
	ERROR - Catalog Error: Scalar Function with name expensivefunc does not exist!
Did you mean "even"?

-----------
QUERY:


drop table t3;
RESULT:
	[]

-----------
QUERY:

drop function expensivefunc(int);
RESULT:
	ERROR - Parser Error: syntax error at or near "("

-----------
QUERY:


-- Test handling of appendrel quals that const-simplify into an AND
explain (costs off)
select * from
  (select *, 0 as x from int8_tbl a
   union all
   select *, 1 as x from int8_tbl b) ss
where (x = 0) or (q1 >= q2 and q1 <= q2);
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:

select * from
  (select *, 0 as x from int8_tbl a
   union all
   select *, 1 as x from int8_tbl b) ss
where (x = 0) or (q1 >= q2 and q1 <= q2);
RESULT:
	[(123, 456, 0), (123, 4567890123456789, 0), (4567890123456789, 123, 0), (4567890123456789, 4567890123456789, 0), (4567890123456789, -4567890123456789, 0), (4567890123456789, 4567890123456789, 1)]

-----------
QUERY:


--
-- Test the planner/* REPLACED */ ''s ability to produce cheap startup plans with Append nodes
--

-- Ensure we get a Nested Loop join between tenk1 and tenk2
explain (costs off)
select t1.unique1 from tenk1 t1
inner join tenk2 t2 on t1.tenthous = t2.tenthous and t2.thousand = 0
   union all
(values(1)) limit 1;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs

-----------
QUERY:


-- Ensure there is no problem if cheapest_startup_path is NULL
explain (costs off)
select * from tenk1 t1
left join lateral
  (select t1.tenthous from tenk2 t2 union all (values(1)))
on true limit 1;
RESULT:
	ERROR - Not implemented Error: Unimplemented explain type: costs
