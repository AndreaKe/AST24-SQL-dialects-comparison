-- START setup from test_setup 
--
-- TEST_SETUP --- prepare environment expected by regression test scripts
--

-- directory paths and dlsuffix are passed to us in environment variables
-- \getenv abs_srcdir '/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests'
-- \getenv libdir '/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress'
-- \getenv dlsuffix '.so'

-- \set regresslib /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress' '/regress' /* REPLACED */'.so'

--
-- synchronous_commit=off delays when hint bits may be set. Some plans change
-- depending on the number of all-visible pages, which in turn can be
-- influenced by the delayed hint bits. Force synchronous_commit=on to avoid
-- that source of variability.
--
SET synchronous_commit = on
--
-- Postgres formerly made the public schema read/write by default,
-- and most of the core regression tests still expect that.
--
GRANT ALL ON SCHEMA public TO public
-- Create a tablespace we can use in tests.
SET allow_in_place_tablespaces = true
CREATE TABLESPACE regress_tblspace LOCATION ''
ProgrammingError: CREATE TABLESPACE regress_tblspace LOCATION ''

tablespace "regress_tblspace" already exists

--
-- These tables have traditionally been referenced by many tests,
-- so create and populate them.  Insert only non-error values here.
-- (Some subsequent tests try to insert erroneous values.  That/* REPLACED */''s okay
-- because the table won/* REPLACED */''t actually change.  Do not change the contents
-- of these tables in later tests, as it may affect other tests.)
--

CREATE TABLE CHAR_TBL(f1 char(4))
INSERT INTO CHAR_TBL (f1) VALUES
  ('a'),
  ('ab'),
  ('abcd'),
  ('abcd    ')
VACUUM CHAR_TBL
CREATE TABLE FLOAT8_TBL(f1 float8)
INSERT INTO FLOAT8_TBL(f1) VALUES
  ('0.0'),
  ('-34.84'),
  ('-1004.30'),
  ('-1.2345678901234e+200'),
  ('-1.2345678901234e-200')
VACUUM FLOAT8_TBL
CREATE TABLE INT2_TBL(f1 int2)
INSERT INTO INT2_TBL(f1) VALUES
  ('0   '),
  ('  1234 '),
  ('    -1234'),
  ('32767'),  -- largest and smallest values
  ('-32767')
VACUUM INT2_TBL
CREATE TABLE INT4_TBL(f1 int4)
INSERT INTO INT4_TBL(f1) VALUES
  ('   0  '),
  ('123456     '),
  ('    -123456'),
  ('2147483647'),  -- largest and smallest values
  ('-2147483647')
VACUUM INT4_TBL
CREATE TABLE INT8_TBL(q1 int8, q2 int8)
INSERT INTO INT8_TBL VALUES
  ('  123   ','  456'),
  ('123   ','4567890123456789'),
  ('4567890123456789','123'),
  (+4567890123456789,'4567890123456789'),
  ('+4567890123456789','-4567890123456789')
VACUUM INT8_TBL
CREATE TABLE POINT_TBL(f1 point)
INSERT INTO POINT_TBL(f1) VALUES
  ('(0.0,0.0)'),
  ('(-10.0,0.0)'),
  ('(-3.0,4.0)'),
  ('(5.1, 34.5)'),
  ('(-5.0,-12.0)'),
  ('(1e-300,-1e-300)'),  -- To underflow
  ('(1e+300,Inf)'),  -- To overflow
  ('(Inf,1e+300)'),  -- Transposed
  (' ( Nan , NaN ) '),
  ('10.0,10.0')
-- We intentionally don/* REPLACED */''t vacuum point_tbl here /* REPLACED */, geometry depends on that

CREATE TABLE TEXT_TBL (f1 text)
INSERT INTO TEXT_TBL VALUES
  ('doh!'),
  ('hi de ho neighbor')
VACUUM TEXT_TBL
CREATE TABLE VARCHAR_TBL(f1 varchar(4))
INSERT INTO VARCHAR_TBL (f1) VALUES
  ('a'),
  ('ab'),
  ('abcd'),
  ('abcd    ')
VACUUM VARCHAR_TBL
CREATE TABLE onek (
	unique1		int4,
	unique2		int4,
	two			int4,
	four		int4,
	ten			int4,
	twenty		int4,
	hundred		int4,
	thousand	int4,
	twothousand	int4,
	fivethous	int4,
	tenthous	int4,
	odd			int4,
	even		int4,
	stringu1	name,
	stringu2	name,
	string4		name
)
-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' '/data/onek.data'
COPY onek FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/onek.data'
VACUUM ANALYZE onek
CREATE TABLE onek2 AS SELECT * FROM onek
VACUUM ANALYZE onek2
CREATE TABLE tenk1 (
	unique1		int4,
	unique2		int4,
	two			int4,
	four		int4,
	ten			int4,
	twenty		int4,
	hundred		int4,
	thousand	int4,
	twothousand	int4,
	fivethous	int4,
	tenthous	int4,
	odd			int4,
	even		int4,
	stringu1	name,
	stringu2	name,
	string4		name
)
-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' '/data/tenk.data'
COPY tenk1 FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/tenk.data'
VACUUM ANALYZE tenk1
CREATE TABLE tenk2 AS SELECT * FROM tenk1
VACUUM ANALYZE tenk2
CREATE TABLE person (
	name 		text,
	age			int4,
	location 	point
)
-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' '/data/person.data'
COPY person FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/person.data'
VACUUM ANALYZE person
CREATE TABLE emp (
	salary 		int4,
	manager 	name
) INHERITS (person)
-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' '/data/emp.data'
COPY emp FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/emp.data'
VACUUM ANALYZE emp
CREATE TABLE student (
	gpa 		float8
) INHERITS (person)
-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' '/data/student.data'
COPY student FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/student.data'
VACUUM ANALYZE student
CREATE TABLE stud_emp (
	percent 	int4
) INHERITS (emp, student)
-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' '/data/stud_emp.data'
COPY stud_emp FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/stud_emp.data'
VACUUM ANALYZE stud_emp
CREATE TABLE road (
	name		text,
	thepath 	path
)
-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' '/data/streets.data'
COPY road FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/streets.data'
VACUUM ANALYZE road
CREATE TABLE ihighway () INHERITS (road)
INSERT INTO ihighway
   SELECT *
   FROM ONLY road
   WHERE name ~ 'I- .*'
VACUUM ANALYZE ihighway
CREATE TABLE shighway (
	surface		text
) INHERITS (road)
INSERT INTO shighway
   SELECT *, 'asphalt'
   FROM ONLY road
   WHERE name ~ 'State Hwy.*'
VACUUM ANALYZE shighway
--
-- We must have some enum type in the database for opr_sanity and type_sanity.
--

create type stoplight as enum ('red', 'yellow', 'green')
--
-- Also create some non-built-in range types.
--

create type float8range as range (subtype = float8, subtype_diff = float8mi)
create type textrange as range (subtype = text, collation = "C")
--
-- Create some C functions that will be used by various tests.
--

CREATE FUNCTION binary_coercible(oid, oid)
    RETURNS bool
    AS /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress/regress.so', 'binary_coercible'
    LANGUAGE C STRICT STABLE PARALLEL SAFE
CREATE FUNCTION ttdummy ()
    RETURNS trigger
    AS /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress/regress.so'
    LANGUAGE C
-- Use hand-rolled hash functions and operator classes to get predictable
-- result on different machines.  The hash function for int4 simply returns
-- the sum of the values passed to it and the one for text returns the length
-- of the non-empty string value passed to it or 0.

create function part_hashint4_noop(value int4, seed int8)
    returns int8 as $$
    select value + seed;
    $$ language sql strict immutable parallel safe
create operator class part_test_int4_ops for type int4 using hash as
    operator 1 =,
    function 2 part_hashint4_noop(int4, int8)
create function part_hashtext_length(value text, seed int8)
    returns int8 as $$
    select length(coalesce(value, ''))::int8
    $$ language sql strict immutable parallel safe
create operator class part_test_text_ops for type text using hash as
    operator 1 =,
    function 2 part_hashtext_length(text, int8)
--
-- These functions are used in tests that used to use md5(), which we now
-- mostly avoid so that the tests will pass in FIPS mode.
--

create function fipshash(bytea)
    returns text
    strict immutable parallel safe leakproof
    return substr(encode(sha256($1), 'hex'), 1, 32)
create function fipshash(text)
    returns text
    strict immutable parallel safe leakproof
    return substr(encode(sha256($1::bytea), 'hex'), 1, 32)
-- END setup from test_setup 
SELECT pg_catalog.set_config('search_path', 'public', false)
RESULT: 
	[('public',)]
-- START setup from create_index 
--
-- CREATE_INDEX
-- Create ancillary data structures (i.e. indices)
--

-- directory paths are passed to us in environment variables
-- \getenv abs_srcdir '/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests'

--
-- BTREE
--
CREATE INDEX onek_unique1 ON onek USING btree(unique1 int4_ops)
CREATE INDEX IF NOT EXISTS onek_unique1 ON onek USING btree(unique1 int4_ops)
CREATE INDEX IF NOT EXISTS ON onek USING btree(unique1 int4_ops)
ProgrammingError: CREATE INDEX IF NOT EXISTS ON onek USING btree(unique1 int4_ops)

syntax error at or near "ON"
LINE 1: CREATE INDEX IF NOT EXISTS ON onek USING btree(unique1 int4_...
                                   ^

CREATE INDEX onek_unique2 ON onek USING btree(unique2 int4_ops)
CREATE INDEX onek_hundred ON onek USING btree(hundred int4_ops)
CREATE INDEX onek_stringu1 ON onek USING btree(stringu1 name_ops)
CREATE INDEX tenk1_unique1 ON tenk1 USING btree(unique1 int4_ops)
CREATE INDEX tenk1_unique2 ON tenk1 USING btree(unique2 int4_ops)
CREATE INDEX tenk1_hundred ON tenk1 USING btree(hundred int4_ops)
CREATE INDEX tenk1_thous_tenthous ON tenk1 (thousand, tenthous)
CREATE INDEX tenk2_unique1 ON tenk2 USING btree(unique1 int4_ops)
CREATE INDEX tenk2_unique2 ON tenk2 USING btree(unique2 int4_ops)
CREATE INDEX tenk2_hundred ON tenk2 USING btree(hundred int4_ops)
CREATE INDEX rix ON road USING btree (name text_ops)
CREATE INDEX iix ON ihighway USING btree (name text_ops)
CREATE INDEX six ON shighway USING btree (name text_ops)
-- test comments
COMMENT ON INDEX six_wrong IS 'bad index'
ProgrammingError: -- test comments
COMMENT ON INDEX six_wrong IS 'bad index'

relation "six_wrong" does not exist

COMMENT ON INDEX six IS 'good index'
COMMENT ON INDEX six IS NULL
--
-- BTREE partial indices
--
CREATE INDEX onek2_u1_prtl ON onek2 USING btree(unique1 int4_ops)
	where unique1 < 20 or unique1 > 980
CREATE INDEX onek2_u2_prtl ON onek2 USING btree(unique2 int4_ops)
	where stringu1 < 'B'
CREATE INDEX onek2_stu1_prtl ON onek2 USING btree(stringu1 name_ops)
	where onek2.stringu1 >= 'J' and onek2.stringu1 < 'K'
--
-- GiST (rtree-equivalent opclasses only)
--

CREATE TABLE slow_emp4000 (
	home_base	 box
)
CREATE TABLE fast_emp4000 (
	home_base	 box
)
-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' '/data/rect.data'
COPY slow_emp4000 FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/rect.data'
INSERT INTO fast_emp4000 SELECT * FROM slow_emp4000
ANALYZE slow_emp4000
ANALYZE fast_emp4000
CREATE INDEX grect2ind ON fast_emp4000 USING gist (home_base)
-- we want to work with a point_tbl that includes a null
CREATE TEMP TABLE point_tbl AS SELECT * FROM public.point_tbl
INSERT INTO POINT_TBL(f1) VALUES (NULL)
CREATE INDEX gpointind ON point_tbl USING gist (f1)
CREATE TEMP TABLE gpolygon_tbl AS
    SELECT polygon(home_base) AS f1 FROM slow_emp4000
INSERT INTO gpolygon_tbl VALUES ( '(1000,0,0,1000)' )
INSERT INTO gpolygon_tbl VALUES ( '(0,1000,1000,1000)' )
CREATE TEMP TABLE gcircle_tbl AS
    SELECT circle(home_base) AS f1 FROM slow_emp4000
CREATE INDEX ggpolygonind ON gpolygon_tbl USING gist (f1)
CREATE INDEX ggcircleind ON gcircle_tbl USING gist (f1)
--
-- Test GiST indexes
--

-- get non-indexed results for comparison purposes

SET enable_seqscan = ON
SET enable_indexscan = OFF
SET enable_bitmapscan = OFF
SELECT * FROM fast_emp4000
    WHERE home_base <@ '(200,200),(2000,1000)'::box
    ORDER BY (home_base[0])[0]
RESULT: 
	[('(337,455),(240,359)',), ('(1444,403),(1346,344)',)]
SELECT count(*) FROM fast_emp4000 WHERE home_base && '(1000,1000,0,0)'::box
RESULT: 
	[(2,)]
SELECT count(*) FROM fast_emp4000 WHERE home_base IS NULL
RESULT: 
	[(278,)]
SELECT count(*) FROM gpolygon_tbl WHERE f1 && '(1000,1000,0,0)'::polygon
RESULT: 
	[(2,)]
SELECT count(*) FROM gcircle_tbl WHERE f1 && '<(500,500),500>'::circle
RESULT: 
	[(2,)]
SELECT count(*) FROM point_tbl WHERE f1 <@ box '(0,0,100,100)'
RESULT: 
	[(3,)]
SELECT count(*) FROM point_tbl WHERE box '(0,0,100,100)' @> f1
RESULT: 
	[(3,)]
SELECT count(*) FROM point_tbl WHERE f1 <@ polygon '(0,0),(0,100),(100,100),(50,50),(100,0),(0,0)'
RESULT: 
	[(5,)]
SELECT count(*) FROM point_tbl WHERE f1 <@ circle '<(50,50),50>'
RESULT: 
	[(1,)]
SELECT count(*) FROM point_tbl p WHERE p.f1 << '(0.0, 0.0)'
RESULT: 
	[(3,)]
SELECT count(*) FROM point_tbl p WHERE p.f1 >> '(0.0, 0.0)'
RESULT: 
	[(4,)]
SELECT count(*) FROM point_tbl p WHERE p.f1 <<| '(0.0, 0.0)'
RESULT: 
	[(1,)]
SELECT count(*) FROM point_tbl p WHERE p.f1 |>> '(0.0, 0.0)'
RESULT: 
	[(5,)]
SELECT count(*) FROM point_tbl p WHERE p.f1 ~= '(-5, -12)'
RESULT: 
	[(1,)]
SELECT * FROM point_tbl ORDER BY f1 <-> '0,1'
RESULT: 
	[('(0,0)',), ('(1e-300,-1e-300)',), ('(-3,4)',), ('(-10,0)',), ('(10,10)',), ('(-5,-12)',), ('(5.1,34.5)',), ('(Infinity,1e+300)',), ('(1e+300,Infinity)',), ('(NaN,NaN)',), (None,)]
SELECT * FROM point_tbl WHERE f1 IS NULL
RESULT: 
	[(None,)]
SELECT * FROM point_tbl WHERE f1 IS NOT NULL ORDER BY f1 <-> '0,1'
RESULT: 
	[('(0,0)',), ('(1e-300,-1e-300)',), ('(-3,4)',), ('(-10,0)',), ('(10,10)',), ('(-5,-12)',), ('(5.1,34.5)',), ('(1e+300,Infinity)',), ('(Infinity,1e+300)',), ('(NaN,NaN)',)]
SELECT * FROM point_tbl WHERE f1 <@ '(-10,-10),(10,10)':: box ORDER BY f1 <-> '0,1'
RESULT: 
	[('(0,0)',), ('(1e-300,-1e-300)',), ('(-3,4)',), ('(-10,0)',), ('(10,10)',)]
SELECT * FROM gpolygon_tbl ORDER BY f1 <-> '(0,0)'::point LIMIT 10
RESULT: 
	[('((240,359),(240,455),(337,455),(337,359))',), ('((662,163),(662,187),(759,187),(759,163))',), ('((1000,0),(0,1000))',), ('((0,1000),(1000,1000))',), ('((1346,344),(1346,403),(1444,403),(1444,344))',), ('((278,1409),(278,1457),(369,1457),(369,1409))',), ('((907,1156),(907,1201),(948,1201),(948,1156))',), ('((1517,971),(1517,1043),(1594,1043),(1594,971))',), ('((175,1820),(175,1850),(259,1850),(259,1820))',), ('((2424,81),(2424,160),(2424,160),(2424,81))',)]
SELECT circle_center(f1), round(radius(f1)) as radius FROM gcircle_tbl ORDER BY f1 <-> '(200,300)'::point LIMIT 10
RESULT: 
	[('(288.5,407)', 68.0), ('(710.5,175)', 50.0), ('(323.5,1433)', 51.0), ('(927.5,1178.5)', 30.0), ('(1395,373.5)', 57.0), ('(1555.5,1007)', 53.0), ('(217,1835)', 45.0), ('(489,2421.5)', 22.0), ('(2424,120.5)', 40.0), ('(751.5,2655)', 20.0)]
-- Now check the results from plain indexscan
SET enable_seqscan = OFF
SET enable_indexscan = ON
SET enable_bitmapscan = OFF
EXPLAIN (COSTS OFF)
SELECT * FROM fast_emp4000
    WHERE home_base <@ '(200,200),(2000,1000)'::box
    ORDER BY (home_base[0])[0]
RESULT: 
	[('Sort',), ('  Sort Key: ((home_base[0])[0])',), ('  ->  Index Only Scan using grect2ind on fast_emp4000',), ("        Index Cond: (home_base <@ '(2000,1000),(200,200)'::box)",)]
SELECT * FROM fast_emp4000
    WHERE home_base <@ '(200,200),(2000,1000)'::box
    ORDER BY (home_base[0])[0]
RESULT: 
	[('(337,455),(240,359)',), ('(1444,403),(1346,344)',)]
EXPLAIN (COSTS OFF)
SELECT count(*) FROM fast_emp4000 WHERE home_base && '(1000,1000,0,0)'::box
RESULT: 
	[('Aggregate',), ('  ->  Index Only Scan using grect2ind on fast_emp4000',), ("        Index Cond: (home_base && '(1000,1000),(0,0)'::box)",)]
SELECT count(*) FROM fast_emp4000 WHERE home_base && '(1000,1000,0,0)'::box
RESULT: 
	[(2,)]
EXPLAIN (COSTS OFF)
SELECT count(*) FROM fast_emp4000 WHERE home_base IS NULL
RESULT: 
	[('Aggregate',), ('  ->  Index Only Scan using grect2ind on fast_emp4000',), ('        Index Cond: (home_base IS NULL)',)]
SELECT count(*) FROM fast_emp4000 WHERE home_base IS NULL
RESULT: 
	[(278,)]
EXPLAIN (COSTS OFF)
SELECT count(*) FROM gpolygon_tbl WHERE f1 && '(1000,1000,0,0)'::polygon
RESULT: 
	[('Aggregate',), ('  ->  Index Scan using ggpolygonind on gpolygon_tbl',), ("        Index Cond: (f1 && '((1000,1000),(0,0))'::polygon)",)]
SELECT count(*) FROM gpolygon_tbl WHERE f1 && '(1000,1000,0,0)'::polygon
RESULT: 
	[(2,)]
EXPLAIN (COSTS OFF)
SELECT count(*) FROM gcircle_tbl WHERE f1 && '<(500,500),500>'::circle
RESULT: 
	[('Aggregate',), ('  ->  Index Scan using ggcircleind on gcircle_tbl',), ("        Index Cond: (f1 && '<(500,500),500>'::circle)",)]
SELECT count(*) FROM gcircle_tbl WHERE f1 && '<(500,500),500>'::circle
RESULT: 
	[(2,)]
EXPLAIN (COSTS OFF)
SELECT count(*) FROM point_tbl WHERE f1 <@ box '(0,0,100,100)'
RESULT: 
	[('Aggregate',), ('  ->  Index Only Scan using gpointind on point_tbl',), ("        Index Cond: (f1 <@ '(100,100),(0,0)'::box)",)]
SELECT count(*) FROM point_tbl WHERE f1 <@ box '(0,0,100,100)'
RESULT: 
	[(3,)]
EXPLAIN (COSTS OFF)
SELECT count(*) FROM point_tbl WHERE box '(0,0,100,100)' @> f1
RESULT: 
	[('Aggregate',), ('  ->  Index Only Scan using gpointind on point_tbl',), ("        Index Cond: (f1 <@ '(100,100),(0,0)'::box)",)]
SELECT count(*) FROM point_tbl WHERE box '(0,0,100,100)' @> f1
RESULT: 
	[(3,)]
EXPLAIN (COSTS OFF)
SELECT count(*) FROM point_tbl WHERE f1 <@ polygon '(0,0),(0,100),(100,100),(50,50),(100,0),(0,0)'
RESULT: 
	[('Aggregate',), ('  ->  Index Only Scan using gpointind on point_tbl',), ("        Index Cond: (f1 <@ '((0,0),(0,100),(100,100),(50,50),(100,0),(0,0))'::polygon)",)]
SELECT count(*) FROM point_tbl WHERE f1 <@ polygon '(0,0),(0,100),(100,100),(50,50),(100,0),(0,0)'
RESULT: 
	[(4,)]
EXPLAIN (COSTS OFF)
SELECT count(*) FROM point_tbl WHERE f1 <@ circle '<(50,50),50>'
RESULT: 
	[('Aggregate',), ('  ->  Index Only Scan using gpointind on point_tbl',), ("        Index Cond: (f1 <@ '<(50,50),50>'::circle)",)]
SELECT count(*) FROM point_tbl WHERE f1 <@ circle '<(50,50),50>'
RESULT: 
	[(1,)]
EXPLAIN (COSTS OFF)
SELECT count(*) FROM point_tbl p WHERE p.f1 << '(0.0, 0.0)'
RESULT: 
	[('Aggregate',), ('  ->  Index Only Scan using gpointind on point_tbl p',), ("        Index Cond: (f1 << '(0,0)'::point)",)]
SELECT count(*) FROM point_tbl p WHERE p.f1 << '(0.0, 0.0)'
RESULT: 
	[(3,)]
EXPLAIN (COSTS OFF)
SELECT count(*) FROM point_tbl p WHERE p.f1 >> '(0.0, 0.0)'
RESULT: 
	[('Aggregate',), ('  ->  Index Only Scan using gpointind on point_tbl p',), ("        Index Cond: (f1 >> '(0,0)'::point)",)]
SELECT count(*) FROM point_tbl p WHERE p.f1 >> '(0.0, 0.0)'
RESULT: 
	[(4,)]
EXPLAIN (COSTS OFF)
SELECT count(*) FROM point_tbl p WHERE p.f1 <<| '(0.0, 0.0)'
RESULT: 
	[('Aggregate',), ('  ->  Index Only Scan using gpointind on point_tbl p',), ("        Index Cond: (f1 <<| '(0,0)'::point)",)]
SELECT count(*) FROM point_tbl p WHERE p.f1 <<| '(0.0, 0.0)'
RESULT: 
	[(1,)]
EXPLAIN (COSTS OFF)
SELECT count(*) FROM point_tbl p WHERE p.f1 |>> '(0.0, 0.0)'
RESULT: 
	[('Aggregate',), ('  ->  Index Only Scan using gpointind on point_tbl p',), ("        Index Cond: (f1 |>> '(0,0)'::point)",)]
SELECT count(*) FROM point_tbl p WHERE p.f1 |>> '(0.0, 0.0)'
RESULT: 
	[(5,)]
EXPLAIN (COSTS OFF)
SELECT count(*) FROM point_tbl p WHERE p.f1 ~= '(-5, -12)'
RESULT: 
	[('Aggregate',), ('  ->  Index Only Scan using gpointind on point_tbl p',), ("        Index Cond: (f1 ~= '(-5,-12)'::point)",)]
SELECT count(*) FROM point_tbl p WHERE p.f1 ~= '(-5, -12)'
RESULT: 
	[(1,)]
EXPLAIN (COSTS OFF)
SELECT * FROM point_tbl ORDER BY f1 <-> '0,1'
RESULT: 
	[('Index Only Scan using gpointind on point_tbl',), ("  Order By: (f1 <-> '(0,1)'::point)",)]
SELECT * FROM point_tbl ORDER BY f1 <-> '0,1'
RESULT: 
	[('(1e-300,-1e-300)',), ('(0,0)',), ('(-3,4)',), ('(-10,0)',), ('(10,10)',), ('(-5,-12)',), ('(5.1,34.5)',), ('(Infinity,1e+300)',), ('(1e+300,Infinity)',), ('(NaN,NaN)',), (None,)]
EXPLAIN (COSTS OFF)
SELECT * FROM point_tbl WHERE f1 IS NULL
RESULT: 
	[('Index Only Scan using gpointind on point_tbl',), ('  Index Cond: (f1 IS NULL)',)]
SELECT * FROM point_tbl WHERE f1 IS NULL
RESULT: 
	[(None,)]
EXPLAIN (COSTS OFF)
SELECT * FROM point_tbl WHERE f1 IS NOT NULL ORDER BY f1 <-> '0,1'
RESULT: 
	[('Index Only Scan using gpointind on point_tbl',), ('  Index Cond: (f1 IS NOT NULL)',), ("  Order By: (f1 <-> '(0,1)'::point)",)]
SELECT * FROM point_tbl WHERE f1 IS NOT NULL ORDER BY f1 <-> '0,1'
RESULT: 
	[('(1e-300,-1e-300)',), ('(0,0)',), ('(-3,4)',), ('(-10,0)',), ('(10,10)',), ('(-5,-12)',), ('(5.1,34.5)',), ('(Infinity,1e+300)',), ('(1e+300,Infinity)',), ('(NaN,NaN)',)]
EXPLAIN (COSTS OFF)
SELECT * FROM point_tbl WHERE f1 <@ '(-10,-10),(10,10)':: box ORDER BY f1 <-> '0,1'
RESULT: 
	[('Index Only Scan using gpointind on point_tbl',), ("  Index Cond: (f1 <@ '(10,10),(-10,-10)'::box)",), ("  Order By: (f1 <-> '(0,1)'::point)",)]
SELECT * FROM point_tbl WHERE f1 <@ '(-10,-10),(10,10)':: box ORDER BY f1 <-> '0,1'
RESULT: 
	[('(1e-300,-1e-300)',), ('(0,0)',), ('(-3,4)',), ('(-10,0)',), ('(10,10)',)]
EXPLAIN (COSTS OFF)
SELECT * FROM gpolygon_tbl ORDER BY f1 <-> '(0,0)'::point LIMIT 10
RESULT: 
	[('Limit',), ('  ->  Index Scan using ggpolygonind on gpolygon_tbl',), ("        Order By: (f1 <-> '(0,0)'::point)",)]
SELECT * FROM gpolygon_tbl ORDER BY f1 <-> '(0,0)'::point LIMIT 10
RESULT: 
	[('((240,359),(240,455),(337,455),(337,359))',), ('((662,163),(662,187),(759,187),(759,163))',), ('((1000,0),(0,1000))',), ('((0,1000),(1000,1000))',), ('((1346,344),(1346,403),(1444,403),(1444,344))',), ('((278,1409),(278,1457),(369,1457),(369,1409))',), ('((907,1156),(907,1201),(948,1201),(948,1156))',), ('((1517,971),(1517,1043),(1594,1043),(1594,971))',), ('((175,1820),(175,1850),(259,1850),(259,1820))',), ('((2424,81),(2424,160),(2424,160),(2424,81))',)]
EXPLAIN (COSTS OFF)
SELECT circle_center(f1), round(radius(f1)) as radius FROM gcircle_tbl ORDER BY f1 <-> '(200,300)'::point LIMIT 10
RESULT: 
	[('Limit',), ('  ->  Index Scan using ggcircleind on gcircle_tbl',), ("        Order By: (f1 <-> '(200,300)'::point)",)]
SELECT circle_center(f1), round(radius(f1)) as radius FROM gcircle_tbl ORDER BY f1 <-> '(200,300)'::point LIMIT 10
RESULT: 
	[('(288.5,407)', 68.0), ('(710.5,175)', 50.0), ('(323.5,1433)', 51.0), ('(927.5,1178.5)', 30.0), ('(1395,373.5)', 57.0), ('(1555.5,1007)', 53.0), ('(217,1835)', 45.0), ('(489,2421.5)', 22.0), ('(2424,120.5)', 40.0), ('(751.5,2655)', 20.0)]
EXPLAIN (COSTS OFF)
SELECT point(x,x), (SELECT f1 FROM gpolygon_tbl ORDER BY f1 <-> point(x,x) LIMIT 1) as c FROM generate_series(0,10,1) x
RESULT: 
	[('Function Scan on generate_series x',), ('  SubPlan 1',), ('    ->  Limit',), ('          ->  Index Scan using ggpolygonind on gpolygon_tbl',), ('                Order By: (f1 <-> point((x.x)::double precision, (x.x)::double precision))',)]
SELECT point(x,x), (SELECT f1 FROM gpolygon_tbl ORDER BY f1 <-> point(x,x) LIMIT 1) as c FROM generate_series(0,10,1) x
RESULT: 
	[('(0,0)', '((240,359),(240,455),(337,455),(337,359))'), ('(1,1)', '((240,359),(240,455),(337,455),(337,359))'), ('(2,2)', '((240,359),(240,455),(337,455),(337,359))'), ('(3,3)', '((240,359),(240,455),(337,455),(337,359))'), ('(4,4)', '((240,359),(240,455),(337,455),(337,359))'), ('(5,5)', '((240,359),(240,455),(337,455),(337,359))'), ('(6,6)', '((240,359),(240,455),(337,455),(337,359))'), ('(7,7)', '((240,359),(240,455),(337,455),(337,359))'), ('(8,8)', '((240,359),(240,455),(337,455),(337,359))'), ('(9,9)', '((240,359),(240,455),(337,455),(337,359))'), ('(10,10)', '((240,359),(240,455),(337,455),(337,359))')]
-- Now check the results from bitmap indexscan
SET enable_seqscan = OFF
SET enable_indexscan = OFF
SET enable_bitmapscan = ON
EXPLAIN (COSTS OFF)
SELECT * FROM point_tbl WHERE f1 <@ '(-10,-10),(10,10)':: box ORDER BY f1 <-> '0,1'
RESULT: 
	[('Sort',), ("  Sort Key: ((f1 <-> '(0,1)'::point))",), ('  ->  Bitmap Heap Scan on point_tbl',), ("        Recheck Cond: (f1 <@ '(10,10),(-10,-10)'::box)",), ('        ->  Bitmap Index Scan on gpointind',), ("              Index Cond: (f1 <@ '(10,10),(-10,-10)'::box)",)]
SELECT * FROM point_tbl WHERE f1 <@ '(-10,-10),(10,10)':: box ORDER BY f1 <-> '0,1'
RESULT: 
	[('(0,0)',), ('(1e-300,-1e-300)',), ('(-3,4)',), ('(-10,0)',), ('(10,10)',)]
RESET enable_seqscan
RESET enable_indexscan
RESET enable_bitmapscan
--
-- GIN over int[] and text[]
--
-- Note: GIN currently supports only bitmap scans, not plain indexscans
--

CREATE TABLE array_index_op_test (
	seqno		int4,
	i			int4[],
	t			text[]
)
-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' '/data/array.data'
COPY array_index_op_test FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/array.data'
ANALYZE array_index_op_test
SELECT * FROM array_index_op_test WHERE i = '{NULL}' ORDER BY seqno
RESULT: 
	[(102, [None], [None])]
SELECT * FROM array_index_op_test WHERE i @> '{NULL}' ORDER BY seqno
RESULT: 
	[]
SELECT * FROM array_index_op_test WHERE i && '{NULL}' ORDER BY seqno
RESULT: 
	[]
SELECT * FROM array_index_op_test WHERE i <@ '{NULL}' ORDER BY seqno
RESULT: 
	[(101, [], [])]
SET enable_seqscan = OFF
SET enable_indexscan = OFF
SET enable_bitmapscan = ON
CREATE INDEX intarrayidx ON array_index_op_test USING gin (i)
explain (costs off)
SELECT * FROM array_index_op_test WHERE i @> '{32}' ORDER BY seqno
RESULT: 
	[('Sort',), ('  Sort Key: seqno',), ('  ->  Bitmap Heap Scan on array_index_op_test',), ("        Recheck Cond: (i @> '{32}'::integer[])",), ('        ->  Bitmap Index Scan on intarrayidx',), ("              Index Cond: (i @> '{32}'::integer[])",)]
SELECT * FROM array_index_op_test WHERE i @> '{32}' ORDER BY seqno
RESULT: 
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523'])]
SELECT * FROM array_index_op_test WHERE i && '{32}' ORDER BY seqno
RESULT: 
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523'])]
SELECT * FROM array_index_op_test WHERE i @> '{17}' ORDER BY seqno
RESULT: 
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (12, [17, 99, 18, 52, 91, 72, 0, 43, 96, 23], ['AAAAA33250', 'AAAAAAAAAAAAAAAAAAA85420', 'AAAAAAAAAAA33576']), (15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (19, [52, 82, 17, 74, 23, 46, 69, 51, 75], ['AAAAAAAAAAAAA73084', 'AAAAA75968', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAAAAA1205', 'A68938']), (53, [38, 17], ['AAAAAAAAAAA21658']), (65, [61, 5, 76, 59, 17], ['AAAAAA99807', 'AAAAA64741', 'AAAAAAAAAAA53908', 'AA21643', 'AAAAAAAAA10012']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673'])]
SELECT * FROM array_index_op_test WHERE i && '{17}' ORDER BY seqno
RESULT: 
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (12, [17, 99, 18, 52, 91, 72, 0, 43, 96, 23], ['AAAAA33250', 'AAAAAAAAAAAAAAAAAAA85420', 'AAAAAAAAAAA33576']), (15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (19, [52, 82, 17, 74, 23, 46, 69, 51, 75], ['AAAAAAAAAAAAA73084', 'AAAAA75968', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAAAAA1205', 'A68938']), (53, [38, 17], ['AAAAAAAAAAA21658']), (65, [61, 5, 76, 59, 17], ['AAAAAA99807', 'AAAAA64741', 'AAAAAAAAAAA53908', 'AA21643', 'AAAAAAAAA10012']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673'])]
SELECT * FROM array_index_op_test WHERE i @> '{32,17}' ORDER BY seqno
RESULT: 
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673'])]
SELECT * FROM array_index_op_test WHERE i && '{32,17}' ORDER BY seqno
RESULT: 
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (12, [17, 99, 18, 52, 91, 72, 0, 43, 96, 23], ['AAAAA33250', 'AAAAAAAAAAAAAAAAAAA85420', 'AAAAAAAAAAA33576']), (15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (19, [52, 82, 17, 74, 23, 46, 69, 51, 75], ['AAAAAAAAAAAAA73084', 'AAAAA75968', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAAAAA1205', 'A68938']), (53, [38, 17], ['AAAAAAAAAAA21658']), (65, [61, 5, 76, 59, 17], ['AAAAAA99807', 'AAAAA64741', 'AAAAAAAAAAA53908', 'AA21643', 'AAAAAAAAA10012']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523'])]
SELECT * FROM array_index_op_test WHERE i <@ '{38,34,32,89}' ORDER BY seqno
RESULT: 
	[(40, [34], ['AAAAAAAAAAAAAA10611', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAA50956', 'AAAAAAAAAAAAAAAA31334', 'AAAAA70466', 'AAAAAAAA81587', 'AAAAAAA74623']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (101, [], [])]
SELECT * FROM array_index_op_test WHERE i = '{47,77}' ORDER BY seqno
RESULT: 
	[(95, [47, 77], ['AAAAAAAAAAAAAAAAA764', 'AAAAAAAAAAA74076', 'AAAAAAAAAA18107', 'AAAAA40681', 'AAAAAAAAAAAAAAA35875', 'AAAAA60038', 'AAAAAAA56483'])]
SELECT * FROM array_index_op_test WHERE i = '{}' ORDER BY seqno
RESULT: 
	[(101, [], [])]
SELECT * FROM array_index_op_test WHERE i @> '{}' ORDER BY seqno
RESULT: 
	[(1, [92, 75, 71, 52, 64, 83], ['AAAAAAAA44066', 'AAAAAA1059', 'AAAAAAAAAAA176', 'AAAAAAA48038']), (2, [3, 6], ['AAAAAA98232', 'AAAAAAAA79710', 'AAAAAAAAAAAAAAAAA69675', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAA12793']), (3, [37, 64, 95, 43, 3, 41, 13, 30, 11, 43], ['AAAAAAAAAA48845', 'AAAAA75968', 'AAAAA95309', 'AAA54451', 'AAAAAAAAAA22292', 'AAAAAAA99836', 'A96617', 'AA17009', 'AAAAAAAAAAAAAA95246']), (4, [71, 39, 99, 55, 33, 75, 45], ['AAAAAAAAA53663', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAA64777', 'AAA99043', 'AAAAAAAAAAAAAAAAAAA91804', '39557']), (5, [50, 42, 77, 50, 4], ['AAAAAAAAAAAAAAAAA26540', 'AAAAAAA79710', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAA176', 'AAAAA95309', 'AAAAAAAAAAA46154', 'AAAAAA66777', 'AAAAAAAAA27249', 'AAAAAAAAAA64777', 'AAAAAAAAAAAAAAAAAAA70104']), (6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (7, [12, 51, 88, 64, 8], ['AAAAAAAAAAAAAAAAAA12591', 'AAAAAAAAAAAAAAAAA50407', 'AAAAAAAAAAAA67946']), (8, [60, 84], ['AAAAAAA81898', 'AAAAAA1059', 'AAAAAAAAAAAA81511', 'AAAAA961', 'AAAAAAAAAAAAAAAA31334', 'AAAAA64741', 'AA6416', 'AAAAAAAAAAAAAAAAAA32918', 'AAAAAAAAAAAAAAAAA50407']), (9, [56, 52, 35, 27, 80, 44, 81, 22], ['AAAAAAAAAAAAAAA73034', 'AAAAAAAAAAAAA7929', 'AAAAAAA66161', 'AA88409', '39557', 'A27153', 'AAAAAAAA9523', 'AAAAAAAAAAA99000']), (10, [71, 5, 45], ['AAAAAAAAAAA21658', 'AAAAAAAAAAAA21089', 'AAA54451', 'AAAAAAAAAAAAAAAAAA54141', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAA21658', 'AAAAAAAAAAA74076', 'AAAAAAAAA27249']), (11, [41, 86, 74, 48, 22, 74, 47, 50], ['AAAAAAAA9523', 'AAAAAAAAAAAA37562', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAAAAAA46154', 'AAAA41702', 'AAAAAAAAAAAAAAAAA764', 'AAAAA62737', '39557']), (12, [17, 99, 18, 52, 91, 72, 0, 43, 96, 23], ['AAAAA33250', 'AAAAAAAAAAAAAAAAAAA85420', 'AAAAAAAAAAA33576']), (13, [3, 52, 34, 23], ['AAAAAA98232', 'AAAA49534', 'AAAAAAAAAAA21658']), (14, [78, 57, 19], ['AAAA8857', 'AAAAAAAAAAAAAAA73034', 'AAAAAAAA81587', 'AAAAAAAAAAAAAAA68526', 'AAAAA75968', 'AAAAAAAAAAAAAA65909', 'AAAAAAAAA10012', 'AAAAAAAAAAAAAA65909']), (15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (16, [14, 63, 85, 11], ['AAAAAA66777']), (17, [7, 10, 81, 85], ['AAAAAA43678', 'AAAAAAA12144', 'AAAAAAAAAAA50956', 'AAAAAAAAAAAAAAAAAAA15356']), (18, [1], ['AAAAAAAAAAA33576', 'AAAAA95309', '64261', 'AAA59323', 'AAAAAAAAAAAAAA95246', '55847', 'AAAAAAAAAAAA67946', 'AAAAAAAAAAAAAAAAAA64374']), (19, [52, 82, 17, 74, 23, 46, 69, 51, 75], ['AAAAAAAAAAAAA73084', 'AAAAA75968', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAAAAA1205', 'A68938']), (20, [72, 89, 70, 51, 54, 37, 8, 49, 79], ['AAAAAA58494']), (21, [2, 8, 65, 10, 5, 79, 43], ['AAAAAAAAAAAAAAAAA88852', 'AAAAAAAAAAAAAAAAAAA91804', 'AAAAA64669', 'AAAAAAAAAAAAAAAA1443', 'AAAAAAAAAAAAAAAA23657', 'AAAAA12179', 'AAAAAAAAAAAAAAAAA88852', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAAAAAAAA41303', 'AAAAAAAAAAAAAAAAAAA85420']), (22, [11, 6, 56, 62, 53, 30], ['AAAAAAAA72908']), (23, [40, 90, 5, 38, 72, 40, 30, 10, 43, 55], ['A6053', 'AAAAAAAAAAA6119', 'AA44673', 'AAAAAAAAAAAAAAAAA764', 'AA17009', 'AAAAA17383', 'AAAAA70514', 'AAAAA33250', 'AAAAA95309', 'AAAAAAAAAAAA37562']), (24, [94, 61, 99, 35, 48], ['AAAAAAAAAAA50956', 'AAAAAAAAAAA15165', 'AAAA85070', 'AAAAAAAAAAAAAAA36627', 'AAAAA961', 'AAAAAAAAAA55219']), (25, [31, 1, 10, 11, 27, 79, 38], ['AAAAAAAAAAAAAAAAAA59334', '45449']), (26, [71, 10, 9, 69, 75], ['47735', 'AAAAAAA21462', 'AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAAAAA91804', 'AAAAAAAAA72121', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAA41597', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA15356', 'AA17009']), (27, [94], ['AA6416', 'A6053', 'AAAAAAA21462', 'AAAAAAA57334', 'AAAAAAAAAAAAAAAAAA12591', 'AA88409', 'AAAAAAAAAAAAA70254']), (28, [14, 33, 6, 34, 14], ['AAAAAAAAAAAAAAA13198', 'AAAAAAAA69452', 'AAAAAAAAAAA82945', 'AAAAAAA12144', 'AAAAAAAAA72121', 'AAAAAAAAAA18601']), (29, [39, 21], ['AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAAAAA38885', 'AAAA85070', 'AAAAAAAAAAAAAAAAAAA70104', 'AAAAA66674', 'AAAAAAAAAAAAA62007', 'AAAAAAAA69452', 'AAAAAAA1242', 'AAAAAAAAAAAAAAAA1729', 'AAAA35194']), (30, [26, 81, 47, 91, 34], ['AAAAAAAAAAAAAAAAAAA70104', 'AAAAAAA80240']), (31, [80, 24, 18, 21, 54], ['AAAAAAAAAAAAAAA13198', 'AAAAAAAAAAAAAAAAAAA70415', 'A27153', 'AAAAAAAAA53663', 'AAAAAAAAAAAAAAAAA50407', 'A68938']), (32, [58, 79, 82, 80, 67, 75, 98, 10, 41], ['AAAAAAAAAAAAAAAAAA61286', 'AAA54451', 'AAAAAAAAAAAAAAAAAAA87527', 'A96617', '51533']), (33, [74, 73], ['A85417', 'AAAAAAA56483', 'AAAAA17383', 'AAAAAAAAAAAAA62159', 'AAAAAAAAAAAA52814', 'AAAAAAAAAAAAA85723', 'AAAAAAAAAAAAAAAAAA55796']), (34, [70, 45], ['AAAAAAAAAAAAAAAAAA71621', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAA55219', 'AAAAAAAA23648', 'AAAAAAAAAA22292', 'AAAAAAA1242']), (35, [23, 40], ['AAAAAAAAAAAA52814', 'AAAA48949', 'AAAAAAAAA34727', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA62179', 'AAAAAAAAAAAAAAA68526', 'AAAAAAA99836', 'AAAAAAAA50094', 'AAAA91194', 'AAAAAAAAAAAAA73084']), (36, [79, 82, 14, 52, 30, 5, 79], ['AAAAAAAAA53663', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAAAAAAAAAAA89194', 'AA88409', 'AAAAAAAAAAAAAAA81326', 'AAAAAAAAAAAAAAAAA63050', 'AAAAAAAAAAAAAAAA33598']), (37, [53, 11, 81, 39, 3, 78, 58, 64, 74], ['AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAA66161', 'AAAAAAAA23648', 'AAAAAAAAAAAAAA10611']), (38, [59, 5, 4, 95, 28], ['AAAAAAAAAAA82945', 'A96617', '47735', 'AAAAA12179', 'AAAAA64669', 'AAAAAA99807', 'AA74433', 'AAAAAAAAAAAAAAAAA59387']), (39, [82, 43, 99, 16, 74], ['AAAAAAAAAAAAAAA67062', 'AAAAAAA57334', 'AAAAAAAAAAAAAA65909', 'A27153', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAAAAAA64777', 'AAAAAAAAAAAA81511', 'AAAAAAAAAAAAAA65909', 'AAAAAAAAAAAAAA28620']), (40, [34], ['AAAAAAAAAAAAAA10611', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAA50956', 'AAAAAAAAAAAAAAAA31334', 'AAAAA70466', 'AAAAAAAA81587', 'AAAAAAA74623']), (41, [19, 26, 63, 12, 93, 73, 27, 94], ['AAAAAAA79710', 'AAAAAAAAAA55219', 'AAAA41702', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAAA71621', 'AAAAAAAAAAAAAAAAA63050', 'AAAAAAA99836', 'AAAAAAAAAAAAAA8666']), (42, [15, 76, 82, 75, 8, 91], ['AAAAAAAAAAA176', 'AAAAAA38063', '45449', 'AAAAAA54032', 'AAAAAAA81898', 'AA6416', 'AAAAAAAAAAAAAAAAAAA62179', '45449', 'AAAAA60038', 'AAAAAAAA81587']), (43, [39, 87, 91, 97, 79, 28], ['AAAAAAAAAAA74076', 'A96617', 'AAAAAAAAAAAAAAAAAAA89194', 'AAAAAAAAAAAAAAAAAA55796', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAA67946']), (44, [40, 58, 68, 29, 54], ['AAAAAAA81898', 'AAAAAA66777', 'AAAAAA98232']), (45, [99, 45], ['AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAAA17075', 'AA88409', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAAAA48038', 'AAAAAAAAAAAAAA10611']), (46, [53, 24], ['AAAAAAAAAAA53908', 'AAAAAA54032', 'AAAAA17383', 'AAAA48949', 'AAAAAAAAAA18601', 'AAAAA64669', '45449', 'AAAAAAAAAAA98051', 'AAAAAAAAAAAAAAAAAA71621']), (47, [98, 23, 64, 12, 75, 61], ['AAA59323', 'AAAAA95309', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAA27249', 'AAAAA17383', 'AAAAAAAAAAAA37562', 'AAAAAA1059', 'A84822', '55847', 'AAAAA70466']), (48, [76, 14], ['AAAAAAAAAAAAA59671', 'AAAAAAAAAAAAAAAAAAA91804', 'AAAAAA66777', 'AAAAAAAAAAAAAAAAAAA89194', 'AAAAAAAAAAAAAAA36627', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAA73084', 'AAAAAAA79710', 'AAAAAAAAAAAAAAA40402', 'AAAAAAAAAAAAAAAAAAA65037']), (49, [56, 5, 54, 37, 49], ['AA21643', 'AAAAAAAAAAA92631', 'AAAAAAAA81587']), (50, [20, 12, 37, 64, 93], ['AAAAAAAAAA5483', 'AAAAAAAAAAAAAAAAAAA1205', 'AA6416', 'AAAAAAAAAAAAAAAAA63050', 'AAAAAAAAAAAAAAAAAA47955']), (51, [47], ['AAAAAAAAAAAAAA96505', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAA95309', 'AAAAAAAA81587', 'AA6416', 'AAAA91194', 'AAAAAA58494', 'AAAAAA1059', 'AAAAAAAA69452']), (52, [89, 0], ['AAAAAAAAAAAAAAAAAA47955', 'AAAAAAA48038', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAAAAAAAAA73084', 'AAAAA70466', 'AAAAAAAAAAAAAAAAA764', 'AAAAAAAAAAA46154', 'AA66862']), (53, [38, 17], ['AAAAAAAAAAA21658']), (54, [70, 47], ['AAAAAAAAAAAAAAAAAA54141', 'AAAAA40681', 'AAAAAAA48038', 'AAAAAAAAAAAAAAAA29150', 'AAAAA41597', 'AAAAAAAAAAAAAAAAAA59334', 'AA15322']), (55, [47, 79, 47, 64, 72, 25, 71, 24, 93], ['AAAAAAAAAAAAAAAAAA55796', 'AAAAA62737']), (56, [33, 7, 60, 54, 93, 90, 77, 85, 39], ['AAAAAAAAAAAAAAAAAA32918', 'AA42406']), (57, [23, 45, 10, 42, 36, 21, 9, 96], ['AAAAAAAAAAAAAAAAAAA70415']), (58, [92], ['AAAAAAAAAAAAAAAA98414', 'AAAAAAAA23648', 'AAAAAAAAAAAAAAAAAA55796', 'AA25381', 'AAAAAAAAAAA6119']), (59, [9, 69, 46, 77], ['39557', 'AAAAAAA89932', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAAAAAAAAAAAAA26540', 'AAA20874', 'AA6416', 'AAAAAAAAAAAAAAAAAA47955']), (60, [62, 2, 59, 38, 89], ['AAAAAAA89932', 'AAAAAAAAAAAAAAAAAAA15356', 'AA99927', 'AA17009', 'AAAAAAAAAAAAAAA35875']), (61, [72, 2, 44, 95, 54, 54, 13], ['AAAAAAAAAAAAAAAAAAA91804']), (62, [83, 72, 29, 73], ['AAAAAAAAAAAAA15097', 'AAAA8857', 'AAAAAAAAAAAA35809', 'AAAAAAAAAAAA52814', 'AAAAAAAAAAAAAAAAAAA38885', 'AAAAAAAAAAAAAAAAAA24183', 'AAAAAA43678', 'A96617']), (63, [11, 4, 61, 87], ['AAAAAAAAA27249', 'AAAAAAAAAAAAAAAAAA32918', 'AAAAAAAAAAAAAAA13198', 'AAA20874', '39557', '51533', 'AAAAAAAAAAA53908', 'AAAAAAAAAAAAAA96505', 'AAAAAAAA78938']), (64, [26, 19, 34, 24, 81, 78], ['A96617', 'AAAAAAAAAAAAAAAAAAA70104', 'A68938', 'AAAAAAAAAAA53908', 'AAAAAAAAAAAAAAA453', 'AA17009', 'AAAAAAA80240']), (65, [61, 5, 76, 59, 17], ['AAAAAA99807', 'AAAAA64741', 'AAAAAAAAAAA53908', 'AA21643', 'AAAAAAAAA10012']), (66, [31, 23, 70, 52, 4, 33, 48, 25], ['AAAAAAAAAAAAAAAAA69675', 'AAAAAAAA50094', 'AAAAAAAAAAA92631', 'AAAA35194', '39557', 'AAAAAAA99836']), (67, [31, 94, 7, 10], ['AAAAAA38063', 'A96617', 'AAAA35194', 'AAAAAAAAAAAA67946']), (68, [90, 43, 38], ['AA75092', 'AAAAAAAAAAAAAAAAA69675', 'AAAAAAAAAAA92631', 'AAAAAAAAA10012', 'AAAAAAAAAAAAA7929', 'AA21643']), (69, [67, 35, 99, 85, 72, 86, 44], ['AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAA50094', 'AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAAAAAAA47955']), (70, [56, 70, 83], ['AAAA41702', 'AAAAAAAAAAA82945', 'AA21643', 'AAAAAAAAAAA99000', 'A27153', 'AA25381', 'AAAAAAAAAAAAAA96505', 'AAAAAAA1242']), (71, [74, 26], ['AAAAAAAAAAA50956', 'AA74433', 'AAAAAAA21462', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAA36627', 'AAAAAAAAAAAAA70254', 'AAAAAAAAAA43419', '39557']), (72, [22, 1, 16, 78, 20, 91, 83], ['47735', 'AAAAAAA56483', 'AAAAAAAAAAAAA93788', 'AA42406', 'AAAAAAAAAAAAA73084', 'AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAA61286', 'AAAAA66674', 'AAAAAAAAAAAAAAAAA50407']), (73, [88, 25, 96, 78, 65, 15, 29, 19], ['AAA54451', 'AAAAAAAAA27249', 'AAAAAAA9228', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAA17383', 'AAAAAAAAAAAAAAAA33598']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (75, [12, 96, 83, 24, 71, 89, 55], ['AAAA48949', 'AAAAAAAA29716', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAAA67946', 'AAAAAAAAAAAAAAAA29150', 'AAA28075', 'AAAAAAAAAAAAAAAAA43052']), (76, [92, 55, 10, 7], ['AAAAAAAAAAAAAAA67062']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (78, [55, 89, 44, 84, 34], ['AAAAAAAAAAA6119', 'AAAAAAAAAAAAAA8666', 'AA99927', 'AA42406', 'AAAAAAA81898', 'AAAAAAA9228', 'AAAAAAAAAAA92631', 'AA21643', 'AAAAAAAAAAAAAA28620']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908']), (80, [74, 89, 44, 80, 0], ['AAAA35194', 'AAAAAAAA79710', 'AAA20874', 'AAAAAAAAAAAAAAAAAAA70104', 'AAAAAAAAAAAAA73084', 'AAAAAAA57334', 'AAAAAAA9228', 'AAAAAAAAAAAAA62007']), (81, [63, 77, 54, 48, 61, 53, 97], ['AAAAAAAAAAAAAAA81326', 'AAAAAAAAAA22292', 'AA25381', 'AAAAAAAAAAA74076', 'AAAAAAA81898', 'AAAAAAAAA72121']), (82, [34, 60, 4, 79, 78, 16, 86, 89, 42, 50], ['AAAAA40681', 'AAAAAAAAAAAAAAAAAA12591', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAAAAAAAAAAA70104']), (83, [14, 10], ['AAAAAAAAAA22292', 'AAAAAAAAAAAAA70254', 'AAAAAAAAAAA6119']), (84, [11, 83, 35, 13, 96, 94], ['AAAAA95309', 'AAAAAAAAAAAAAAAAAA32918', 'AAAAAAAAAAAAAAAAAA24183']), (85, [39, 60], ['AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAA22292', 'AAAAAAA66161', 'AAAAAAA21462', 'AAAAAAAAAAAAAAAAAA12591', '55847', 'AAAAAA98232', 'AAAAAAAAAAA46154']), (86, [33, 81, 72, 74, 45, 36, 82], ['AAAAAAAA81587', 'AAAAAAAAAAAAAA96505', '45449', 'AAAA80176']), (87, [57, 27, 50, 12, 97, 68], ['AAAAAAAAAAAAAAAAA26540', 'AAAAAAAAA10012', 'AAAAAAAAAAAA35809', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAAAAAA82945', 'AAAAAA66777', '31228', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAA96505']), (88, [41, 90, 77, 24, 6, 24], ['AAAA35194', 'AAAA35194', 'AAAAAAA80240', 'AAAAAAAAAAA46154', 'AAAAAA58494', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAAA59334', 'AAAAAAAAAAAAAAAAAAA91804', 'AA74433']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673']), (90, [88, 75], ['AAAAA60038', 'AAAAAAAA23648', 'AAAAAAAAAAA99000', 'AAAA41702', 'AAAAAAAAAAAAA22860', 'AAAAAAAAAAAAAAA68526']), (91, [78], ['AAAAAAAAAAAAA62007', 'AAA99043']), (92, [85, 63, 49, 45], ['AAAAAAA89932', 'AAAAAAAAAAAAA22860', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAAA21089']), (93, [11], ['AAAAAAAAAAA176', 'AAAAAAAAAAAAAA8666', 'AAAAAAAAAAAAAAA453', 'AAAAAAAAAAAAA85723', 'A68938', 'AAAAAAAAAAAAA9821', 'AAAAAAA48038', 'AAAAAAAAAAAAAAAAA59387', 'AA99927', 'AAAAA17383']), (94, [98, 9, 85, 62, 88, 91, 60, 61, 38, 86], ['AAAAAAAA81587', 'AAAAA17383', 'AAAAAAAA81587']), (95, [47, 77], ['AAAAAAAAAAAAAAAAA764', 'AAAAAAAAAAA74076', 'AAAAAAAAAA18107', 'AAAAA40681', 'AAAAAAAAAAAAAAA35875', 'AAAAA60038', 'AAAAAAA56483']), (96, [23, 97, 43], ['AAAAAAAAAA646', 'A87088']), (97, [54, 2, 86, 65], ['47735', 'AAAAAAA99836', 'AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAA98414', 'AAAAAAA56483', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAA39692', 'AA21643']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (99, [37, 86], ['AAAAAAAAAAAAAAAAAA32918', 'AAAAA70514', 'AAAAAAAAA10012', 'AAAAAAAAAAAAAAAAA59387', 'AAAAAAAAAA64777', 'AAAAAAAAAAAAAAAAAAA15356']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523']), (101, [], []), (102, [None], [None])]
SELECT * FROM array_index_op_test WHERE i && '{}' ORDER BY seqno
RESULT: 
	[]
SELECT * FROM array_index_op_test WHERE i <@ '{}' ORDER BY seqno
RESULT: 
	[(101, [], [])]
CREATE INDEX textarrayidx ON array_index_op_test USING gin (t)
explain (costs off)
SELECT * FROM array_index_op_test WHERE t @> '{AAAAAAAA72908}' ORDER BY seqno
RESULT: 
	[('Sort',), ('  Sort Key: seqno',), ('  ->  Bitmap Heap Scan on array_index_op_test',), ("        Recheck Cond: (t @> '{AAAAAAAA72908}'::text[])",), ('        ->  Bitmap Index Scan on textarrayidx',), ("              Index Cond: (t @> '{AAAAAAAA72908}'::text[])",)]
SELECT * FROM array_index_op_test WHERE t @> '{AAAAAAAA72908}' ORDER BY seqno
RESULT: 
	[(22, [11, 6, 56, 62, 53, 30], ['AAAAAAAA72908']), (45, [99, 45], ['AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAAA17075', 'AA88409', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAAAA48038', 'AAAAAAAAAAAAAA10611']), (72, [22, 1, 16, 78, 20, 91, 83], ['47735', 'AAAAAAA56483', 'AAAAAAAAAAAAA93788', 'AA42406', 'AAAAAAAAAAAAA73084', 'AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAA61286', 'AAAAA66674', 'AAAAAAAAAAAAAAAAA50407']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908'])]
SELECT * FROM array_index_op_test WHERE t && '{AAAAAAAA72908}' ORDER BY seqno
RESULT: 
	[(22, [11, 6, 56, 62, 53, 30], ['AAAAAAAA72908']), (45, [99, 45], ['AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAAA17075', 'AA88409', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAAAA48038', 'AAAAAAAAAAAAAA10611']), (72, [22, 1, 16, 78, 20, 91, 83], ['47735', 'AAAAAAA56483', 'AAAAAAAAAAAAA93788', 'AA42406', 'AAAAAAAAAAAAA73084', 'AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAA61286', 'AAAAA66674', 'AAAAAAAAAAAAAAAAA50407']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908'])]
SELECT * FROM array_index_op_test WHERE t @> '{AAAAAAAAAA646}' ORDER BY seqno
RESULT: 
	[(15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908']), (96, [23, 97, 43], ['AAAAAAAAAA646', 'A87088'])]
SELECT * FROM array_index_op_test WHERE t && '{AAAAAAAAAA646}' ORDER BY seqno
RESULT: 
	[(15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908']), (96, [23, 97, 43], ['AAAAAAAAAA646', 'A87088'])]
SELECT * FROM array_index_op_test WHERE t @> '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno
RESULT: 
	[(79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908'])]
SELECT * FROM array_index_op_test WHERE t && '{AAAAAAAA72908,AAAAAAAAAA646}' ORDER BY seqno
RESULT: 
	[(15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (22, [11, 6, 56, 62, 53, 30], ['AAAAAAAA72908']), (45, [99, 45], ['AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAAA17075', 'AA88409', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAAAA48038', 'AAAAAAAAAAAAAA10611']), (72, [22, 1, 16, 78, 20, 91, 83], ['47735', 'AAAAAAA56483', 'AAAAAAAAAAAAA93788', 'AA42406', 'AAAAAAAAAAAAA73084', 'AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAA61286', 'AAAAA66674', 'AAAAAAAAAAAAAAAAA50407']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908']), (96, [23, 97, 43], ['AAAAAAAAAA646', 'A87088'])]
SELECT * FROM array_index_op_test WHERE t <@ '{AAAAAAAA72908,AAAAAAAAAAAAAAAAAAA17075,AA88409,AAAAAAAAAAAAAAAAAA36842,AAAAAAA48038,AAAAAAAAAAAAAA10611}' ORDER BY seqno
RESULT: 
	[(22, [11, 6, 56, 62, 53, 30], ['AAAAAAAA72908']), (45, [99, 45], ['AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAAA17075', 'AA88409', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAAAA48038', 'AAAAAAAAAAAAAA10611']), (101, [], [])]
SELECT * FROM array_index_op_test WHERE t = '{AAAAAAAAAA646,A87088}' ORDER BY seqno
RESULT: 
	[(96, [23, 97, 43], ['AAAAAAAAAA646', 'A87088'])]
SELECT * FROM array_index_op_test WHERE t = '{}' ORDER BY seqno
RESULT: 
	[(101, [], [])]
SELECT * FROM array_index_op_test WHERE t @> '{}' ORDER BY seqno
RESULT: 
	[(1, [92, 75, 71, 52, 64, 83], ['AAAAAAAA44066', 'AAAAAA1059', 'AAAAAAAAAAA176', 'AAAAAAA48038']), (2, [3, 6], ['AAAAAA98232', 'AAAAAAAA79710', 'AAAAAAAAAAAAAAAAA69675', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAA12793']), (3, [37, 64, 95, 43, 3, 41, 13, 30, 11, 43], ['AAAAAAAAAA48845', 'AAAAA75968', 'AAAAA95309', 'AAA54451', 'AAAAAAAAAA22292', 'AAAAAAA99836', 'A96617', 'AA17009', 'AAAAAAAAAAAAAA95246']), (4, [71, 39, 99, 55, 33, 75, 45], ['AAAAAAAAA53663', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAA64777', 'AAA99043', 'AAAAAAAAAAAAAAAAAAA91804', '39557']), (5, [50, 42, 77, 50, 4], ['AAAAAAAAAAAAAAAAA26540', 'AAAAAAA79710', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAA176', 'AAAAA95309', 'AAAAAAAAAAA46154', 'AAAAAA66777', 'AAAAAAAAA27249', 'AAAAAAAAAA64777', 'AAAAAAAAAAAAAAAAAAA70104']), (6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (7, [12, 51, 88, 64, 8], ['AAAAAAAAAAAAAAAAAA12591', 'AAAAAAAAAAAAAAAAA50407', 'AAAAAAAAAAAA67946']), (8, [60, 84], ['AAAAAAA81898', 'AAAAAA1059', 'AAAAAAAAAAAA81511', 'AAAAA961', 'AAAAAAAAAAAAAAAA31334', 'AAAAA64741', 'AA6416', 'AAAAAAAAAAAAAAAAAA32918', 'AAAAAAAAAAAAAAAAA50407']), (9, [56, 52, 35, 27, 80, 44, 81, 22], ['AAAAAAAAAAAAAAA73034', 'AAAAAAAAAAAAA7929', 'AAAAAAA66161', 'AA88409', '39557', 'A27153', 'AAAAAAAA9523', 'AAAAAAAAAAA99000']), (10, [71, 5, 45], ['AAAAAAAAAAA21658', 'AAAAAAAAAAAA21089', 'AAA54451', 'AAAAAAAAAAAAAAAAAA54141', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAA21658', 'AAAAAAAAAAA74076', 'AAAAAAAAA27249']), (11, [41, 86, 74, 48, 22, 74, 47, 50], ['AAAAAAAA9523', 'AAAAAAAAAAAA37562', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAAAAAA46154', 'AAAA41702', 'AAAAAAAAAAAAAAAAA764', 'AAAAA62737', '39557']), (12, [17, 99, 18, 52, 91, 72, 0, 43, 96, 23], ['AAAAA33250', 'AAAAAAAAAAAAAAAAAAA85420', 'AAAAAAAAAAA33576']), (13, [3, 52, 34, 23], ['AAAAAA98232', 'AAAA49534', 'AAAAAAAAAAA21658']), (14, [78, 57, 19], ['AAAA8857', 'AAAAAAAAAAAAAAA73034', 'AAAAAAAA81587', 'AAAAAAAAAAAAAAA68526', 'AAAAA75968', 'AAAAAAAAAAAAAA65909', 'AAAAAAAAA10012', 'AAAAAAAAAAAAAA65909']), (15, [17, 14, 16, 63, 67], ['AA6416', 'AAAAAAAAAA646', 'AAAAA95309']), (16, [14, 63, 85, 11], ['AAAAAA66777']), (17, [7, 10, 81, 85], ['AAAAAA43678', 'AAAAAAA12144', 'AAAAAAAAAAA50956', 'AAAAAAAAAAAAAAAAAAA15356']), (18, [1], ['AAAAAAAAAAA33576', 'AAAAA95309', '64261', 'AAA59323', 'AAAAAAAAAAAAAA95246', '55847', 'AAAAAAAAAAAA67946', 'AAAAAAAAAAAAAAAAAA64374']), (19, [52, 82, 17, 74, 23, 46, 69, 51, 75], ['AAAAAAAAAAAAA73084', 'AAAAA75968', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAAAAA1205', 'A68938']), (20, [72, 89, 70, 51, 54, 37, 8, 49, 79], ['AAAAAA58494']), (21, [2, 8, 65, 10, 5, 79, 43], ['AAAAAAAAAAAAAAAAA88852', 'AAAAAAAAAAAAAAAAAAA91804', 'AAAAA64669', 'AAAAAAAAAAAAAAAA1443', 'AAAAAAAAAAAAAAAA23657', 'AAAAA12179', 'AAAAAAAAAAAAAAAAA88852', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAAAAAAAA41303', 'AAAAAAAAAAAAAAAAAAA85420']), (22, [11, 6, 56, 62, 53, 30], ['AAAAAAAA72908']), (23, [40, 90, 5, 38, 72, 40, 30, 10, 43, 55], ['A6053', 'AAAAAAAAAAA6119', 'AA44673', 'AAAAAAAAAAAAAAAAA764', 'AA17009', 'AAAAA17383', 'AAAAA70514', 'AAAAA33250', 'AAAAA95309', 'AAAAAAAAAAAA37562']), (24, [94, 61, 99, 35, 48], ['AAAAAAAAAAA50956', 'AAAAAAAAAAA15165', 'AAAA85070', 'AAAAAAAAAAAAAAA36627', 'AAAAA961', 'AAAAAAAAAA55219']), (25, [31, 1, 10, 11, 27, 79, 38], ['AAAAAAAAAAAAAAAAAA59334', '45449']), (26, [71, 10, 9, 69, 75], ['47735', 'AAAAAAA21462', 'AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAAAAA91804', 'AAAAAAAAA72121', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAA41597', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA15356', 'AA17009']), (27, [94], ['AA6416', 'A6053', 'AAAAAAA21462', 'AAAAAAA57334', 'AAAAAAAAAAAAAAAAAA12591', 'AA88409', 'AAAAAAAAAAAAA70254']), (28, [14, 33, 6, 34, 14], ['AAAAAAAAAAAAAAA13198', 'AAAAAAAA69452', 'AAAAAAAAAAA82945', 'AAAAAAA12144', 'AAAAAAAAA72121', 'AAAAAAAAAA18601']), (29, [39, 21], ['AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAAAAA38885', 'AAAA85070', 'AAAAAAAAAAAAAAAAAAA70104', 'AAAAA66674', 'AAAAAAAAAAAAA62007', 'AAAAAAAA69452', 'AAAAAAA1242', 'AAAAAAAAAAAAAAAA1729', 'AAAA35194']), (30, [26, 81, 47, 91, 34], ['AAAAAAAAAAAAAAAAAAA70104', 'AAAAAAA80240']), (31, [80, 24, 18, 21, 54], ['AAAAAAAAAAAAAAA13198', 'AAAAAAAAAAAAAAAAAAA70415', 'A27153', 'AAAAAAAAA53663', 'AAAAAAAAAAAAAAAAA50407', 'A68938']), (32, [58, 79, 82, 80, 67, 75, 98, 10, 41], ['AAAAAAAAAAAAAAAAAA61286', 'AAA54451', 'AAAAAAAAAAAAAAAAAAA87527', 'A96617', '51533']), (33, [74, 73], ['A85417', 'AAAAAAA56483', 'AAAAA17383', 'AAAAAAAAAAAAA62159', 'AAAAAAAAAAAA52814', 'AAAAAAAAAAAAA85723', 'AAAAAAAAAAAAAAAAAA55796']), (34, [70, 45], ['AAAAAAAAAAAAAAAAAA71621', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAA55219', 'AAAAAAAA23648', 'AAAAAAAAAA22292', 'AAAAAAA1242']), (35, [23, 40], ['AAAAAAAAAAAA52814', 'AAAA48949', 'AAAAAAAAA34727', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA62179', 'AAAAAAAAAAAAAAA68526', 'AAAAAAA99836', 'AAAAAAAA50094', 'AAAA91194', 'AAAAAAAAAAAAA73084']), (36, [79, 82, 14, 52, 30, 5, 79], ['AAAAAAAAA53663', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAAAAAAAAAAA89194', 'AA88409', 'AAAAAAAAAAAAAAA81326', 'AAAAAAAAAAAAAAAAA63050', 'AAAAAAAAAAAAAAAA33598']), (37, [53, 11, 81, 39, 3, 78, 58, 64, 74], ['AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAA66161', 'AAAAAAAA23648', 'AAAAAAAAAAAAAA10611']), (38, [59, 5, 4, 95, 28], ['AAAAAAAAAAA82945', 'A96617', '47735', 'AAAAA12179', 'AAAAA64669', 'AAAAAA99807', 'AA74433', 'AAAAAAAAAAAAAAAAA59387']), (39, [82, 43, 99, 16, 74], ['AAAAAAAAAAAAAAA67062', 'AAAAAAA57334', 'AAAAAAAAAAAAAA65909', 'A27153', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAAAAAA64777', 'AAAAAAAAAAAA81511', 'AAAAAAAAAAAAAA65909', 'AAAAAAAAAAAAAA28620']), (40, [34], ['AAAAAAAAAAAAAA10611', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAA50956', 'AAAAAAAAAAAAAAAA31334', 'AAAAA70466', 'AAAAAAAA81587', 'AAAAAAA74623']), (41, [19, 26, 63, 12, 93, 73, 27, 94], ['AAAAAAA79710', 'AAAAAAAAAA55219', 'AAAA41702', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAAA71621', 'AAAAAAAAAAAAAAAAA63050', 'AAAAAAA99836', 'AAAAAAAAAAAAAA8666']), (42, [15, 76, 82, 75, 8, 91], ['AAAAAAAAAAA176', 'AAAAAA38063', '45449', 'AAAAAA54032', 'AAAAAAA81898', 'AA6416', 'AAAAAAAAAAAAAAAAAAA62179', '45449', 'AAAAA60038', 'AAAAAAAA81587']), (43, [39, 87, 91, 97, 79, 28], ['AAAAAAAAAAA74076', 'A96617', 'AAAAAAAAAAAAAAAAAAA89194', 'AAAAAAAAAAAAAAAAAA55796', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAA67946']), (44, [40, 58, 68, 29, 54], ['AAAAAAA81898', 'AAAAAA66777', 'AAAAAA98232']), (45, [99, 45], ['AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAAA17075', 'AA88409', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAAAA48038', 'AAAAAAAAAAAAAA10611']), (46, [53, 24], ['AAAAAAAAAAA53908', 'AAAAAA54032', 'AAAAA17383', 'AAAA48949', 'AAAAAAAAAA18601', 'AAAAA64669', '45449', 'AAAAAAAAAAA98051', 'AAAAAAAAAAAAAAAAAA71621']), (47, [98, 23, 64, 12, 75, 61], ['AAA59323', 'AAAAA95309', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAA27249', 'AAAAA17383', 'AAAAAAAAAAAA37562', 'AAAAAA1059', 'A84822', '55847', 'AAAAA70466']), (48, [76, 14], ['AAAAAAAAAAAAA59671', 'AAAAAAAAAAAAAAAAAAA91804', 'AAAAAA66777', 'AAAAAAAAAAAAAAAAAAA89194', 'AAAAAAAAAAAAAAA36627', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAA73084', 'AAAAAAA79710', 'AAAAAAAAAAAAAAA40402', 'AAAAAAAAAAAAAAAAAAA65037']), (49, [56, 5, 54, 37, 49], ['AA21643', 'AAAAAAAAAAA92631', 'AAAAAAAA81587']), (50, [20, 12, 37, 64, 93], ['AAAAAAAAAA5483', 'AAAAAAAAAAAAAAAAAAA1205', 'AA6416', 'AAAAAAAAAAAAAAAAA63050', 'AAAAAAAAAAAAAAAAAA47955']), (51, [47], ['AAAAAAAAAAAAAA96505', 'AAAAAAAAAAAAAAAAAA36842', 'AAAAA95309', 'AAAAAAAA81587', 'AA6416', 'AAAA91194', 'AAAAAA58494', 'AAAAAA1059', 'AAAAAAAA69452']), (52, [89, 0], ['AAAAAAAAAAAAAAAAAA47955', 'AAAAAAA48038', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAAAAAAAAA73084', 'AAAAA70466', 'AAAAAAAAAAAAAAAAA764', 'AAAAAAAAAAA46154', 'AA66862']), (53, [38, 17], ['AAAAAAAAAAA21658']), (54, [70, 47], ['AAAAAAAAAAAAAAAAAA54141', 'AAAAA40681', 'AAAAAAA48038', 'AAAAAAAAAAAAAAAA29150', 'AAAAA41597', 'AAAAAAAAAAAAAAAAAA59334', 'AA15322']), (55, [47, 79, 47, 64, 72, 25, 71, 24, 93], ['AAAAAAAAAAAAAAAAAA55796', 'AAAAA62737']), (56, [33, 7, 60, 54, 93, 90, 77, 85, 39], ['AAAAAAAAAAAAAAAAAA32918', 'AA42406']), (57, [23, 45, 10, 42, 36, 21, 9, 96], ['AAAAAAAAAAAAAAAAAAA70415']), (58, [92], ['AAAAAAAAAAAAAAAA98414', 'AAAAAAAA23648', 'AAAAAAAAAAAAAAAAAA55796', 'AA25381', 'AAAAAAAAAAA6119']), (59, [9, 69, 46, 77], ['39557', 'AAAAAAA89932', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAAAAAAAAAAAAA26540', 'AAA20874', 'AA6416', 'AAAAAAAAAAAAAAAAAA47955']), (60, [62, 2, 59, 38, 89], ['AAAAAAA89932', 'AAAAAAAAAAAAAAAAAAA15356', 'AA99927', 'AA17009', 'AAAAAAAAAAAAAAA35875']), (61, [72, 2, 44, 95, 54, 54, 13], ['AAAAAAAAAAAAAAAAAAA91804']), (62, [83, 72, 29, 73], ['AAAAAAAAAAAAA15097', 'AAAA8857', 'AAAAAAAAAAAA35809', 'AAAAAAAAAAAA52814', 'AAAAAAAAAAAAAAAAAAA38885', 'AAAAAAAAAAAAAAAAAA24183', 'AAAAAA43678', 'A96617']), (63, [11, 4, 61, 87], ['AAAAAAAAA27249', 'AAAAAAAAAAAAAAAAAA32918', 'AAAAAAAAAAAAAAA13198', 'AAA20874', '39557', '51533', 'AAAAAAAAAAA53908', 'AAAAAAAAAAAAAA96505', 'AAAAAAAA78938']), (64, [26, 19, 34, 24, 81, 78], ['A96617', 'AAAAAAAAAAAAAAAAAAA70104', 'A68938', 'AAAAAAAAAAA53908', 'AAAAAAAAAAAAAAA453', 'AA17009', 'AAAAAAA80240']), (65, [61, 5, 76, 59, 17], ['AAAAAA99807', 'AAAAA64741', 'AAAAAAAAAAA53908', 'AA21643', 'AAAAAAAAA10012']), (66, [31, 23, 70, 52, 4, 33, 48, 25], ['AAAAAAAAAAAAAAAAA69675', 'AAAAAAAA50094', 'AAAAAAAAAAA92631', 'AAAA35194', '39557', 'AAAAAAA99836']), (67, [31, 94, 7, 10], ['AAAAAA38063', 'A96617', 'AAAA35194', 'AAAAAAAAAAAA67946']), (68, [90, 43, 38], ['AA75092', 'AAAAAAAAAAAAAAAAA69675', 'AAAAAAAAAAA92631', 'AAAAAAAAA10012', 'AAAAAAAAAAAAA7929', 'AA21643']), (69, [67, 35, 99, 85, 72, 86, 44], ['AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAA50094', 'AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAAAAAAA47955']), (70, [56, 70, 83], ['AAAA41702', 'AAAAAAAAAAA82945', 'AA21643', 'AAAAAAAAAAA99000', 'A27153', 'AA25381', 'AAAAAAAAAAAAAA96505', 'AAAAAAA1242']), (71, [74, 26], ['AAAAAAAAAAA50956', 'AA74433', 'AAAAAAA21462', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAA36627', 'AAAAAAAAAAAAA70254', 'AAAAAAAAAA43419', '39557']), (72, [22, 1, 16, 78, 20, 91, 83], ['47735', 'AAAAAAA56483', 'AAAAAAAAAAAAA93788', 'AA42406', 'AAAAAAAAAAAAA73084', 'AAAAAAAA72908', 'AAAAAAAAAAAAAAAAAA61286', 'AAAAA66674', 'AAAAAAAAAAAAAAAAA50407']), (73, [88, 25, 96, 78, 65, 15, 29, 19], ['AAA54451', 'AAAAAAAAA27249', 'AAAAAAA9228', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAA17383', 'AAAAAAAAAAAAAAAA33598']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (75, [12, 96, 83, 24, 71, 89, 55], ['AAAA48949', 'AAAAAAAA29716', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAAA67946', 'AAAAAAAAAAAAAAAA29150', 'AAA28075', 'AAAAAAAAAAAAAAAAA43052']), (76, [92, 55, 10, 7], ['AAAAAAAAAAAAAAA67062']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (78, [55, 89, 44, 84, 34], ['AAAAAAAAAAA6119', 'AAAAAAAAAAAAAA8666', 'AA99927', 'AA42406', 'AAAAAAA81898', 'AAAAAAA9228', 'AAAAAAAAAAA92631', 'AA21643', 'AAAAAAAAAAAAAA28620']), (79, [45], ['AAAAAAAAAA646', 'AAAAAAAAAAAAAAAAAAA70415', 'AAAAAA43678', 'AAAAAAAA72908']), (80, [74, 89, 44, 80, 0], ['AAAA35194', 'AAAAAAAA79710', 'AAA20874', 'AAAAAAAAAAAAAAAAAAA70104', 'AAAAAAAAAAAAA73084', 'AAAAAAA57334', 'AAAAAAA9228', 'AAAAAAAAAAAAA62007']), (81, [63, 77, 54, 48, 61, 53, 97], ['AAAAAAAAAAAAAAA81326', 'AAAAAAAAAA22292', 'AA25381', 'AAAAAAAAAAA74076', 'AAAAAAA81898', 'AAAAAAAAA72121']), (82, [34, 60, 4, 79, 78, 16, 86, 89, 42, 50], ['AAAAA40681', 'AAAAAAAAAAAAAAAAAA12591', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAAAAAAAAAAA70104']), (83, [14, 10], ['AAAAAAAAAA22292', 'AAAAAAAAAAAAA70254', 'AAAAAAAAAAA6119']), (84, [11, 83, 35, 13, 96, 94], ['AAAAA95309', 'AAAAAAAAAAAAAAAAAA32918', 'AAAAAAAAAAAAAAAAAA24183']), (85, [39, 60], ['AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAA22292', 'AAAAAAA66161', 'AAAAAAA21462', 'AAAAAAAAAAAAAAAAAA12591', '55847', 'AAAAAA98232', 'AAAAAAAAAAA46154']), (86, [33, 81, 72, 74, 45, 36, 82], ['AAAAAAAA81587', 'AAAAAAAAAAAAAA96505', '45449', 'AAAA80176']), (87, [57, 27, 50, 12, 97, 68], ['AAAAAAAAAAAAAAAAA26540', 'AAAAAAAAA10012', 'AAAAAAAAAAAA35809', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAAAAAA82945', 'AAAAAA66777', '31228', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAA96505']), (88, [41, 90, 77, 24, 6, 24], ['AAAA35194', 'AAAA35194', 'AAAAAAA80240', 'AAAAAAAAAAA46154', 'AAAAAA58494', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAAA59334', 'AAAAAAAAAAAAAAAAAAA91804', 'AA74433']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673']), (90, [88, 75], ['AAAAA60038', 'AAAAAAAA23648', 'AAAAAAAAAAA99000', 'AAAA41702', 'AAAAAAAAAAAAA22860', 'AAAAAAAAAAAAAAA68526']), (91, [78], ['AAAAAAAAAAAAA62007', 'AAA99043']), (92, [85, 63, 49, 45], ['AAAAAAA89932', 'AAAAAAAAAAAAA22860', 'AAAAAAAAAAAAAAAAAAA1205', 'AAAAAAAAAAAA21089']), (93, [11], ['AAAAAAAAAAA176', 'AAAAAAAAAAAAAA8666', 'AAAAAAAAAAAAAAA453', 'AAAAAAAAAAAAA85723', 'A68938', 'AAAAAAAAAAAAA9821', 'AAAAAAA48038', 'AAAAAAAAAAAAAAAAA59387', 'AA99927', 'AAAAA17383']), (94, [98, 9, 85, 62, 88, 91, 60, 61, 38, 86], ['AAAAAAAA81587', 'AAAAA17383', 'AAAAAAAA81587']), (95, [47, 77], ['AAAAAAAAAAAAAAAAA764', 'AAAAAAAAAAA74076', 'AAAAAAAAAA18107', 'AAAAA40681', 'AAAAAAAAAAAAAAA35875', 'AAAAA60038', 'AAAAAAA56483']), (96, [23, 97, 43], ['AAAAAAAAAA646', 'A87088']), (97, [54, 2, 86, 65], ['47735', 'AAAAAAA99836', 'AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAA98414', 'AAAAAAA56483', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAA39692', 'AA21643']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (99, [37, 86], ['AAAAAAAAAAAAAAAAAA32918', 'AAAAA70514', 'AAAAAAAAA10012', 'AAAAAAAAAAAAAAAAA59387', 'AAAAAAAAAA64777', 'AAAAAAAAAAAAAAAAAAA15356']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523']), (101, [], []), (102, [None], [None])]
SELECT * FROM array_index_op_test WHERE t && '{}' ORDER BY seqno
RESULT: 
	[]
SELECT * FROM array_index_op_test WHERE t <@ '{}' ORDER BY seqno
RESULT: 
	[(101, [], [])]
-- And try it with a multicolumn GIN index

DROP INDEX intarrayidx, textarrayidx
CREATE INDEX botharrayidx ON array_index_op_test USING gin (i, t)
SELECT * FROM array_index_op_test WHERE i @> '{32}' ORDER BY seqno
RESULT: 
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523'])]
SELECT * FROM array_index_op_test WHERE i && '{32}' ORDER BY seqno
RESULT: 
	[(6, [39, 35, 5, 94, 17, 92, 60, 32], ['AAAAAAAAAAAAAAA35875', 'AAAAAAAAAAAAAAAA23657']), (74, [32], ['AAAAAAAAAAAAAAAA1729', 'AAAAAAAAAAAAA22860', 'AAAAAA99807', 'AAAAA17383', 'AAAAAAAAAAAAAAA67062', 'AAAAAAAAAAA15165', 'AAAAAAAAAAA50956']), (77, [97, 15, 32, 17, 55, 59, 18, 37, 50, 39], ['AAAAAAAAAAAA67946', 'AAAAAA54032', 'AAAAAAAA81587', '55847', 'AAAAAAAAAAAAAA28620', 'AAAAAAAAAAAAAAAAA43052', 'AAAAAA75463', 'AAAA49534', 'AAAAAAAA44066']), (89, [40, 32, 17, 6, 30, 88], ['AA44673', 'AAAAAAAAAAA6119', 'AAAAAAAAAAAAAAAA23657', 'AAAAAAAAAAAAAAAAAA47955', 'AAAAAAAAAAAAAAAA33598', 'AAAAAAAAAAA33576', 'AA44673']), (98, [38, 34, 32, 89], ['AAAAAAAAAAAAAAAAAA71621', 'AAAA8857', 'AAAAAAAAAAAAAAAAAAA65037', 'AAAAAAAAAAAAAAAA31334', 'AAAAAAAAAA48845']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523'])]
SELECT * FROM array_index_op_test WHERE t @> '{AAAAAAA80240}' ORDER BY seqno
RESULT: 
	[(19, [52, 82, 17, 74, 23, 46, 69, 51, 75], ['AAAAAAAAAAAAA73084', 'AAAAA75968', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAAAAA1205', 'A68938']), (30, [26, 81, 47, 91, 34], ['AAAAAAAAAAAAAAAAAAA70104', 'AAAAAAA80240']), (64, [26, 19, 34, 24, 81, 78], ['A96617', 'AAAAAAAAAAAAAAAAAAA70104', 'A68938', 'AAAAAAAAAAA53908', 'AAAAAAAAAAAAAAA453', 'AA17009', 'AAAAAAA80240']), (82, [34, 60, 4, 79, 78, 16, 86, 89, 42, 50], ['AAAAA40681', 'AAAAAAAAAAAAAAAAAA12591', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAAAAAAAAAAA70104']), (88, [41, 90, 77, 24, 6, 24], ['AAAA35194', 'AAAA35194', 'AAAAAAA80240', 'AAAAAAAAAAA46154', 'AAAAAA58494', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAAA59334', 'AAAAAAAAAAAAAAAAAAA91804', 'AA74433']), (97, [54, 2, 86, 65], ['47735', 'AAAAAAA99836', 'AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAA98414', 'AAAAAAA56483', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAA39692', 'AA21643']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523'])]
SELECT * FROM array_index_op_test WHERE t && '{AAAAAAA80240}' ORDER BY seqno
RESULT: 
	[(19, [52, 82, 17, 74, 23, 46, 69, 51, 75], ['AAAAAAAAAAAAA73084', 'AAAAA75968', 'AAAAAAAAAAAAAAAA14047', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAAAAA1205', 'A68938']), (30, [26, 81, 47, 91, 34], ['AAAAAAAAAAAAAAAAAAA70104', 'AAAAAAA80240']), (64, [26, 19, 34, 24, 81, 78], ['A96617', 'AAAAAAAAAAAAAAAAAAA70104', 'A68938', 'AAAAAAAAAAA53908', 'AAAAAAAAAAAAAAA453', 'AA17009', 'AAAAAAA80240']), (82, [34, 60, 4, 79, 78, 16, 86, 89, 42, 50], ['AAAAA40681', 'AAAAAAAAAAAAAAAAAA12591', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAA55798', 'AAAAAAAAAAAAAAAAAAA70104']), (88, [41, 90, 77, 24, 6, 24], ['AAAA35194', 'AAAA35194', 'AAAAAAA80240', 'AAAAAAAAAAA46154', 'AAAAAA58494', 'AAAAAAAAAAAAAAAAAAA17075', 'AAAAAAAAAAAAAAAAAA59334', 'AAAAAAAAAAAAAAAAAAA91804', 'AA74433']), (97, [54, 2, 86, 65], ['47735', 'AAAAAAA99836', 'AAAAAAAAAAAAAAAAA6897', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAA80240', 'AAAAAAAAAAAAAAAA98414', 'AAAAAAA56483', 'AAAAAAAAAAAAAAAA29150', 'AAAAAAA39692', 'AA21643']), (100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523'])]
SELECT * FROM array_index_op_test WHERE i @> '{32}' AND t && '{AAAAAAA80240}' ORDER BY seqno
RESULT: 
	[(100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523'])]
SELECT * FROM array_index_op_test WHERE i && '{32}' AND t @> '{AAAAAAA80240}' ORDER BY seqno
RESULT: 
	[(100, [85, 32, 57, 39, 49, 84, 32, 3, 30], ['AAAAAAA80240', 'AAAAAAAAAAAAAAAA1729', 'AAAAA60038', 'AAAAAAAAAAA92631', 'AAAAAAAA9523'])]
SELECT * FROM array_index_op_test WHERE t = '{}' ORDER BY seqno
RESULT: 
	[(101, [], [])]
RESET enable_seqscan
RESET enable_indexscan
RESET enable_bitmapscan
--
-- Try a GIN index with a lot of items with same key. (GIN creates a posting
-- tree when there are enough duplicates)
--
CREATE TABLE array_gin_test (a int[])
INSERT INTO array_gin_test SELECT ARRAY[1, g%5, g] FROM generate_series(1, 10000) g
CREATE INDEX array_gin_test_idx ON array_gin_test USING gin (a)
SELECT COUNT(*) FROM array_gin_test WHERE a @> '{2}'
RESULT: 
	[(2000,)]
DROP TABLE array_gin_test
--
-- Test GIN index/* REPLACED */''s reloptions
--
CREATE INDEX gin_relopts_test ON array_index_op_test USING gin (i)
  WITH (FASTUPDATE=on, GIN_PENDING_LIST_LIMIT=128)
-- \d+ gin_relopts_test

--
-- HASH
--
CREATE UNLOGGED TABLE unlogged_hash_table (id int4)
CREATE INDEX unlogged_hash_index ON unlogged_hash_table USING hash (id int4_ops)
DROP TABLE unlogged_hash_table
-- CREATE INDEX hash_ovfl_index ON hash_ovfl_heap USING hash (x int4_ops) /* REPLACED */,

-- Test hash index build tuplesorting.  Force hash tuplesort using low
-- maintenance_work_mem setting and fillfactor:
SET maintenance_work_mem = '1MB'
CREATE INDEX hash_tuplesort_idx ON tenk1 USING hash (stringu1 name_ops) WITH (fillfactor = 10)
EXPLAIN (COSTS OFF)
SELECT count(*) FROM tenk1 WHERE stringu1 = 'TVAAAA'
RESULT: 
	[('Aggregate',), ('  ->  Bitmap Heap Scan on tenk1',), ("        Recheck Cond: (stringu1 = 'TVAAAA'::name)",), ('        ->  Bitmap Index Scan on hash_tuplesort_idx',), ("              Index Cond: (stringu1 = 'TVAAAA'::name)",)]
SELECT count(*) FROM tenk1 WHERE stringu1 = 'TVAAAA'
RESULT: 
	[(14,)]
DROP INDEX hash_tuplesort_idx
RESET maintenance_work_mem
--
-- Test unique null behavior
--
CREATE TABLE unique_tbl (i int, t text)
CREATE UNIQUE INDEX unique_idx1 ON unique_tbl (i) NULLS DISTINCT
CREATE UNIQUE INDEX unique_idx2 ON unique_tbl (i) NULLS NOT DISTINCT
INSERT INTO unique_tbl VALUES (1, 'one')
INSERT INTO unique_tbl VALUES (2, 'two')
INSERT INTO unique_tbl VALUES (3, 'three')
INSERT INTO unique_tbl VALUES (4, 'four')
INSERT INTO unique_tbl VALUES (5, 'one')
INSERT INTO unique_tbl (t) VALUES ('six')
INSERT INTO unique_tbl (t) VALUES ('seven')
ERROR: INSERT INTO unique_tbl (t) VALUES ('seven')

duplicate key value violates unique constraint "unique_idx2"
DETAIL:  Key (i)=(null) already exists.

-- error from unique_idx2

DROP INDEX unique_idx1, unique_idx2
INSERT INTO unique_tbl (t) VALUES ('seven')
-- build indexes on filled table
CREATE UNIQUE INDEX unique_idx3 ON unique_tbl (i) NULLS DISTINCT
-- ok
CREATE UNIQUE INDEX unique_idx4 ON unique_tbl (i) NULLS NOT DISTINCT
ERROR: -- ok
CREATE UNIQUE INDEX unique_idx4 ON unique_tbl (i) NULLS NOT DISTINCT

could not create unique index "unique_idx4"
DETAIL:  Key (i)=(null) is duplicated.

-- error

DELETE FROM unique_tbl WHERE t = 'seven'
CREATE UNIQUE INDEX unique_idx4 ON unique_tbl (i) NULLS NOT DISTINCT
-- ok now

-- \d unique_tbl
-- \d unique_idx3
-- \d unique_idx4
SELECT pg_get_indexdef('unique_idx3'::regclass)
RESULT: 
	[('CREATE UNIQUE INDEX unique_idx3 ON public.unique_tbl USING btree (i)',)]
SELECT pg_get_indexdef('unique_idx4'::regclass)
RESULT: 
	[('CREATE UNIQUE INDEX unique_idx4 ON public.unique_tbl USING btree (i) NULLS NOT DISTINCT',)]
DROP TABLE unique_tbl
--
-- Test functional index
--
CREATE TABLE func_index_heap (f1 text, f2 text)
