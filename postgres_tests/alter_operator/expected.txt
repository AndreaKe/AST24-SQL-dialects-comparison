
-----------
QUERY:
CREATE FUNCTION alter_op_test_fn(boolean, boolean)
RETURNS boolean AS $$ SELECT NULL::BOOLEAN; $$ LANGUAGE sql IMMUTABLE;
RESULT:
	[]

-----------
QUERY:


CREATE FUNCTION customcontsel(internal, oid, internal, integer)
RETURNS float8 AS 'contsel' LANGUAGE internal STABLE STRICT;
RESULT:
	[]

-----------
QUERY:


CREATE OPERATOR === (
    LEFTARG = boolean,
    RIGHTARG = boolean,
    PROCEDURE = alter_op_test_fn,
    COMMUTATOR = ===,
    NEGATOR = !==,
    RESTRICT = customcontsel,
    JOIN = contjoinsel,
    HASHES, MERGES
);
RESULT:
	[]

-----------
QUERY:


SELECT pg_describe_object(refclassid,refobjid,refobjsubid) as ref, deptype
FROM pg_depend
WHERE classid = 'pg_operator'::regclass AND
      objid = '===(bool,bool)'::regoperator
ORDER BY 1;
RESULT:
	[('function alter_op_test_fn(boolean,boolean)', 'n'), ('function customcontsel(internal,oid,internal,integer)', 'n'), ('schema public', 'n')]

-----------
QUERY:


--
-- Test resetting and setting restrict and join attributes.
--

ALTER OPERATOR === (boolean, boolean) SET (RESTRICT = NONE);
RESULT:
	[]

-----------
QUERY:

ALTER OPERATOR === (boolean, boolean) SET (JOIN = NONE);
RESULT:
	[]

-----------
QUERY:


SELECT oprrest, oprjoin FROM pg_operator WHERE oprname = '==='
  AND oprleft = 'boolean'::regtype AND oprright = 'boolean'::regtype;
RESULT:
	[('-', '-')]

-----------
QUERY:


SELECT pg_describe_object(refclassid,refobjid,refobjsubid) as ref, deptype
FROM pg_depend
WHERE classid = 'pg_operator'::regclass AND
      objid = '===(bool,bool)'::regoperator
ORDER BY 1;
RESULT:
	[('function alter_op_test_fn(boolean,boolean)', 'n'), ('schema public', 'n')]

-----------
QUERY:


ALTER OPERATOR === (boolean, boolean) SET (RESTRICT = contsel);
RESULT:
	[]

-----------
QUERY:

ALTER OPERATOR === (boolean, boolean) SET (JOIN = contjoinsel);
RESULT:
	[]

-----------
QUERY:


SELECT oprrest, oprjoin FROM pg_operator WHERE oprname = '==='
  AND oprleft = 'boolean'::regtype AND oprright = 'boolean'::regtype;
RESULT:
	[('contsel', 'contjoinsel')]

-----------
QUERY:


SELECT pg_describe_object(refclassid,refobjid,refobjsubid) as ref, deptype
FROM pg_depend
WHERE classid = 'pg_operator'::regclass AND
      objid = '===(bool,bool)'::regoperator
ORDER BY 1;
RESULT:
	[('function alter_op_test_fn(boolean,boolean)', 'n'), ('schema public', 'n')]

-----------
QUERY:


ALTER OPERATOR === (boolean, boolean) SET (RESTRICT = NONE, JOIN = NONE);
RESULT:
	[]

-----------
QUERY:


SELECT oprrest, oprjoin FROM pg_operator WHERE oprname = '==='
  AND oprleft = 'boolean'::regtype AND oprright = 'boolean'::regtype;
RESULT:
	[('-', '-')]

-----------
QUERY:


SELECT pg_describe_object(refclassid,refobjid,refobjsubid) as ref, deptype
FROM pg_depend
WHERE classid = 'pg_operator'::regclass AND
      objid = '===(bool,bool)'::regoperator
ORDER BY 1;
RESULT:
	[('function alter_op_test_fn(boolean,boolean)', 'n'), ('schema public', 'n')]

-----------
QUERY:


ALTER OPERATOR === (boolean, boolean) SET (RESTRICT = customcontsel, JOIN = contjoinsel);
RESULT:
	[]

-----------
QUERY:


SELECT oprrest, oprjoin FROM pg_operator WHERE oprname = '==='
  AND oprleft = 'boolean'::regtype AND oprright = 'boolean'::regtype;
RESULT:
	[('customcontsel', 'contjoinsel')]

-----------
QUERY:


SELECT pg_describe_object(refclassid,refobjid,refobjsubid) as ref, deptype
FROM pg_depend
WHERE classid = 'pg_operator'::regclass AND
      objid = '===(bool,bool)'::regoperator
ORDER BY 1;
RESULT:
	[('function alter_op_test_fn(boolean,boolean)', 'n'), ('function customcontsel(internal,oid,internal,integer)', 'n'), ('schema public', 'n')]

-----------
QUERY:


--
-- Test invalid options.
--
ALTER OPERATOR === (boolean, boolean) SET (RESTRICT = non_existent_func);
RESULT:
	ERROR - function non_existent_func(internal, oid, internal, integer) does not exist


-----------
QUERY:

ALTER OPERATOR === (boolean, boolean) SET (JOIN = non_existent_func);
RESULT:
	ERROR - function non_existent_func(internal, oid, internal, smallint, internal) does not exist


-----------
QUERY:


-- invalid: non-lowercase quoted identifiers
ALTER OPERATOR & (bit, bit) SET ("Restrict" = _int_contsel, "Join" = _int_contjoinsel);
RESULT:
	ERROR - operator attribute "Restrict" not recognized


-----------
QUERY:


--
-- Test permission check. Must be owner to ALTER OPERATOR.
--
CREATE USER regress_alter_op_user;
RESULT:
	[]

-----------
QUERY:

SET SESSION AUTHORIZATION regress_alter_op_user;
RESULT:
	[]

-----------
QUERY:


ALTER OPERATOR === (boolean, boolean) SET (RESTRICT = NONE);
RESULT:
	ERROR - must be owner of operator ===


-----------
QUERY:


RESET SESSION AUTHORIZATION;
RESULT:
	[]

-----------
QUERY:


--
-- Test setting commutator, negator, merges, and hashes attributes,
-- which can only be set if not already set
--

CREATE FUNCTION alter_op_test_fn_bool_real(boolean, real)
RETURNS boolean AS $$ SELECT NULL::BOOLEAN; $$ LANGUAGE sql IMMUTABLE;
RESULT:
	[]

-----------
QUERY:


CREATE FUNCTION alter_op_test_fn_real_bool(real, boolean)
RETURNS boolean AS $$ SELECT NULL::BOOLEAN; $$ LANGUAGE sql IMMUTABLE;
RESULT:
	[]

-----------
QUERY:


-- operator
CREATE OPERATOR === (
    LEFTARG = boolean,
    RIGHTARG = real,
    PROCEDURE = alter_op_test_fn_bool_real
);
RESULT:
	[]

-----------
QUERY:


-- commutator
CREATE OPERATOR ==== (
    LEFTARG = real,
    RIGHTARG = boolean,
    PROCEDURE = alter_op_test_fn_real_bool
);
RESULT:
	[]

-----------
QUERY:


-- negator
CREATE OPERATOR !==== (
    LEFTARG = boolean,
    RIGHTARG = real,
    PROCEDURE = alter_op_test_fn_bool_real
);
RESULT:
	[]

-----------
QUERY:


-- No-op setting already false hashes and merges to false works
ALTER OPERATOR === (boolean, real) SET (MERGES = false);
RESULT:
	[]

-----------
QUERY:

ALTER OPERATOR === (boolean, real) SET (HASHES = false);
RESULT:
	[]

-----------
QUERY:


-- Test setting merges and hashes
ALTER OPERATOR === (boolean, real) SET (MERGES);
RESULT:
	[]

-----------
QUERY:

ALTER OPERATOR === (boolean, real) SET (HASHES);
RESULT:
	[]

-----------
QUERY:

SELECT oprcanmerge, oprcanhash
FROM pg_operator WHERE oprname = '==='
  AND oprleft = 'boolean'::regtype AND oprright = 'real'::regtype;
RESULT:
	[(True, True)]

-----------
QUERY:


-- Test setting commutator
ALTER OPERATOR === (boolean, real) SET (COMMUTATOR = ====);
RESULT:
	[]

-----------
QUERY:


-- Check that oprcom has been set on both the operator and commutator,
-- that they reference each other, and that the operator used is the existing
-- one we created and not a new shell operator.
SELECT op.oprname AS operator_name, com.oprname AS commutator_name,
  com.oprcode AS commutator_func
  FROM pg_operator op
  INNER JOIN pg_operator com ON (op.oid = com.oprcom AND op.oprcom = com.oid)
  WHERE op.oprname = '==='
  AND op.oprleft = 'boolean'::regtype AND op.oprright = 'real'::regtype;
RESULT:
	[('===', '====', 'alter_op_test_fn_real_bool')]

-----------
QUERY:


-- Cannot set self as negator
ALTER OPERATOR === (boolean, real) SET (NEGATOR = ===);
RESULT:
	ERROR - operator cannot be its own negator


-----------
QUERY:


-- Test setting negator
ALTER OPERATOR === (boolean, real) SET (NEGATOR = !====);
RESULT:
	[]

-----------
QUERY:


-- Check that oprnegate has been set on both the operator and negator,
-- that they reference each other, and that the operator used is the existing
-- one we created and not a new shell operator.
SELECT op.oprname AS operator_name, neg.oprname AS negator_name,
  neg.oprcode AS negator_func
  FROM pg_operator op
  INNER JOIN pg_operator neg ON (op.oid = neg.oprnegate AND op.oprnegate = neg.oid)
  WHERE op.oprname = '==='
  AND op.oprleft = 'boolean'::regtype AND op.oprright = 'real'::regtype;
RESULT:
	[('===', '!====', 'alter_op_test_fn_bool_real')]

-----------
QUERY:


-- Test that no-op set succeeds
ALTER OPERATOR === (boolean, real) SET (NEGATOR = !====);
RESULT:
	[]

-----------
QUERY:

ALTER OPERATOR === (boolean, real) SET (COMMUTATOR = ====);
RESULT:
	[]

-----------
QUERY:

ALTER OPERATOR === (boolean, real) SET (MERGES);
RESULT:
	[]

-----------
QUERY:

ALTER OPERATOR === (boolean, real) SET (HASHES);
RESULT:
	[]

-----------
QUERY:


-- Check that the final state of the operator is as we expect
SELECT oprcanmerge, oprcanhash,
       pg_describe_object('pg_operator'::regclass, oprcom, 0) AS commutator,
       pg_describe_object('pg_operator'::regclass, oprnegate, 0) AS negator
  FROM pg_operator WHERE oprname = '==='
  AND oprleft = 'boolean'::regtype AND oprright = 'real'::regtype;
RESULT:
	[(True, True, 'operator ====(real,boolean)', 'operator !====(boolean,real)')]

-----------
QUERY:


-- Cannot change commutator, negator, merges, and hashes when already set

CREATE OPERATOR @= (
    LEFTARG = real,
    RIGHTARG = boolean,
    PROCEDURE = alter_op_test_fn_real_bool
);
RESULT:
	[]

-----------
QUERY:

CREATE OPERATOR @!= (
    LEFTARG = boolean,
    RIGHTARG = real,
    PROCEDURE = alter_op_test_fn_bool_real
);
RESULT:
	[]

-----------
QUERY:


ALTER OPERATOR === (boolean, real) SET (COMMUTATOR = @=);
RESULT:
	ERROR - operator attribute "commutator" cannot be changed if it has already been set


-----------
QUERY:

ALTER OPERATOR === (boolean, real) SET (NEGATOR = @!=);
RESULT:
	ERROR - operator attribute "negator" cannot be changed if it has already been set


-----------
QUERY:

ALTER OPERATOR === (boolean, real) SET (MERGES = false);
RESULT:
	ERROR - operator attribute "merges" cannot be changed if it has already been set


-----------
QUERY:

ALTER OPERATOR === (boolean, real) SET (HASHES = false);
RESULT:
	ERROR - operator attribute "hashes" cannot be changed if it has already been set


-----------
QUERY:


-- Cannot set an operator that already has a commutator as the commutator
ALTER OPERATOR @=(real, boolean) SET (COMMUTATOR = ===);
RESULT:
	ERROR - commutator operator === is already the commutator of operator ====


-----------
QUERY:


-- Cannot set an operator that already has a negator as the negator
ALTER OPERATOR @!=(boolean, real) SET (NEGATOR = ===);
RESULT:
	ERROR - negator operator === is already the negator of operator !====


-----------
QUERY:


-- Check no changes made
SELECT oprcanmerge, oprcanhash,
       pg_describe_object('pg_operator'::regclass, oprcom, 0) AS commutator,
       pg_describe_object('pg_operator'::regclass, oprnegate, 0) AS negator
  FROM pg_operator WHERE oprname = '==='
  AND oprleft = 'boolean'::regtype AND oprright = 'real'::regtype;
RESULT:
	[(True, True, 'operator ====(real,boolean)', 'operator !====(boolean,real)')]

-----------
QUERY:


--
-- Clean up
--

DROP USER regress_alter_op_user;
RESULT:
	[]

-----------
QUERY:


DROP OPERATOR === (boolean, boolean);
RESULT:
	[]

-----------
QUERY:

DROP OPERATOR === (boolean, real);
RESULT:
	[]

-----------
QUERY:

DROP OPERATOR ==== (real, boolean);
RESULT:
	[]

-----------
QUERY:

DROP OPERATOR !==== (boolean, real);
RESULT:
	[]

-----------
QUERY:

DROP OPERATOR @= (real, boolean);
RESULT:
	[]

-----------
QUERY:

DROP OPERATOR @!= (boolean, real);
RESULT:
	[]

-----------
QUERY:


DROP FUNCTION customcontsel(internal, oid, internal, integer);
RESULT:
	[]

-----------
QUERY:

DROP FUNCTION alter_op_test_fn(boolean, boolean);
RESULT:
	[]

-----------
QUERY:

DROP FUNCTION alter_op_test_fn_bool_real(boolean, real);
RESULT:
	[]

-----------
QUERY:

DROP FUNCTION alter_op_test_fn_real_bool(real, boolean);
RESULT:
	[]
