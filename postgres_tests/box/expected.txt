
-----------
QUERY:
--
-- BOX
--

--
-- box logic
--	     o
-- 3	  o--|X
--	  |  o|
-- 2	+-+-+ |
--	| | | |
-- 1	| o-+-o
--	|   |
-- 0	+---+
--
--	0 1 2 3
--

-- boxes are specified by two points, given by four floats x1,y1,x2,y2


CREATE TABLE BOX_TBL (f1 box);
RESULT:
	[]

-----------
QUERY:


INSERT INTO BOX_TBL (f1) VALUES ('(2.0,2.0,0.0,0.0)');
RESULT:
	[]

-----------
QUERY:


INSERT INTO BOX_TBL (f1) VALUES ('(1.0,1.0,3.0,3.0)');
RESULT:
	[]

-----------
QUERY:


INSERT INTO BOX_TBL (f1) VALUES ('((-8, 2), (-2, -10))');
RESULT:
	[]

-----------
QUERY:



-- degenerate cases where the box is a line or a point
-- note that lines and points boxes all have zero area
INSERT INTO BOX_TBL (f1) VALUES ('(2.5, 2.5, 2.5,3.5)');
RESULT:
	[]

-----------
QUERY:


INSERT INTO BOX_TBL (f1) VALUES ('(3.0, 3.0,3.0,3.0)');
RESULT:
	[]

-----------
QUERY:


-- badly formatted box inputs
INSERT INTO BOX_TBL (f1) VALUES ('(2.3, 4.5)');
RESULT:
	ERROR - invalid input syntax for type box: "(2.3, 4.5)"
LINE 4: INSERT INTO BOX_TBL (f1) VALUES ('(2.3, 4.5)');
                                         ^


-----------
QUERY:


INSERT INTO BOX_TBL (f1) VALUES ('[1, 2, 3, 4)');
RESULT:
	ERROR - invalid input syntax for type box: "[1, 2, 3, 4)"
LINE 3: INSERT INTO BOX_TBL (f1) VALUES ('[1, 2, 3, 4)');
                                         ^


-----------
QUERY:


INSERT INTO BOX_TBL (f1) VALUES ('(1, 2, 3, 4]');
RESULT:
	ERROR - invalid input syntax for type box: "(1, 2, 3, 4]"
LINE 3: INSERT INTO BOX_TBL (f1) VALUES ('(1, 2, 3, 4]');
                                         ^


-----------
QUERY:


INSERT INTO BOX_TBL (f1) VALUES ('(1, 2, 3, 4) x');
RESULT:
	ERROR - invalid input syntax for type box: "(1, 2, 3, 4) x"
LINE 3: INSERT INTO BOX_TBL (f1) VALUES ('(1, 2, 3, 4) x');
                                         ^


-----------
QUERY:


INSERT INTO BOX_TBL (f1) VALUES ('asdfasdf(ad');
RESULT:
	ERROR - invalid input syntax for type box: "asdfasdf(ad"
LINE 3: INSERT INTO BOX_TBL (f1) VALUES ('asdfasdf(ad');
                                         ^


-----------
QUERY:



SELECT * FROM BOX_TBL;
RESULT:
	[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(-2,2),(-8,-10)',), ('(2.5,3.5),(2.5,2.5)',), ('(3,3),(3,3)',)]

-----------
QUERY:


SELECT b.*, area(b.f1) as barea
   FROM BOX_TBL b;
RESULT:
	[('(2,2),(0,0)', 4.0), ('(3,3),(1,1)', 4.0), ('(-2,2),(-8,-10)', 72.0), ('(2.5,3.5),(2.5,2.5)', 0.0), ('(3,3),(3,3)', 0.0)]

-----------
QUERY:


-- overlap
SELECT b.f1
   FROM BOX_TBL b
   WHERE b.f1 && box '(2.5,2.5,1.0,1.0)';
RESULT:
	[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(2.5,3.5),(2.5,2.5)',)]

-----------
QUERY:


-- left-or-overlap (x only)
SELECT b1.*
   FROM BOX_TBL b1
   WHERE b1.f1 &< box '(2.0,2.0,2.5,2.5)';
RESULT:
	[('(2,2),(0,0)',), ('(-2,2),(-8,-10)',), ('(2.5,3.5),(2.5,2.5)',)]

-----------
QUERY:


-- right-or-overlap (x only)
SELECT b1.*
   FROM BOX_TBL b1
   WHERE b1.f1 &> box '(2.0,2.0,2.5,2.5)';
RESULT:
	[('(2.5,3.5),(2.5,2.5)',), ('(3,3),(3,3)',)]

-----------
QUERY:


-- left of
SELECT b.f1
   FROM BOX_TBL b
   WHERE b.f1 << box '(3.0,3.0,5.0,5.0)';
RESULT:
	[('(2,2),(0,0)',), ('(-2,2),(-8,-10)',), ('(2.5,3.5),(2.5,2.5)',)]

-----------
QUERY:


-- area <=
SELECT b.f1
   FROM BOX_TBL b
   WHERE b.f1 <= box '(3.0,3.0,5.0,5.0)';
RESULT:
	[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(2.5,3.5),(2.5,2.5)',), ('(3,3),(3,3)',)]

-----------
QUERY:


-- area <
SELECT b.f1
   FROM BOX_TBL b
   WHERE b.f1 < box '(3.0,3.0,5.0,5.0)';
RESULT:
	[('(2.5,3.5),(2.5,2.5)',), ('(3,3),(3,3)',)]

-----------
QUERY:


-- area =
SELECT b.f1
   FROM BOX_TBL b
   WHERE b.f1 = box '(3.0,3.0,5.0,5.0)';
RESULT:
	[('(2,2),(0,0)',), ('(3,3),(1,1)',)]

-----------
QUERY:


-- area >
SELECT b.f1
   FROM BOX_TBL b				-- zero area
   WHERE b.f1 > box '(3.5,3.0,4.5,3.0)';
RESULT:
	[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(-2,2),(-8,-10)',)]

-----------
QUERY:


-- area >=
SELECT b.f1
   FROM BOX_TBL b				-- zero area
   WHERE b.f1 >= box '(3.5,3.0,4.5,3.0)';
RESULT:
	[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(-2,2),(-8,-10)',), ('(2.5,3.5),(2.5,2.5)',), ('(3,3),(3,3)',)]

-----------
QUERY:


-- right of
SELECT b.f1
   FROM BOX_TBL b
   WHERE box '(3.0,3.0,5.0,5.0)' >> b.f1;
RESULT:
	[('(2,2),(0,0)',), ('(-2,2),(-8,-10)',), ('(2.5,3.5),(2.5,2.5)',)]

-----------
QUERY:


-- contained in
SELECT b.f1
   FROM BOX_TBL b
   WHERE b.f1 <@ box '(0,0,3,3)';
RESULT:
	[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(3,3),(3,3)',)]

-----------
QUERY:


-- contains
SELECT b.f1
   FROM BOX_TBL b
   WHERE box '(0,0,3,3)' @> b.f1;
RESULT:
	[('(2,2),(0,0)',), ('(3,3),(1,1)',), ('(3,3),(3,3)',)]

-----------
QUERY:


-- box equality
SELECT b.f1
   FROM BOX_TBL b
   WHERE box '(1,1,3,3)' ~= b.f1;
RESULT:
	[('(3,3),(1,1)',)]

-----------
QUERY:


-- center of box, left unary operator
SELECT @@(b1.f1) AS p
   FROM BOX_TBL b1;
RESULT:
	[('(1,1)',), ('(2,2)',), ('(-5,-4)',), ('(2.5,3)',), ('(3,3)',)]

-----------
QUERY:


-- wholly-contained
SELECT b1.*, b2.*
   FROM BOX_TBL b1, BOX_TBL b2
   WHERE b1.f1 @> b2.f1 and not b1.f1 ~= b2.f1;
RESULT:
	[('(3,3),(1,1)', '(3,3),(3,3)')]

-----------
QUERY:


SELECT height(f1), width(f1) FROM BOX_TBL;
RESULT:
	[(2.0, 2.0), (2.0, 2.0), (12.0, 6.0), (1.0, 0.0), (0.0, 0.0)]

-----------
QUERY:


--
-- Test the SP-GiST index
--

CREATE TEMPORARY TABLE box_temp (f1 box);
RESULT:
	[]

-----------
QUERY:


INSERT INTO box_temp
	SELECT box(point(i, i), point(i * 2, i * 2))
	FROM generate_series(1, 50) AS i;
RESULT:
	[]

-----------
QUERY:


CREATE INDEX box_spgist ON box_temp USING spgist (f1);
RESULT:
	[]

-----------
QUERY:


INSERT INTO box_temp
	VALUES (NULL),
		   ('(0,0)(0,100)'),
		   ('(-3,4.3333333333)(40,1)'),
		   ('(0,100)(0,infinity)'),
		   ('(-infinity,0)(0,infinity)'),
		   ('(-infinity,-infinity)(infinity,infinity)');
RESULT:
	[]

-----------
QUERY:


SET enable_seqscan = false;
RESULT:
	[]

-----------
QUERY:


SELECT * FROM box_temp WHERE f1 << '(10,20),(30,40)';
RESULT:
	[('(2,2),(1,1)',), ('(4,4),(2,2)',), ('(6,6),(3,3)',), ('(8,8),(4,4)',), ('(0,100),(0,0)',), ('(0,Infinity),(0,100)',), ('(0,Infinity),(-Infinity,0)',)]

-----------
QUERY:

EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 << '(10,20),(30,40)';
RESULT:
	[('Index Only Scan using box_spgist on box_temp',), ("  Index Cond: (f1 << '(30,40),(10,20)'::box)",)]

-----------
QUERY:


SELECT * FROM box_temp WHERE f1 &< '(10,4.333334),(5,100)';
RESULT:
	[('(2,2),(1,1)',), ('(4,4),(2,2)',), ('(6,6),(3,3)',), ('(8,8),(4,4)',), ('(10,10),(5,5)',), ('(0,100),(0,0)',), ('(0,Infinity),(0,100)',), ('(0,Infinity),(-Infinity,0)',)]

-----------
QUERY:

EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 &< '(10,4.333334),(5,100)';
RESULT:
	[('Index Only Scan using box_spgist on box_temp',), ("  Index Cond: (f1 &< '(10,100),(5,4.333334)'::box)",)]

-----------
QUERY:


SELECT * FROM box_temp WHERE f1 && '(15,20),(25,30)';
RESULT:
	[('(20,20),(10,10)',), ('(22,22),(11,11)',), ('(24,24),(12,12)',), ('(26,26),(13,13)',), ('(28,28),(14,14)',), ('(30,30),(15,15)',), ('(32,32),(16,16)',), ('(34,34),(17,17)',), ('(36,36),(18,18)',), ('(38,38),(19,19)',), ('(40,40),(20,20)',), ('(42,42),(21,21)',), ('(44,44),(22,22)',), ('(46,46),(23,23)',), ('(48,48),(24,24)',), ('(50,50),(25,25)',), ('(Infinity,Infinity),(-Infinity,-Infinity)',)]

-----------
QUERY:

EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 && '(15,20),(25,30)';
RESULT:
	[('Index Only Scan using box_spgist on box_temp',), ("  Index Cond: (f1 && '(25,30),(15,20)'::box)",)]

-----------
QUERY:


SELECT * FROM box_temp WHERE f1 &> '(40,30),(45,50)';
RESULT:
	[('(80,80),(40,40)',), ('(82,82),(41,41)',), ('(84,84),(42,42)',), ('(86,86),(43,43)',), ('(88,88),(44,44)',), ('(90,90),(45,45)',), ('(92,92),(46,46)',), ('(94,94),(47,47)',), ('(96,96),(48,48)',), ('(98,98),(49,49)',), ('(100,100),(50,50)',)]

-----------
QUERY:

EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 &> '(40,30),(45,50)';
RESULT:
	[('Index Only Scan using box_spgist on box_temp',), ("  Index Cond: (f1 &> '(45,50),(40,30)'::box)",)]

-----------
QUERY:


SELECT * FROM box_temp WHERE f1 >> '(30,40),(40,30)';
RESULT:
	[('(82,82),(41,41)',), ('(84,84),(42,42)',), ('(86,86),(43,43)',), ('(88,88),(44,44)',), ('(90,90),(45,45)',), ('(92,92),(46,46)',), ('(94,94),(47,47)',), ('(96,96),(48,48)',), ('(98,98),(49,49)',), ('(100,100),(50,50)',)]

-----------
QUERY:

EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 >> '(30,40),(40,30)';
RESULT:
	[('Index Only Scan using box_spgist on box_temp',), ("  Index Cond: (f1 >> '(40,40),(30,30)'::box)",)]

-----------
QUERY:


SELECT * FROM box_temp WHERE f1 <<| '(10,4.33334),(5,100)';
RESULT:
	[('(2,2),(1,1)',), ('(4,4),(2,2)',), ('(40,4.3333333333),(-3,1)',)]

-----------
QUERY:

EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 <<| '(10,4.33334),(5,100)';
RESULT:
	[('Index Only Scan using box_spgist on box_temp',), ("  Index Cond: (f1 <<| '(10,100),(5,4.33334)'::box)",)]

-----------
QUERY:


SELECT * FROM box_temp WHERE f1 &<| '(10,4.3333334),(5,1)';
RESULT:
	[('(2,2),(1,1)',), ('(4,4),(2,2)',), ('(40,4.3333333333),(-3,1)',)]

-----------
QUERY:

EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 &<| '(10,4.3333334),(5,1)';
RESULT:
	[('Index Only Scan using box_spgist on box_temp',), ("  Index Cond: (f1 &<| '(10,4.3333334),(5,1)'::box)",)]

-----------
QUERY:


SELECT * FROM box_temp WHERE f1 |&> '(49.99,49.99),(49.99,49.99)';
RESULT:
	[('(100,100),(50,50)',), ('(0,Infinity),(0,100)',)]

-----------
QUERY:

EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 |&> '(49.99,49.99),(49.99,49.99)';
RESULT:
	[('Index Only Scan using box_spgist on box_temp',), ("  Index Cond: (f1 |&> '(49.99,49.99),(49.99,49.99)'::box)",)]

-----------
QUERY:


SELECT * FROM box_temp WHERE f1 |>> '(37,38),(39,40)';
RESULT:
	[('(82,82),(41,41)',), ('(84,84),(42,42)',), ('(86,86),(43,43)',), ('(88,88),(44,44)',), ('(90,90),(45,45)',), ('(92,92),(46,46)',), ('(94,94),(47,47)',), ('(96,96),(48,48)',), ('(98,98),(49,49)',), ('(100,100),(50,50)',), ('(0,Infinity),(0,100)',)]

-----------
QUERY:

EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 |>> '(37,38),(39,40)';
RESULT:
	[('Index Only Scan using box_spgist on box_temp',), ("  Index Cond: (f1 |>> '(39,40),(37,38)'::box)",)]

-----------
QUERY:


SELECT * FROM box_temp WHERE f1 @> '(10,11),(15,16)';
RESULT:
	[('(16,16),(8,8)',), ('(18,18),(9,9)',), ('(20,20),(10,10)',), ('(Infinity,Infinity),(-Infinity,-Infinity)',)]

-----------
QUERY:

EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 @> '(10,11),(15,15)';
RESULT:
	[('Index Only Scan using box_spgist on box_temp',), ("  Index Cond: (f1 @> '(15,15),(10,11)'::box)",)]

-----------
QUERY:


SELECT * FROM box_temp WHERE f1 <@ '(10,15),(30,35)';
RESULT:
	[('(30,30),(15,15)',)]

-----------
QUERY:

EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 <@ '(10,15),(30,35)';
RESULT:
	[('Index Only Scan using box_spgist on box_temp',), ("  Index Cond: (f1 <@ '(30,35),(10,15)'::box)",)]

-----------
QUERY:


SELECT * FROM box_temp WHERE f1 ~= '(20,20),(40,40)';
RESULT:
	[('(40,40),(20,20)',)]

-----------
QUERY:

EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 ~= '(20,20),(40,40)';
RESULT:
	[('Index Only Scan using box_spgist on box_temp',), ("  Index Cond: (f1 ~= '(40,40),(20,20)'::box)",)]

-----------
QUERY:


RESET enable_seqscan;
RESULT:
	[]

-----------
QUERY:


DROP INDEX box_spgist;
RESULT:
	[]

-----------
QUERY:


--
-- Test the SP-GiST index on the larger volume of data
--
CREATE TABLE quad_box_tbl (id int, b box);
RESULT:
	[]

-----------
QUERY:


INSERT INTO quad_box_tbl
  SELECT (x - 1) * 100 + y, box(point(x * 10, y * 10), point(x * 10 + 5, y * 10 + 5))
  FROM generate_series(1, 100) x,
       generate_series(1, 100) y;
RESULT:
	[]

-----------
QUERY:


-- insert repeating data to test allTheSame
INSERT INTO quad_box_tbl
  SELECT i, '((200, 300),(210, 310))'
  FROM generate_series(10001, 11000) AS i;
RESULT:
	[]

-----------
QUERY:


INSERT INTO quad_box_tbl
VALUES
  (11001, NULL),
  (11002, NULL),
  (11003, '((-infinity,-infinity),(infinity,infinity))'),
  (11004, '((-infinity,100),(-infinity,500))'),
  (11005, '((-infinity,-infinity),(700,infinity))');
RESULT:
	[]

-----------
QUERY:


CREATE INDEX quad_box_tbl_idx ON quad_box_tbl USING spgist(b);
RESULT:
	[]

-----------
QUERY:


-- get reference results for ORDER BY distance from seq scan
SET enable_seqscan = ON;
RESULT:
	[]

-----------
QUERY:

SET enable_indexscan = OFF;
RESULT:
	[]

-----------
QUERY:

SET enable_bitmapscan = OFF;
RESULT:
	[]

-----------
QUERY:


CREATE TABLE quad_box_tbl_ord_seq1 AS
SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id
FROM quad_box_tbl;
RESULT:
	[]

-----------
QUERY:


CREATE TABLE quad_box_tbl_ord_seq2 AS
SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id
FROM quad_box_tbl WHERE b <@ box '((200,300),(500,600))';
RESULT:
	[]

-----------
QUERY:


SET enable_seqscan = OFF;
RESULT:
	[]

-----------
QUERY:

SET enable_indexscan = ON;
RESULT:
	[]

-----------
QUERY:

SET enable_bitmapscan = ON;
RESULT:
	[]

-----------
QUERY:


SELECT count(*) FROM quad_box_tbl WHERE b <<  box '((100,200),(300,500))';
RESULT:
	[(901,)]

-----------
QUERY:

SELECT count(*) FROM quad_box_tbl WHERE b &<  box '((100,200),(300,500))';
RESULT:
	[(3901,)]

-----------
QUERY:

SELECT count(*) FROM quad_box_tbl WHERE b &&  box '((100,200),(300,500))';
RESULT:
	[(1653,)]

-----------
QUERY:

SELECT count(*) FROM quad_box_tbl WHERE b &>  box '((100,200),(300,500))';
RESULT:
	[(10100,)]

-----------
QUERY:

SELECT count(*) FROM quad_box_tbl WHERE b >>  box '((100,200),(300,500))';
RESULT:
	[(7000,)]

-----------
QUERY:

SELECT count(*) FROM quad_box_tbl WHERE b >>  box '((100,200),(300,500))';
RESULT:
	[(7000,)]

-----------
QUERY:

SELECT count(*) FROM quad_box_tbl WHERE b <<| box '((100,200),(300,500))';
RESULT:
	[(1900,)]

-----------
QUERY:

SELECT count(*) FROM quad_box_tbl WHERE b &<| box '((100,200),(300,500))';
RESULT:
	[(5901,)]

-----------
QUERY:

SELECT count(*) FROM quad_box_tbl WHERE b |&> box '((100,200),(300,500))';
RESULT:
	[(9100,)]

-----------
QUERY:

SELECT count(*) FROM quad_box_tbl WHERE b |>> box '((100,200),(300,500))';
RESULT:
	[(5000,)]

-----------
QUERY:

SELECT count(*) FROM quad_box_tbl WHERE b @>  box '((201,301),(202,303))';
RESULT:
	[(1003,)]

-----------
QUERY:

SELECT count(*) FROM quad_box_tbl WHERE b <@  box '((100,200),(300,500))';
RESULT:
	[(1600,)]

-----------
QUERY:

SELECT count(*) FROM quad_box_tbl WHERE b ~=  box '((200,300),(205,305))';
RESULT:
	[(1,)]

-----------
QUERY:


-- test ORDER BY distance
SET enable_indexscan = ON;
RESULT:
	[]

-----------
QUERY:

SET enable_bitmapscan = OFF;
RESULT:
	[]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id
FROM quad_box_tbl;
RESULT:
	[('WindowAgg',), ('  ->  Index Scan using quad_box_tbl_idx on quad_box_tbl',), ("        Order By: (b <-> '(123,456)'::point)",)]

-----------
QUERY:


CREATE TEMP TABLE quad_box_tbl_ord_idx1 AS
SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id
FROM quad_box_tbl;
RESULT:
	[]

-----------
QUERY:


SELECT *
FROM quad_box_tbl_ord_seq1 seq FULL JOIN quad_box_tbl_ord_idx1 idx
	ON seq.n = idx.n AND seq.id = idx.id AND
		(seq.dist = idx.dist OR seq.dist IS NULL AND idx.dist IS NULL)
WHERE seq.id IS NULL OR idx.id IS NULL;
RESULT:
	[]

-----------
QUERY:



EXPLAIN (COSTS OFF)
SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id
FROM quad_box_tbl WHERE b <@ box '((200,300),(500,600))';
RESULT:
	[('WindowAgg',), ('  ->  Index Scan using quad_box_tbl_idx on quad_box_tbl',), ("        Index Cond: (b <@ '(500,600),(200,300)'::box)",), ("        Order By: (b <-> '(123,456)'::point)",)]

-----------
QUERY:


CREATE TEMP TABLE quad_box_tbl_ord_idx2 AS
SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id
FROM quad_box_tbl WHERE b <@ box '((200,300),(500,600))';
RESULT:
	[]

-----------
QUERY:


SELECT *
FROM quad_box_tbl_ord_seq2 seq FULL JOIN quad_box_tbl_ord_idx2 idx
	ON seq.n = idx.n AND seq.id = idx.id AND
		(seq.dist = idx.dist OR seq.dist IS NULL AND idx.dist IS NULL)
WHERE seq.id IS NULL OR idx.id IS NULL;
RESULT:
	[]

-----------
QUERY:


RESET enable_seqscan;
RESULT:
	[]

-----------
QUERY:

RESET enable_indexscan;
RESULT:
	[]

-----------
QUERY:

RESET enable_bitmapscan;
RESULT:
	[]

-----------
QUERY:


-- test non-error-throwing API for some core types
SELECT pg_input_is_valid('200', 'box');
RESULT:
	[(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('200', 'box');
RESULT:
	[('invalid input syntax for type box: "200"', None, None, '22P02')]

-----------
QUERY:

SELECT pg_input_is_valid('((200,300),(500, xyz))', 'box');
RESULT:
	[(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('((200,300),(500, xyz))', 'box');
RESULT:
	[('invalid input syntax for type box: "((200,300),(500, xyz))"', None, None, '22P02')]
