Guest DBMS identified: postgres
-----------
QUERY:
--
-- BOX
--

--
-- box logic
--	     o
-- 3	  o--|X
--	  |  o|
-- 2	+-+-+ |
--	| | | |
-- 1	| o-+-o
--	|   |
-- 0	+---+
--
--	0 1 2 3
--

-- boxes are specified by two points, given by four floats x1,y1,x2,y2


CREATE TABLE BOX_TBL (f1 box)
RESULT: []

-----------
QUERY:
INSERT INTO BOX_TBL (f1) VALUES ('(2.0,2.0,0.0,0.0)')
RESULT: []

-----------
QUERY:
INSERT INTO BOX_TBL (f1) VALUES ('(1.0,1.0,3.0,3.0)')
RESULT: []

-----------
QUERY:
INSERT INTO BOX_TBL (f1) VALUES ('((-8, 2), (-2, -10))')
RESULT: []

-----------
QUERY:
-- degenerate cases where the box is a line or a point
-- note that lines and points boxes all have zero area
INSERT INTO BOX_TBL (f1) VALUES ('(2.5, 2.5, 2.5,3.5)')
RESULT: []

-----------
QUERY:
INSERT INTO BOX_TBL (f1) VALUES ('(3.0, 3.0,3.0,3.0)')
RESULT: []

-----------
QUERY:
-- badly formatted box inputs
INSERT INTO BOX_TBL (f1) VALUES ('(2.3, 4.5)')
RESULT: []

-----------
QUERY:
INSERT INTO BOX_TBL (f1) VALUES ('[1, 2, 3, 4)')
RESULT: []

-----------
QUERY:
INSERT INTO BOX_TBL (f1) VALUES ('(1, 2, 3, 4]')
RESULT: []

-----------
QUERY:
INSERT INTO BOX_TBL (f1) VALUES ('(1, 2, 3, 4) x')
RESULT: []

-----------
QUERY:
INSERT INTO BOX_TBL (f1) VALUES ('asdfasdf(ad')
RESULT: []

-----------
QUERY:
SELECT * FROM BOX_TBL
RESULT: []

-----------
QUERY:
SELECT b.*, area(b.f1) as barea
   FROM BOX_TBL b
RESULT: []

-----------
QUERY:
-- overlap
SELECT b.f1
   FROM BOX_TBL b
   WHERE b.f1 && box '(2.5,2.5,1.0,1.0)'
RESULT: []

-----------
QUERY:
-- left-or-overlap (x only)
SELECT b1.*
   FROM BOX_TBL b1
   WHERE b1.f1 &< box '(2.0,2.0,2.5,2.5)'
RESULT: []

-----------
QUERY:
-- right-or-overlap (x only)
SELECT b1.*
   FROM BOX_TBL b1
   WHERE b1.f1 &> box '(2.0,2.0,2.5,2.5)'
RESULT: []

-----------
QUERY:
-- left of
SELECT b.f1
   FROM BOX_TBL b
   WHERE b.f1 << box '(3.0,3.0,5.0,5.0)'
RESULT: []

-----------
QUERY:
-- area <=
SELECT b.f1
   FROM BOX_TBL b
   WHERE b.f1 <= box '(3.0,3.0,5.0,5.0)'
RESULT: []

-----------
QUERY:
-- area <
SELECT b.f1
   FROM BOX_TBL b
   WHERE b.f1 < box '(3.0,3.0,5.0,5.0)'
RESULT: []

-----------
QUERY:
-- area =
SELECT b.f1
   FROM BOX_TBL b
   WHERE b.f1 = box '(3.0,3.0,5.0,5.0)'
RESULT: []

-----------
QUERY:
-- area >
SELECT b.f1
   FROM BOX_TBL b				-- zero area
   WHERE b.f1 > box '(3.5,3.0,4.5,3.0)'
RESULT: []

-----------
QUERY:
-- area >=
SELECT b.f1
   FROM BOX_TBL b				-- zero area
   WHERE b.f1 >= box '(3.5,3.0,4.5,3.0)'
RESULT: []

-----------
QUERY:
-- right of
SELECT b.f1
   FROM BOX_TBL b
   WHERE box '(3.0,3.0,5.0,5.0)' >> b.f1
RESULT: []

-----------
QUERY:
-- contained in
SELECT b.f1
   FROM BOX_TBL b
   WHERE b.f1 <@ box '(0,0,3,3)'
RESULT: []

-----------
QUERY:
-- contains
SELECT b.f1
   FROM BOX_TBL b
   WHERE box '(0,0,3,3)' @> b.f1
RESULT: []

-----------
QUERY:
-- box equality
SELECT b.f1
   FROM BOX_TBL b
   WHERE box '(1,1,3,3)' ~= b.f1
RESULT: []

-----------
QUERY:
-- center of box, left unary operator
SELECT @@(b1.f1) AS p
   FROM BOX_TBL b1
RESULT: []

-----------
QUERY:
-- wholly-contained
SELECT b1.*, b2.*
   FROM BOX_TBL b1, BOX_TBL b2
   WHERE b1.f1 @> b2.f1 and not b1.f1 ~= b2.f1
RESULT: []

-----------
QUERY:
SELECT height(f1), width(f1) FROM BOX_TBL
RESULT: []

-----------
QUERY:
--
-- Test the SP-GiST index
--

CREATE TEMPORARY TABLE box_temp (f1 box)
RESULT: []

-----------
QUERY:
INSERT INTO box_temp
	SELECT box(point(i, i), point(i * 2, i * 2))
	FROM generate_series(1, 50) AS i
RESULT: []

-----------
QUERY:
CREATE INDEX box_spgist ON box_temp USING spgist (f1)
RESULT: []

-----------
QUERY:
INSERT INTO box_temp
	VALUES (NULL),
		   ('(0,0)(0,100)'),
		   ('(-3,4.3333333333)(40,1)'),
		   ('(0,100)(0,infinity)'),
		   ('(-infinity,0)(0,infinity)'),
		   ('(-infinity,-infinity)(infinity,infinity)')
RESULT: []

-----------
QUERY:
SET enable_seqscan = false
RESULT: []

-----------
QUERY:
SELECT * FROM box_temp WHERE f1 << '(10,20),(30,40)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 << '(10,20),(30,40)'
RESULT: []

-----------
QUERY:
SELECT * FROM box_temp WHERE f1 &< '(10,4.333334),(5,100)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 &< '(10,4.333334),(5,100)'
RESULT: []

-----------
QUERY:
SELECT * FROM box_temp WHERE f1 && '(15,20),(25,30)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 && '(15,20),(25,30)'
RESULT: []

-----------
QUERY:
SELECT * FROM box_temp WHERE f1 &> '(40,30),(45,50)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 &> '(40,30),(45,50)'
RESULT: []

-----------
QUERY:
SELECT * FROM box_temp WHERE f1 >> '(30,40),(40,30)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 >> '(30,40),(40,30)'
RESULT: []

-----------
QUERY:
SELECT * FROM box_temp WHERE f1 <<| '(10,4.33334),(5,100)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 <<| '(10,4.33334),(5,100)'
RESULT: []

-----------
QUERY:
SELECT * FROM box_temp WHERE f1 &<| '(10,4.3333334),(5,1)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 &<| '(10,4.3333334),(5,1)'
RESULT: []

-----------
QUERY:
SELECT * FROM box_temp WHERE f1 |&> '(49.99,49.99),(49.99,49.99)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 |&> '(49.99,49.99),(49.99,49.99)'
RESULT: []

-----------
QUERY:
SELECT * FROM box_temp WHERE f1 |>> '(37,38),(39,40)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 |>> '(37,38),(39,40)'
RESULT: []

-----------
QUERY:
SELECT * FROM box_temp WHERE f1 @> '(10,11),(15,16)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 @> '(10,11),(15,15)'
RESULT: []

-----------
QUERY:
SELECT * FROM box_temp WHERE f1 <@ '(10,15),(30,35)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 <@ '(10,15),(30,35)'
RESULT: []

-----------
QUERY:
SELECT * FROM box_temp WHERE f1 ~= '(20,20),(40,40)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM box_temp WHERE f1 ~= '(20,20),(40,40)'
RESULT: []

-----------
QUERY:
RESET enable_seqscan
RESULT: []

-----------
QUERY:
DROP INDEX box_spgist
RESULT: []

-----------
QUERY:
--
-- Test the SP-GiST index on the larger volume of data
--
CREATE TABLE quad_box_tbl (id int, b box)
RESULT: []

-----------
QUERY:
INSERT INTO quad_box_tbl
  SELECT (x - 1) * 100 + y, box(point(x * 10, y * 10), point(x * 10 + 5, y * 10 + 5))
  FROM generate_series(1, 100) x,
       generate_series(1, 100) y
RESULT: []

-----------
QUERY:
-- insert repeating data to test allTheSame
INSERT INTO quad_box_tbl
  SELECT i, '((200, 300),(210, 310))'
  FROM generate_series(10001, 11000) AS i
RESULT: []

-----------
QUERY:
INSERT INTO quad_box_tbl
VALUES
  (11001, NULL),
  (11002, NULL),
  (11003, '((-infinity,-infinity),(infinity,infinity))'),
  (11004, '((-infinity,100),(-infinity,500))'),
  (11005, '((-infinity,-infinity),(700,infinity))')
RESULT: []

-----------
QUERY:
CREATE INDEX quad_box_tbl_idx ON quad_box_tbl USING spgist(b)
RESULT: []

-----------
QUERY:
-- get reference results for ORDER BY distance from seq scan
SET enable_seqscan = ON
RESULT: []

-----------
QUERY:
SET enable_indexscan = OFF
RESULT: []

-----------
QUERY:
SET enable_bitmapscan = OFF
RESULT: []

-----------
QUERY:
CREATE TABLE quad_box_tbl_ord_seq1 AS
SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id
FROM quad_box_tbl
RESULT: []

-----------
QUERY:
CREATE TABLE quad_box_tbl_ord_seq2 AS
SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id
FROM quad_box_tbl WHERE b <@ box '((200,300),(500,600))'
RESULT: []

-----------
QUERY:
SET enable_seqscan = OFF
RESULT: []

-----------
QUERY:
SET enable_indexscan = ON
RESULT: []

-----------
QUERY:
SET enable_bitmapscan = ON
RESULT: []

-----------
QUERY:
SELECT count(*) FROM quad_box_tbl WHERE b <<  box '((100,200),(300,500))'
RESULT: []

-----------
QUERY:
SELECT count(*) FROM quad_box_tbl WHERE b &<  box '((100,200),(300,500))'
RESULT: []

-----------
QUERY:
SELECT count(*) FROM quad_box_tbl WHERE b &&  box '((100,200),(300,500))'
RESULT: []

-----------
QUERY:
SELECT count(*) FROM quad_box_tbl WHERE b &>  box '((100,200),(300,500))'
RESULT: []

-----------
QUERY:
SELECT count(*) FROM quad_box_tbl WHERE b >>  box '((100,200),(300,500))'
RESULT: []

-----------
QUERY:
SELECT count(*) FROM quad_box_tbl WHERE b >>  box '((100,200),(300,500))'
RESULT: []

-----------
QUERY:
SELECT count(*) FROM quad_box_tbl WHERE b <<| box '((100,200),(300,500))'
RESULT: []

-----------
QUERY:
SELECT count(*) FROM quad_box_tbl WHERE b &<| box '((100,200),(300,500))'
RESULT: []

-----------
QUERY:
SELECT count(*) FROM quad_box_tbl WHERE b |&> box '((100,200),(300,500))'
RESULT: []

-----------
QUERY:
SELECT count(*) FROM quad_box_tbl WHERE b |>> box '((100,200),(300,500))'
RESULT: []

-----------
QUERY:
SELECT count(*) FROM quad_box_tbl WHERE b @>  box '((201,301),(202,303))'
RESULT: []

-----------
QUERY:
SELECT count(*) FROM quad_box_tbl WHERE b <@  box '((100,200),(300,500))'
RESULT: []

-----------
QUERY:
SELECT count(*) FROM quad_box_tbl WHERE b ~=  box '((200,300),(205,305))'
RESULT: []

-----------
QUERY:
-- test ORDER BY distance
SET enable_indexscan = ON
RESULT: []

-----------
QUERY:
SET enable_bitmapscan = OFF
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF)
SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id
FROM quad_box_tbl
RESULT: []

-----------
QUERY:
CREATE TEMP TABLE quad_box_tbl_ord_idx1 AS
SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id
FROM quad_box_tbl
RESULT: []

-----------
QUERY:
SELECT *
FROM quad_box_tbl_ord_seq1 seq FULL JOIN quad_box_tbl_ord_idx1 idx
	ON seq.n = idx.n AND seq.id = idx.id AND
		(seq.dist = idx.dist OR seq.dist IS NULL AND idx.dist IS NULL)
WHERE seq.id IS NULL OR idx.id IS NULL
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF)
SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id
FROM quad_box_tbl WHERE b <@ box '((200,300),(500,600))'
RESULT: []

-----------
QUERY:
CREATE TEMP TABLE quad_box_tbl_ord_idx2 AS
SELECT rank() OVER (ORDER BY b <-> point '123,456') n, b <-> point '123,456' dist, id
FROM quad_box_tbl WHERE b <@ box '((200,300),(500,600))'
RESULT: []

-----------
QUERY:
SELECT *
FROM quad_box_tbl_ord_seq2 seq FULL JOIN quad_box_tbl_ord_idx2 idx
	ON seq.n = idx.n AND seq.id = idx.id AND
		(seq.dist = idx.dist OR seq.dist IS NULL AND idx.dist IS NULL)
WHERE seq.id IS NULL OR idx.id IS NULL
RESULT: []

-----------
QUERY:
RESET enable_seqscan
RESULT: []

-----------
QUERY:
RESET enable_indexscan
RESULT: []

-----------
QUERY:
RESET enable_bitmapscan
RESULT: []

-----------
QUERY:
-- test non-error-throwing API for some core types
SELECT pg_input_is_valid('200', 'box')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('200', 'box')
RESULT: []

-----------
QUERY:
SELECT pg_input_is_valid('((200,300),(500, xyz))', 'box')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('((200,300),(500, xyz))', 'box')
RESULT: []
=========================================
Summary for test case box/test.sql of postgres
=========================================
