Guest DBMS identified: postgres
-----------
QUERY:
--
-- CHAR
--

-- Per SQL standard, CHAR means character(1), that is a varlena type
-- with a constraint restricting it to one character (not byte)

SELECT char 'c' = char 'c' AS true
RESULT: []

-----------
QUERY:
--
-- Build a table for testing
-- (This temporarily hides the table created in test_setup.sql)
--

CREATE TEMP TABLE CHAR_TBL(f1 char)
RESULT: []

-----------
QUERY:
INSERT INTO CHAR_TBL (f1) VALUES ('a')
RESULT: []

-----------
QUERY:
INSERT INTO CHAR_TBL (f1) VALUES ('A')
RESULT: []

-----------
QUERY:
-- any of the following three input formats are acceptable
INSERT INTO CHAR_TBL (f1) VALUES ('1')
RESULT: []

-----------
QUERY:
INSERT INTO CHAR_TBL (f1) VALUES (2)
RESULT: []

-----------
QUERY:
INSERT INTO CHAR_TBL (f1) VALUES ('3')
RESULT: []

-----------
QUERY:
-- zero-length char
INSERT INTO CHAR_TBL (f1) VALUES ('')
RESULT: []

-----------
QUERY:
-- try char/* REPLACED */''s of greater than 1 length
INSERT INTO CHAR_TBL (f1) VALUES ('cd')
RESULT: []

-----------
QUERY:
INSERT INTO CHAR_TBL (f1) VALUES ('c     ')
RESULT: []

-----------
QUERY:
SELECT * FROM CHAR_TBL
RESULT: []

-----------
QUERY:
SELECT c.*
   FROM CHAR_TBL c
   WHERE c.f1 <> 'a'
RESULT: []

-----------
QUERY:
SELECT c.*
   FROM CHAR_TBL c
   WHERE c.f1 = 'a'
RESULT: []

-----------
QUERY:
SELECT c.*
   FROM CHAR_TBL c
   WHERE c.f1 < 'a'
RESULT: []

-----------
QUERY:
SELECT c.*
   FROM CHAR_TBL c
   WHERE c.f1 <= 'a'
RESULT: []

-----------
QUERY:
SELECT c.*
   FROM CHAR_TBL c
   WHERE c.f1 > 'a'
RESULT: []

-----------
QUERY:
SELECT c.*
   FROM CHAR_TBL c
   WHERE c.f1 >= 'a'
RESULT: []

-----------
QUERY:
DROP TABLE CHAR_TBL
RESULT: []

-----------
QUERY:
--
-- Now test longer arrays of char
--
-- This char_tbl was already created and filled in test_setup.sql.
-- Here we just try to insert bad values.
--

INSERT INTO CHAR_TBL (f1) VALUES ('abcde')
RESULT: []

-----------
QUERY:
SELECT * FROM CHAR_TBL
RESULT: []

-----------
QUERY:
-- Also try it with non-error-throwing API
SELECT pg_input_is_valid('abcd  ', 'char(4)')
RESULT: []

-----------
QUERY:
SELECT pg_input_is_valid('abcde', 'char(4)')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('abcde', 'char(4)')
RESULT: []

-----------
QUERY:
--
-- Also test /* REPLACED */''char/* REPLACED */'', which is an ad-hoc one-byte type.  It can only
-- really store ASCII characters, but we allow high-bit-set characters
-- to be accessed via bytea-like escapes.
--

SELECT 'a'::"char"
RESULT: []

-----------
QUERY:
SELECT '\101'::"char"
RESULT: []

-----------
QUERY:
SELECT '\377'::"char"
RESULT: []

-----------
QUERY:
SELECT 'a'::"char"::text
RESULT: []

-----------
QUERY:
SELECT '\377'::"char"::text
RESULT: []

-----------
QUERY:
SELECT '\000'::"char"::text
RESULT: []

-----------
QUERY:
SELECT 'a'::text::"char"
RESULT: []

-----------
QUERY:
SELECT '\377'::text::"char"
RESULT: []

-----------
QUERY:
SELECT ''::text::"char"
RESULT: []
=========================================
Summary for test case char/test.sql of postgres
=========================================
