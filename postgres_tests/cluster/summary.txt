Guest DBMS identified: postgres
-----------
QUERY:
--
--  CLUSTER
--

CREATE TABLE clstr_tst_s (rf_a SERIAL PRIMARY KEY,
	b INT)
RESULT: []

-----------
QUERY:
CREATE TABLE clstr_tst (a SERIAL PRIMARY KEY,
	b INT,
	c TEXT,
	d TEXT,
	CONSTRAINT clstr_tst_con FOREIGN KEY (b) REFERENCES clstr_tst_s)
RESULT: []

-----------
QUERY:
CREATE INDEX clstr_tst_b ON clstr_tst (b)
RESULT: []

-----------
QUERY:
CREATE INDEX clstr_tst_c ON clstr_tst (c)
RESULT: []

-----------
QUERY:
CREATE INDEX clstr_tst_c_b ON clstr_tst (c,b)
RESULT: []

-----------
QUERY:
CREATE INDEX clstr_tst_b_c ON clstr_tst (b,c)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst_s (b) VALUES (0)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst_s (b) SELECT b FROM clstr_tst_s
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst_s (b) SELECT b FROM clstr_tst_s
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst_s (b) SELECT b FROM clstr_tst_s
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst_s (b) SELECT b FROM clstr_tst_s
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst_s (b) SELECT b FROM clstr_tst_s
RESULT: []

-----------
QUERY:
CREATE TABLE clstr_tst_inh () INHERITS (clstr_tst)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (11, 'once')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (10, 'diez')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (31, 'treinta y uno')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (22, 'veintidos')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (3, 'tres')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (20, 'veinte')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (23, 'veintitres')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (21, 'veintiuno')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (4, 'cuatro')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (14, 'catorce')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (2, 'dos')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (18, 'dieciocho')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (27, 'veintisiete')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (25, 'veinticinco')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (13, 'trece')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (28, 'veintiocho')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (32, 'treinta y dos')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (5, 'cinco')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (29, 'veintinueve')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (1, 'uno')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (24, 'veinticuatro')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (30, 'treinta')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (12, 'doce')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (17, 'diecisiete')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (9, 'nueve')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (19, 'diecinueve')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (26, 'veintiseis')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (15, 'quince')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (7, 'siete')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (16, 'dieciseis')
RESULT: []

-----------
QUERY:
INSERT INTO clstr_tst (b, c) VALUES (8, 'ocho')
RESULT: []

-----------
QUERY:
-- This entry is needed to test that TOASTED values are copied correctly.
INSERT INTO clstr_tst (b, c, d) VALUES (6, 'seis', repeat('xyzzy', 100000))
RESULT: []

-----------
QUERY:
CLUSTER clstr_tst_c ON clstr_tst
RESULT: []

-----------
QUERY:
SELECT a,b,c,substring(d for 30), length(d) from clstr_tst
RESULT: []

-----------
QUERY:
SELECT a,b,c,substring(d for 30), length(d) from clstr_tst ORDER BY a
RESULT: []

-----------
QUERY:
SELECT a,b,c,substring(d for 30), length(d) from clstr_tst ORDER BY b
RESULT: []

-----------
QUERY:
SELECT a,b,c,substring(d for 30), length(d) from clstr_tst ORDER BY c
RESULT: []

-----------
QUERY:
-- Verify that inheritance link still works
INSERT INTO clstr_tst_inh VALUES (0, 100, 'in child table')
RESULT: []

-----------
QUERY:
SELECT a,b,c,substring(d for 30), length(d) from clstr_tst
RESULT: []

-----------
QUERY:
-- Verify that foreign key link still works
INSERT INTO clstr_tst (b, c) VALUES (1111, 'this should fail')
RESULT: []

-----------
QUERY:
SELECT conname FROM pg_constraint WHERE conrelid = 'clstr_tst'::regclass
ORDER BY 1
RESULT: []

-----------
QUERY:
SELECT relname, relkind,
    EXISTS(SELECT 1 FROM pg_class WHERE oid = c.reltoastrelid) AS hastoast
FROM pg_class c WHERE relname LIKE 'clstr_tst%' ORDER BY relname
RESULT: []

-----------
QUERY:
-- Verify that indisclustered is correctly set
SELECT pg_class.relname FROM pg_index, pg_class, pg_class AS pg_class_2
WHERE pg_class.oid=indexrelid
	AND indrelid=pg_class_2.oid
	AND pg_class_2.relname = 'clstr_tst'
	AND indisclustered
RESULT: []

-----------
QUERY:
-- Try changing indisclustered
ALTER TABLE clstr_tst CLUSTER ON clstr_tst_b_c
RESULT: []

-----------
QUERY:
SELECT pg_class.relname FROM pg_index, pg_class, pg_class AS pg_class_2
WHERE pg_class.oid=indexrelid
	AND indrelid=pg_class_2.oid
	AND pg_class_2.relname = 'clstr_tst'
	AND indisclustered
RESULT: []

-----------
QUERY:
-- Try turning off all clustering
ALTER TABLE clstr_tst SET WITHOUT CLUSTER
RESULT: []

-----------
QUERY:
SELECT pg_class.relname FROM pg_index, pg_class, pg_class AS pg_class_2
WHERE pg_class.oid=indexrelid
	AND indrelid=pg_class_2.oid
	AND pg_class_2.relname = 'clstr_tst'
	AND indisclustered
RESULT: []

-----------
QUERY:
-- Verify that toast tables are clusterable
CLUSTER pg_toast.pg_toast_826 USING pg_toast_826_index
RESULT: []

-----------
QUERY:
-- Verify that clustering all tables does in fact cluster the right ones
CREATE USER regress_clstr_user
RESULT: []

-----------
QUERY:
CREATE TABLE clstr_1 (a INT PRIMARY KEY)
RESULT: []

-----------
QUERY:
CREATE TABLE clstr_2 (a INT PRIMARY KEY)
RESULT: []

-----------
QUERY:
CREATE TABLE clstr_3 (a INT PRIMARY KEY)
RESULT: []

-----------
QUERY:
ALTER TABLE clstr_1 OWNER TO regress_clstr_user
RESULT: []

-----------
QUERY:
ALTER TABLE clstr_3 OWNER TO regress_clstr_user
RESULT: []

-----------
QUERY:
GRANT SELECT ON clstr_2 TO regress_clstr_user
RESULT: []

-----------
QUERY:
INSERT INTO clstr_1 VALUES (2)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_1 VALUES (1)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_2 VALUES (2)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_2 VALUES (1)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_3 VALUES (2)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_3 VALUES (1)
RESULT: []

-----------
QUERY:
-- /* REPLACED */''CLUSTER <tablename>/* REPLACED */'' on a table that hasn/* REPLACED */''t been clustered
CLUSTER clstr_2
RESULT: []

-----------
QUERY:
CLUSTER clstr_1_pkey ON clstr_1
RESULT: []

-----------
QUERY:
CLUSTER clstr_2 USING clstr_2_pkey
RESULT: []

-----------
QUERY:
SELECT * FROM clstr_1 UNION ALL
  SELECT * FROM clstr_2 UNION ALL
  SELECT * FROM clstr_3
RESULT: []

-----------
QUERY:
-- revert to the original state
DELETE FROM clstr_1
RESULT: []

-----------
QUERY:
DELETE FROM clstr_2
RESULT: []

-----------
QUERY:
DELETE FROM clstr_3
RESULT: []

-----------
QUERY:
INSERT INTO clstr_1 VALUES (2)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_1 VALUES (1)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_2 VALUES (2)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_2 VALUES (1)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_3 VALUES (2)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_3 VALUES (1)
RESULT: []

-----------
QUERY:
-- this user can only cluster clstr_1 and clstr_3, but the latter
-- has not been clustered
SET SESSION AUTHORIZATION regress_clstr_user
RESULT: []

-----------
QUERY:
SET client_min_messages = ERROR
RESULT: []

-----------
QUERY:
-- order of /* REPLACED */''skipping/* REPLACED */'' warnings may vary
CLUSTER
RESULT: []

-----------
QUERY:
RESET client_min_messages
RESULT: []

-----------
QUERY:
SELECT * FROM clstr_1 UNION ALL
  SELECT * FROM clstr_2 UNION ALL
  SELECT * FROM clstr_3
RESULT: []

-----------
QUERY:
-- cluster a single table using the indisclustered bit previously set
DELETE FROM clstr_1
RESULT: []

-----------
QUERY:
INSERT INTO clstr_1 VALUES (2)
RESULT: []

-----------
QUERY:
INSERT INTO clstr_1 VALUES (1)
RESULT: []

-----------
QUERY:
CLUSTER clstr_1
RESULT: []

-----------
QUERY:
SELECT * FROM clstr_1
RESULT: []

-----------
QUERY:
-- Test MVCC-safety of cluster. There isn/* REPLACED */''t much we can do to verify the
-- results with a single backend...

CREATE TABLE clustertest (key int PRIMARY KEY)
RESULT: []

-----------
QUERY:
INSERT INTO clustertest VALUES (10)
RESULT: []

-----------
QUERY:
INSERT INTO clustertest VALUES (20)
RESULT: []

-----------
QUERY:
INSERT INTO clustertest VALUES (30)
RESULT: []

-----------
QUERY:
INSERT INTO clustertest VALUES (40)
RESULT: []

-----------
QUERY:
INSERT INTO clustertest VALUES (50)
RESULT: []

-----------
QUERY:
-- Use a transaction so that updates are not committed when CLUSTER sees /* REPLACED */''em
BEGIN
RESULT: []

-----------
QUERY:
-- Test update where the old row version is found first in the scan
UPDATE clustertest SET key = 100 WHERE key = 10
RESULT: []

-----------
QUERY:
-- Test update where the new row version is found first in the scan
UPDATE clustertest SET key = 35 WHERE key = 40
RESULT: []

-----------
QUERY:
-- Test longer update chain
UPDATE clustertest SET key = 60 WHERE key = 50
RESULT: []

-----------
QUERY:
UPDATE clustertest SET key = 70 WHERE key = 60
RESULT: []

-----------
QUERY:
UPDATE clustertest SET key = 80 WHERE key = 70
RESULT: []

-----------
QUERY:
SELECT * FROM clustertest
RESULT: []

-----------
QUERY:
CLUSTER clustertest_pkey ON clustertest
RESULT: []

-----------
QUERY:
SELECT * FROM clustertest
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
SELECT * FROM clustertest
RESULT: []

-----------
QUERY:
-- check that temp tables can be clustered
create temp table clstr_temp (col1 int primary key, col2 text)
RESULT: []

-----------
QUERY:
insert into clstr_temp values (2, 'two'), (1, 'one')
RESULT: []

-----------
QUERY:
cluster clstr_temp using clstr_temp_pkey
RESULT: []

-----------
QUERY:
select * from clstr_temp
RESULT: []

-----------
QUERY:
drop table clstr_temp
RESULT: []

-----------
QUERY:
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
-- check clustering an empty table
DROP TABLE clustertest
RESULT: []

-----------
QUERY:
CREATE TABLE clustertest (f1 int PRIMARY KEY)
RESULT: []

-----------
QUERY:
CLUSTER clustertest USING clustertest_pkey
RESULT: []

-----------
QUERY:
CLUSTER clustertest
RESULT: []

-----------
QUERY:
-- Check that partitioned tables can be clustered
CREATE TABLE clstrpart (a int) PARTITION BY RANGE (a)
RESULT: []

-----------
QUERY:
CREATE TABLE clstrpart1 PARTITION OF clstrpart FOR VALUES FROM (1) TO (10) PARTITION BY RANGE (a)
RESULT: []

-----------
QUERY:
CREATE TABLE clstrpart11 PARTITION OF clstrpart1 FOR VALUES FROM (1) TO (5)
RESULT: []

-----------
QUERY:
CREATE TABLE clstrpart12 PARTITION OF clstrpart1 FOR VALUES FROM (5) TO (10) PARTITION BY RANGE (a)
RESULT: []

-----------
QUERY:
CREATE TABLE clstrpart2 PARTITION OF clstrpart FOR VALUES FROM (10) TO (20)
RESULT: []

-----------
QUERY:
CREATE TABLE clstrpart3 PARTITION OF clstrpart DEFAULT PARTITION BY RANGE (a)
RESULT: []

-----------
QUERY:
CREATE TABLE clstrpart33 PARTITION OF clstrpart3 DEFAULT
RESULT: []

-----------
QUERY:
CREATE INDEX clstrpart_only_idx ON ONLY clstrpart (a)
RESULT: []

-----------
QUERY:
CLUSTER clstrpart USING clstrpart_only_idx
RESULT: []

-----------
QUERY:
-- fails
DROP INDEX clstrpart_only_idx
RESULT: []

-----------
QUERY:
CREATE INDEX clstrpart_idx ON clstrpart (a)
RESULT: []

-----------
QUERY:
-- Check that clustering sets new relfilenodes:
CREATE TEMP TABLE old_cluster_info AS SELECT relname, level, relfilenode, relkind FROM pg_partition_tree('clstrpart'::regclass) AS tree JOIN pg_class c ON c.oid=tree.relid
RESULT: []

-----------
QUERY:
CLUSTER clstrpart USING clstrpart_idx
RESULT: []

-----------
QUERY:
CREATE TEMP TABLE new_cluster_info AS SELECT relname, level, relfilenode, relkind FROM pg_partition_tree('clstrpart'::regclass) AS tree JOIN pg_class c ON c.oid=tree.relid
RESULT: []

-----------
QUERY:
SELECT relname, old.level, old.relkind, old.relfilenode = new.relfilenode FROM old_cluster_info AS old JOIN new_cluster_info AS new USING (relname) ORDER BY relname COLLATE "C"
RESULT: []

-----------
QUERY:
-- Partitioned indexes aren/* REPLACED */''t and can/* REPLACED */''t be marked un/clustered:
-- \d clstrpart
CLUSTER clstrpart
RESULT: []

-----------
QUERY:
ALTER TABLE clstrpart SET WITHOUT CLUSTER
RESULT: []

-----------
QUERY:
ALTER TABLE clstrpart CLUSTER ON clstrpart_idx
RESULT: []

-----------
QUERY:
DROP TABLE clstrpart
RESULT: []

-----------
QUERY:
-- Ownership of partitions is checked
CREATE TABLE ptnowner(i int unique) PARTITION BY LIST (i)
RESULT: []

-----------
QUERY:
CREATE INDEX ptnowner_i_idx ON ptnowner(i)
RESULT: []

-----------
QUERY:
CREATE TABLE ptnowner1 PARTITION OF ptnowner FOR VALUES IN (1)
RESULT: []

-----------
QUERY:
CREATE ROLE regress_ptnowner
RESULT: []

-----------
QUERY:
CREATE TABLE ptnowner2 PARTITION OF ptnowner FOR VALUES IN (2)
RESULT: []

-----------
QUERY:
ALTER TABLE ptnowner1 OWNER TO regress_ptnowner
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION regress_ptnowner
RESULT: []

-----------
QUERY:
CLUSTER ptnowner USING ptnowner_i_idx
RESULT: []

-----------
QUERY:
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
ALTER TABLE ptnowner OWNER TO regress_ptnowner
RESULT: []

-----------
QUERY:
CREATE TEMP TABLE ptnowner_oldnodes AS
  SELECT oid, relname, relfilenode FROM pg_partition_tree('ptnowner') AS tree
  JOIN pg_class AS c ON c.oid=tree.relid
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION regress_ptnowner
RESULT: []

-----------
QUERY:
CLUSTER ptnowner USING ptnowner_i_idx
RESULT: []

-----------
QUERY:
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
SELECT a.relname, a.relfilenode=b.relfilenode FROM pg_class a
  JOIN ptnowner_oldnodes b USING (oid) ORDER BY a.relname COLLATE "C"
RESULT: []

-----------
QUERY:
DROP TABLE ptnowner
RESULT: []

-----------
QUERY:
DROP ROLE regress_ptnowner
RESULT: []

-----------
QUERY:
-- Test CLUSTER with external tuplesorting

create table clstr_4 as select * from tenk1
RESULT: []

-----------
QUERY:
create index cluster_sort on clstr_4 (hundred, thousand, tenthous)
RESULT: []

-----------
QUERY:
-- ensure we don/* REPLACED */''t use the index in CLUSTER nor the checking SELECTs
set enable_indexscan = off
RESULT: []

-----------
QUERY:
-- Use external sort:
set maintenance_work_mem = '1MB'
RESULT: []

-----------
QUERY:
cluster clstr_4 using cluster_sort
RESULT: []

-----------
QUERY:
select * from
(select hundred, lag(hundred) over () as lhundred,
        thousand, lag(thousand) over () as lthousand,
        tenthous, lag(tenthous) over () as ltenthous from clstr_4) ss
where row(hundred, thousand, tenthous) <= row(lhundred, lthousand, ltenthous)
RESULT: []

-----------
QUERY:
reset enable_indexscan
RESULT: []

-----------
QUERY:
reset maintenance_work_mem
RESULT: []

-----------
QUERY:
-- test CLUSTER on expression index
CREATE TABLE clstr_expression(id serial primary key, a int, b text COLLATE "C")
RESULT: []

-----------
QUERY:
INSERT INTO clstr_expression(a, b) SELECT g.i % 42, 'prefix'||g.i FROM generate_series(1, 133) g(i)
RESULT: []

-----------
QUERY:
CREATE INDEX clstr_expression_minus_a ON clstr_expression ((-a), b)
RESULT: []

-----------
QUERY:
CREATE INDEX clstr_expression_upper_b ON clstr_expression ((upper(b)))
RESULT: []

-----------
QUERY:
-- verify indexes work before cluster
BEGIN
RESULT: []

-----------
QUERY:
SET LOCAL enable_seqscan = false
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM clstr_expression WHERE upper(b) = 'PREFIX3'
RESULT: []

-----------
QUERY:
SELECT * FROM clstr_expression WHERE upper(b) = 'PREFIX3'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM clstr_expression WHERE -a = -3 ORDER BY -a, b
RESULT: []

-----------
QUERY:
SELECT * FROM clstr_expression WHERE -a = -3 ORDER BY -a, b
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
-- and after clustering on clstr_expression_minus_a
CLUSTER clstr_expression USING clstr_expression_minus_a
RESULT: []

-----------
QUERY:
WITH rows AS
  (SELECT ctid, lag(a) OVER (ORDER BY ctid) AS la, a FROM clstr_expression)
SELECT * FROM rows WHERE la < a
RESULT: []

-----------
QUERY:
BEGIN
RESULT: []

-----------
QUERY:
SET LOCAL enable_seqscan = false
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM clstr_expression WHERE upper(b) = 'PREFIX3'
RESULT: []

-----------
QUERY:
SELECT * FROM clstr_expression WHERE upper(b) = 'PREFIX3'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM clstr_expression WHERE -a = -3 ORDER BY -a, b
RESULT: []

-----------
QUERY:
SELECT * FROM clstr_expression WHERE -a = -3 ORDER BY -a, b
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
-- and after clustering on clstr_expression_upper_b
CLUSTER clstr_expression USING clstr_expression_upper_b
RESULT: []

-----------
QUERY:
WITH rows AS
  (SELECT ctid, lag(b) OVER (ORDER BY ctid) AS lb, b FROM clstr_expression)
SELECT * FROM rows WHERE upper(lb) > upper(b)
RESULT: []

-----------
QUERY:
BEGIN
RESULT: []

-----------
QUERY:
SET LOCAL enable_seqscan = false
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM clstr_expression WHERE upper(b) = 'PREFIX3'
RESULT: []

-----------
QUERY:
SELECT * FROM clstr_expression WHERE upper(b) = 'PREFIX3'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF) SELECT * FROM clstr_expression WHERE -a = -3 ORDER BY -a, b
RESULT: []

-----------
QUERY:
SELECT * FROM clstr_expression WHERE -a = -3 ORDER BY -a, b
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
-- clean up
DROP TABLE clustertest
RESULT: []

-----------
QUERY:
DROP TABLE clstr_1
RESULT: []

-----------
QUERY:
DROP TABLE clstr_2
RESULT: []

-----------
QUERY:
DROP TABLE clstr_3
RESULT: []

-----------
QUERY:
DROP TABLE clstr_4
RESULT: []

-----------
QUERY:
DROP TABLE clstr_expression
RESULT: []

-----------
QUERY:
DROP USER regress_clstr_user
RESULT: []
=========================================
Summary for test case cluster/test.sql of postgres
=========================================
