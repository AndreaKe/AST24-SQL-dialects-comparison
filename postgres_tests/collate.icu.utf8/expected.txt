
-----------
QUERY:
/*
 * This test is for ICU collations.
 */

/* skip test if not UTF8 server encoding or no ICU collations installed */
SELECT getdatabaseencoding() <> 'UTF8' OR
       (SELECT count(*) FROM pg_collation WHERE collprovider = 'i' AND collname <> 'unicode') = 0
       AS skip_test \gset
\if :skip_test
\quit
\endif

SET client_encoding TO UTF8;
RESULT:
	postgres: syntax error at or near "\"
LINE 8:        AS skip_test \gset
                            ^


-----------
QUERY:


CREATE SCHEMA collate_tests;
RESULT:
	postgres: None

-----------
QUERY:

SET search_path = collate_tests;
RESULT:
	postgres: None

-----------
QUERY:



CREATE TABLE collate_test1 (
    a int,
    b text COLLATE "en-x-icu" NOT NULL
);
RESULT:
	postgres: None

-----------
QUERY:


-- \d collate_test1

CREATE TABLE collate_test_fail (
    a int,
    b text COLLATE "ja_JP.eucjp-x-icu"
);
RESULT:
	postgres: collation "ja_JP.eucjp-x-icu" for encoding "UTF8" does not exist
LINE 7:     b text COLLATE "ja_JP.eucjp-x-icu"
                   ^


-----------
QUERY:


CREATE TABLE collate_test_fail (
    a int,
    b text COLLATE "foo-x-icu"
);
RESULT:
	postgres: collation "foo-x-icu" for encoding "UTF8" does not exist
LINE 5:     b text COLLATE "foo-x-icu"
                   ^


-----------
QUERY:


CREATE TABLE collate_test_fail (
    a int COLLATE "en-x-icu",
    b text
);
RESULT:
	postgres: collations are not supported by type integer
LINE 4:     a int COLLATE "en-x-icu",
                  ^


-----------
QUERY:


CREATE TABLE collate_test_like (
    LIKE collate_test1
);
RESULT:
	postgres: None

-----------
QUERY:


-- \d collate_test_like

CREATE TABLE collate_test2 (
    a int,
    b text COLLATE "sv-x-icu"
);
RESULT:
	postgres: None

-----------
QUERY:


CREATE TABLE collate_test3 (
    a int,
    b text COLLATE "C"
);
RESULT:
	postgres: None

-----------
QUERY:


INSERT INTO collate_test1 VALUES (1, 'abc'), (2, 'äbc'), (3, 'bbc'), (4, 'ABC');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO collate_test2 SELECT * FROM collate_test1;
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO collate_test3 SELECT * FROM collate_test1;
RESULT:
	postgres: None

-----------
QUERY:


SELECT * FROM collate_test1 WHERE b >= 'bbc';
RESULT:
	postgres: [(3, 'bbc')]

-----------
QUERY:

SELECT * FROM collate_test2 WHERE b >= 'bbc';
RESULT:
	postgres: [(2, 'äbc'), (3, 'bbc')]

-----------
QUERY:

SELECT * FROM collate_test3 WHERE b >= 'bbc';
RESULT:
	postgres: [(2, 'äbc'), (3, 'bbc')]

-----------
QUERY:

SELECT * FROM collate_test3 WHERE b >= 'BBC';
RESULT:
	postgres: [(1, 'abc'), (2, 'äbc'), (3, 'bbc')]

-----------
QUERY:


SELECT * FROM collate_test1 WHERE b COLLATE "C" >= 'bbc';
RESULT:
	postgres: [(2, 'äbc'), (3, 'bbc')]

-----------
QUERY:

SELECT * FROM collate_test1 WHERE b >= 'bbc' COLLATE "C";
RESULT:
	postgres: [(2, 'äbc'), (3, 'bbc')]

-----------
QUERY:

SELECT * FROM collate_test1 WHERE b COLLATE "C" >= 'bbc' COLLATE "C";
RESULT:
	postgres: [(2, 'äbc'), (3, 'bbc')]

-----------
QUERY:

SELECT * FROM collate_test1 WHERE b COLLATE "C" >= 'bbc' COLLATE "en-x-icu";
RESULT:
	postgres: collation mismatch between explicit collations "C" and "en-x-icu"
LINE 2: ...* FROM collate_test1 WHERE b COLLATE "C" >= 'bbc' COLLATE "e...
                                                             ^


-----------
QUERY:



CREATE DOMAIN testdomain_sv AS text COLLATE "sv-x-icu";
RESULT:
	postgres: None

-----------
QUERY:

CREATE DOMAIN testdomain_i AS int COLLATE "sv-x-icu";
RESULT:
	postgres: collations are not supported by type integer


-----------
QUERY:
 -- fails
CREATE TABLE collate_test4 (
    a int,
    b testdomain_sv
);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO collate_test4 SELECT * FROM collate_test1;
RESULT:
	postgres: None

-----------
QUERY:

SELECT a, b FROM collate_test4 ORDER BY b;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:


CREATE TABLE collate_test5 (
    a int,
    b testdomain_sv COLLATE "en-x-icu"
);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO collate_test5 SELECT * FROM collate_test1;
RESULT:
	postgres: None

-----------
QUERY:

SELECT a, b FROM collate_test5 ORDER BY b;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (2, 'äbc'), (3, 'bbc')]

-----------
QUERY:



SELECT a, b FROM collate_test1 ORDER BY b;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (2, 'äbc'), (3, 'bbc')]

-----------
QUERY:

SELECT a, b FROM collate_test2 ORDER BY b;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:

SELECT a, b FROM collate_test3 ORDER BY b;
RESULT:
	postgres: [(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:


SELECT a, b FROM collate_test1 ORDER BY b COLLATE "C";
RESULT:
	postgres: [(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:


-- star expansion
SELECT * FROM collate_test1 ORDER BY b;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (2, 'äbc'), (3, 'bbc')]

-----------
QUERY:

SELECT * FROM collate_test2 ORDER BY b;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:

SELECT * FROM collate_test3 ORDER BY b;
RESULT:
	postgres: [(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:


-- constant expression folding
SELECT 'bbc' COLLATE "en-x-icu" > 'äbc' COLLATE "en-x-icu" AS "true";
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT 'bbc' COLLATE "sv-x-icu" > 'äbc' COLLATE "sv-x-icu" AS "false";
RESULT:
	postgres: [(False,)]

-----------
QUERY:


-- upper/lower

CREATE TABLE collate_test10 (
    a int,
    x text COLLATE "en-x-icu",
    y text COLLATE "tr-x-icu"
);
RESULT:
	postgres: None

-----------
QUERY:


INSERT INTO collate_test10 VALUES (1, 'hij', 'hij'), (2, 'HIJ', 'HIJ');
RESULT:
	postgres: None

-----------
QUERY:


SELECT a, lower(x), lower(y), upper(x), upper(y), initcap(x), initcap(y) FROM collate_test10;
RESULT:
	postgres: [(1, 'hij', 'hij', 'HIJ', 'HİJ', 'Hij', 'Hij'), (2, 'hij', 'hıj', 'HIJ', 'HIJ', 'Hij', 'Hıj')]

-----------
QUERY:

SELECT a, lower(x COLLATE "C"), lower(y COLLATE "C") FROM collate_test10;
RESULT:
	postgres: [(1, 'hij', 'hij'), (2, 'hij', 'hij')]

-----------
QUERY:


SELECT a, x, y FROM collate_test10 ORDER BY lower(y), a;
RESULT:
	postgres: [(2, 'HIJ', 'HIJ'), (1, 'hij', 'hij')]

-----------
QUERY:


-- LIKE/ILIKE

SELECT * FROM collate_test1 WHERE b LIKE 'abc';
RESULT:
	postgres: [(1, 'abc')]

-----------
QUERY:

SELECT * FROM collate_test1 WHERE b LIKE 'abc%';
RESULT:
	postgres: [(1, 'abc')]

-----------
QUERY:

SELECT * FROM collate_test1 WHERE b LIKE '%bc%';
RESULT:
	postgres: [(1, 'abc'), (2, 'äbc'), (3, 'bbc')]

-----------
QUERY:

SELECT * FROM collate_test1 WHERE b ILIKE 'abc';
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC')]

-----------
QUERY:

SELECT * FROM collate_test1 WHERE b ILIKE 'abc%';
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC')]

-----------
QUERY:

SELECT * FROM collate_test1 WHERE b ILIKE '%bc%';
RESULT:
	postgres: [(1, 'abc'), (2, 'äbc'), (3, 'bbc'), (4, 'ABC')]

-----------
QUERY:


SELECT 'Türkiye' COLLATE "en-x-icu" ILIKE '%KI%' AS "true";
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT 'Türkiye' COLLATE "tr-x-icu" ILIKE '%KI%' AS "false";
RESULT:
	postgres: [(False,)]

-----------
QUERY:


SELECT 'bıt' ILIKE 'BIT' COLLATE "en-x-icu" AS "false";
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT 'bıt' ILIKE 'BIT' COLLATE "tr-x-icu" AS "true";
RESULT:
	postgres: [(True,)]

-----------
QUERY:


-- The following actually exercises the selectivity estimation for ILIKE.
SELECT relname FROM pg_class WHERE relname ILIKE 'abc%';
RESULT:
	postgres: []

-----------
QUERY:


-- regular expressions

SELECT * FROM collate_test1 WHERE b ~ '^abc$';
RESULT:
	postgres: [(1, 'abc')]

-----------
QUERY:

SELECT * FROM collate_test1 WHERE b ~ '^abc';
RESULT:
	postgres: [(1, 'abc')]

-----------
QUERY:

SELECT * FROM collate_test1 WHERE b ~ 'bc';
RESULT:
	postgres: [(1, 'abc'), (2, 'äbc'), (3, 'bbc')]

-----------
QUERY:

SELECT * FROM collate_test1 WHERE b ~* '^abc$';
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC')]

-----------
QUERY:

SELECT * FROM collate_test1 WHERE b ~* '^abc';
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC')]

-----------
QUERY:

SELECT * FROM collate_test1 WHERE b ~* 'bc';
RESULT:
	postgres: [(1, 'abc'), (2, 'äbc'), (3, 'bbc'), (4, 'ABC')]

-----------
QUERY:


CREATE TABLE collate_test6 (
    a int,
    b text COLLATE "en-x-icu"
);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO collate_test6 VALUES (1, 'abc'), (2, 'ABC'), (3, '123'), (4, 'ab1'),
                                 (5, 'a1!'), (6, 'a c'), (7, '!.;
RESULT:
	postgres: unterminated quoted string at or near "'!.;"
LINE 3: ...                            (5, 'a1!'), (6, 'a c'), (7, '!.;
                                                                   ^


-----------
QUERY:
'), (8, '   '),
                                 (9, 'äbç'), (10, 'ÄBÇ');
RESULT:
	postgres: syntax error at or near "'), (8, '"
LINE 1: '), (8, '   '),
        ^


-----------
QUERY:

SELECT b,
       b ~ '^[[:alpha:]]+$' AS is_alpha,
       b ~ '^[[:upper:]]+$' AS is_upper,
       b ~ '^[[:lower:]]+$' AS is_lower,
       b ~ '^[[:digit:]]+$' AS is_digit,
       b ~ '^[[:alnum:]]+$' AS is_alnum,
       b ~ '^[[:graph:]]+$' AS is_graph,
       b ~ '^[[:print:]]+$' AS is_print,
       b ~ '^[[:punct:]]+$' AS is_punct,
       b ~ '^[[:space:]]+$' AS is_space
FROM collate_test6;
RESULT:
	postgres: []

-----------
QUERY:


SELECT 'Türkiye' COLLATE "en-x-icu" ~* 'KI' AS "true";
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT 'Türkiye' COLLATE "tr-x-icu" ~* 'KI' AS "true";
RESULT:
	postgres: [(True,)]

-----------
QUERY:
  -- true with ICU

SELECT 'bıt' ~* 'BIT' COLLATE "en-x-icu" AS "false";
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT 'bıt' ~* 'BIT' COLLATE "tr-x-icu" AS "false";
RESULT:
	postgres: [(False,)]

-----------
QUERY:
  -- false with ICU

-- The following actually exercises the selectivity estimation for ~*.
SELECT relname FROM pg_class WHERE relname ~* '^abc';
RESULT:
	postgres: []

-----------
QUERY:



/* not run by default because it requires tr_TR system locale
-- to_char

SET lc_time TO 'tr_TR';
RESULT:
	postgres: unterminated /* comment at or near "/* not run by default because it requires tr_TR system locale
-- to_char

SET lc_time TO 'tr_TR';"
LINE 4: /* not run by default because it requires tr_TR system local...
        ^


-----------
QUERY:

SELECT to_char(date '2010-04-01', 'DD TMMON YYYY');
RESULT:
	postgres: [('01 APR 2010',)]

-----------
QUERY:

SELECT to_char(date '2010-04-01', 'DD TMMON YYYY' COLLATE "tr-x-icu");
RESULT:
	postgres: [('01 APR 2010',)]

-----------
QUERY:

*/


-- backwards parsing

CREATE VIEW collview1 AS SELECT * FROM collate_test1 WHERE b COLLATE "C" >= 'bbc';
RESULT:
	postgres: syntax error at or near "*/"
LINE 2: */
        ^


-----------
QUERY:

CREATE VIEW collview2 AS SELECT a, b FROM collate_test1 ORDER BY b COLLATE "C";
RESULT:
	postgres: None

-----------
QUERY:

CREATE VIEW collview3 AS SELECT a, lower((x || x) COLLATE "C") FROM collate_test10;
RESULT:
	postgres: None

-----------
QUERY:


SELECT table_name, view_definition FROM information_schema.views
  WHERE table_name LIKE 'collview%' ORDER BY 1;
RESULT:
	postgres: [('collview2', ' SELECT a,\n    b\n   FROM collate_test1\n  ORDER BY (b COLLATE "C");'), ('collview3', ' SELECT a,\n    lower(((x || x) COLLATE "C")) AS lower\n   FROM collate_test10;')]

-----------
QUERY:



-- collation propagation in various expression types

SELECT a, coalesce(b, 'foo') FROM collate_test1 ORDER BY 2;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (2, 'äbc'), (3, 'bbc')]

-----------
QUERY:

SELECT a, coalesce(b, 'foo') FROM collate_test2 ORDER BY 2;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:

SELECT a, coalesce(b, 'foo') FROM collate_test3 ORDER BY 2;
RESULT:
	postgres: [(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:

SELECT a, lower(coalesce(x, 'foo')), lower(coalesce(y, 'foo')) FROM collate_test10;
RESULT:
	postgres: [(1, 'hij', 'hij'), (2, 'hij', 'hıj')]

-----------
QUERY:


SELECT a, b, greatest(b, 'CCC') FROM collate_test1 ORDER BY 3;
RESULT:
	postgres: [(1, 'abc', 'CCC'), (2, 'äbc', 'CCC'), (3, 'bbc', 'CCC'), (4, 'ABC', 'CCC')]

-----------
QUERY:

SELECT a, b, greatest(b, 'CCC') FROM collate_test2 ORDER BY 3;
RESULT:
	postgres: [(1, 'abc', 'CCC'), (3, 'bbc', 'CCC'), (4, 'ABC', 'CCC'), (2, 'äbc', 'äbc')]

-----------
QUERY:

SELECT a, b, greatest(b, 'CCC') FROM collate_test3 ORDER BY 3;
RESULT:
	postgres: [(4, 'ABC', 'CCC'), (1, 'abc', 'abc'), (3, 'bbc', 'bbc'), (2, 'äbc', 'äbc')]

-----------
QUERY:

SELECT a, x, y, lower(greatest(x, 'foo')), lower(greatest(y, 'foo')) FROM collate_test10;
RESULT:
	postgres: [(1, 'hij', 'hij', 'hij', 'hij'), (2, 'HIJ', 'HIJ', 'hij', 'hıj')]

-----------
QUERY:


SELECT a, nullif(b, 'abc') FROM collate_test1 ORDER BY 2;
RESULT:
	postgres: [(4, 'ABC'), (2, 'äbc'), (3, 'bbc'), (1, None)]

-----------
QUERY:

SELECT a, nullif(b, 'abc') FROM collate_test2 ORDER BY 2;
RESULT:
	postgres: [(4, 'ABC'), (3, 'bbc'), (2, 'äbc'), (1, None)]

-----------
QUERY:

SELECT a, nullif(b, 'abc') FROM collate_test3 ORDER BY 2;
RESULT:
	postgres: [(4, 'ABC'), (3, 'bbc'), (2, 'äbc'), (1, None)]

-----------
QUERY:

SELECT a, lower(nullif(x, 'foo')), lower(nullif(y, 'foo')) FROM collate_test10;
RESULT:
	postgres: [(1, 'hij', 'hij'), (2, 'hij', 'hıj')]

-----------
QUERY:


SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test1 ORDER BY 2;
RESULT:
	postgres: [(4, 'ABC'), (2, 'äbc'), (1, 'abcd'), (3, 'bbc')]

-----------
QUERY:

SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test2 ORDER BY 2;
RESULT:
	postgres: [(4, 'ABC'), (1, 'abcd'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:

SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test3 ORDER BY 2;
RESULT:
	postgres: [(4, 'ABC'), (1, 'abcd'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:


CREATE DOMAIN testdomain AS text;
RESULT:
	postgres: None

-----------
QUERY:

SELECT a, b::testdomain FROM collate_test1 ORDER BY 2;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (2, 'äbc'), (3, 'bbc')]

-----------
QUERY:

SELECT a, b::testdomain FROM collate_test2 ORDER BY 2;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:

SELECT a, b::testdomain FROM collate_test3 ORDER BY 2;
RESULT:
	postgres: [(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:

SELECT a, b::testdomain_sv FROM collate_test3 ORDER BY 2;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:

SELECT a, lower(x::testdomain), lower(y::testdomain) FROM collate_test10;
RESULT:
	postgres: [(1, 'hij', 'hij'), (2, 'hij', 'hıj')]

-----------
QUERY:


SELECT min(b), max(b) FROM collate_test1;
RESULT:
	postgres: [('abc', 'bbc')]

-----------
QUERY:

SELECT min(b), max(b) FROM collate_test2;
RESULT:
	postgres: [('abc', 'äbc')]

-----------
QUERY:

SELECT min(b), max(b) FROM collate_test3;
RESULT:
	postgres: [('ABC', 'äbc')]

-----------
QUERY:


SELECT array_agg(b ORDER BY b) FROM collate_test1;
RESULT:
	postgres: [(['abc', 'ABC', 'äbc', 'bbc'],)]

-----------
QUERY:

SELECT array_agg(b ORDER BY b) FROM collate_test2;
RESULT:
	postgres: [(['abc', 'ABC', 'bbc', 'äbc'],)]

-----------
QUERY:

SELECT array_agg(b ORDER BY b) FROM collate_test3;
RESULT:
	postgres: [(['ABC', 'abc', 'bbc', 'äbc'],)]

-----------
QUERY:


SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test1 ORDER BY 2;
RESULT:
	postgres: [(1, 'abc'), (1, 'abc'), (4, 'ABC'), (4, 'ABC'), (2, 'äbc'), (2, 'äbc'), (3, 'bbc'), (3, 'bbc')]

-----------
QUERY:

SELECT a, b FROM collate_test2 UNION SELECT a, b FROM collate_test2 ORDER BY 2;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:

SELECT a, b FROM collate_test3 WHERE a < 4 INTERSECT SELECT a, b FROM collate_test3 WHERE a > 1 ORDER BY 2;
RESULT:
	postgres: [(3, 'bbc'), (2, 'äbc')]

-----------
QUERY:

SELECT a, b FROM collate_test3 EXCEPT SELECT a, b FROM collate_test3 WHERE a < 2 ORDER BY 2;
RESULT:
	postgres: [(4, 'ABC'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:


SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test3 ORDER BY 2;
RESULT:
	postgres: could not determine which collation to use for string comparison
HINT:  Use the COLLATE clause to set the collation explicitly.


-----------
QUERY:
 -- fail
SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test3;
RESULT:
	postgres: [(1, 'abc'), (2, 'äbc'), (3, 'bbc'), (4, 'ABC'), (1, 'abc'), (2, 'äbc'), (3, 'bbc'), (4, 'ABC')]

-----------
QUERY:
 -- ok
SELECT a, b FROM collate_test1 UNION SELECT a, b FROM collate_test3 ORDER BY 2;
RESULT:
	postgres: collation mismatch between implicit collations "en-x-icu" and "C"
LINE 2: SELECT a, b FROM collate_test1 UNION SELECT a, b FROM collat...
                                                       ^
HINT:  You can choose the collation by applying the COLLATE clause to one or both expressions.


-----------
QUERY:
 -- fail
SELECT a, b COLLATE "C" FROM collate_test1 UNION SELECT a, b FROM collate_test3 ORDER BY 2;
RESULT:
	postgres: [(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:
 -- ok
SELECT a, b FROM collate_test1 INTERSECT SELECT a, b FROM collate_test3 ORDER BY 2;
RESULT:
	postgres: collation mismatch between implicit collations "en-x-icu" and "C"
LINE 2: ...ELECT a, b FROM collate_test1 INTERSECT SELECT a, b FROM col...
                                                             ^
HINT:  You can choose the collation by applying the COLLATE clause to one or both expressions.


-----------
QUERY:
 -- fail
SELECT a, b FROM collate_test1 EXCEPT SELECT a, b FROM collate_test3 ORDER BY 2;
RESULT:
	postgres: collation mismatch between implicit collations "en-x-icu" and "C"
LINE 2: SELECT a, b FROM collate_test1 EXCEPT SELECT a, b FROM colla...
                                                        ^
HINT:  You can choose the collation by applying the COLLATE clause to one or both expressions.


-----------
QUERY:
 -- fail

CREATE TABLE test_u AS SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test3;
RESULT:
	postgres: no collation was derived for column "b" with collatable type text
HINT:  Use the COLLATE clause to set the collation explicitly.


-----------
QUERY:
 -- fail

-- ideally this would be a parse-time error, but for now it must be run-time:
select x < y from collate_test10;
RESULT:
	postgres: could not determine which collation to use for string comparison
HINT:  Use the COLLATE clause to set the collation explicitly.


-----------
QUERY:
 -- fail
select x || y from collate_test10;
RESULT:
	postgres: [('hijhij',), ('HIJHIJ',)]

-----------
QUERY:
 -- ok, because || is not collation aware
select x, y from collate_test10 order by x || y;
RESULT:
	postgres: collation mismatch between implicit collations "en-x-icu" and "tr-x-icu"
LINE 2: select x, y from collate_test10 order by x || y;
                                                      ^
HINT:  You can choose the collation by applying the COLLATE clause to one or both expressions.


-----------
QUERY:
 -- not so ok

-- collation mismatch between recursive and non-recursive term
WITH RECURSIVE foo(x) AS
   (SELECT x FROM (VALUES('a' COLLATE "en-x-icu"),('b')) t(x)
   UNION ALL
   SELECT (x || 'c') COLLATE "de-x-icu" FROM foo WHERE length(x) < 10)
SELECT * FROM foo;
RESULT:
	postgres: recursive query "foo" column 1 has collation "en-x-icu" in non-recursive term but collation "de-x-icu" overall
LINE 5:    (SELECT x FROM (VALUES('a' COLLATE "en-x-icu"),('b')) t(x...
                   ^
HINT:  Use the COLLATE clause to set the collation of the non-recursive term.


-----------
QUERY:



-- casting

SELECT CAST('42' AS text COLLATE "C");
RESULT:
	postgres: syntax error at or near "COLLATE"
LINE 6: SELECT CAST('42' AS text COLLATE "C");
                                 ^


-----------
QUERY:


SELECT a, CAST(b AS varchar) FROM collate_test1 ORDER BY 2;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (2, 'äbc'), (3, 'bbc')]

-----------
QUERY:

SELECT a, CAST(b AS varchar) FROM collate_test2 ORDER BY 2;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:

SELECT a, CAST(b AS varchar) FROM collate_test3 ORDER BY 2;
RESULT:
	postgres: [(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:



-- propagation of collation in SQL functions (inlined and non-inlined cases)
-- and plpgsql functions too

CREATE FUNCTION mylt (text, text) RETURNS boolean LANGUAGE sql
    AS $$ select $1 < $2 $$;
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION mylt_noninline (text, text) RETURNS boolean LANGUAGE sql
    AS $$ select $1 < $2 limit 1 $$;
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION mylt_plpgsql (text, text) RETURNS boolean LANGUAGE plpgsql
    AS $$ begin return $1 < $2; end $$;
RESULT:
	postgres: None

-----------
QUERY:


SELECT a.b AS a, b.b AS b, a.b < b.b AS lt,
       mylt(a.b, b.b), mylt_noninline(a.b, b.b), mylt_plpgsql(a.b, b.b)
FROM collate_test1 a, collate_test1 b
ORDER BY a.b, b.b;
RESULT:
	postgres: [('abc', 'abc', False, False, False, False), ('abc', 'ABC', True, True, True, True), ('abc', 'äbc', True, True, True, True), ('abc', 'bbc', True, True, True, True), ('ABC', 'abc', False, False, False, False), ('ABC', 'ABC', False, False, False, False), ('ABC', 'äbc', True, True, True, True), ('ABC', 'bbc', True, True, True, True), ('äbc', 'abc', False, False, False, False), ('äbc', 'ABC', False, False, False, False), ('äbc', 'äbc', False, False, False, False), ('äbc', 'bbc', True, True, True, True), ('bbc', 'abc', False, False, False, False), ('bbc', 'ABC', False, False, False, False), ('bbc', 'äbc', False, False, False, False), ('bbc', 'bbc', False, False, False, False)]

-----------
QUERY:


SELECT a.b AS a, b.b AS b, a.b < b.b COLLATE "C" AS lt,
       mylt(a.b, b.b COLLATE "C"), mylt_noninline(a.b, b.b COLLATE "C"),
       mylt_plpgsql(a.b, b.b COLLATE "C")
FROM collate_test1 a, collate_test1 b
ORDER BY a.b, b.b;
RESULT:
	postgres: [('abc', 'abc', False, False, False, False), ('abc', 'ABC', False, False, False, False), ('abc', 'äbc', True, True, True, True), ('abc', 'bbc', True, True, True, True), ('ABC', 'abc', True, True, True, True), ('ABC', 'ABC', False, False, False, False), ('ABC', 'äbc', True, True, True, True), ('ABC', 'bbc', True, True, True, True), ('äbc', 'abc', False, False, False, False), ('äbc', 'ABC', False, False, False, False), ('äbc', 'äbc', False, False, False, False), ('äbc', 'bbc', False, False, False, False), ('bbc', 'abc', False, False, False, False), ('bbc', 'ABC', False, False, False, False), ('bbc', 'äbc', True, True, True, True), ('bbc', 'bbc', False, False, False, False)]

-----------
QUERY:



-- collation override in plpgsql

CREATE FUNCTION mylt2 (x text, y text) RETURNS boolean LANGUAGE plpgsql AS $$
declare
  xx text := x;
  yy text := y;
begin
  return xx < yy;
end
$$;
RESULT:
	postgres: None

-----------
QUERY:


SELECT mylt2('a', 'B' collate "en-x-icu") as t, mylt2('a', 'B' collate "C") as f;
RESULT:
	postgres: [(True, False)]

-----------
QUERY:


CREATE OR REPLACE FUNCTION
  mylt2 (x text, y text) RETURNS boolean LANGUAGE plpgsql AS $$
declare
  xx text COLLATE "POSIX" := x;
  yy text := y;
begin
  return xx < yy;
end
$$;
RESULT:
	postgres: None

-----------
QUERY:


SELECT mylt2('a', 'B') as f;
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT mylt2('a', 'B' collate "C") as fail;
RESULT:
	postgres: could not determine which collation to use for string comparison
HINT:  Use the COLLATE clause to set the collation explicitly.
CONTEXT:  PL/pgSQL function mylt2(text,text) line 6 at RETURN


-----------
QUERY:
 -- conflicting collations
SELECT mylt2('a', 'B' collate "POSIX") as f;
RESULT:
	postgres: [(False,)]

-----------
QUERY:



-- polymorphism

SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test1)) ORDER BY 1;
RESULT:
	postgres: [('abc',), ('ABC',), ('äbc',), ('bbc',)]

-----------
QUERY:

SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test2)) ORDER BY 1;
RESULT:
	postgres: [('abc',), ('ABC',), ('bbc',), ('äbc',)]

-----------
QUERY:

SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test3)) ORDER BY 1;
RESULT:
	postgres: [('ABC',), ('abc',), ('bbc',), ('äbc',)]

-----------
QUERY:


CREATE FUNCTION dup (anyelement) RETURNS anyelement
    AS 'select $1' LANGUAGE sql;
RESULT:
	postgres: None

-----------
QUERY:


SELECT a, dup(b) FROM collate_test1 ORDER BY 2;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (2, 'äbc'), (3, 'bbc')]

-----------
QUERY:

SELECT a, dup(b) FROM collate_test2 ORDER BY 2;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:

SELECT a, dup(b) FROM collate_test3 ORDER BY 2;
RESULT:
	postgres: [(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:



-- indexes

CREATE INDEX collate_test1_idx1 ON collate_test1 (b);
RESULT:
	postgres: None

-----------
QUERY:

CREATE INDEX collate_test1_idx2 ON collate_test1 (b COLLATE "C");
RESULT:
	postgres: None

-----------
QUERY:

CREATE INDEX collate_test1_idx3 ON collate_test1 ((b COLLATE "C"));
RESULT:
	postgres: None

-----------
QUERY:
 -- this is different grammatically
CREATE INDEX collate_test1_idx4 ON collate_test1 (((b||'foo') COLLATE "POSIX"));
RESULT:
	postgres: None

-----------
QUERY:


CREATE INDEX collate_test1_idx5 ON collate_test1 (a COLLATE "C");
RESULT:
	postgres: collations are not supported by type integer


-----------
QUERY:
 -- fail
CREATE INDEX collate_test1_idx6 ON collate_test1 ((a COLLATE "C"));
RESULT:
	postgres: collations are not supported by type integer
LINE 2: ...ATE INDEX collate_test1_idx6 ON collate_test1 ((a COLLATE "C...
                                                             ^


-----------
QUERY:
 -- fail

SELECT relname, pg_get_indexdef(oid) FROM pg_class WHERE relname LIKE 'collate_test%_idx%' ORDER BY 1;
RESULT:
	postgres: [('collate_test1_idx1', 'CREATE INDEX collate_test1_idx1 ON collate_tests.collate_test1 USING btree (b)'), ('collate_test1_idx2', 'CREATE INDEX collate_test1_idx2 ON collate_tests.collate_test1 USING btree (b COLLATE "C")'), ('collate_test1_idx3', 'CREATE INDEX collate_test1_idx3 ON collate_tests.collate_test1 USING btree (b COLLATE "C")'), ('collate_test1_idx4', 'CREATE INDEX collate_test1_idx4 ON collate_tests.collate_test1 USING btree (((b || \'foo\'::text)) COLLATE "POSIX")')]

-----------
QUERY:


set enable_seqscan = off;
RESULT:
	postgres: None

-----------
QUERY:

explain (costs off)
select * from collate_test1 where b ilike 'abc';
RESULT:
	postgres: [('Seq Scan on collate_test1',), ("  Filter: (b ~~* 'abc'::text)",)]

-----------
QUERY:

select * from collate_test1 where b ilike 'abc';
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC')]

-----------
QUERY:

explain (costs off)
select * from collate_test1 where b ilike 'ABC';
RESULT:
	postgres: [('Seq Scan on collate_test1',), ("  Filter: (b ~~* 'ABC'::text)",)]

-----------
QUERY:

select * from collate_test1 where b ilike 'ABC';
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC')]

-----------
QUERY:

reset enable_seqscan;
RESULT:
	postgres: None

-----------
QUERY:



-- schema manipulation commands

CREATE ROLE regress_test_role;
RESULT:
	postgres: None

-----------
QUERY:

CREATE SCHEMA test_schema;
RESULT:
	postgres: None

-----------
QUERY:


-- We need to do this this way to cope with varying names for encodings:
SET client_min_messages TO WARNING;
RESULT:
	postgres: None

-----------
QUERY:

SET icu_validation_level = disabled;
RESULT:
	postgres: None

-----------
QUERY:


do $$
BEGIN
  EXECUTE 'CREATE COLLATION test0 (provider = icu, locale = ' ||
          quote_literal((SELECT CASE WHEN datlocprovider='i' THEN datlocale ELSE datcollate END FROM pg_database WHERE datname = current_database())) || ');';
END
$$;
RESULT:
	postgres: None

-----------
QUERY:

CREATE COLLATION test0 FROM "C";
RESULT:
	postgres: collation "test0" already exists


-----------
QUERY:
 -- fail, duplicate name
do $$
BEGIN
  EXECUTE 'CREATE COLLATION test1 (provider = icu, locale = ' ||
          quote_literal((SELECT CASE WHEN datlocprovider='i' THEN datlocale ELSE datcollate END FROM pg_database WHERE datname = current_database())) || ');';
END
$$;
RESULT:
	postgres: None

-----------
QUERY:


RESET icu_validation_level;
RESULT:
	postgres: None

-----------
QUERY:

RESET client_min_messages;
RESULT:
	postgres: None

-----------
QUERY:


CREATE COLLATION test3 (provider = icu, lc_collate = 'en_US.utf8');
RESULT:
	postgres: parameter "locale" must be specified


-----------
QUERY:
 -- fail, needs /* REPLACED */''locale/* REPLACED */''
SET icu_validation_level = ERROR;
RESULT:
	postgres: None

-----------
QUERY:

CREATE COLLATION testx (provider = icu, locale = 'nonsense-nowhere');
RESULT:
	postgres: ICU locale "nonsense-nowhere" has unknown language "nonsense"
HINT:  To disable ICU locale validation, set the parameter icu_validation_level to "disabled".


-----------
QUERY:
 -- fails
CREATE COLLATION testx (provider = icu, locale = '@colStrength=primary;
RESULT:
	postgres: unterminated quoted string at or near "'@colStrength=primary;"
LINE 2: CREATE COLLATION testx (provider = icu, locale = '@colStreng...
                                                         ^


-----------
QUERY:
nonsense=yes');
RESULT:
	postgres: syntax error at or near "nonsense"
LINE 1: nonsense=yes');
        ^


-----------
QUERY:
 -- fails
RESET icu_validation_level;
RESULT:
	postgres: None

-----------
QUERY:

CREATE COLLATION testx (provider = icu, locale = '@colStrength=primary;
RESULT:
	postgres: unterminated quoted string at or near "'@colStrength=primary;"
LINE 2: CREATE COLLATION testx (provider = icu, locale = '@colStreng...
                                                         ^


-----------
QUERY:
nonsense=yes');
RESULT:
	postgres: syntax error at or near "nonsense"
LINE 1: nonsense=yes');
        ^


-----------
QUERY:
 DROP COLLATION testx;
RESULT:
	postgres: collation "testx" for encoding "UTF8" does not exist


-----------
QUERY:

CREATE COLLATION testx (provider = icu, locale = 'nonsense-nowhere');
RESULT:
	postgres: None

-----------
QUERY:
 DROP COLLATION testx;
RESULT:
	postgres: None

-----------
QUERY:


CREATE COLLATION test4 FROM nonsense;
RESULT:
	postgres: collation "nonsense" for encoding "UTF8" does not exist


-----------
QUERY:

CREATE COLLATION test5 FROM test0;
RESULT:
	postgres: None

-----------
QUERY:


SELECT collname FROM pg_collation WHERE collname LIKE 'test%' ORDER BY 1;
RESULT:
	postgres: [('test0',), ('test1',), ('test5',)]

-----------
QUERY:


ALTER COLLATION test1 RENAME TO test11;
RESULT:
	postgres: None

-----------
QUERY:

ALTER COLLATION test0 RENAME TO test11;
RESULT:
	postgres: collation "test11" already exists in schema "collate_tests"


-----------
QUERY:
 -- fail
ALTER COLLATION test1 RENAME TO test22;
RESULT:
	postgres: collation "test1" for encoding "UTF8" does not exist


-----------
QUERY:
 -- fail

ALTER COLLATION test11 OWNER TO regress_test_role;
RESULT:
	postgres: None

-----------
QUERY:

ALTER COLLATION test11 OWNER TO nonsense;
RESULT:
	postgres: role "nonsense" does not exist


-----------
QUERY:

ALTER COLLATION test11 SET SCHEMA test_schema;
RESULT:
	postgres: None

-----------
QUERY:


COMMENT ON COLLATION test0 IS 'US English';
RESULT:
	postgres: None

-----------
QUERY:


SELECT collname, nspname, obj_description(pg_collation.oid, 'pg_collation')
    FROM pg_collation JOIN pg_namespace ON (collnamespace = pg_namespace.oid)
    WHERE collname LIKE 'test%'
    ORDER BY 1;
RESULT:
	postgres: [('test0', 'collate_tests', 'US English'), ('test11', 'test_schema', None), ('test5', 'collate_tests', None)]

-----------
QUERY:


DROP COLLATION test0, test_schema.test11, test5;
RESULT:
	postgres: None

-----------
QUERY:

DROP COLLATION test0;
RESULT:
	postgres: collation "test0" for encoding "UTF8" does not exist


-----------
QUERY:
 -- fail
DROP COLLATION IF EXISTS test0;
RESULT:
	postgres: None

-----------
QUERY:


SELECT collname FROM pg_collation WHERE collname LIKE 'test%';
RESULT:
	postgres: []

-----------
QUERY:


DROP SCHEMA test_schema;
RESULT:
	postgres: None

-----------
QUERY:

DROP ROLE regress_test_role;
RESULT:
	postgres: None

-----------
QUERY:



-- ALTER

ALTER COLLATION "en-x-icu" REFRESH VERSION;
RESULT:
	postgres: None

-----------
QUERY:


-- also test for database while we are here
SELECT current_database() AS datname \gset
ALTER DATABASE :"datname" REFRESH COLLATION VERSION;
RESULT:
	postgres: syntax error at or near "\"
LINE 4: SELECT current_database() AS datname \gset
                                             ^


-----------
QUERY:



-- dependencies

CREATE COLLATION test0 FROM "C";
RESULT:
	postgres: None

-----------
QUERY:


CREATE TABLE collate_dep_test1 (a int, b text COLLATE test0);
RESULT:
	postgres: None

-----------
QUERY:

CREATE DOMAIN collate_dep_dom1 AS text COLLATE test0;
RESULT:
	postgres: None

-----------
QUERY:

CREATE TYPE collate_dep_test2 AS (x int, y text COLLATE test0);
RESULT:
	postgres: None

-----------
QUERY:

CREATE VIEW collate_dep_test3 AS SELECT text 'foo' COLLATE test0 AS foo;
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE collate_dep_test4t (a int, b text);
RESULT:
	postgres: None

-----------
QUERY:

CREATE INDEX collate_dep_test4i ON collate_dep_test4t (b COLLATE test0);
RESULT:
	postgres: None

-----------
QUERY:


DROP COLLATION test0 RESTRICT;
RESULT:
	postgres: cannot drop collation test0 because other objects depend on it
DETAIL:  column b of table collate_dep_test1 depends on collation test0
type collate_dep_dom1 depends on collation test0
column y of composite type collate_dep_test2 depends on collation test0
view collate_dep_test3 depends on collation test0
index collate_dep_test4i depends on collation test0
HINT:  Use DROP ... CASCADE to drop the dependent objects too.


-----------
QUERY:
 -- fail
DROP COLLATION test0 CASCADE;
RESULT:
	postgres: None

-----------
QUERY:


-- \d collate_dep_test1
-- \d collate_dep_test2

DROP TABLE collate_dep_test1, collate_dep_test4t;
RESULT:
	postgres: None

-----------
QUERY:

DROP TYPE collate_dep_test2;
RESULT:
	postgres: None

-----------
QUERY:


-- test range types and collations

create type textrange_c as range(subtype=text, collation="C");
RESULT:
	postgres: None

-----------
QUERY:

create type textrange_en_us as range(subtype=text, collation="en-x-icu");
RESULT:
	postgres: None

-----------
QUERY:


select textrange_c('A','Z') @> 'b'::text;
RESULT:
	postgres: [(False,)]

-----------
QUERY:

select textrange_en_us('A','Z') @> 'b'::text;
RESULT:
	postgres: [(True,)]

-----------
QUERY:


drop type textrange_c;
RESULT:
	postgres: None

-----------
QUERY:

drop type textrange_en_us;
RESULT:
	postgres: None

-----------
QUERY:



-- standard collations

SELECT * FROM collate_test2 ORDER BY b COLLATE UCS_BASIC;
RESULT:
	postgres: [(4, 'ABC'), (1, 'abc'), (3, 'bbc'), (2, 'äbc')]

-----------
QUERY:

SELECT * FROM collate_test2 ORDER BY b COLLATE UNICODE;
RESULT:
	postgres: [(1, 'abc'), (4, 'ABC'), (2, 'äbc'), (3, 'bbc')]

-----------
QUERY:



-- test ICU collation customization

-- test the attributes handled by icu_set_collation_attributes()

SET client_min_messages=WARNING;
RESULT:
	postgres: None

-----------
QUERY:

CREATE COLLATION testcoll_ignore_accents (provider = icu, locale = '@colStrength=primary;
RESULT:
	postgres: unterminated quoted string at or near "'@colStrength=primary;"
LINE 2: ...testcoll_ignore_accents (provider = icu, locale = '@colStren...
                                                             ^


-----------
QUERY:
colCaseLevel=yes');
RESULT:
	postgres: syntax error at or near "colCaseLevel"
LINE 1: colCaseLevel=yes');
        ^


-----------
QUERY:

RESET client_min_messages;
RESULT:
	postgres: None

-----------
QUERY:

SELECT 'aaá' > 'AAA' COLLATE "und-x-icu", 'aaá' < 'AAA' COLLATE testcoll_ignore_accents;
RESULT:
	postgres: collation "testcoll_ignore_accents" for encoding "UTF8" does not exist
LINE 2: ... 'aaá' > 'AAA' COLLATE "und-x-icu", 'aaá' < 'AAA' COLLATE te...
                                                             ^


-----------
QUERY:


SET client_min_messages=WARNING;
RESULT:
	postgres: None

-----------
QUERY:

CREATE COLLATION testcoll_backwards (provider = icu, locale = '@colBackwards=yes');
RESULT:
	postgres: None

-----------
QUERY:

RESET client_min_messages;
RESULT:
	postgres: None

-----------
QUERY:

SELECT 'coté' < 'côte' COLLATE "und-x-icu", 'coté' > 'côte' COLLATE testcoll_backwards;
RESULT:
	postgres: [(True, True)]

-----------
QUERY:


CREATE COLLATION testcoll_lower_first (provider = icu, locale = '@colCaseFirst=lower');
RESULT:
	postgres: None

-----------
QUERY:

CREATE COLLATION testcoll_upper_first (provider = icu, locale = '@colCaseFirst=upper');
RESULT:
	postgres: None

-----------
QUERY:

SELECT 'aaa' < 'AAA' COLLATE testcoll_lower_first, 'aaa' > 'AAA' COLLATE testcoll_upper_first;
RESULT:
	postgres: [(True, True)]

-----------
QUERY:


CREATE COLLATION testcoll_shifted (provider = icu, locale = '@colAlternate=shifted');
RESULT:
	postgres: None

-----------
QUERY:

SELECT 'de-luge' < 'deanza' COLLATE "und-x-icu", 'de-luge' > 'deanza' COLLATE testcoll_shifted;
RESULT:
	postgres: [(True, True)]

-----------
QUERY:


SET client_min_messages=WARNING;
RESULT:
	postgres: None

-----------
QUERY:

CREATE COLLATION testcoll_numeric (provider = icu, locale = '@colNumeric=yes');
RESULT:
	postgres: None

-----------
QUERY:

RESET client_min_messages;
RESULT:
	postgres: None

-----------
QUERY:

SELECT 'A-21' > 'A-123' COLLATE "und-x-icu", 'A-21' < 'A-123' COLLATE testcoll_numeric;
RESULT:
	postgres: [(True, True)]

-----------
QUERY:


CREATE COLLATION testcoll_error1 (provider = icu, locale = '@colNumeric=lower');
RESULT:
	postgres: could not open collator for locale "und-u-kn-lower": U_ILLEGAL_ARGUMENT_ERROR


-----------
QUERY:


-- test that attributes not handled by icu_set_collation_attributes()
-- (handled by ucol_open() directly) also work
CREATE COLLATION testcoll_de_phonebook (provider = icu, locale = 'de@collation=phonebook');
RESULT:
	postgres: None

-----------
QUERY:

SELECT 'Goldmann' < 'Götz' COLLATE "de-x-icu", 'Goldmann' > 'Götz' COLLATE testcoll_de_phonebook;
RESULT:
	postgres: [(True, True)]

-----------
QUERY:



-- rules

CREATE COLLATION testcoll_rules1 (provider = icu, locale = '', rules = '&a < g');
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test7 (a text);
RESULT:
	postgres: None

-----------
QUERY:

-- example from https://unicode-org.github.io/icu/userguide/collation/customization/#syntax
INSERT INTO test7 VALUES ('Abernathy'), ('apple'), ('bird'), ('Boston'), ('Graham'), ('green');
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM test7 ORDER BY a COLLATE "en-x-icu";
RESULT:
	postgres: [('Abernathy',), ('apple',), ('bird',), ('Boston',), ('Graham',), ('green',)]

-----------
QUERY:

SELECT * FROM test7 ORDER BY a COLLATE testcoll_rules1;
RESULT:
	postgres: [('Abernathy',), ('apple',), ('green',), ('bird',), ('Boston',), ('Graham',)]

-----------
QUERY:

DROP TABLE test7;
RESULT:
	postgres: None

-----------
QUERY:


CREATE COLLATION testcoll_rulesx (provider = icu, locale = '', rules = '!!wrong!!');
RESULT:
	postgres: could not open collator for locale "und" with rules "!!wrong!!": U_INVALID_FORMAT_ERROR


-----------
QUERY:



-- nondeterministic collations

CREATE COLLATION ctest_det (provider = icu, locale = '', deterministic = true);
RESULT:
	postgres: None

-----------
QUERY:

CREATE COLLATION ctest_nondet (provider = icu, locale = '', deterministic = false);
RESULT:
	postgres: None

-----------
QUERY:


CREATE TABLE test6 (a int, b text);
RESULT:
	postgres: None

-----------
QUERY:

-- same string in different normal forms
INSERT INTO test6 VALUES (1, U&'\00E4bc');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test6 VALUES (2, U&'\0061\0308bc');
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM test6;
RESULT:
	postgres: [(1, 'äbc'), (2, 'äbc')]

-----------
QUERY:

SELECT * FROM test6 WHERE b = 'äbc' COLLATE ctest_det;
RESULT:
	postgres: [(1, 'äbc')]

-----------
QUERY:

SELECT * FROM test6 WHERE b = 'äbc' COLLATE ctest_nondet;
RESULT:
	postgres: [(1, 'äbc'), (2, 'äbc')]

-----------
QUERY:


-- same with arrays
CREATE TABLE test6a (a int, b text[]);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test6a VALUES (1, ARRAY[U&'\00E4bc']);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test6a VALUES (2, ARRAY[U&'\0061\0308bc']);
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM test6a;
RESULT:
	postgres: [(1, ['äbc']), (2, ['äbc'])]

-----------
QUERY:

SELECT * FROM test6a WHERE b = ARRAY['äbc'] COLLATE ctest_det;
RESULT:
	postgres: [(1, ['äbc'])]

-----------
QUERY:

SELECT * FROM test6a WHERE b = ARRAY['äbc'] COLLATE ctest_nondet;
RESULT:
	postgres: [(1, ['äbc']), (2, ['äbc'])]

-----------
QUERY:


CREATE COLLATION case_sensitive (provider = icu, locale = '');
RESULT:
	postgres: None

-----------
QUERY:

CREATE COLLATION case_insensitive (provider = icu, locale = '@colStrength=secondary', deterministic = false);
RESULT:
	postgres: None

-----------
QUERY:


SELECT 'abc' <= 'ABC' COLLATE case_sensitive, 'abc' >= 'ABC' COLLATE case_sensitive;
RESULT:
	postgres: [(True, False)]

-----------
QUERY:

SELECT 'abc' <= 'ABC' COLLATE case_insensitive, 'abc' >= 'ABC' COLLATE case_insensitive;
RESULT:
	postgres: [(True, True)]

-----------
QUERY:


-- test language tags
CREATE COLLATION lt_insensitive (provider = icu, locale = 'en-u-ks-level1', deterministic = false);
RESULT:
	postgres: None

-----------
QUERY:

SELECT 'aBcD' COLLATE lt_insensitive = 'AbCd' COLLATE lt_insensitive;
RESULT:
	postgres: [(True,)]

-----------
QUERY:

CREATE COLLATION lt_upperfirst (provider = icu, locale = 'und-u-kf-upper');
RESULT:
	postgres: None

-----------
QUERY:

SELECT 'Z' COLLATE lt_upperfirst < 'z' COLLATE lt_upperfirst;
RESULT:
	postgres: [(True,)]

-----------
QUERY:


CREATE TABLE test1cs (x text COLLATE case_sensitive);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test2cs (x text COLLATE case_sensitive);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test3cs (x text COLLATE case_sensitive);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test1cs VALUES ('abc'), ('def'), ('ghi');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test2cs VALUES ('ABC'), ('ghi');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test3cs VALUES ('abc'), ('ABC'), ('def'), ('ghi');
RESULT:
	postgres: None

-----------
QUERY:


SELECT x FROM test3cs WHERE x = 'abc';
RESULT:
	postgres: [('abc',)]

-----------
QUERY:

SELECT x FROM test3cs WHERE x <> 'abc';
RESULT:
	postgres: [('ABC',), ('def',), ('ghi',)]

-----------
QUERY:

SELECT x FROM test3cs WHERE x LIKE 'a%';
RESULT:
	postgres: [('abc',)]

-----------
QUERY:

SELECT x FROM test3cs WHERE x ILIKE 'a%';
RESULT:
	postgres: [('abc',), ('ABC',)]

-----------
QUERY:

SELECT x FROM test3cs WHERE x SIMILAR TO 'a%';
RESULT:
	postgres: [('abc',)]

-----------
QUERY:

SELECT x FROM test3cs WHERE x ~ 'a';
RESULT:
	postgres: [('abc',)]

-----------
QUERY:

SELECT x FROM test1cs UNION SELECT x FROM test2cs ORDER BY x;
RESULT:
	postgres: [('abc',), ('ABC',), ('def',), ('ghi',)]

-----------
QUERY:

SELECT x FROM test2cs UNION SELECT x FROM test1cs ORDER BY x;
RESULT:
	postgres: [('abc',), ('ABC',), ('def',), ('ghi',)]

-----------
QUERY:

SELECT x FROM test1cs INTERSECT SELECT x FROM test2cs;
RESULT:
	postgres: [('ghi',)]

-----------
QUERY:

SELECT x FROM test2cs INTERSECT SELECT x FROM test1cs;
RESULT:
	postgres: [('ghi',)]

-----------
QUERY:

SELECT x FROM test1cs EXCEPT SELECT x FROM test2cs;
RESULT:
	postgres: [('abc',), ('def',)]

-----------
QUERY:

SELECT x FROM test2cs EXCEPT SELECT x FROM test1cs;
RESULT:
	postgres: [('ABC',)]

-----------
QUERY:

SELECT DISTINCT x FROM test3cs ORDER BY x;
RESULT:
	postgres: [('abc',), ('ABC',), ('def',), ('ghi',)]

-----------
QUERY:

SELECT count(DISTINCT x) FROM test3cs;
RESULT:
	postgres: [(4,)]

-----------
QUERY:

SELECT x, count(*) FROM test3cs GROUP BY x ORDER BY x;
RESULT:
	postgres: [('abc', 1), ('ABC', 1), ('def', 1), ('ghi', 1)]

-----------
QUERY:

SELECT x, row_number() OVER (ORDER BY x), rank() OVER (ORDER BY x) FROM test3cs ORDER BY x;
RESULT:
	postgres: [('abc', 1, 1), ('ABC', 2, 2), ('def', 3, 3), ('ghi', 4, 4)]

-----------
QUERY:

CREATE UNIQUE INDEX ON test1cs (x);
RESULT:
	postgres: None

-----------
QUERY:
  -- ok
INSERT INTO test1cs VALUES ('ABC');
RESULT:
	postgres: None

-----------
QUERY:
  -- ok
CREATE UNIQUE INDEX ON test3cs (x);
RESULT:
	postgres: None

-----------
QUERY:
  -- ok
SELECT string_to_array('ABC,DEF,GHI' COLLATE case_sensitive, ',', 'abc');
RESULT:
	postgres: [(['ABC', 'DEF', 'GHI'],)]

-----------
QUERY:

SELECT string_to_array('ABCDEFGHI' COLLATE case_sensitive, NULL, 'b');
RESULT:
	postgres: [(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],)]

-----------
QUERY:


CREATE TABLE test1ci (x text COLLATE case_insensitive);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test2ci (x text COLLATE case_insensitive);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test3ci (x text COLLATE case_insensitive);
RESULT:
	postgres: None

-----------
QUERY:

CREATE INDEX ON test3ci (x text_pattern_ops);
RESULT:
	postgres: nondeterministic collations are not supported for operator class "text_pattern_ops"


-----------
QUERY:
  -- error
INSERT INTO test1ci VALUES ('abc'), ('def'), ('ghi');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test2ci VALUES ('ABC'), ('ghi');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test3ci VALUES ('abc'), ('ABC'), ('def'), ('ghi');
RESULT:
	postgres: None

-----------
QUERY:


SELECT x FROM test3ci WHERE x = 'abc';
RESULT:
	postgres: [('abc',), ('ABC',)]

-----------
QUERY:

SELECT x FROM test3ci WHERE x <> 'abc';
RESULT:
	postgres: [('def',), ('ghi',)]

-----------
QUERY:

SELECT x FROM test3ci WHERE x LIKE 'a%';
RESULT:
	postgres: nondeterministic collations are not supported for LIKE


-----------
QUERY:

SELECT x FROM test3ci WHERE x ILIKE 'a%';
RESULT:
	postgres: nondeterministic collations are not supported for ILIKE


-----------
QUERY:

SELECT x FROM test3ci WHERE x SIMILAR TO 'a%';
RESULT:
	postgres: nondeterministic collations are not supported for regular expressions


-----------
QUERY:

SELECT x FROM test3ci WHERE x ~ 'a';
RESULT:
	postgres: nondeterministic collations are not supported for regular expressions


-----------
QUERY:

SELECT x FROM test1ci UNION SELECT x FROM test2ci ORDER BY x;
RESULT:
	postgres: [('abc',), ('def',), ('ghi',)]

-----------
QUERY:

SELECT x FROM test2ci UNION SELECT x FROM test1ci ORDER BY x;
RESULT:
	postgres: [('ABC',), ('def',), ('ghi',)]

-----------
QUERY:

SELECT x FROM test1ci INTERSECT SELECT x FROM test2ci ORDER BY x;
RESULT:
	postgres: [('abc',), ('ghi',)]

-----------
QUERY:

SELECT x FROM test2ci INTERSECT SELECT x FROM test1ci ORDER BY x;
RESULT:
	postgres: [('ABC',), ('ghi',)]

-----------
QUERY:

SELECT x FROM test1ci EXCEPT SELECT x FROM test2ci;
RESULT:
	postgres: [('def',)]

-----------
QUERY:

SELECT x FROM test2ci EXCEPT SELECT x FROM test1ci;
RESULT:
	postgres: []

-----------
QUERY:

SELECT DISTINCT x FROM test3ci ORDER BY x;
RESULT:
	postgres: [('abc',), ('def',), ('ghi',)]

-----------
QUERY:

SELECT count(DISTINCT x) FROM test3ci;
RESULT:
	postgres: [(3,)]

-----------
QUERY:

SELECT x, count(*) FROM test3ci GROUP BY x ORDER BY x;
RESULT:
	postgres: [('abc', 2), ('def', 1), ('ghi', 1)]

-----------
QUERY:

SELECT x, row_number() OVER (ORDER BY x), rank() OVER (ORDER BY x) FROM test3ci ORDER BY x;
RESULT:
	postgres: [('abc', 1, 1), ('ABC', 2, 1), ('def', 3, 3), ('ghi', 4, 4)]

-----------
QUERY:

CREATE UNIQUE INDEX ON test1ci (x);
RESULT:
	postgres: None

-----------
QUERY:
  -- ok
INSERT INTO test1ci VALUES ('ABC');
RESULT:
	postgres: duplicate key value violates unique constraint "test1ci_x_idx"
DETAIL:  Key (x)=(ABC) already exists.


-----------
QUERY:
  -- error
CREATE UNIQUE INDEX ON test3ci (x);
RESULT:
	postgres: could not create unique index "test3ci_x_idx"
DETAIL:  Key (x)=(abc) is duplicated.


-----------
QUERY:
  -- error
SELECT string_to_array('ABC,DEF,GHI' COLLATE case_insensitive, ',', 'abc');
RESULT:
	postgres: nondeterministic collations are not supported for substring searches


-----------
QUERY:

SELECT string_to_array('ABCDEFGHI' COLLATE case_insensitive, NULL, 'b');
RESULT:
	postgres: [(['A', None, 'C', 'D', 'E', 'F', 'G', 'H', 'I'],)]

-----------
QUERY:


-- bpchar
CREATE TABLE test1bpci (x char(3) COLLATE case_insensitive);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test2bpci (x char(3) COLLATE case_insensitive);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test3bpci (x char(3) COLLATE case_insensitive);
RESULT:
	postgres: None

-----------
QUERY:

CREATE INDEX ON test3bpci (x bpchar_pattern_ops);
RESULT:
	postgres: nondeterministic collations are not supported for operator class "bpchar_pattern_ops"


-----------
QUERY:
  -- error
INSERT INTO test1bpci VALUES ('abc'), ('def'), ('ghi');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test2bpci VALUES ('ABC'), ('ghi');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test3bpci VALUES ('abc'), ('ABC'), ('def'), ('ghi');
RESULT:
	postgres: None

-----------
QUERY:


SELECT x FROM test3bpci WHERE x = 'abc';
RESULT:
	postgres: [('abc',), ('ABC',)]

-----------
QUERY:

SELECT x FROM test3bpci WHERE x <> 'abc';
RESULT:
	postgres: [('def',), ('ghi',)]

-----------
QUERY:

SELECT x FROM test3bpci WHERE x LIKE 'a%';
RESULT:
	postgres: nondeterministic collations are not supported for LIKE


-----------
QUERY:

SELECT x FROM test3bpci WHERE x ILIKE 'a%';
RESULT:
	postgres: nondeterministic collations are not supported for ILIKE


-----------
QUERY:

SELECT x FROM test3bpci WHERE x SIMILAR TO 'a%';
RESULT:
	postgres: nondeterministic collations are not supported for regular expressions


-----------
QUERY:

SELECT x FROM test3bpci WHERE x ~ 'a';
RESULT:
	postgres: nondeterministic collations are not supported for regular expressions


-----------
QUERY:

SELECT x FROM test1bpci UNION SELECT x FROM test2bpci ORDER BY x;
RESULT:
	postgres: [('abc',), ('def',), ('ghi',)]

-----------
QUERY:

SELECT x FROM test2bpci UNION SELECT x FROM test1bpci ORDER BY x;
RESULT:
	postgres: [('ABC',), ('def',), ('ghi',)]

-----------
QUERY:

SELECT x FROM test1bpci INTERSECT SELECT x FROM test2bpci ORDER BY x;
RESULT:
	postgres: [('abc',), ('ghi',)]

-----------
QUERY:

SELECT x FROM test2bpci INTERSECT SELECT x FROM test1bpci ORDER BY x;
RESULT:
	postgres: [('ABC',), ('ghi',)]

-----------
QUERY:

SELECT x FROM test1bpci EXCEPT SELECT x FROM test2bpci;
RESULT:
	postgres: [('def',)]

-----------
QUERY:

SELECT x FROM test2bpci EXCEPT SELECT x FROM test1bpci;
RESULT:
	postgres: []

-----------
QUERY:

SELECT DISTINCT x FROM test3bpci ORDER BY x;
RESULT:
	postgres: [('abc',), ('def',), ('ghi',)]

-----------
QUERY:

SELECT count(DISTINCT x) FROM test3bpci;
RESULT:
	postgres: [(3,)]

-----------
QUERY:

SELECT x, count(*) FROM test3bpci GROUP BY x ORDER BY x;
RESULT:
	postgres: [('abc', 2), ('def', 1), ('ghi', 1)]

-----------
QUERY:

SELECT x, row_number() OVER (ORDER BY x), rank() OVER (ORDER BY x) FROM test3bpci ORDER BY x;
RESULT:
	postgres: [('abc', 1, 1), ('ABC', 2, 1), ('def', 3, 3), ('ghi', 4, 4)]

-----------
QUERY:

CREATE UNIQUE INDEX ON test1bpci (x);
RESULT:
	postgres: None

-----------
QUERY:
  -- ok
INSERT INTO test1bpci VALUES ('ABC');
RESULT:
	postgres: duplicate key value violates unique constraint "test1bpci_x_idx"
DETAIL:  Key (x)=(ABC) already exists.


-----------
QUERY:
  -- error
CREATE UNIQUE INDEX ON test3bpci (x);
RESULT:
	postgres: could not create unique index "test3bpci_x_idx"
DETAIL:  Key (x)=(abc) is duplicated.


-----------
QUERY:
  -- error
SELECT string_to_array('ABC,DEF,GHI'::char(11) COLLATE case_insensitive, ',', 'abc');
RESULT:
	postgres: nondeterministic collations are not supported for substring searches


-----------
QUERY:

SELECT string_to_array('ABCDEFGHI'::char(9) COLLATE case_insensitive, NULL, 'b');
RESULT:
	postgres: [(['A', None, 'C', 'D', 'E', 'F', 'G', 'H', 'I'],)]

-----------
QUERY:


-- This tests the issue described in match_pattern_prefix().  In the
-- absence of that check, the case_insensitive tests below would
-- return no rows where they should logically return one.
CREATE TABLE test4c (x text COLLATE "C");
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test4c VALUES ('abc');
RESULT:
	postgres: None

-----------
QUERY:

CREATE INDEX ON test4c (x);
RESULT:
	postgres: None

-----------
QUERY:

SET enable_seqscan = off;
RESULT:
	postgres: None

-----------
QUERY:

SELECT x FROM test4c WHERE x LIKE 'ABC' COLLATE case_sensitive;
RESULT:
	postgres: []

-----------
QUERY:
  -- ok, no rows
SELECT x FROM test4c WHERE x LIKE 'ABC%' COLLATE case_sensitive;
RESULT:
	postgres: []

-----------
QUERY:
  -- ok, no rows
SELECT x FROM test4c WHERE x LIKE 'ABC' COLLATE case_insensitive;
RESULT:
	postgres: nondeterministic collations are not supported for LIKE


-----------
QUERY:
  -- error
SELECT x FROM test4c WHERE x LIKE 'ABC%' COLLATE case_insensitive;
RESULT:
	postgres: nondeterministic collations are not supported for LIKE


-----------
QUERY:
  -- error
RESET enable_seqscan;
RESULT:
	postgres: None

-----------
QUERY:


-- Unicode special case: different variants of Greek lower case sigma.
-- A naive implementation like citext that just does lower(x) =
-- lower(y) will do the wrong thing here, because lower(/* REPLACED */''Σ/* REPLACED */'') is /* REPLACED */''σ/* REPLACED */''
-- but upper(/* REPLACED */''ς/* REPLACED */'') is /* REPLACED */''Σ/* REPLACED */''.
SELECT 'ὀδυσσεύς' = 'ὈΔΥΣΣΕΎΣ' COLLATE case_sensitive;
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT 'ὀδυσσεύς' = 'ὈΔΥΣΣΕΎΣ' COLLATE case_insensitive;
RESULT:
	postgres: [(True,)]

-----------
QUERY:


-- name vs. text comparison operators
SELECT relname FROM pg_class WHERE relname = 'PG_CLASS'::text COLLATE case_insensitive;
RESULT:
	postgres: [('pg_class',)]

-----------
QUERY:

SELECT relname FROM pg_class WHERE 'PG_CLASS'::text = relname COLLATE case_insensitive;
RESULT:
	postgres: [('pg_class',)]

-----------
QUERY:


SELECT typname FROM pg_type WHERE typname LIKE 'int_' AND typname <> 'INT2'::text
  COLLATE case_insensitive ORDER BY typname;
RESULT:
	postgres: [('int4',), ('int8',)]

-----------
QUERY:

SELECT typname FROM pg_type WHERE typname LIKE 'int_' AND 'INT2'::text <> typname
  COLLATE case_insensitive ORDER BY typname;
RESULT:
	postgres: [('int4',), ('int8',)]

-----------
QUERY:


-- test case adapted from subselect.sql
CREATE TEMP TABLE outer_text (f1 text COLLATE case_insensitive, f2 text);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO outer_text VALUES ('a', 'a');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO outer_text VALUES ('b', 'a');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO outer_text VALUES ('A', NULL);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO outer_text VALUES ('B', NULL);
RESULT:
	postgres: None

-----------
QUERY:


CREATE TEMP TABLE inner_text (c1 text COLLATE case_insensitive, c2 text);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO inner_text VALUES ('a', NULL);
RESULT:
	postgres: None

-----------
QUERY:


SELECT * FROM outer_text WHERE (f1, f2) NOT IN (SELECT * FROM inner_text);
RESULT:
	postgres: [('b', 'a'), ('B', None)]

-----------
QUERY:


-- accents
SET client_min_messages=WARNING;
RESULT:
	postgres: None

-----------
QUERY:

CREATE COLLATION ignore_accents (provider = icu, locale = '@colStrength=primary;
RESULT:
	postgres: unterminated quoted string at or near "'@colStrength=primary;"
LINE 2: ...OLLATION ignore_accents (provider = icu, locale = '@colStren...
                                                             ^


-----------
QUERY:
colCaseLevel=yes', deterministic = false);
RESULT:
	postgres: syntax error at or near "colCaseLevel"
LINE 1: colCaseLevel=yes', deterministic = false);
        ^


-----------
QUERY:

RESET client_min_messages;
RESULT:
	postgres: None

-----------
QUERY:


CREATE TABLE test4 (a int, b text);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test4 VALUES (1, 'cote'), (2, 'côte'), (3, 'coté'), (4, 'côté');
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM test4 WHERE b = 'cote';
RESULT:
	postgres: [(1, 'cote')]

-----------
QUERY:

SELECT * FROM test4 WHERE b = 'cote' COLLATE ignore_accents;
RESULT:
	postgres: collation "ignore_accents" for encoding "UTF8" does not exist
LINE 2: SELECT * FROM test4 WHERE b = 'cote' COLLATE ignore_accents;
                                             ^


-----------
QUERY:

SELECT * FROM test4 WHERE b = 'Cote' COLLATE ignore_accents;
RESULT:
	postgres: collation "ignore_accents" for encoding "UTF8" does not exist
LINE 2: SELECT * FROM test4 WHERE b = 'Cote' COLLATE ignore_accents;
                                             ^


-----------
QUERY:
  -- still case-sensitive
SELECT * FROM test4 WHERE b = 'Cote' COLLATE case_insensitive;
RESULT:
	postgres: [(1, 'cote')]

-----------
QUERY:


-- foreign keys (should use collation of primary key)

-- PK is case-sensitive, FK is case-insensitive
CREATE TABLE test10pk (x text COLLATE case_sensitive PRIMARY KEY);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test10pk VALUES ('abc'), ('def'), ('ghi');
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test10fk (x text COLLATE case_insensitive REFERENCES test10pk (x) ON UPDATE CASCADE ON DELETE CASCADE);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test10fk VALUES ('abc');
RESULT:
	postgres: None

-----------
QUERY:
  -- ok
INSERT INTO test10fk VALUES ('ABC');
RESULT:
	postgres: insert or update on table "test10fk" violates foreign key constraint "test10fk_x_fkey"
DETAIL:  Key (x)=(ABC) is not present in table "test10pk".


-----------
QUERY:
  -- error
INSERT INTO test10fk VALUES ('xyz');
RESULT:
	postgres: insert or update on table "test10fk" violates foreign key constraint "test10fk_x_fkey"
DETAIL:  Key (x)=(xyz) is not present in table "test10pk".


-----------
QUERY:
  -- error
SELECT * FROM test10pk;
RESULT:
	postgres: [('abc',), ('def',), ('ghi',)]

-----------
QUERY:

SELECT * FROM test10fk;
RESULT:
	postgres: [('abc',)]

-----------
QUERY:

-- restrict update even though the values are /* REPLACED */''equal/* REPLACED */'' in the FK table
UPDATE test10fk SET x = 'ABC' WHERE x = 'abc';
RESULT:
	postgres: insert or update on table "test10fk" violates foreign key constraint "test10fk_x_fkey"
DETAIL:  Key (x)=(ABC) is not present in table "test10pk".


-----------
QUERY:
  -- error
SELECT * FROM test10fk;
RESULT:
	postgres: [('abc',)]

-----------
QUERY:

DELETE FROM test10pk WHERE x = 'abc';
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM test10pk;
RESULT:
	postgres: [('def',), ('ghi',)]

-----------
QUERY:

SELECT * FROM test10fk;
RESULT:
	postgres: []

-----------
QUERY:


-- PK is case-insensitive, FK is case-sensitive
CREATE TABLE test11pk (x text COLLATE case_insensitive PRIMARY KEY);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test11pk VALUES ('abc'), ('def'), ('ghi');
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test11fk (x text COLLATE case_sensitive REFERENCES test11pk (x) ON UPDATE CASCADE ON DELETE CASCADE);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test11fk VALUES ('abc');
RESULT:
	postgres: None

-----------
QUERY:
  -- ok
INSERT INTO test11fk VALUES ('ABC');
RESULT:
	postgres: None

-----------
QUERY:
  -- ok
INSERT INTO test11fk VALUES ('xyz');
RESULT:
	postgres: insert or update on table "test11fk" violates foreign key constraint "test11fk_x_fkey"
DETAIL:  Key (x)=(xyz) is not present in table "test11pk".


-----------
QUERY:
  -- error
SELECT * FROM test11pk;
RESULT:
	postgres: [('abc',), ('def',), ('ghi',)]

-----------
QUERY:

SELECT * FROM test11fk;
RESULT:
	postgres: [('abc',), ('ABC',)]

-----------
QUERY:

-- cascade update even though the values are /* REPLACED */''equal/* REPLACED */'' in the PK table
UPDATE test11pk SET x = 'ABC' WHERE x = 'abc';
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM test11fk;
RESULT:
	postgres: [('ABC',), ('ABC',)]

-----------
QUERY:

DELETE FROM test11pk WHERE x = 'abc';
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM test11pk;
RESULT:
	postgres: [('def',), ('ghi',)]

-----------
QUERY:

SELECT * FROM test11fk;
RESULT:
	postgres: []

-----------
QUERY:


-- partitioning
CREATE TABLE test20 (a int, b text COLLATE case_insensitive) PARTITION BY LIST (b);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test20_1 PARTITION OF test20 FOR VALUES IN ('abc');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test20 VALUES (1, 'abc');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test20 VALUES (2, 'ABC');
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM test20_1;
RESULT:
	postgres: [(1, 'abc'), (2, 'ABC')]

-----------
QUERY:


CREATE TABLE test21 (a int, b text COLLATE case_insensitive) PARTITION BY RANGE (b);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test21_1 PARTITION OF test21 FOR VALUES FROM ('ABC') TO ('DEF');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test21 VALUES (1, 'abc');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test21 VALUES (2, 'ABC');
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM test21_1;
RESULT:
	postgres: [(1, 'abc'), (2, 'ABC')]

-----------
QUERY:


CREATE TABLE test22 (a int, b text COLLATE case_sensitive) PARTITION BY HASH (b);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test22_0 PARTITION OF test22 FOR VALUES WITH (MODULUS 2, REMAINDER 0);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test22_1 PARTITION OF test22 FOR VALUES WITH (MODULUS 2, REMAINDER 1);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test22 VALUES (1, 'def');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test22 VALUES (2, 'DEF');
RESULT:
	postgres: None

-----------
QUERY:

-- they end up in different partitions
SELECT (SELECT count(*) FROM test22_0) = (SELECT count(*) FROM test22_1);
RESULT:
	postgres: [(True,)]

-----------
QUERY:


-- same with arrays
CREATE TABLE test22a (a int, b text[] COLLATE case_sensitive) PARTITION BY HASH (b);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test22a_0 PARTITION OF test22a FOR VALUES WITH (MODULUS 2, REMAINDER 0);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test22a_1 PARTITION OF test22a FOR VALUES WITH (MODULUS 2, REMAINDER 1);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test22a VALUES (1, ARRAY['def']);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test22a VALUES (2, ARRAY['DEF']);
RESULT:
	postgres: None

-----------
QUERY:

-- they end up in different partitions
SELECT (SELECT count(*) FROM test22a_0) = (SELECT count(*) FROM test22a_1);
RESULT:
	postgres: [(True,)]

-----------
QUERY:


CREATE TABLE test23 (a int, b text COLLATE case_insensitive) PARTITION BY HASH (b);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test23_0 PARTITION OF test23 FOR VALUES WITH (MODULUS 2, REMAINDER 0);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test23_1 PARTITION OF test23 FOR VALUES WITH (MODULUS 2, REMAINDER 1);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test23 VALUES (1, 'def');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test23 VALUES (2, 'DEF');
RESULT:
	postgres: None

-----------
QUERY:

-- they end up in the same partition (but it/* REPLACED */''s platform-dependent which one)
SELECT (SELECT count(*) FROM test23_0) <> (SELECT count(*) FROM test23_1);
RESULT:
	postgres: [(True,)]

-----------
QUERY:


-- same with arrays
CREATE TABLE test23a (a int, b text[] COLLATE case_insensitive) PARTITION BY HASH (b);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test23a_0 PARTITION OF test23a FOR VALUES WITH (MODULUS 2, REMAINDER 0);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test23a_1 PARTITION OF test23a FOR VALUES WITH (MODULUS 2, REMAINDER 1);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test23a VALUES (1, ARRAY['def']);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test23a VALUES (2, ARRAY['DEF']);
RESULT:
	postgres: None

-----------
QUERY:

-- they end up in the same partition (but it/* REPLACED */''s platform-dependent which one)
SELECT (SELECT count(*) FROM test23a_0) <> (SELECT count(*) FROM test23a_1);
RESULT:
	postgres: [(True,)]

-----------
QUERY:


CREATE TABLE test30 (a int, b char(3) COLLATE case_insensitive) PARTITION BY LIST (b);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test30_1 PARTITION OF test30 FOR VALUES IN ('abc');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test30 VALUES (1, 'abc');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test30 VALUES (2, 'ABC');
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM test30_1;
RESULT:
	postgres: [(1, 'abc'), (2, 'ABC')]

-----------
QUERY:


CREATE TABLE test31 (a int, b char(3) COLLATE case_insensitive) PARTITION BY RANGE (b);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test31_1 PARTITION OF test31 FOR VALUES FROM ('ABC') TO ('DEF');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test31 VALUES (1, 'abc');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test31 VALUES (2, 'ABC');
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM test31_1;
RESULT:
	postgres: [(1, 'abc'), (2, 'ABC')]

-----------
QUERY:


CREATE TABLE test32 (a int, b char(3) COLLATE case_sensitive) PARTITION BY HASH (b);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test32_0 PARTITION OF test32 FOR VALUES WITH (MODULUS 2, REMAINDER 0);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test32_1 PARTITION OF test32 FOR VALUES WITH (MODULUS 2, REMAINDER 1);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test32 VALUES (1, 'def');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test32 VALUES (2, 'DEF');
RESULT:
	postgres: None

-----------
QUERY:

-- they end up in different partitions
SELECT (SELECT count(*) FROM test32_0) = (SELECT count(*) FROM test32_1);
RESULT:
	postgres: [(True,)]

-----------
QUERY:


CREATE TABLE test33 (a int, b char(3) COLLATE case_insensitive) PARTITION BY HASH (b);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test33_0 PARTITION OF test33 FOR VALUES WITH (MODULUS 2, REMAINDER 0);
RESULT:
	postgres: None

-----------
QUERY:

CREATE TABLE test33_1 PARTITION OF test33 FOR VALUES WITH (MODULUS 2, REMAINDER 1);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test33 VALUES (1, 'def');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test33 VALUES (2, 'DEF');
RESULT:
	postgres: None

-----------
QUERY:

-- they end up in the same partition (but it/* REPLACED */''s platform-dependent which one)
SELECT (SELECT count(*) FROM test33_0) <> (SELECT count(*) FROM test33_1);
RESULT:
	postgres: [(True,)]

-----------
QUERY:



-- cleanup
RESET search_path;
RESULT:
	postgres: None

-----------
QUERY:

SET client_min_messages TO warning;
RESULT:
	postgres: None

-----------
QUERY:

DROP SCHEMA collate_tests CASCADE;
RESULT:
	postgres: None

-----------
QUERY:

RESET client_min_messages;
RESULT:
	postgres: None

-----------
QUERY:


-- leave a collation for pg_upgrade test
CREATE COLLATION coll_icu_upgrade FROM "und-x-icu";
RESULT:
	postgres: None
