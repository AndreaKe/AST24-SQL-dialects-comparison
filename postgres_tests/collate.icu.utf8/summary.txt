Guest DBMS identified: postgres
-----------
QUERY:
/*
 * This test is for ICU collations.
 */

/* skip test if not UTF8 server encoding or no ICU collations installed */
SELECT getdatabaseencoding() <> 'UTF8' OR
       (SELECT count(*) FROM pg_collation WHERE collprovider = 'i' AND collname <> 'unicode') = 0
       AS skip_test \gset
\if :skip_test
\quit
\endif

SET client_encoding TO UTF8
RESULT: []

-----------
QUERY:
CREATE SCHEMA collate_tests
RESULT: []

-----------
QUERY:
SET search_path = collate_tests
RESULT: []

-----------
QUERY:
CREATE TABLE collate_test1 (
    a int,
    b text COLLATE "en-x-icu" NOT NULL
)
RESULT: []

-----------
QUERY:
-- \d collate_test1

CREATE TABLE collate_test_fail (
    a int,
    b text COLLATE "ja_JP.eucjp-x-icu"
)
RESULT: []

-----------
QUERY:
CREATE TABLE collate_test_fail (
    a int,
    b text COLLATE "foo-x-icu"
)
RESULT: []

-----------
QUERY:
CREATE TABLE collate_test_fail (
    a int COLLATE "en-x-icu",
    b text
)
RESULT: []

-----------
QUERY:
CREATE TABLE collate_test_like (
    LIKE collate_test1
)
RESULT: []

-----------
QUERY:
-- \d collate_test_like

CREATE TABLE collate_test2 (
    a int,
    b text COLLATE "sv-x-icu"
)
RESULT: []

-----------
QUERY:
CREATE TABLE collate_test3 (
    a int,
    b text COLLATE "C"
)
RESULT: []

-----------
QUERY:
INSERT INTO collate_test1 VALUES (1, 'abc'), (2, 'äbc'), (3, 'bbc'), (4, 'ABC')
RESULT: []

-----------
QUERY:
INSERT INTO collate_test2 SELECT * FROM collate_test1
RESULT: []

-----------
QUERY:
INSERT INTO collate_test3 SELECT * FROM collate_test1
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b >= 'bbc'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test2 WHERE b >= 'bbc'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test3 WHERE b >= 'bbc'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test3 WHERE b >= 'BBC'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b COLLATE "C" >= 'bbc'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b >= 'bbc' COLLATE "C"
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b COLLATE "C" >= 'bbc' COLLATE "C"
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b COLLATE "C" >= 'bbc' COLLATE "en-x-icu"
RESULT: []

-----------
QUERY:
CREATE DOMAIN testdomain_sv AS text COLLATE "sv-x-icu"
RESULT: []

-----------
QUERY:
CREATE DOMAIN testdomain_i AS int COLLATE "sv-x-icu"
RESULT: []

-----------
QUERY:
-- fails
CREATE TABLE collate_test4 (
    a int,
    b testdomain_sv
)
RESULT: []

-----------
QUERY:
INSERT INTO collate_test4 SELECT * FROM collate_test1
RESULT: []

-----------
QUERY:
SELECT a, b FROM collate_test4 ORDER BY b
RESULT: []

-----------
QUERY:
CREATE TABLE collate_test5 (
    a int,
    b testdomain_sv COLLATE "en-x-icu"
)
RESULT: []

-----------
QUERY:
INSERT INTO collate_test5 SELECT * FROM collate_test1
RESULT: []

-----------
QUERY:
SELECT a, b FROM collate_test5 ORDER BY b
RESULT: []

-----------
QUERY:
SELECT a, b FROM collate_test1 ORDER BY b
RESULT: []

-----------
QUERY:
SELECT a, b FROM collate_test2 ORDER BY b
RESULT: []

-----------
QUERY:
SELECT a, b FROM collate_test3 ORDER BY b
RESULT: []

-----------
QUERY:
SELECT a, b FROM collate_test1 ORDER BY b COLLATE "C"
RESULT: []

-----------
QUERY:
-- star expansion
SELECT * FROM collate_test1 ORDER BY b
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test2 ORDER BY b
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test3 ORDER BY b
RESULT: []

-----------
QUERY:
-- constant expression folding
SELECT 'bbc' COLLATE "en-x-icu" > 'äbc' COLLATE "en-x-icu" AS "true"
RESULT: []

-----------
QUERY:
SELECT 'bbc' COLLATE "sv-x-icu" > 'äbc' COLLATE "sv-x-icu" AS "false"
RESULT: []

-----------
QUERY:
-- upper/lower

CREATE TABLE collate_test10 (
    a int,
    x text COLLATE "en-x-icu",
    y text COLLATE "tr-x-icu"
)
RESULT: []

-----------
QUERY:
INSERT INTO collate_test10 VALUES (1, 'hij', 'hij'), (2, 'HIJ', 'HIJ')
RESULT: []

-----------
QUERY:
SELECT a, lower(x), lower(y), upper(x), upper(y), initcap(x), initcap(y) FROM collate_test10
RESULT: []

-----------
QUERY:
SELECT a, lower(x COLLATE "C"), lower(y COLLATE "C") FROM collate_test10
RESULT: []

-----------
QUERY:
SELECT a, x, y FROM collate_test10 ORDER BY lower(y), a
RESULT: []

-----------
QUERY:
-- LIKE/ILIKE

SELECT * FROM collate_test1 WHERE b LIKE 'abc'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b LIKE 'abc%'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b LIKE '%bc%'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b ILIKE 'abc'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b ILIKE 'abc%'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b ILIKE '%bc%'
RESULT: []

-----------
QUERY:
SELECT 'Türkiye' COLLATE "en-x-icu" ILIKE '%KI%' AS "true"
RESULT: []

-----------
QUERY:
SELECT 'Türkiye' COLLATE "tr-x-icu" ILIKE '%KI%' AS "false"
RESULT: []

-----------
QUERY:
SELECT 'bıt' ILIKE 'BIT' COLLATE "en-x-icu" AS "false"
RESULT: []

-----------
QUERY:
SELECT 'bıt' ILIKE 'BIT' COLLATE "tr-x-icu" AS "true"
RESULT: []

-----------
QUERY:
-- The following actually exercises the selectivity estimation for ILIKE.
SELECT relname FROM pg_class WHERE relname ILIKE 'abc%'
RESULT: []

-----------
QUERY:
-- regular expressions

SELECT * FROM collate_test1 WHERE b ~ '^abc$'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b ~ '^abc'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b ~ 'bc'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b ~* '^abc$'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b ~* '^abc'
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test1 WHERE b ~* 'bc'
RESULT: []

-----------
QUERY:
CREATE TABLE collate_test6 (
    a int,
    b text COLLATE "en-x-icu"
)
RESULT: []

-----------
QUERY:
INSERT INTO collate_test6 VALUES (1, 'abc'), (2, 'ABC'), (3, '123'), (4, 'ab1'),
                                 (5, 'a1!'), (6, 'a c'), (7, '!.
RESULT: []

-----------
QUERY:
'), (8, '   '),
                                 (9, 'äbç'), (10, 'ÄBÇ')
RESULT: []

-----------
QUERY:
SELECT b,
       b ~ '^[[:alpha:]]+$' AS is_alpha,
       b ~ '^[[:upper:]]+$' AS is_upper,
       b ~ '^[[:lower:]]+$' AS is_lower,
       b ~ '^[[:digit:]]+$' AS is_digit,
       b ~ '^[[:alnum:]]+$' AS is_alnum,
       b ~ '^[[:graph:]]+$' AS is_graph,
       b ~ '^[[:print:]]+$' AS is_print,
       b ~ '^[[:punct:]]+$' AS is_punct,
       b ~ '^[[:space:]]+$' AS is_space
FROM collate_test6
RESULT: []

-----------
QUERY:
SELECT 'Türkiye' COLLATE "en-x-icu" ~* 'KI' AS "true"
RESULT: []

-----------
QUERY:
SELECT 'Türkiye' COLLATE "tr-x-icu" ~* 'KI' AS "true"
RESULT: []

-----------
QUERY:
-- true with ICU

SELECT 'bıt' ~* 'BIT' COLLATE "en-x-icu" AS "false"
RESULT: []

-----------
QUERY:
SELECT 'bıt' ~* 'BIT' COLLATE "tr-x-icu" AS "false"
RESULT: []

-----------
QUERY:
-- false with ICU

-- The following actually exercises the selectivity estimation for ~*.
SELECT relname FROM pg_class WHERE relname ~* '^abc'
RESULT: []

-----------
QUERY:
/* not run by default because it requires tr_TR system locale
-- to_char

SET lc_time TO 'tr_TR'
RESULT: []

-----------
QUERY:
SELECT to_char(date '2010-04-01', 'DD TMMON YYYY')
RESULT: []

-----------
QUERY:
SELECT to_char(date '2010-04-01', 'DD TMMON YYYY' COLLATE "tr-x-icu")
RESULT: []

-----------
QUERY:
*/


-- backwards parsing

CREATE VIEW collview1 AS SELECT * FROM collate_test1 WHERE b COLLATE "C" >= 'bbc'
RESULT: []

-----------
QUERY:
CREATE VIEW collview2 AS SELECT a, b FROM collate_test1 ORDER BY b COLLATE "C"
RESULT: []

-----------
QUERY:
CREATE VIEW collview3 AS SELECT a, lower((x || x) COLLATE "C") FROM collate_test10
RESULT: []

-----------
QUERY:
SELECT table_name, view_definition FROM information_schema.views
  WHERE table_name LIKE 'collview%' ORDER BY 1
RESULT: []

-----------
QUERY:
-- collation propagation in various expression types

SELECT a, coalesce(b, 'foo') FROM collate_test1 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, coalesce(b, 'foo') FROM collate_test2 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, coalesce(b, 'foo') FROM collate_test3 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, lower(coalesce(x, 'foo')), lower(coalesce(y, 'foo')) FROM collate_test10
RESULT: []

-----------
QUERY:
SELECT a, b, greatest(b, 'CCC') FROM collate_test1 ORDER BY 3
RESULT: []

-----------
QUERY:
SELECT a, b, greatest(b, 'CCC') FROM collate_test2 ORDER BY 3
RESULT: []

-----------
QUERY:
SELECT a, b, greatest(b, 'CCC') FROM collate_test3 ORDER BY 3
RESULT: []

-----------
QUERY:
SELECT a, x, y, lower(greatest(x, 'foo')), lower(greatest(y, 'foo')) FROM collate_test10
RESULT: []

-----------
QUERY:
SELECT a, nullif(b, 'abc') FROM collate_test1 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, nullif(b, 'abc') FROM collate_test2 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, nullif(b, 'abc') FROM collate_test3 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, lower(nullif(x, 'foo')), lower(nullif(y, 'foo')) FROM collate_test10
RESULT: []

-----------
QUERY:
SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test1 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test2 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, CASE b WHEN 'abc' THEN 'abcd' ELSE b END FROM collate_test3 ORDER BY 2
RESULT: []

-----------
QUERY:
CREATE DOMAIN testdomain AS text
RESULT: []

-----------
QUERY:
SELECT a, b::testdomain FROM collate_test1 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, b::testdomain FROM collate_test2 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, b::testdomain FROM collate_test3 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, b::testdomain_sv FROM collate_test3 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, lower(x::testdomain), lower(y::testdomain) FROM collate_test10
RESULT: []

-----------
QUERY:
SELECT min(b), max(b) FROM collate_test1
RESULT: []

-----------
QUERY:
SELECT min(b), max(b) FROM collate_test2
RESULT: []

-----------
QUERY:
SELECT min(b), max(b) FROM collate_test3
RESULT: []

-----------
QUERY:
SELECT array_agg(b ORDER BY b) FROM collate_test1
RESULT: []

-----------
QUERY:
SELECT array_agg(b ORDER BY b) FROM collate_test2
RESULT: []

-----------
QUERY:
SELECT array_agg(b ORDER BY b) FROM collate_test3
RESULT: []

-----------
QUERY:
SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test1 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, b FROM collate_test2 UNION SELECT a, b FROM collate_test2 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, b FROM collate_test3 WHERE a < 4 INTERSECT SELECT a, b FROM collate_test3 WHERE a > 1 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, b FROM collate_test3 EXCEPT SELECT a, b FROM collate_test3 WHERE a < 2 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test3 ORDER BY 2
RESULT: []

-----------
QUERY:
-- fail
SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test3
RESULT: []

-----------
QUERY:
-- ok
SELECT a, b FROM collate_test1 UNION SELECT a, b FROM collate_test3 ORDER BY 2
RESULT: []

-----------
QUERY:
-- fail
SELECT a, b COLLATE "C" FROM collate_test1 UNION SELECT a, b FROM collate_test3 ORDER BY 2
RESULT: []

-----------
QUERY:
-- ok
SELECT a, b FROM collate_test1 INTERSECT SELECT a, b FROM collate_test3 ORDER BY 2
RESULT: []

-----------
QUERY:
-- fail
SELECT a, b FROM collate_test1 EXCEPT SELECT a, b FROM collate_test3 ORDER BY 2
RESULT: []

-----------
QUERY:
-- fail

CREATE TABLE test_u AS SELECT a, b FROM collate_test1 UNION ALL SELECT a, b FROM collate_test3
RESULT: []

-----------
QUERY:
-- fail

-- ideally this would be a parse-time error, but for now it must be run-time:
select x < y from collate_test10
RESULT: []

-----------
QUERY:
-- fail
select x || y from collate_test10
RESULT: []

-----------
QUERY:
-- ok, because || is not collation aware
select x, y from collate_test10 order by x || y
RESULT: []

-----------
QUERY:
-- not so ok

-- collation mismatch between recursive and non-recursive term
WITH RECURSIVE foo(x) AS
   (SELECT x FROM (VALUES('a' COLLATE "en-x-icu"),('b')) t(x)
   UNION ALL
   SELECT (x || 'c') COLLATE "de-x-icu" FROM foo WHERE length(x) < 10)
SELECT * FROM foo
RESULT: []

-----------
QUERY:
-- casting

SELECT CAST('42' AS text COLLATE "C")
RESULT: []

-----------
QUERY:
SELECT a, CAST(b AS varchar) FROM collate_test1 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, CAST(b AS varchar) FROM collate_test2 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, CAST(b AS varchar) FROM collate_test3 ORDER BY 2
RESULT: []

-----------
QUERY:
-- propagation of collation in SQL functions (inlined and non-inlined cases)
-- and plpgsql functions too

CREATE FUNCTION mylt (text, text) RETURNS boolean LANGUAGE sql
    AS $$ select $1 < $2 $$
RESULT: []

-----------
QUERY:
CREATE FUNCTION mylt_noninline (text, text) RETURNS boolean LANGUAGE sql
    AS $$ select $1 < $2 limit 1 $$
RESULT: []

-----------
QUERY:
CREATE FUNCTION mylt_plpgsql (text, text) RETURNS boolean LANGUAGE plpgsql
    AS $$ begin return $1 < $2; end $$
RESULT: []

-----------
QUERY:
SELECT a.b AS a, b.b AS b, a.b < b.b AS lt,
       mylt(a.b, b.b), mylt_noninline(a.b, b.b), mylt_plpgsql(a.b, b.b)
FROM collate_test1 a, collate_test1 b
ORDER BY a.b, b.b
RESULT: []

-----------
QUERY:
SELECT a.b AS a, b.b AS b, a.b < b.b COLLATE "C" AS lt,
       mylt(a.b, b.b COLLATE "C"), mylt_noninline(a.b, b.b COLLATE "C"),
       mylt_plpgsql(a.b, b.b COLLATE "C")
FROM collate_test1 a, collate_test1 b
ORDER BY a.b, b.b
RESULT: []

-----------
QUERY:
-- collation override in plpgsql

CREATE FUNCTION mylt2 (x text, y text) RETURNS boolean LANGUAGE plpgsql AS $$
declare
  xx text := x;
  yy text := y;
begin
  return xx < yy;
end
$$
RESULT: []

-----------
QUERY:
SELECT mylt2('a', 'B' collate "en-x-icu") as t, mylt2('a', 'B' collate "C") as f
RESULT: []

-----------
QUERY:
CREATE OR REPLACE FUNCTION
  mylt2 (x text, y text) RETURNS boolean LANGUAGE plpgsql AS $$
declare
  xx text COLLATE "POSIX" := x;
  yy text := y;
begin
  return xx < yy;
end
$$
RESULT: []

-----------
QUERY:
SELECT mylt2('a', 'B') as f
RESULT: []

-----------
QUERY:
SELECT mylt2('a', 'B' collate "C") as fail
RESULT: []

-----------
QUERY:
-- conflicting collations
SELECT mylt2('a', 'B' collate "POSIX") as f
RESULT: []

-----------
QUERY:
-- polymorphism

SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test1)) ORDER BY 1
RESULT: []

-----------
QUERY:
SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test2)) ORDER BY 1
RESULT: []

-----------
QUERY:
SELECT * FROM unnest((SELECT array_agg(b ORDER BY b) FROM collate_test3)) ORDER BY 1
RESULT: []

-----------
QUERY:
CREATE FUNCTION dup (anyelement) RETURNS anyelement
    AS 'select $1' LANGUAGE sql
RESULT: []

-----------
QUERY:
SELECT a, dup(b) FROM collate_test1 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, dup(b) FROM collate_test2 ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT a, dup(b) FROM collate_test3 ORDER BY 2
RESULT: []

-----------
QUERY:
-- indexes

CREATE INDEX collate_test1_idx1 ON collate_test1 (b)
RESULT: []

-----------
QUERY:
CREATE INDEX collate_test1_idx2 ON collate_test1 (b COLLATE "C")
RESULT: []

-----------
QUERY:
CREATE INDEX collate_test1_idx3 ON collate_test1 ((b COLLATE "C"))
RESULT: []

-----------
QUERY:
-- this is different grammatically
CREATE INDEX collate_test1_idx4 ON collate_test1 (((b||'foo') COLLATE "POSIX"))
RESULT: []

-----------
QUERY:
CREATE INDEX collate_test1_idx5 ON collate_test1 (a COLLATE "C")
RESULT: []

-----------
QUERY:
-- fail
CREATE INDEX collate_test1_idx6 ON collate_test1 ((a COLLATE "C"))
RESULT: []

-----------
QUERY:
-- fail

SELECT relname, pg_get_indexdef(oid) FROM pg_class WHERE relname LIKE 'collate_test%_idx%' ORDER BY 1
RESULT: []

-----------
QUERY:
set enable_seqscan = off
RESULT: []

-----------
QUERY:
explain (costs off)
select * from collate_test1 where b ilike 'abc'
RESULT: []

-----------
QUERY:
select * from collate_test1 where b ilike 'abc'
RESULT: []

-----------
QUERY:
explain (costs off)
select * from collate_test1 where b ilike 'ABC'
RESULT: []

-----------
QUERY:
select * from collate_test1 where b ilike 'ABC'
RESULT: []

-----------
QUERY:
reset enable_seqscan
RESULT: []

-----------
QUERY:
-- schema manipulation commands

CREATE ROLE regress_test_role
RESULT: []

-----------
QUERY:
CREATE SCHEMA test_schema
RESULT: []

-----------
QUERY:
-- We need to do this this way to cope with varying names for encodings:
SET client_min_messages TO WARNING
RESULT: []

-----------
QUERY:
SET icu_validation_level = disabled
RESULT: []

-----------
QUERY:
do $$
BEGIN
  EXECUTE 'CREATE COLLATION test0 (provider = icu, locale = ' ||
          quote_literal((SELECT CASE WHEN datlocprovider='i' THEN datlocale ELSE datcollate END FROM pg_database WHERE datname = current_database())) || ');';
END
$$
RESULT: []

-----------
QUERY:
CREATE COLLATION test0 FROM "C"
RESULT: []

-----------
QUERY:
-- fail, duplicate name
do $$
BEGIN
  EXECUTE 'CREATE COLLATION test1 (provider = icu, locale = ' ||
          quote_literal((SELECT CASE WHEN datlocprovider='i' THEN datlocale ELSE datcollate END FROM pg_database WHERE datname = current_database())) || ');';
END
$$
RESULT: []

-----------
QUERY:
RESET icu_validation_level
RESULT: []

-----------
QUERY:
RESET client_min_messages
RESULT: []

-----------
QUERY:
CREATE COLLATION test3 (provider = icu, lc_collate = 'en_US.utf8')
RESULT: []

-----------
QUERY:
-- fail, needs /* REPLACED */''locale/* REPLACED */''
SET icu_validation_level = ERROR
RESULT: []

-----------
QUERY:
CREATE COLLATION testx (provider = icu, locale = 'nonsense-nowhere')
RESULT: []

-----------
QUERY:
-- fails
CREATE COLLATION testx (provider = icu, locale = '@colStrength=primary
RESULT: []

-----------
QUERY:
nonsense=yes')
RESULT: []

-----------
QUERY:
-- fails
RESET icu_validation_level
RESULT: []

-----------
QUERY:
CREATE COLLATION testx (provider = icu, locale = '@colStrength=primary
RESULT: []

-----------
QUERY:
nonsense=yes')
RESULT: []

-----------
QUERY:
DROP COLLATION testx
RESULT: []

-----------
QUERY:
CREATE COLLATION testx (provider = icu, locale = 'nonsense-nowhere')
RESULT: []

-----------
QUERY:
DROP COLLATION testx
RESULT: []

-----------
QUERY:
CREATE COLLATION test4 FROM nonsense
RESULT: []

-----------
QUERY:
CREATE COLLATION test5 FROM test0
RESULT: []

-----------
QUERY:
SELECT collname FROM pg_collation WHERE collname LIKE 'test%' ORDER BY 1
RESULT: []

-----------
QUERY:
ALTER COLLATION test1 RENAME TO test11
RESULT: []

-----------
QUERY:
ALTER COLLATION test0 RENAME TO test11
RESULT: []

-----------
QUERY:
-- fail
ALTER COLLATION test1 RENAME TO test22
RESULT: []

-----------
QUERY:
-- fail

ALTER COLLATION test11 OWNER TO regress_test_role
RESULT: []

-----------
QUERY:
ALTER COLLATION test11 OWNER TO nonsense
RESULT: []

-----------
QUERY:
ALTER COLLATION test11 SET SCHEMA test_schema
RESULT: []

-----------
QUERY:
COMMENT ON COLLATION test0 IS 'US English'
RESULT: []

-----------
QUERY:
SELECT collname, nspname, obj_description(pg_collation.oid, 'pg_collation')
    FROM pg_collation JOIN pg_namespace ON (collnamespace = pg_namespace.oid)
    WHERE collname LIKE 'test%'
    ORDER BY 1
RESULT: []

-----------
QUERY:
DROP COLLATION test0, test_schema.test11, test5
RESULT: []

-----------
QUERY:
DROP COLLATION test0
RESULT: []

-----------
QUERY:
-- fail
DROP COLLATION IF EXISTS test0
RESULT: []

-----------
QUERY:
SELECT collname FROM pg_collation WHERE collname LIKE 'test%'
RESULT: []

-----------
QUERY:
DROP SCHEMA test_schema
RESULT: []

-----------
QUERY:
DROP ROLE regress_test_role
RESULT: []

-----------
QUERY:
-- ALTER

ALTER COLLATION "en-x-icu" REFRESH VERSION
RESULT: []

-----------
QUERY:
-- also test for database while we are here
SELECT current_database() AS datname \gset
ALTER DATABASE :"datname" REFRESH COLLATION VERSION
RESULT: []

-----------
QUERY:
-- dependencies

CREATE COLLATION test0 FROM "C"
RESULT: []

-----------
QUERY:
CREATE TABLE collate_dep_test1 (a int, b text COLLATE test0)
RESULT: []

-----------
QUERY:
CREATE DOMAIN collate_dep_dom1 AS text COLLATE test0
RESULT: []

-----------
QUERY:
CREATE TYPE collate_dep_test2 AS (x int, y text COLLATE test0)
RESULT: []

-----------
QUERY:
CREATE VIEW collate_dep_test3 AS SELECT text 'foo' COLLATE test0 AS foo
RESULT: []

-----------
QUERY:
CREATE TABLE collate_dep_test4t (a int, b text)
RESULT: []

-----------
QUERY:
CREATE INDEX collate_dep_test4i ON collate_dep_test4t (b COLLATE test0)
RESULT: []

-----------
QUERY:
DROP COLLATION test0 RESTRICT
RESULT: []

-----------
QUERY:
-- fail
DROP COLLATION test0 CASCADE
RESULT: []

-----------
QUERY:
-- \d collate_dep_test1
-- \d collate_dep_test2

DROP TABLE collate_dep_test1, collate_dep_test4t
RESULT: []

-----------
QUERY:
DROP TYPE collate_dep_test2
RESULT: []

-----------
QUERY:
-- test range types and collations

create type textrange_c as range(subtype=text, collation="C")
RESULT: []

-----------
QUERY:
create type textrange_en_us as range(subtype=text, collation="en-x-icu")
RESULT: []

-----------
QUERY:
select textrange_c('A','Z') @> 'b'::text
RESULT: []

-----------
QUERY:
select textrange_en_us('A','Z') @> 'b'::text
RESULT: []

-----------
QUERY:
drop type textrange_c
RESULT: []

-----------
QUERY:
drop type textrange_en_us
RESULT: []

-----------
QUERY:
-- standard collations

SELECT * FROM collate_test2 ORDER BY b COLLATE UCS_BASIC
RESULT: []

-----------
QUERY:
SELECT * FROM collate_test2 ORDER BY b COLLATE UNICODE
RESULT: []

-----------
QUERY:
-- test ICU collation customization

-- test the attributes handled by icu_set_collation_attributes()

SET client_min_messages=WARNING
RESULT: []

-----------
QUERY:
CREATE COLLATION testcoll_ignore_accents (provider = icu, locale = '@colStrength=primary
RESULT: []

-----------
QUERY:
colCaseLevel=yes')
RESULT: []

-----------
QUERY:
RESET client_min_messages
RESULT: []

-----------
QUERY:
SELECT 'aaá' > 'AAA' COLLATE "und-x-icu", 'aaá' < 'AAA' COLLATE testcoll_ignore_accents
RESULT: []

-----------
QUERY:
SET client_min_messages=WARNING
RESULT: []

-----------
QUERY:
CREATE COLLATION testcoll_backwards (provider = icu, locale = '@colBackwards=yes')
RESULT: []

-----------
QUERY:
RESET client_min_messages
RESULT: []

-----------
QUERY:
SELECT 'coté' < 'côte' COLLATE "und-x-icu", 'coté' > 'côte' COLLATE testcoll_backwards
RESULT: []

-----------
QUERY:
CREATE COLLATION testcoll_lower_first (provider = icu, locale = '@colCaseFirst=lower')
RESULT: []

-----------
QUERY:
CREATE COLLATION testcoll_upper_first (provider = icu, locale = '@colCaseFirst=upper')
RESULT: []

-----------
QUERY:
SELECT 'aaa' < 'AAA' COLLATE testcoll_lower_first, 'aaa' > 'AAA' COLLATE testcoll_upper_first
RESULT: []

-----------
QUERY:
CREATE COLLATION testcoll_shifted (provider = icu, locale = '@colAlternate=shifted')
RESULT: []

-----------
QUERY:
SELECT 'de-luge' < 'deanza' COLLATE "und-x-icu", 'de-luge' > 'deanza' COLLATE testcoll_shifted
RESULT: []

-----------
QUERY:
SET client_min_messages=WARNING
RESULT: []

-----------
QUERY:
CREATE COLLATION testcoll_numeric (provider = icu, locale = '@colNumeric=yes')
RESULT: []

-----------
QUERY:
RESET client_min_messages
RESULT: []

-----------
QUERY:
SELECT 'A-21' > 'A-123' COLLATE "und-x-icu", 'A-21' < 'A-123' COLLATE testcoll_numeric
RESULT: []

-----------
QUERY:
CREATE COLLATION testcoll_error1 (provider = icu, locale = '@colNumeric=lower')
RESULT: []

-----------
QUERY:
-- test that attributes not handled by icu_set_collation_attributes()
-- (handled by ucol_open() directly) also work
CREATE COLLATION testcoll_de_phonebook (provider = icu, locale = 'de@collation=phonebook')
RESULT: []

-----------
QUERY:
SELECT 'Goldmann' < 'Götz' COLLATE "de-x-icu", 'Goldmann' > 'Götz' COLLATE testcoll_de_phonebook
RESULT: []

-----------
QUERY:
-- rules

CREATE COLLATION testcoll_rules1 (provider = icu, locale = '', rules = '&a < g')
RESULT: []

-----------
QUERY:
CREATE TABLE test7 (a text)
RESULT: []

-----------
QUERY:
-- example from https://unicode-org.github.io/icu/userguide/collation/customization/#syntax
INSERT INTO test7 VALUES ('Abernathy'), ('apple'), ('bird'), ('Boston'), ('Graham'), ('green')
RESULT: []

-----------
QUERY:
SELECT * FROM test7 ORDER BY a COLLATE "en-x-icu"
RESULT: []

-----------
QUERY:
SELECT * FROM test7 ORDER BY a COLLATE testcoll_rules1
RESULT: []

-----------
QUERY:
DROP TABLE test7
RESULT: []

-----------
QUERY:
CREATE COLLATION testcoll_rulesx (provider = icu, locale = '', rules = '!!wrong!!')
RESULT: []

-----------
QUERY:
-- nondeterministic collations

CREATE COLLATION ctest_det (provider = icu, locale = '', deterministic = true)
RESULT: []

-----------
QUERY:
CREATE COLLATION ctest_nondet (provider = icu, locale = '', deterministic = false)
RESULT: []

-----------
QUERY:
CREATE TABLE test6 (a int, b text)
RESULT: []

-----------
QUERY:
-- same string in different normal forms
INSERT INTO test6 VALUES (1, U&'\00E4bc')
RESULT: []

-----------
QUERY:
INSERT INTO test6 VALUES (2, U&'\0061\0308bc')
RESULT: []

-----------
QUERY:
SELECT * FROM test6
RESULT: []

-----------
QUERY:
SELECT * FROM test6 WHERE b = 'äbc' COLLATE ctest_det
RESULT: []

-----------
QUERY:
SELECT * FROM test6 WHERE b = 'äbc' COLLATE ctest_nondet
RESULT: []

-----------
QUERY:
-- same with arrays
CREATE TABLE test6a (a int, b text[])
RESULT: []

-----------
QUERY:
INSERT INTO test6a VALUES (1, ARRAY[U&'\00E4bc'])
RESULT: []

-----------
QUERY:
INSERT INTO test6a VALUES (2, ARRAY[U&'\0061\0308bc'])
RESULT: []

-----------
QUERY:
SELECT * FROM test6a
RESULT: []

-----------
QUERY:
SELECT * FROM test6a WHERE b = ARRAY['äbc'] COLLATE ctest_det
RESULT: []

-----------
QUERY:
SELECT * FROM test6a WHERE b = ARRAY['äbc'] COLLATE ctest_nondet
RESULT: []

-----------
QUERY:
CREATE COLLATION case_sensitive (provider = icu, locale = '')
RESULT: []

-----------
QUERY:
CREATE COLLATION case_insensitive (provider = icu, locale = '@colStrength=secondary', deterministic = false)
RESULT: []

-----------
QUERY:
SELECT 'abc' <= 'ABC' COLLATE case_sensitive, 'abc' >= 'ABC' COLLATE case_sensitive
RESULT: []

-----------
QUERY:
SELECT 'abc' <= 'ABC' COLLATE case_insensitive, 'abc' >= 'ABC' COLLATE case_insensitive
RESULT: []

-----------
QUERY:
-- test language tags
CREATE COLLATION lt_insensitive (provider = icu, locale = 'en-u-ks-level1', deterministic = false)
RESULT: []

-----------
QUERY:
SELECT 'aBcD' COLLATE lt_insensitive = 'AbCd' COLLATE lt_insensitive
RESULT: []

-----------
QUERY:
CREATE COLLATION lt_upperfirst (provider = icu, locale = 'und-u-kf-upper')
RESULT: []

-----------
QUERY:
SELECT 'Z' COLLATE lt_upperfirst < 'z' COLLATE lt_upperfirst
RESULT: []

-----------
QUERY:
CREATE TABLE test1cs (x text COLLATE case_sensitive)
RESULT: []

-----------
QUERY:
CREATE TABLE test2cs (x text COLLATE case_sensitive)
RESULT: []

-----------
QUERY:
CREATE TABLE test3cs (x text COLLATE case_sensitive)
RESULT: []

-----------
QUERY:
INSERT INTO test1cs VALUES ('abc'), ('def'), ('ghi')
RESULT: []

-----------
QUERY:
INSERT INTO test2cs VALUES ('ABC'), ('ghi')
RESULT: []

-----------
QUERY:
INSERT INTO test3cs VALUES ('abc'), ('ABC'), ('def'), ('ghi')
RESULT: []

-----------
QUERY:
SELECT x FROM test3cs WHERE x = 'abc'
RESULT: []

-----------
QUERY:
SELECT x FROM test3cs WHERE x <> 'abc'
RESULT: []

-----------
QUERY:
SELECT x FROM test3cs WHERE x LIKE 'a%'
RESULT: []

-----------
QUERY:
SELECT x FROM test3cs WHERE x ILIKE 'a%'
RESULT: []

-----------
QUERY:
SELECT x FROM test3cs WHERE x SIMILAR TO 'a%'
RESULT: []

-----------
QUERY:
SELECT x FROM test3cs WHERE x ~ 'a'
RESULT: []

-----------
QUERY:
SELECT x FROM test1cs UNION SELECT x FROM test2cs ORDER BY x
RESULT: []

-----------
QUERY:
SELECT x FROM test2cs UNION SELECT x FROM test1cs ORDER BY x
RESULT: []

-----------
QUERY:
SELECT x FROM test1cs INTERSECT SELECT x FROM test2cs
RESULT: []

-----------
QUERY:
SELECT x FROM test2cs INTERSECT SELECT x FROM test1cs
RESULT: []

-----------
QUERY:
SELECT x FROM test1cs EXCEPT SELECT x FROM test2cs
RESULT: []

-----------
QUERY:
SELECT x FROM test2cs EXCEPT SELECT x FROM test1cs
RESULT: []

-----------
QUERY:
SELECT DISTINCT x FROM test3cs ORDER BY x
RESULT: []

-----------
QUERY:
SELECT count(DISTINCT x) FROM test3cs
RESULT: []

-----------
QUERY:
SELECT x, count(*) FROM test3cs GROUP BY x ORDER BY x
RESULT: []

-----------
QUERY:
SELECT x, row_number() OVER (ORDER BY x), rank() OVER (ORDER BY x) FROM test3cs ORDER BY x
RESULT: []

-----------
QUERY:
CREATE UNIQUE INDEX ON test1cs (x)
RESULT: []

-----------
QUERY:
-- ok
INSERT INTO test1cs VALUES ('ABC')
RESULT: []

-----------
QUERY:
-- ok
CREATE UNIQUE INDEX ON test3cs (x)
RESULT: []

-----------
QUERY:
-- ok
SELECT string_to_array('ABC,DEF,GHI' COLLATE case_sensitive, ',', 'abc')
RESULT: []

-----------
QUERY:
SELECT string_to_array('ABCDEFGHI' COLLATE case_sensitive, NULL, 'b')
RESULT: []

-----------
QUERY:
CREATE TABLE test1ci (x text COLLATE case_insensitive)
RESULT: []

-----------
QUERY:
CREATE TABLE test2ci (x text COLLATE case_insensitive)
RESULT: []

-----------
QUERY:
CREATE TABLE test3ci (x text COLLATE case_insensitive)
RESULT: []

-----------
QUERY:
CREATE INDEX ON test3ci (x text_pattern_ops)
RESULT: []

-----------
QUERY:
-- error
INSERT INTO test1ci VALUES ('abc'), ('def'), ('ghi')
RESULT: []

-----------
QUERY:
INSERT INTO test2ci VALUES ('ABC'), ('ghi')
RESULT: []

-----------
QUERY:
INSERT INTO test3ci VALUES ('abc'), ('ABC'), ('def'), ('ghi')
RESULT: []

-----------
QUERY:
SELECT x FROM test3ci WHERE x = 'abc'
RESULT: []

-----------
QUERY:
SELECT x FROM test3ci WHERE x <> 'abc'
RESULT: []

-----------
QUERY:
SELECT x FROM test3ci WHERE x LIKE 'a%'
RESULT: []

-----------
QUERY:
SELECT x FROM test3ci WHERE x ILIKE 'a%'
RESULT: []

-----------
QUERY:
SELECT x FROM test3ci WHERE x SIMILAR TO 'a%'
RESULT: []

-----------
QUERY:
SELECT x FROM test3ci WHERE x ~ 'a'
RESULT: []

-----------
QUERY:
SELECT x FROM test1ci UNION SELECT x FROM test2ci ORDER BY x
RESULT: []

-----------
QUERY:
SELECT x FROM test2ci UNION SELECT x FROM test1ci ORDER BY x
RESULT: []

-----------
QUERY:
SELECT x FROM test1ci INTERSECT SELECT x FROM test2ci ORDER BY x
RESULT: []

-----------
QUERY:
SELECT x FROM test2ci INTERSECT SELECT x FROM test1ci ORDER BY x
RESULT: []

-----------
QUERY:
SELECT x FROM test1ci EXCEPT SELECT x FROM test2ci
RESULT: []

-----------
QUERY:
SELECT x FROM test2ci EXCEPT SELECT x FROM test1ci
RESULT: []

-----------
QUERY:
SELECT DISTINCT x FROM test3ci ORDER BY x
RESULT: []

-----------
QUERY:
SELECT count(DISTINCT x) FROM test3ci
RESULT: []

-----------
QUERY:
SELECT x, count(*) FROM test3ci GROUP BY x ORDER BY x
RESULT: []

-----------
QUERY:
SELECT x, row_number() OVER (ORDER BY x), rank() OVER (ORDER BY x) FROM test3ci ORDER BY x
RESULT: []

-----------
QUERY:
CREATE UNIQUE INDEX ON test1ci (x)
RESULT: []

-----------
QUERY:
-- ok
INSERT INTO test1ci VALUES ('ABC')
RESULT: []

-----------
QUERY:
-- error
CREATE UNIQUE INDEX ON test3ci (x)
RESULT: []

-----------
QUERY:
-- error
SELECT string_to_array('ABC,DEF,GHI' COLLATE case_insensitive, ',', 'abc')
RESULT: []

-----------
QUERY:
SELECT string_to_array('ABCDEFGHI' COLLATE case_insensitive, NULL, 'b')
RESULT: []

-----------
QUERY:
-- bpchar
CREATE TABLE test1bpci (x char(3) COLLATE case_insensitive)
RESULT: []

-----------
QUERY:
CREATE TABLE test2bpci (x char(3) COLLATE case_insensitive)
RESULT: []

-----------
QUERY:
CREATE TABLE test3bpci (x char(3) COLLATE case_insensitive)
RESULT: []

-----------
QUERY:
CREATE INDEX ON test3bpci (x bpchar_pattern_ops)
RESULT: []

-----------
QUERY:
-- error
INSERT INTO test1bpci VALUES ('abc'), ('def'), ('ghi')
RESULT: []

-----------
QUERY:
INSERT INTO test2bpci VALUES ('ABC'), ('ghi')
RESULT: []

-----------
QUERY:
INSERT INTO test3bpci VALUES ('abc'), ('ABC'), ('def'), ('ghi')
RESULT: []

-----------
QUERY:
SELECT x FROM test3bpci WHERE x = 'abc'
RESULT: []

-----------
QUERY:
SELECT x FROM test3bpci WHERE x <> 'abc'
RESULT: []

-----------
QUERY:
SELECT x FROM test3bpci WHERE x LIKE 'a%'
RESULT: []

-----------
QUERY:
SELECT x FROM test3bpci WHERE x ILIKE 'a%'
RESULT: []

-----------
QUERY:
SELECT x FROM test3bpci WHERE x SIMILAR TO 'a%'
RESULT: []

-----------
QUERY:
SELECT x FROM test3bpci WHERE x ~ 'a'
RESULT: []

-----------
QUERY:
SELECT x FROM test1bpci UNION SELECT x FROM test2bpci ORDER BY x
RESULT: []

-----------
QUERY:
SELECT x FROM test2bpci UNION SELECT x FROM test1bpci ORDER BY x
RESULT: []

-----------
QUERY:
SELECT x FROM test1bpci INTERSECT SELECT x FROM test2bpci ORDER BY x
RESULT: []

-----------
QUERY:
SELECT x FROM test2bpci INTERSECT SELECT x FROM test1bpci ORDER BY x
RESULT: []

-----------
QUERY:
SELECT x FROM test1bpci EXCEPT SELECT x FROM test2bpci
RESULT: []

-----------
QUERY:
SELECT x FROM test2bpci EXCEPT SELECT x FROM test1bpci
RESULT: []

-----------
QUERY:
SELECT DISTINCT x FROM test3bpci ORDER BY x
RESULT: []

-----------
QUERY:
SELECT count(DISTINCT x) FROM test3bpci
RESULT: []

-----------
QUERY:
SELECT x, count(*) FROM test3bpci GROUP BY x ORDER BY x
RESULT: []

-----------
QUERY:
SELECT x, row_number() OVER (ORDER BY x), rank() OVER (ORDER BY x) FROM test3bpci ORDER BY x
RESULT: []

-----------
QUERY:
CREATE UNIQUE INDEX ON test1bpci (x)
RESULT: []

-----------
QUERY:
-- ok
INSERT INTO test1bpci VALUES ('ABC')
RESULT: []

-----------
QUERY:
-- error
CREATE UNIQUE INDEX ON test3bpci (x)
RESULT: []

-----------
QUERY:
-- error
SELECT string_to_array('ABC,DEF,GHI'::char(11) COLLATE case_insensitive, ',', 'abc')
RESULT: []

-----------
QUERY:
SELECT string_to_array('ABCDEFGHI'::char(9) COLLATE case_insensitive, NULL, 'b')
RESULT: []

-----------
QUERY:
-- This tests the issue described in match_pattern_prefix().  In the
-- absence of that check, the case_insensitive tests below would
-- return no rows where they should logically return one.
CREATE TABLE test4c (x text COLLATE "C")
RESULT: []

-----------
QUERY:
INSERT INTO test4c VALUES ('abc')
RESULT: []

-----------
QUERY:
CREATE INDEX ON test4c (x)
RESULT: []

-----------
QUERY:
SET enable_seqscan = off
RESULT: []

-----------
QUERY:
SELECT x FROM test4c WHERE x LIKE 'ABC' COLLATE case_sensitive
RESULT: []

-----------
QUERY:
-- ok, no rows
SELECT x FROM test4c WHERE x LIKE 'ABC%' COLLATE case_sensitive
RESULT: []

-----------
QUERY:
-- ok, no rows
SELECT x FROM test4c WHERE x LIKE 'ABC' COLLATE case_insensitive
RESULT: []

-----------
QUERY:
-- error
SELECT x FROM test4c WHERE x LIKE 'ABC%' COLLATE case_insensitive
RESULT: []

-----------
QUERY:
-- error
RESET enable_seqscan
RESULT: []

-----------
QUERY:
-- Unicode special case: different variants of Greek lower case sigma.
-- A naive implementation like citext that just does lower(x) =
-- lower(y) will do the wrong thing here, because lower(/* REPLACED */''Σ/* REPLACED */'') is /* REPLACED */''σ/* REPLACED */''
-- but upper(/* REPLACED */''ς/* REPLACED */'') is /* REPLACED */''Σ/* REPLACED */''.
SELECT 'ὀδυσσεύς' = 'ὈΔΥΣΣΕΎΣ' COLLATE case_sensitive
RESULT: []

-----------
QUERY:
SELECT 'ὀδυσσεύς' = 'ὈΔΥΣΣΕΎΣ' COLLATE case_insensitive
RESULT: []

-----------
QUERY:
-- name vs. text comparison operators
SELECT relname FROM pg_class WHERE relname = 'PG_CLASS'::text COLLATE case_insensitive
RESULT: []

-----------
QUERY:
SELECT relname FROM pg_class WHERE 'PG_CLASS'::text = relname COLLATE case_insensitive
RESULT: []

-----------
QUERY:
SELECT typname FROM pg_type WHERE typname LIKE 'int_' AND typname <> 'INT2'::text
  COLLATE case_insensitive ORDER BY typname
RESULT: []

-----------
QUERY:
SELECT typname FROM pg_type WHERE typname LIKE 'int_' AND 'INT2'::text <> typname
  COLLATE case_insensitive ORDER BY typname
RESULT: []

-----------
QUERY:
-- test case adapted from subselect.sql
CREATE TEMP TABLE outer_text (f1 text COLLATE case_insensitive, f2 text)
RESULT: []

-----------
QUERY:
INSERT INTO outer_text VALUES ('a', 'a')
RESULT: []

-----------
QUERY:
INSERT INTO outer_text VALUES ('b', 'a')
RESULT: []

-----------
QUERY:
INSERT INTO outer_text VALUES ('A', NULL)
RESULT: []

-----------
QUERY:
INSERT INTO outer_text VALUES ('B', NULL)
RESULT: []

-----------
QUERY:
CREATE TEMP TABLE inner_text (c1 text COLLATE case_insensitive, c2 text)
RESULT: []

-----------
QUERY:
INSERT INTO inner_text VALUES ('a', NULL)
RESULT: []

-----------
QUERY:
SELECT * FROM outer_text WHERE (f1, f2) NOT IN (SELECT * FROM inner_text)
RESULT: []

-----------
QUERY:
-- accents
SET client_min_messages=WARNING
RESULT: []

-----------
QUERY:
CREATE COLLATION ignore_accents (provider = icu, locale = '@colStrength=primary
RESULT: []

-----------
QUERY:
colCaseLevel=yes', deterministic = false)
RESULT: []

-----------
QUERY:
RESET client_min_messages
RESULT: []

-----------
QUERY:
CREATE TABLE test4 (a int, b text)
RESULT: []

-----------
QUERY:
INSERT INTO test4 VALUES (1, 'cote'), (2, 'côte'), (3, 'coté'), (4, 'côté')
RESULT: []

-----------
QUERY:
SELECT * FROM test4 WHERE b = 'cote'
RESULT: []

-----------
QUERY:
SELECT * FROM test4 WHERE b = 'cote' COLLATE ignore_accents
RESULT: []

-----------
QUERY:
SELECT * FROM test4 WHERE b = 'Cote' COLLATE ignore_accents
RESULT: []

-----------
QUERY:
-- still case-sensitive
SELECT * FROM test4 WHERE b = 'Cote' COLLATE case_insensitive
RESULT: []

-----------
QUERY:
-- foreign keys (should use collation of primary key)

-- PK is case-sensitive, FK is case-insensitive
CREATE TABLE test10pk (x text COLLATE case_sensitive PRIMARY KEY)
RESULT: []

-----------
QUERY:
INSERT INTO test10pk VALUES ('abc'), ('def'), ('ghi')
RESULT: []

-----------
QUERY:
CREATE TABLE test10fk (x text COLLATE case_insensitive REFERENCES test10pk (x) ON UPDATE CASCADE ON DELETE CASCADE)
RESULT: []

-----------
QUERY:
INSERT INTO test10fk VALUES ('abc')
RESULT: []

-----------
QUERY:
-- ok
INSERT INTO test10fk VALUES ('ABC')
RESULT: []

-----------
QUERY:
-- error
INSERT INTO test10fk VALUES ('xyz')
RESULT: []

-----------
QUERY:
-- error
SELECT * FROM test10pk
RESULT: []

-----------
QUERY:
SELECT * FROM test10fk
RESULT: []

-----------
QUERY:
-- restrict update even though the values are /* REPLACED */''equal/* REPLACED */'' in the FK table
UPDATE test10fk SET x = 'ABC' WHERE x = 'abc'
RESULT: []

-----------
QUERY:
-- error
SELECT * FROM test10fk
RESULT: []

-----------
QUERY:
DELETE FROM test10pk WHERE x = 'abc'
RESULT: []

-----------
QUERY:
SELECT * FROM test10pk
RESULT: []

-----------
QUERY:
SELECT * FROM test10fk
RESULT: []

-----------
QUERY:
-- PK is case-insensitive, FK is case-sensitive
CREATE TABLE test11pk (x text COLLATE case_insensitive PRIMARY KEY)
RESULT: []

-----------
QUERY:
INSERT INTO test11pk VALUES ('abc'), ('def'), ('ghi')
RESULT: []

-----------
QUERY:
CREATE TABLE test11fk (x text COLLATE case_sensitive REFERENCES test11pk (x) ON UPDATE CASCADE ON DELETE CASCADE)
RESULT: []

-----------
QUERY:
INSERT INTO test11fk VALUES ('abc')
RESULT: []

-----------
QUERY:
-- ok
INSERT INTO test11fk VALUES ('ABC')
RESULT: []

-----------
QUERY:
-- ok
INSERT INTO test11fk VALUES ('xyz')
RESULT: []

-----------
QUERY:
-- error
SELECT * FROM test11pk
RESULT: []

-----------
QUERY:
SELECT * FROM test11fk
RESULT: []

-----------
QUERY:
-- cascade update even though the values are /* REPLACED */''equal/* REPLACED */'' in the PK table
UPDATE test11pk SET x = 'ABC' WHERE x = 'abc'
RESULT: []

-----------
QUERY:
SELECT * FROM test11fk
RESULT: []

-----------
QUERY:
DELETE FROM test11pk WHERE x = 'abc'
RESULT: []

-----------
QUERY:
SELECT * FROM test11pk
RESULT: []

-----------
QUERY:
SELECT * FROM test11fk
RESULT: []

-----------
QUERY:
-- partitioning
CREATE TABLE test20 (a int, b text COLLATE case_insensitive) PARTITION BY LIST (b)
RESULT: []

-----------
QUERY:
CREATE TABLE test20_1 PARTITION OF test20 FOR VALUES IN ('abc')
RESULT: []

-----------
QUERY:
INSERT INTO test20 VALUES (1, 'abc')
RESULT: []

-----------
QUERY:
INSERT INTO test20 VALUES (2, 'ABC')
RESULT: []

-----------
QUERY:
SELECT * FROM test20_1
RESULT: []

-----------
QUERY:
CREATE TABLE test21 (a int, b text COLLATE case_insensitive) PARTITION BY RANGE (b)
RESULT: []

-----------
QUERY:
CREATE TABLE test21_1 PARTITION OF test21 FOR VALUES FROM ('ABC') TO ('DEF')
RESULT: []

-----------
QUERY:
INSERT INTO test21 VALUES (1, 'abc')
RESULT: []

-----------
QUERY:
INSERT INTO test21 VALUES (2, 'ABC')
RESULT: []

-----------
QUERY:
SELECT * FROM test21_1
RESULT: []

-----------
QUERY:
CREATE TABLE test22 (a int, b text COLLATE case_sensitive) PARTITION BY HASH (b)
RESULT: []

-----------
QUERY:
CREATE TABLE test22_0 PARTITION OF test22 FOR VALUES WITH (MODULUS 2, REMAINDER 0)
RESULT: []

-----------
QUERY:
CREATE TABLE test22_1 PARTITION OF test22 FOR VALUES WITH (MODULUS 2, REMAINDER 1)
RESULT: []

-----------
QUERY:
INSERT INTO test22 VALUES (1, 'def')
RESULT: []

-----------
QUERY:
INSERT INTO test22 VALUES (2, 'DEF')
RESULT: []

-----------
QUERY:
-- they end up in different partitions
SELECT (SELECT count(*) FROM test22_0) = (SELECT count(*) FROM test22_1)
RESULT: []

-----------
QUERY:
-- same with arrays
CREATE TABLE test22a (a int, b text[] COLLATE case_sensitive) PARTITION BY HASH (b)
RESULT: []

-----------
QUERY:
CREATE TABLE test22a_0 PARTITION OF test22a FOR VALUES WITH (MODULUS 2, REMAINDER 0)
RESULT: []

-----------
QUERY:
CREATE TABLE test22a_1 PARTITION OF test22a FOR VALUES WITH (MODULUS 2, REMAINDER 1)
RESULT: []

-----------
QUERY:
INSERT INTO test22a VALUES (1, ARRAY['def'])
RESULT: []

-----------
QUERY:
INSERT INTO test22a VALUES (2, ARRAY['DEF'])
RESULT: []

-----------
QUERY:
-- they end up in different partitions
SELECT (SELECT count(*) FROM test22a_0) = (SELECT count(*) FROM test22a_1)
RESULT: []

-----------
QUERY:
CREATE TABLE test23 (a int, b text COLLATE case_insensitive) PARTITION BY HASH (b)
RESULT: []

-----------
QUERY:
CREATE TABLE test23_0 PARTITION OF test23 FOR VALUES WITH (MODULUS 2, REMAINDER 0)
RESULT: []

-----------
QUERY:
CREATE TABLE test23_1 PARTITION OF test23 FOR VALUES WITH (MODULUS 2, REMAINDER 1)
RESULT: []

-----------
QUERY:
INSERT INTO test23 VALUES (1, 'def')
RESULT: []

-----------
QUERY:
INSERT INTO test23 VALUES (2, 'DEF')
RESULT: []

-----------
QUERY:
-- they end up in the same partition (but it/* REPLACED */''s platform-dependent which one)
SELECT (SELECT count(*) FROM test23_0) <> (SELECT count(*) FROM test23_1)
RESULT: []

-----------
QUERY:
-- same with arrays
CREATE TABLE test23a (a int, b text[] COLLATE case_insensitive) PARTITION BY HASH (b)
RESULT: []

-----------
QUERY:
CREATE TABLE test23a_0 PARTITION OF test23a FOR VALUES WITH (MODULUS 2, REMAINDER 0)
RESULT: []

-----------
QUERY:
CREATE TABLE test23a_1 PARTITION OF test23a FOR VALUES WITH (MODULUS 2, REMAINDER 1)
RESULT: []

-----------
QUERY:
INSERT INTO test23a VALUES (1, ARRAY['def'])
RESULT: []

-----------
QUERY:
INSERT INTO test23a VALUES (2, ARRAY['DEF'])
RESULT: []

-----------
QUERY:
-- they end up in the same partition (but it/* REPLACED */''s platform-dependent which one)
SELECT (SELECT count(*) FROM test23a_0) <> (SELECT count(*) FROM test23a_1)
RESULT: []

-----------
QUERY:
CREATE TABLE test30 (a int, b char(3) COLLATE case_insensitive) PARTITION BY LIST (b)
RESULT: []

-----------
QUERY:
CREATE TABLE test30_1 PARTITION OF test30 FOR VALUES IN ('abc')
RESULT: []

-----------
QUERY:
INSERT INTO test30 VALUES (1, 'abc')
RESULT: []

-----------
QUERY:
INSERT INTO test30 VALUES (2, 'ABC')
RESULT: []

-----------
QUERY:
SELECT * FROM test30_1
RESULT: []

-----------
QUERY:
CREATE TABLE test31 (a int, b char(3) COLLATE case_insensitive) PARTITION BY RANGE (b)
RESULT: []

-----------
QUERY:
CREATE TABLE test31_1 PARTITION OF test31 FOR VALUES FROM ('ABC') TO ('DEF')
RESULT: []

-----------
QUERY:
INSERT INTO test31 VALUES (1, 'abc')
RESULT: []

-----------
QUERY:
INSERT INTO test31 VALUES (2, 'ABC')
RESULT: []

-----------
QUERY:
SELECT * FROM test31_1
RESULT: []

-----------
QUERY:
CREATE TABLE test32 (a int, b char(3) COLLATE case_sensitive) PARTITION BY HASH (b)
RESULT: []

-----------
QUERY:
CREATE TABLE test32_0 PARTITION OF test32 FOR VALUES WITH (MODULUS 2, REMAINDER 0)
RESULT: []

-----------
QUERY:
CREATE TABLE test32_1 PARTITION OF test32 FOR VALUES WITH (MODULUS 2, REMAINDER 1)
RESULT: []

-----------
QUERY:
INSERT INTO test32 VALUES (1, 'def')
RESULT: []

-----------
QUERY:
INSERT INTO test32 VALUES (2, 'DEF')
RESULT: []

-----------
QUERY:
-- they end up in different partitions
SELECT (SELECT count(*) FROM test32_0) = (SELECT count(*) FROM test32_1)
RESULT: []

-----------
QUERY:
CREATE TABLE test33 (a int, b char(3) COLLATE case_insensitive) PARTITION BY HASH (b)
RESULT: []

-----------
QUERY:
CREATE TABLE test33_0 PARTITION OF test33 FOR VALUES WITH (MODULUS 2, REMAINDER 0)
RESULT: []

-----------
QUERY:
CREATE TABLE test33_1 PARTITION OF test33 FOR VALUES WITH (MODULUS 2, REMAINDER 1)
RESULT: []

-----------
QUERY:
INSERT INTO test33 VALUES (1, 'def')
RESULT: []

-----------
QUERY:
INSERT INTO test33 VALUES (2, 'DEF')
RESULT: []

-----------
QUERY:
-- they end up in the same partition (but it/* REPLACED */''s platform-dependent which one)
SELECT (SELECT count(*) FROM test33_0) <> (SELECT count(*) FROM test33_1)
RESULT: []

-----------
QUERY:
-- cleanup
RESET search_path
RESULT: []

-----------
QUERY:
SET client_min_messages TO warning
RESULT: []

-----------
QUERY:
DROP SCHEMA collate_tests CASCADE
RESULT: []

-----------
QUERY:
RESET client_min_messages
RESULT: []

-----------
QUERY:
-- leave a collation for pg_upgrade test
CREATE COLLATION coll_icu_upgrade FROM "und-x-icu"
RESULT: []
=========================================
Summary for test case collate.icu.utf8/test.sql of postgres
=========================================
