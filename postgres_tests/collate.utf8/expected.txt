
-----------
QUERY:
/*
 * This test is for collations and character operations when using the
 * builtin provider with the C.UTF-8 locale.
 */

/* skip test if not UTF8 server encoding */
SELECT getdatabaseencoding() <> 'UTF8' AS skip_test \gset
\if :skip_test
\quit
\endif

SET client_encoding TO UTF8;
RESULT:
	postgres: ERROR - syntax error at or near "\"
LINE 7: SELECT getdatabaseencoding() <> 'UTF8' AS skip_test \gset
                                                            ^


-----------
QUERY:


--
-- Test PG_C_UTF8
--

CREATE COLLATION regress_pg_c_utf8 (
  provider = builtin, locale = 'C_UTF8');
RESULT:
	postgres: ERROR - invalid locale name "C_UTF8" for builtin provider


-----------
QUERY:
 -- fails
CREATE COLLATION regress_pg_c_utf8 (
  provider = builtin, locale = 'C.UTF8');
RESULT:
	postgres: None

-----------
QUERY:

DROP COLLATION regress_pg_c_utf8;
RESULT:
	postgres: None

-----------
QUERY:

CREATE COLLATION regress_pg_c_utf8 (
  provider = builtin, locale = 'C.UTF-8');
RESULT:
	postgres: None

-----------
QUERY:


CREATE TABLE test_pg_c_utf8 (
  t TEXT COLLATE PG_C_UTF8
);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test_pg_c_utf8 VALUES
  ('abc DEF 123abc'),
  ('ábc sßs ßss DÉF'),
  ('ǄxxǄ ǆxxǅ ǅxxǆ'),
  ('ȺȺȺ'),
  ('ⱥⱥⱥ'),
  ('ⱥȺ');
RESULT:
	postgres: None

-----------
QUERY:


SELECT
    t, lower(t), initcap(t), upper(t),
    length(convert_to(t, 'UTF8')) AS t_bytes,
    length(convert_to(lower(t), 'UTF8')) AS lower_t_bytes,
    length(convert_to(initcap(t), 'UTF8')) AS initcap_t_bytes,
    length(convert_to(upper(t), 'UTF8')) AS upper_t_bytes
  FROM test_pg_c_utf8;
RESULT:
	postgres: [('abc DEF 123abc', 'abc def 123abc', 'Abc Def 123abc', 'ABC DEF 123ABC', 14, 14, 14, 14), ('ábc sßs ßss DÉF', 'ábc sßs ßss déf', 'Ábc Sßs ßss Déf', 'ÁBC SßS ßSS DÉF', 19, 19, 19, 19), ('ǄxxǄ ǆxxǅ ǅxxǆ', 'ǆxxǆ ǆxxǆ ǆxxǆ', 'Ǆxxǆ Ǆxxǆ Ǆxxǆ', 'ǄXXǄ ǄXXǄ ǄXXǄ', 20, 20, 20, 20), ('ȺȺȺ', 'ⱥⱥⱥ', 'Ⱥⱥⱥ', 'ȺȺȺ', 6, 9, 8, 6), ('ⱥⱥⱥ', 'ⱥⱥⱥ', 'Ⱥⱥⱥ', 'ȺȺȺ', 9, 9, 8, 6), ('ⱥȺ', 'ⱥⱥ', 'Ⱥⱥ', 'ȺȺ', 5, 6, 5, 4)]

-----------
QUERY:


DROP TABLE test_pg_c_utf8;
RESULT:
	postgres: None

-----------
QUERY:


-- negative test: Final_Sigma not used for builtin locale C.UTF-8
SELECT lower('ΑΣ' COLLATE PG_C_UTF8);
RESULT:
	postgres: [('ασ',)]

-----------
QUERY:

SELECT lower('ΑͺΣͺ' COLLATE PG_C_UTF8);
RESULT:
	postgres: [('αͺσͺ',)]

-----------
QUERY:

SELECT lower('Α΄Σ΄' COLLATE PG_C_UTF8);
RESULT:
	postgres: [('α΄σ΄',)]

-----------
QUERY:


-- properties

SELECT 'xyz' ~ '[[:alnum:]]' COLLATE PG_C_UTF8;
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT 'xyz' !~ '[[:upper:]]' COLLATE PG_C_UTF8;
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT '@' !~ '[[:alnum:]]' COLLATE PG_C_UTF8;
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT '=' ~ '[[:punct:]]' COLLATE PG_C_UTF8;
RESULT:
	postgres: [(True,)]

-----------
QUERY:
 -- symbols are punctuation in posix
SELECT 'a8a' ~ '[[:digit:]]' COLLATE PG_C_UTF8;
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT '൧' !~ '\d' COLLATE PG_C_UTF8;
RESULT:
	postgres: [(True,)]

-----------
QUERY:
 -- only 0-9 considered digits in posix

-- case mapping

SELECT 'xYz' ~* 'XyZ' COLLATE PG_C_UTF8;
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT 'xAb' ~* '[W-Y]' COLLATE PG_C_UTF8;
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT 'xAb' !~* '[c-d]' COLLATE PG_C_UTF8;
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT 'Δ' ~* '[γ-λ]' COLLATE PG_C_UTF8;
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT 'δ' ~* '[Γ-Λ]' COLLATE PG_C_UTF8;
RESULT:
	postgres: [(True,)]
