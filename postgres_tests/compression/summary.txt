Guest DBMS identified: postgres
-----------
QUERY:
-- \set HIDE_TOAST_COMPRESSION false

-- ensure we get stable results regardless of installation/* REPLACED */''s default
SET default_toast_compression = 'pglz'
RESULT: []

-----------
QUERY:
-- test creating table with compression method
CREATE TABLE cmdata(f1 text COMPRESSION pglz)
RESULT: []

-----------
QUERY:
CREATE INDEX idx ON cmdata(f1)
RESULT: []

-----------
QUERY:
INSERT INTO cmdata VALUES(repeat('1234567890', 1000))
RESULT: []

-----------
QUERY:
-- \d+ cmdata
CREATE TABLE cmdata1(f1 TEXT COMPRESSION lz4)
RESULT: []

-----------
QUERY:
INSERT INTO cmdata1 VALUES(repeat('1234567890', 1004))
RESULT: []

-----------
QUERY:
-- \d+ cmdata1

-- verify stored compression method in the data
SELECT pg_column_compression(f1) FROM cmdata
RESULT: []

-----------
QUERY:
SELECT pg_column_compression(f1) FROM cmdata1
RESULT: []

-----------
QUERY:
-- decompress data slice
SELECT SUBSTR(f1, 200, 5) FROM cmdata
RESULT: []

-----------
QUERY:
SELECT SUBSTR(f1, 2000, 50) FROM cmdata1
RESULT: []

-----------
QUERY:
-- copy with table creation
SELECT * INTO cmmove1 FROM cmdata
RESULT: []

-----------
QUERY:
-- \d+ cmmove1
SELECT pg_column_compression(f1) FROM cmmove1
RESULT: []

-----------
QUERY:
-- copy to existing table
CREATE TABLE cmmove3(f1 text COMPRESSION pglz)
RESULT: []

-----------
QUERY:
INSERT INTO cmmove3 SELECT * FROM cmdata
RESULT: []

-----------
QUERY:
INSERT INTO cmmove3 SELECT * FROM cmdata1
RESULT: []

-----------
QUERY:
SELECT pg_column_compression(f1) FROM cmmove3
RESULT: []

-----------
QUERY:
-- test LIKE INCLUDING COMPRESSION
CREATE TABLE cmdata2 (LIKE cmdata1 INCLUDING COMPRESSION)
RESULT: []

-----------
QUERY:
-- \d+ cmdata2
DROP TABLE cmdata2
RESULT: []

-----------
QUERY:
-- try setting compression for incompressible data type
CREATE TABLE cmdata2 (f1 int COMPRESSION pglz)
RESULT: []

-----------
QUERY:
-- update using datum from different table
CREATE TABLE cmmove2(f1 text COMPRESSION pglz)
RESULT: []

-----------
QUERY:
INSERT INTO cmmove2 VALUES (repeat('1234567890', 1004))
RESULT: []

-----------
QUERY:
SELECT pg_column_compression(f1) FROM cmmove2
RESULT: []

-----------
QUERY:
UPDATE cmmove2 SET f1 = cmdata1.f1 FROM cmdata1
RESULT: []

-----------
QUERY:
SELECT pg_column_compression(f1) FROM cmmove2
RESULT: []

-----------
QUERY:
-- test externally stored compressed data
CREATE OR REPLACE FUNCTION large_val() RETURNS TEXT LANGUAGE SQL AS
'select array_agg(fipshash(g::text))::text from generate_series(1, 256) g'
RESULT: []

-----------
QUERY:
CREATE TABLE cmdata2 (f1 text COMPRESSION pglz)
RESULT: []

-----------
QUERY:
INSERT INTO cmdata2 SELECT large_val() || repeat('a', 4000)
RESULT: []

-----------
QUERY:
SELECT pg_column_compression(f1) FROM cmdata2
RESULT: []

-----------
QUERY:
INSERT INTO cmdata1 SELECT large_val() || repeat('a', 4000)
RESULT: []

-----------
QUERY:
SELECT pg_column_compression(f1) FROM cmdata1
RESULT: []

-----------
QUERY:
SELECT SUBSTR(f1, 200, 5) FROM cmdata1
RESULT: []

-----------
QUERY:
SELECT SUBSTR(f1, 200, 5) FROM cmdata2
RESULT: []

-----------
QUERY:
DROP TABLE cmdata2
RESULT: []

-----------
QUERY:
--test column type update varlena/non-varlena
CREATE TABLE cmdata2 (f1 int)
RESULT: []

-----------
QUERY:
-- \d+ cmdata2
ALTER TABLE cmdata2 ALTER COLUMN f1 TYPE varchar
RESULT: []

-----------
QUERY:
-- \d+ cmdata2
ALTER TABLE cmdata2 ALTER COLUMN f1 TYPE int USING f1::integer
RESULT: []

-----------
QUERY:
-- \d+ cmdata2

--changing column storage should not impact the compression method
--but the data should not be compressed
ALTER TABLE cmdata2 ALTER COLUMN f1 TYPE varchar
RESULT: []

-----------
QUERY:
ALTER TABLE cmdata2 ALTER COLUMN f1 SET COMPRESSION pglz
RESULT: []

-----------
QUERY:
-- \d+ cmdata2
ALTER TABLE cmdata2 ALTER COLUMN f1 SET STORAGE plain
RESULT: []

-----------
QUERY:
-- \d+ cmdata2
INSERT INTO cmdata2 VALUES (repeat('123456789', 800))
RESULT: []

-----------
QUERY:
SELECT pg_column_compression(f1) FROM cmdata2
RESULT: []

-----------
QUERY:
-- test compression with materialized view
CREATE MATERIALIZED VIEW compressmv(x) AS SELECT * FROM cmdata1
RESULT: []

-----------
QUERY:
-- \d+ compressmv
SELECT pg_column_compression(f1) FROM cmdata1
RESULT: []

-----------
QUERY:
SELECT pg_column_compression(x) FROM compressmv
RESULT: []

-----------
QUERY:
-- test compression with partition
CREATE TABLE cmpart(f1 text COMPRESSION lz4) PARTITION BY HASH(f1)
RESULT: []

-----------
QUERY:
CREATE TABLE cmpart1 PARTITION OF cmpart FOR VALUES WITH (MODULUS 2, REMAINDER 0)
RESULT: []

-----------
QUERY:
CREATE TABLE cmpart2(f1 text COMPRESSION pglz)
RESULT: []

-----------
QUERY:
ALTER TABLE cmpart ATTACH PARTITION cmpart2 FOR VALUES WITH (MODULUS 2, REMAINDER 1)
RESULT: []

-----------
QUERY:
INSERT INTO cmpart VALUES (repeat('123456789', 1004))
RESULT: []

-----------
QUERY:
INSERT INTO cmpart VALUES (repeat('123456789', 4004))
RESULT: []

-----------
QUERY:
SELECT pg_column_compression(f1) FROM cmpart1
RESULT: []

-----------
QUERY:
SELECT pg_column_compression(f1) FROM cmpart2
RESULT: []

-----------
QUERY:
-- test compression with inheritance, error
CREATE TABLE cminh() INHERITS(cmdata, cmdata1)
RESULT: []

-----------
QUERY:
CREATE TABLE cminh(f1 TEXT COMPRESSION lz4) INHERITS(cmdata)
RESULT: []

-----------
QUERY:
-- test default_toast_compression GUC
SET default_toast_compression = ''
RESULT: []

-----------
QUERY:
SET default_toast_compression = 'I do not exist compression'
RESULT: []

-----------
QUERY:
SET default_toast_compression = 'lz4'
RESULT: []

-----------
QUERY:
SET default_toast_compression = 'pglz'
RESULT: []

-----------
QUERY:
-- test alter compression method
ALTER TABLE cmdata ALTER COLUMN f1 SET COMPRESSION lz4
RESULT: []

-----------
QUERY:
INSERT INTO cmdata VALUES (repeat('123456789', 4004))
RESULT: []

-----------
QUERY:
-- \d+ cmdata
SELECT pg_column_compression(f1) FROM cmdata
RESULT: []

-----------
QUERY:
ALTER TABLE cmdata2 ALTER COLUMN f1 SET COMPRESSION default
RESULT: []

-----------
QUERY:
-- \d+ cmdata2

-- test alter compression method for materialized views
ALTER MATERIALIZED VIEW compressmv ALTER COLUMN x SET COMPRESSION lz4
RESULT: []

-----------
QUERY:
-- \d+ compressmv

-- test alter compression method for partitioned tables
ALTER TABLE cmpart1 ALTER COLUMN f1 SET COMPRESSION pglz
RESULT: []

-----------
QUERY:
ALTER TABLE cmpart2 ALTER COLUMN f1 SET COMPRESSION lz4
RESULT: []

-----------
QUERY:
-- new data should be compressed with the current compression method
INSERT INTO cmpart VALUES (repeat('123456789', 1004))
RESULT: []

-----------
QUERY:
INSERT INTO cmpart VALUES (repeat('123456789', 4004))
RESULT: []

-----------
QUERY:
SELECT pg_column_compression(f1) FROM cmpart1
RESULT: []

-----------
QUERY:
SELECT pg_column_compression(f1) FROM cmpart2
RESULT: []

-----------
QUERY:
-- VACUUM FULL does not recompress
SELECT pg_column_compression(f1) FROM cmdata
RESULT: []

-----------
QUERY:
VACUUM FULL cmdata
RESULT: []

-----------
QUERY:
SELECT pg_column_compression(f1) FROM cmdata
RESULT: []

-----------
QUERY:
-- test expression index
DROP TABLE cmdata2
RESULT: []

-----------
QUERY:
CREATE TABLE cmdata2 (f1 TEXT COMPRESSION pglz, f2 TEXT COMPRESSION lz4)
RESULT: []

-----------
QUERY:
CREATE UNIQUE INDEX idx1 ON cmdata2 ((f1 || f2))
RESULT: []

-----------
QUERY:
INSERT INTO cmdata2 VALUES((SELECT array_agg(fipshash(g::TEXT))::TEXT FROM
generate_series(1, 50) g), VERSION())
RESULT: []

-----------
QUERY:
-- check data is ok
SELECT length(f1) FROM cmdata
RESULT: []

-----------
QUERY:
SELECT length(f1) FROM cmdata1
RESULT: []

-----------
QUERY:
SELECT length(f1) FROM cmmove1
RESULT: []

-----------
QUERY:
SELECT length(f1) FROM cmmove2
RESULT: []

-----------
QUERY:
SELECT length(f1) FROM cmmove3
RESULT: []

-----------
QUERY:
CREATE TABLE badcompresstbl (a text COMPRESSION I_Do_Not_Exist_Compression)
RESULT: []

-----------
QUERY:
-- fails
CREATE TABLE badcompresstbl (a text)
RESULT: []

-----------
QUERY:
ALTER TABLE badcompresstbl ALTER a SET COMPRESSION I_Do_Not_Exist_Compression
RESULT: []

-----------
QUERY:
-- fails
DROP TABLE badcompresstbl
RESULT: []

-----------
QUERY:
-- \set HIDE_TOAST_COMPRESSION true
RESULT: []
=========================================
Summary for test case compression/test.sql of postgres
=========================================
