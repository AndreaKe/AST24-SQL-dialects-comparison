Guest DBMS identified: postgres
-----------
QUERY:
CREATE TEMP TABLE x (
	a serial,
	b int,
	c text not null default 'stuff',
	d text,
	e text
)
RESULT: []

-----------
QUERY:
CREATE FUNCTION fn_x_before () RETURNS TRIGGER AS '
  BEGIN
		NEW.e := ''before trigger fired''::text
RESULT: []

-----------
QUERY:
return NEW
RESULT: []

-----------
QUERY:
END
RESULT: []

-----------
QUERY:
' LANGUAGE plpgsql
RESULT: []

-----------
QUERY:
CREATE FUNCTION fn_x_after () RETURNS TRIGGER AS '
  BEGIN
		UPDATE x set e=''after trigger fired'' where c=''stuff''
RESULT: []

-----------
QUERY:
return NULL
RESULT: []

-----------
QUERY:
END
RESULT: []

-----------
QUERY:
' LANGUAGE plpgsql
RESULT: []

-----------
QUERY:
CREATE TRIGGER trg_x_after AFTER INSERT ON x
FOR EACH ROW EXECUTE PROCEDURE fn_x_after()
RESULT: []

-----------
QUERY:
CREATE TRIGGER trg_x_before BEFORE INSERT ON x
FOR EACH ROW EXECUTE PROCEDURE fn_x_before()
RESULT: []

-----------
QUERY:
COPY x (a, b, c, d, e) from stdin
RESULT: []

-----------
QUERY:
9999	\N	\\N	\NN	\N
10000	21	31	41	51
\.

COPY x (b, d) from stdin
RESULT: []

-----------
QUERY:
1	test_1
\.

COPY x (b, d) from stdin
RESULT: []

-----------
QUERY:
2	test_2
3	test_3
4	test_4
5	test_5
\.

COPY x (a, b, c, d, e) from stdin
RESULT: []

-----------
QUERY:
10001	22	32	42	52
10002	23	33	43	53
10003	24	34	44	54
10004	25	35	45	55
10005	26	36	46	56
\.

-- non-existent column in column list: should fail
COPY x (xyz) from stdin
RESULT: []

-----------
QUERY:
-- redundant options
COPY x from stdin (format CSV, FORMAT CSV)
RESULT: []

-----------
QUERY:
COPY x from stdin (freeze off, freeze on)
RESULT: []

-----------
QUERY:
COPY x from stdin (delimiter ',', delimiter ',')
RESULT: []

-----------
QUERY:
COPY x from stdin (null ' ', null ' ')
RESULT: []

-----------
QUERY:
COPY x from stdin (header off, header on)
RESULT: []

-----------
QUERY:
COPY x from stdin (quote ':', quote ':')
RESULT: []

-----------
QUERY:
COPY x from stdin (escape ':', escape ':')
RESULT: []

-----------
QUERY:
COPY x from stdin (force_quote (a), force_quote *)
RESULT: []

-----------
QUERY:
COPY x from stdin (force_not_null (a), force_not_null (b))
RESULT: []

-----------
QUERY:
COPY x from stdin (force_null (a), force_null (b))
RESULT: []

-----------
QUERY:
COPY x from stdin (convert_selectively (a), convert_selectively (b))
RESULT: []

-----------
QUERY:
COPY x from stdin (encoding 'sql_ascii', encoding 'sql_ascii')
RESULT: []

-----------
QUERY:
COPY x from stdin (on_error ignore, on_error ignore)
RESULT: []

-----------
QUERY:
-- incorrect options
COPY x to stdin (format BINARY, delimiter ',')
RESULT: []

-----------
QUERY:
COPY x to stdin (format BINARY, null 'x')
RESULT: []

-----------
QUERY:
COPY x from stdin (format BINARY, on_error ignore)
RESULT: []

-----------
QUERY:
COPY x from stdin (on_error unsupported)
RESULT: []

-----------
QUERY:
COPY x to stdin (format TEXT, force_quote(a))
RESULT: []

-----------
QUERY:
COPY x from stdin (format CSV, force_quote(a))
RESULT: []

-----------
QUERY:
COPY x to stdout (format TEXT, force_not_null(a))
RESULT: []

-----------
QUERY:
COPY x to stdin (format CSV, force_not_null(a))
RESULT: []

-----------
QUERY:
COPY x to stdout (format TEXT, force_null(a))
RESULT: []

-----------
QUERY:
COPY x to stdin (format CSV, force_null(a))
RESULT: []

-----------
QUERY:
COPY x to stdin (format BINARY, on_error unsupported)
RESULT: []

-----------
QUERY:
-- too many columns in column list: should fail
COPY x (a, b, c, d, e, d, c) from stdin
RESULT: []

-----------
QUERY:
-- missing data: should fail
COPY x from stdin
RESULT: []

-----------
QUERY:
\.
COPY x from stdin
RESULT: []

-----------
QUERY:
2000	230	23	23
\.
COPY x from stdin
RESULT: []

-----------
QUERY:
2001	231	\N	\N
\.

-- extra data: should fail
COPY x from stdin
RESULT: []

-----------
QUERY:
2002	232	40	50	60	70	80
\.

-- various COPY options: delimiters, oids, NULL string, encoding
COPY x (b, c, d, e) from stdin delimiter ',' null 'x'
RESULT: []

-----------
QUERY:
x,45,80,90
x,\x,\\x,\\\x
x,\,,\\\,,\\
\.

COPY x from stdin WITH DELIMITER AS '
RESULT: []

-----------
QUERY:
' NULL AS ''
RESULT: []

-----------
QUERY:
3000
RESULT: []

-----------
QUERY:
c
RESULT: []

-----------
QUERY:
\.

COPY x from stdin WITH DELIMITER AS ':' NULL AS E'\\X' ENCODING 'sql_ascii'
RESULT: []

-----------
QUERY:
4000:\X:C:\X:\X
4001:1:empty::
4002:2:null:\X:\X
4003:3:Backslash:\\:\\
4004:4:BackslashX:\\X:\\X
4005:5:N:\N:\N
4006:6:BackslashN:\\N:\\N
4007:7:XX:\XX:\XX
4008:8:Delimiter:\::\:
\.

COPY x TO stdout WHERE a = 1
RESULT: []

-----------
QUERY:
COPY x from stdin WHERE a = 50004
RESULT: []

-----------
QUERY:
50003	24	34	44	54
50004	25	35	45	55
50005	26	36	46	56
\.

COPY x from stdin WHERE a > 60003
RESULT: []

-----------
QUERY:
60001	22	32	42	52
60002	23	33	43	53
60003	24	34	44	54
60004	25	35	45	55
60005	26	36	46	56
\.

COPY x from stdin WHERE f > 60003
RESULT: []

-----------
QUERY:
COPY x from stdin WHERE a = max(x.b)
RESULT: []

-----------
QUERY:
COPY x from stdin WHERE a IN (SELECT 1 FROM x)
RESULT: []

-----------
QUERY:
COPY x from stdin WHERE a IN (generate_series(1,5))
RESULT: []

-----------
QUERY:
COPY x from stdin WHERE a = row_number() over(b)
RESULT: []

-----------
QUERY:
-- check results of copy in
SELECT * FROM x
RESULT: []

-----------
QUERY:
-- check copy out
COPY x TO stdout
RESULT: []

-----------
QUERY:
COPY x (c, e) TO stdout
RESULT: []

-----------
QUERY:
COPY x (b, e) TO stdout WITH NULL 'I''m null'
RESULT: []

-----------
QUERY:
CREATE TEMP TABLE y (
	col1 text,
	col2 text
)
RESULT: []

-----------
QUERY:
INSERT INTO y VALUES ('Jackson, Sam', E'\\h')
RESULT: []

-----------
QUERY:
INSERT INTO y VALUES ('It is "perfect".',E'\t')
RESULT: []

-----------
QUERY:
INSERT INTO y VALUES ('', NULL)
RESULT: []

-----------
QUERY:
COPY y TO stdout WITH CSV
RESULT: []

-----------
QUERY:
COPY y TO stdout WITH CSV QUOTE '''' DELIMITER '|'
RESULT: []

-----------
QUERY:
COPY y TO stdout WITH CSV FORCE QUOTE col2 ESCAPE E'\\' ENCODING 'sql_ascii'
RESULT: []

-----------
QUERY:
COPY y TO stdout WITH CSV FORCE QUOTE *
RESULT: []

-----------
QUERY:
-- Repeat above tests with new 9.0 option syntax

COPY y TO stdout (FORMAT CSV)
RESULT: []

-----------
QUERY:
COPY y TO stdout (FORMAT CSV, QUOTE '''', DELIMITER '|')
RESULT: []

-----------
QUERY:
COPY y TO stdout (FORMAT CSV, FORCE_QUOTE (col2), ESCAPE E'\\')
RESULT: []

-----------
QUERY:
COPY y TO stdout (FORMAT CSV, FORCE_QUOTE *)
RESULT: []

-----------
QUERY:
\copy y TO stdout (FORMAT CSV)
\copy y TO stdout (FORMAT CSV, QUOTE '''', DELIMITER '|')
\copy y TO stdout (FORMAT CSV, FORCE_QUOTE (col2), ESCAPE E'\\')
\copy y TO stdout (FORMAT CSV, FORCE_QUOTE *)

--test that we read consecutive LFs properly

CREATE TEMP TABLE testnl (a int, b text, c int)
RESULT: []

-----------
QUERY:
COPY testnl FROM stdin CSV
RESULT: []

-----------
QUERY:
1,"a field with two LFs

inside",2
\.

-- test end of copy marker
CREATE TEMP TABLE testeoc (a text)
RESULT: []

-----------
QUERY:
COPY testeoc FROM stdin CSV
RESULT: []

-----------
QUERY:
a\.
\.b
c\.d
"\."
\.

COPY testeoc TO stdout CSV
RESULT: []

-----------
QUERY:
-- test handling of nonstandard null marker that violates escaping rules

CREATE TEMP TABLE testnull(a int, b text)
RESULT: []

-----------
QUERY:
INSERT INTO testnull VALUES (1, E'\\0'), (NULL, NULL)
RESULT: []

-----------
QUERY:
COPY testnull TO stdout WITH NULL AS E'\\0'
RESULT: []

-----------
QUERY:
COPY testnull FROM stdin WITH NULL AS E'\\0'
RESULT: []

-----------
QUERY:
42	\\0
\0	\0
\.

SELECT * FROM testnull
RESULT: []

-----------
QUERY:
BEGIN
RESULT: []

-----------
QUERY:
CREATE TABLE vistest (LIKE testeoc)
RESULT: []

-----------
QUERY:
COPY vistest FROM stdin CSV
RESULT: []

-----------
QUERY:
a0
b
\.
COMMIT
RESULT: []

-----------
QUERY:
SELECT * FROM vistest
RESULT: []

-----------
QUERY:
BEGIN
RESULT: []

-----------
QUERY:
TRUNCATE vistest
RESULT: []

-----------
QUERY:
COPY vistest FROM stdin CSV
RESULT: []

-----------
QUERY:
a1
b
\.
SELECT * FROM vistest
RESULT: []

-----------
QUERY:
SAVEPOINT s1
RESULT: []

-----------
QUERY:
TRUNCATE vistest
RESULT: []

-----------
QUERY:
COPY vistest FROM stdin CSV
RESULT: []

-----------
QUERY:
d1
e
\.
SELECT * FROM vistest
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
SELECT * FROM vistest
RESULT: []

-----------
QUERY:
BEGIN
RESULT: []

-----------
QUERY:
TRUNCATE vistest
RESULT: []

-----------
QUERY:
COPY vistest FROM stdin CSV FREEZE
RESULT: []

-----------
QUERY:
a2
b
\.
SELECT * FROM vistest
RESULT: []

-----------
QUERY:
SAVEPOINT s1
RESULT: []

-----------
QUERY:
TRUNCATE vistest
RESULT: []

-----------
QUERY:
COPY vistest FROM stdin CSV FREEZE
RESULT: []

-----------
QUERY:
d2
e
\.
SELECT * FROM vistest
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
SELECT * FROM vistest
RESULT: []

-----------
QUERY:
BEGIN
RESULT: []

-----------
QUERY:
TRUNCATE vistest
RESULT: []

-----------
QUERY:
COPY vistest FROM stdin CSV FREEZE
RESULT: []

-----------
QUERY:
x
y
\.
SELECT * FROM vistest
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
TRUNCATE vistest
RESULT: []

-----------
QUERY:
COPY vistest FROM stdin CSV FREEZE
RESULT: []

-----------
QUERY:
p
g
\.
BEGIN
RESULT: []

-----------
QUERY:
TRUNCATE vistest
RESULT: []

-----------
QUERY:
SAVEPOINT s1
RESULT: []

-----------
QUERY:
COPY vistest FROM stdin CSV FREEZE
RESULT: []

-----------
QUERY:
m
k
\.
COMMIT
RESULT: []

-----------
QUERY:
BEGIN
RESULT: []

-----------
QUERY:
INSERT INTO vistest VALUES ('z')
RESULT: []

-----------
QUERY:
SAVEPOINT s1
RESULT: []

-----------
QUERY:
TRUNCATE vistest
RESULT: []

-----------
QUERY:
ROLLBACK TO SAVEPOINT s1
RESULT: []

-----------
QUERY:
COPY vistest FROM stdin CSV FREEZE
RESULT: []

-----------
QUERY:
d3
e
\.
COMMIT
RESULT: []

-----------
QUERY:
CREATE FUNCTION truncate_in_subxact() RETURNS VOID AS
$$
BEGIN
	TRUNCATE vistest;
EXCEPTION
  WHEN OTHERS THEN
	INSERT INTO vistest VALUES ('subxact failure');
END;
$$ language plpgsql
RESULT: []

-----------
QUERY:
BEGIN
RESULT: []

-----------
QUERY:
INSERT INTO vistest VALUES ('z')
RESULT: []

-----------
QUERY:
SELECT truncate_in_subxact()
RESULT: []

-----------
QUERY:
COPY vistest FROM stdin CSV FREEZE
RESULT: []

-----------
QUERY:
d4
e
\.
SELECT * FROM vistest
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
SELECT * FROM vistest
RESULT: []

-----------
QUERY:
-- Test FORCE_NOT_NULL and FORCE_NULL options
CREATE TEMP TABLE forcetest (
    a INT NOT NULL,
    b TEXT NOT NULL,
    c TEXT,
    d TEXT,
    e TEXT
)
RESULT: []

-----------
QUERY:
\pset null NULL
-- should succeed with no effect (/* REPLACED */''b/* REPLACED */'' remains an empty string, /* REPLACED */''c/* REPLACED */'' remains NULL)
BEGIN
RESULT: []

-----------
QUERY:
COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(b), FORCE_NULL(c))
RESULT: []

-----------
QUERY:
1,,""
\.
COMMIT
RESULT: []

-----------
QUERY:
SELECT b, c FROM forcetest WHERE a = 1
RESULT: []

-----------
QUERY:
-- should succeed, FORCE_NULL and FORCE_NOT_NULL can be both specified
BEGIN
RESULT: []

-----------
QUERY:
COPY forcetest (a, b, c, d) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(c,d), FORCE_NULL(c,d))
RESULT: []

-----------
QUERY:
2,'a',,""
\.
COMMIT
RESULT: []

-----------
QUERY:
SELECT c, d FROM forcetest WHERE a = 2
RESULT: []

-----------
QUERY:
-- should fail with not-null constraint violation
BEGIN
RESULT: []

-----------
QUERY:
COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NULL(b), FORCE_NOT_NULL(c))
RESULT: []

-----------
QUERY:
3,,""
\.
ROLLBACK
RESULT: []

-----------
QUERY:
-- should fail with /* REPLACED */''not referenced by COPY/* REPLACED */'' error
BEGIN
RESULT: []

-----------
QUERY:
COPY forcetest (d, e) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL(b))
RESULT: []

-----------
QUERY:
ROLLBACK
RESULT: []

-----------
QUERY:
-- should fail with /* REPLACED */''not referenced by COPY/* REPLACED */'' error
BEGIN
RESULT: []

-----------
QUERY:
COPY forcetest (d, e) FROM STDIN WITH (FORMAT csv, FORCE_NULL(b))
RESULT: []

-----------
QUERY:
ROLLBACK
RESULT: []

-----------
QUERY:
-- should succeed with no effect (/* REPLACED */''b/* REPLACED */'' remains an empty string, /* REPLACED */''c/* REPLACED */'' remains NULL)
BEGIN
RESULT: []

-----------
QUERY:
COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL *, FORCE_NULL *)
RESULT: []

-----------
QUERY:
4,,""
\.
COMMIT
RESULT: []

-----------
QUERY:
SELECT b, c FROM forcetest WHERE a = 4
RESULT: []

-----------
QUERY:
-- should succeed with effect (/* REPLACED */''b/* REPLACED */'' remains an empty string)
BEGIN
RESULT: []

-----------
QUERY:
COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL *)
RESULT: []

-----------
QUERY:
5,,""
\.
COMMIT
RESULT: []

-----------
QUERY:
SELECT b, c FROM forcetest WHERE a = 5
RESULT: []

-----------
QUERY:
-- should succeed with effect (/* REPLACED */''c/* REPLACED */'' remains NULL)
BEGIN
RESULT: []

-----------
QUERY:
COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NULL *)
RESULT: []

-----------
QUERY:
6,"b",""
\.
COMMIT
RESULT: []

-----------
QUERY:
SELECT b, c FROM forcetest WHERE a = 6
RESULT: []

-----------
QUERY:
-- should fail with /* REPLACED */''conflicting or redundant options/* REPLACED */'' error
BEGIN
RESULT: []

-----------
QUERY:
COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NOT_NULL *, FORCE_NOT_NULL(b))
RESULT: []

-----------
QUERY:
ROLLBACK
RESULT: []

-----------
QUERY:
-- should fail with /* REPLACED */''conflicting or redundant options/* REPLACED */'' error
BEGIN
RESULT: []

-----------
QUERY:
COPY forcetest (a, b, c) FROM STDIN WITH (FORMAT csv, FORCE_NULL *, FORCE_NULL(b))
RESULT: []

-----------
QUERY:
ROLLBACK
RESULT: []

-----------
QUERY:
\pset null ''

-- test case with whole-row Var in a check constraint
create table check_con_tbl (f1 int)
RESULT: []

-----------
QUERY:
create function check_con_function(check_con_tbl) returns bool as $$
begin
  raise notice 'input = %', row_to_json($1);
  return $1.f1 > 0;
end $$ language plpgsql immutable
RESULT: []

-----------
QUERY:
alter table check_con_tbl add check (check_con_function(check_con_tbl.*))
RESULT: []

-----------
QUERY:
-- \d+ check_con_tbl
copy check_con_tbl from stdin
RESULT: []

-----------
QUERY:
1
\N
\.
copy check_con_tbl from stdin
RESULT: []

-----------
QUERY:
0
\.
select * from check_con_tbl
RESULT: []

-----------
QUERY:
-- test with RLS enabled.
CREATE ROLE regress_rls_copy_user
RESULT: []

-----------
QUERY:
CREATE ROLE regress_rls_copy_user_colperms
RESULT: []

-----------
QUERY:
CREATE TABLE rls_t1 (a int, b int, c int)
RESULT: []

-----------
QUERY:
COPY rls_t1 (a, b, c) from stdin
RESULT: []

-----------
QUERY:
1	4	1
2	3	2
3	2	3
4	1	4
\.

CREATE POLICY p1 ON rls_t1 FOR SELECT USING (a % 2 = 0)
RESULT: []

-----------
QUERY:
ALTER TABLE rls_t1 ENABLE ROW LEVEL SECURITY
RESULT: []

-----------
QUERY:
ALTER TABLE rls_t1 FORCE ROW LEVEL SECURITY
RESULT: []

-----------
QUERY:
GRANT SELECT ON TABLE rls_t1 TO regress_rls_copy_user
RESULT: []

-----------
QUERY:
GRANT SELECT (a, b) ON TABLE rls_t1 TO regress_rls_copy_user_colperms
RESULT: []

-----------
QUERY:
-- all columns
COPY rls_t1 TO stdout
RESULT: []

-----------
QUERY:
COPY rls_t1 (a, b, c) TO stdout
RESULT: []

-----------
QUERY:
-- subset of columns
COPY rls_t1 (a) TO stdout
RESULT: []

-----------
QUERY:
COPY rls_t1 (a, b) TO stdout
RESULT: []

-----------
QUERY:
-- column reordering
COPY rls_t1 (b, a) TO stdout
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION regress_rls_copy_user
RESULT: []

-----------
QUERY:
-- all columns
COPY rls_t1 TO stdout
RESULT: []

-----------
QUERY:
COPY rls_t1 (a, b, c) TO stdout
RESULT: []

-----------
QUERY:
-- subset of columns
COPY rls_t1 (a) TO stdout
RESULT: []

-----------
QUERY:
COPY rls_t1 (a, b) TO stdout
RESULT: []

-----------
QUERY:
-- column reordering
COPY rls_t1 (b, a) TO stdout
RESULT: []

-----------
QUERY:
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION regress_rls_copy_user_colperms
RESULT: []

-----------
QUERY:
-- attempt all columns (should fail)
COPY rls_t1 TO stdout
RESULT: []

-----------
QUERY:
COPY rls_t1 (a, b, c) TO stdout
RESULT: []

-----------
QUERY:
-- try to copy column with no privileges (should fail)
COPY rls_t1 (c) TO stdout
RESULT: []

-----------
QUERY:
-- subset of columns (should succeed)
COPY rls_t1 (a) TO stdout
RESULT: []

-----------
QUERY:
COPY rls_t1 (a, b) TO stdout
RESULT: []

-----------
QUERY:
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
-- test with INSTEAD OF INSERT trigger on a view
CREATE TABLE instead_of_insert_tbl(id serial, name text)
RESULT: []

-----------
QUERY:
CREATE VIEW instead_of_insert_tbl_view AS SELECT ''::text AS str
RESULT: []

-----------
QUERY:
COPY instead_of_insert_tbl_view FROM stdin
RESULT: []

-----------
QUERY:
-- fail
test1
\.

CREATE FUNCTION fun_instead_of_insert_tbl() RETURNS trigger AS $$
BEGIN
  INSERT INTO instead_of_insert_tbl (name) VALUES (NEW.str);
  RETURN NULL;
END;
$$ LANGUAGE plpgsql
RESULT: []

-----------
QUERY:
CREATE TRIGGER trig_instead_of_insert_tbl_view
  INSTEAD OF INSERT ON instead_of_insert_tbl_view
  FOR EACH ROW EXECUTE PROCEDURE fun_instead_of_insert_tbl()
RESULT: []

-----------
QUERY:
COPY instead_of_insert_tbl_view FROM stdin
RESULT: []

-----------
QUERY:
test1
\.

SELECT * FROM instead_of_insert_tbl
RESULT: []

-----------
QUERY:
-- Test of COPY optimization with view using INSTEAD OF INSERT
-- trigger when relation is created in the same transaction as
-- when COPY is executed.
BEGIN
RESULT: []

-----------
QUERY:
CREATE VIEW instead_of_insert_tbl_view_2 as select ''::text as str
RESULT: []

-----------
QUERY:
CREATE TRIGGER trig_instead_of_insert_tbl_view_2
  INSTEAD OF INSERT ON instead_of_insert_tbl_view_2
  FOR EACH ROW EXECUTE PROCEDURE fun_instead_of_insert_tbl()
RESULT: []

-----------
QUERY:
COPY instead_of_insert_tbl_view_2 FROM stdin
RESULT: []

-----------
QUERY:
test1
\.

SELECT * FROM instead_of_insert_tbl
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
-- tests for on_error option
CREATE TABLE check_ign_err (n int, m int[], k int)
RESULT: []

-----------
QUERY:
COPY check_ign_err FROM STDIN WITH (on_error stop)
RESULT: []

-----------
QUERY:
1	{1}	1
a	{2}	2
3	{3}	3333333333
4	{a, 4}	4

5	{5}	5
\.
COPY check_ign_err FROM STDIN WITH (on_error ignore)
RESULT: []

-----------
QUERY:
1	{1}	1
a	{2}	2
3	{3}	3333333333
4	{a, 4}	4

5	{5}	5
6	a
7	{7}	a
8	{8}	8
\.
SELECT * FROM check_ign_err
RESULT: []

-----------
QUERY:
-- test datatype error that can/* REPLACED */''t be handled as soft: should fail
CREATE TABLE hard_err(foo widget)
RESULT: []

-----------
QUERY:
COPY hard_err FROM STDIN WITH (on_error ignore)
RESULT: []

-----------
QUERY:
1
\.

-- test missing data: should fail
COPY check_ign_err FROM STDIN WITH (on_error ignore)
RESULT: []

-----------
QUERY:
1	{1}
\.

-- test extra data: should fail
COPY check_ign_err FROM STDIN WITH (on_error ignore)
RESULT: []

-----------
QUERY:
1	{1}	3	abc
\.

-- clean up
DROP TABLE forcetest
RESULT: []

-----------
QUERY:
DROP TABLE vistest
RESULT: []

-----------
QUERY:
DROP FUNCTION truncate_in_subxact()
RESULT: []

-----------
QUERY:
DROP TABLE x, y
RESULT: []

-----------
QUERY:
DROP TABLE rls_t1 CASCADE
RESULT: []

-----------
QUERY:
DROP ROLE regress_rls_copy_user
RESULT: []

-----------
QUERY:
DROP ROLE regress_rls_copy_user_colperms
RESULT: []

-----------
QUERY:
DROP FUNCTION fn_x_before()
RESULT: []

-----------
QUERY:
DROP FUNCTION fn_x_after()
RESULT: []

-----------
QUERY:
DROP TABLE instead_of_insert_tbl
RESULT: []

-----------
QUERY:
DROP VIEW instead_of_insert_tbl_view
RESULT: []

-----------
QUERY:
DROP VIEW instead_of_insert_tbl_view_2
RESULT: []

-----------
QUERY:
DROP FUNCTION fun_instead_of_insert_tbl()
RESULT: []

-----------
QUERY:
DROP TABLE check_ign_err
RESULT: []

-----------
QUERY:
DROP TABLE hard_err
RESULT: []

-----------
QUERY:
--
-- COPY FROM ... DEFAULT
--

create temp table copy_default (
	id integer primary key,
	text_value text not null default 'test',
	ts_value timestamp without time zone not null default '2022-07-05'
)
RESULT: []

-----------
QUERY:
-- if DEFAULT is not specified, then the marker will be regular data
copy copy_default from stdin
RESULT: []

-----------
QUERY:
1	value	'2022-07-04'
2	\D	'2022-07-05'
\.

select id, text_value, ts_value from copy_default
RESULT: []

-----------
QUERY:
truncate copy_default
RESULT: []

-----------
QUERY:
copy copy_default from stdin with (format csv)
RESULT: []

-----------
QUERY:
1,value,2022-07-04
2,\D,2022-07-05
\.

select id, text_value, ts_value from copy_default
RESULT: []

-----------
QUERY:
truncate copy_default
RESULT: []

-----------
QUERY:
-- DEFAULT cannot be used in binary mode
copy copy_default from stdin with (format binary, default '\D')
RESULT: []

-----------
QUERY:
-- DEFAULT cannot be new line nor carriage return
copy copy_default from stdin with (default E'\n')
RESULT: []

-----------
QUERY:
copy copy_default from stdin with (default E'\r')
RESULT: []

-----------
QUERY:
-- DELIMITER cannot appear in DEFAULT spec
copy copy_default from stdin with (delimiter '
RESULT: []

-----------
QUERY:
', default 'test
RESULT: []

-----------
QUERY:
test')
RESULT: []

-----------
QUERY:
-- CSV quote cannot appear in DEFAULT spec
copy copy_default from stdin with (format csv, quote '"', default 'test"test')
RESULT: []

-----------
QUERY:
-- NULL and DEFAULT spec must be different
copy copy_default from stdin with (default '\N')
RESULT: []

-----------
QUERY:
-- cannot use DEFAULT marker in column that has no DEFAULT value
copy copy_default from stdin with (default '\D')
RESULT: []

-----------
QUERY:
\D	value	'2022-07-04'
2	\D	'2022-07-05'
\.

copy copy_default from stdin with (format csv, default '\D')
RESULT: []

-----------
QUERY:
\D,value,2022-07-04
2,\D,2022-07-05
\.

-- The DEFAULT marker must be unquoted and unescaped or it/* REPLACED */''s not recognized
copy copy_default from stdin with (default '\D')
RESULT: []

-----------
QUERY:
1	\D	'2022-07-04'
2	\\D	'2022-07-04'
3	"\D"	'2022-07-04'
\.

select id, text_value, ts_value from copy_default
RESULT: []

-----------
QUERY:
truncate copy_default
RESULT: []

-----------
QUERY:
copy copy_default from stdin with (format csv, default '\D')
RESULT: []

-----------
QUERY:
1,\D,2022-07-04
2,\\D,2022-07-04
3,"\D",2022-07-04
\.

select id, text_value, ts_value from copy_default
RESULT: []

-----------
QUERY:
truncate copy_default
RESULT: []

-----------
QUERY:
-- successful usage of DEFAULT option in COPY
copy copy_default from stdin with (default '\D')
RESULT: []

-----------
QUERY:
1	value	'2022-07-04'
2	\D	'2022-07-03'
3	\D	\D
\.

select id, text_value, ts_value from copy_default
RESULT: []

-----------
QUERY:
truncate copy_default
RESULT: []

-----------
QUERY:
copy copy_default from stdin with (format csv, default '\D')
RESULT: []

-----------
QUERY:
1,value,2022-07-04
2,\D,2022-07-03
3,\D,\D
\.

select id, text_value, ts_value from copy_default
RESULT: []

-----------
QUERY:
truncate copy_default
RESULT: []

-----------
QUERY:
-- DEFAULT cannot be used in COPY TO
copy (select 1 as test) TO stdout with (default '\D')
RESULT: []
=========================================
Summary for test case copy2/test.sql of postgres
=========================================
