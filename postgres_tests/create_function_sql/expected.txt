
-----------
QUERY:
--
-- CREATE_FUNCTION_SQL
--
-- Assorted tests using SQL-language functions
--

-- All objects made in this test are in temp_func_test schema

CREATE USER regress_unpriv_user;
RESULT:
	postgres: None

-----------
QUERY:


CREATE SCHEMA temp_func_test;
RESULT:
	postgres: None

-----------
QUERY:

GRANT ALL ON SCHEMA temp_func_test TO public;
RESULT:
	postgres: None

-----------
QUERY:


SET search_path TO temp_func_test, public;
RESULT:
	postgres: None

-----------
QUERY:


--
-- Make sanity checks on the pg_proc entries created by CREATE FUNCTION
--

--
-- ARGUMENT and RETURN TYPES
--
CREATE FUNCTION functest_A_1(text, date) RETURNS bool LANGUAGE 'sql'
       AS 'SELECT $1 = ''abcd'' AND $2 > ''2001-01-01''';
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_A_2(text[]) RETURNS int LANGUAGE 'sql'
       AS 'SELECT $1[1]::int';
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_A_3() RETURNS bool LANGUAGE 'sql'
       AS 'SELECT false';
RESULT:
	postgres: None

-----------
QUERY:

SELECT proname, prorettype::regtype, proargtypes::regtype[] FROM pg_proc
       WHERE oid in ('functest_A_1'::regproc,
                     'functest_A_2'::regproc,
                     'functest_A_3'::regproc) ORDER BY proname;
RESULT:
	postgres: [('functest_a_1', 'boolean', '[0:1]={text,date}'), ('functest_a_2', 'integer', '[0:0]={text[]}'), ('functest_a_3', 'boolean', '{}')]

-----------
QUERY:


SELECT functest_A_1('abcd', '2020-01-01');
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT functest_A_2(ARRAY['1', '2', '3']);
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT functest_A_3();
RESULT:
	postgres: [(False,)]

-----------
QUERY:


--
-- IMMUTABLE | STABLE | VOLATILE
--
CREATE FUNCTION functest_B_1(int) RETURNS bool LANGUAGE 'sql'
       AS 'SELECT $1 > 0';
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_B_2(int) RETURNS bool LANGUAGE 'sql'
       IMMUTABLE AS 'SELECT $1 > 0';
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_B_3(int) RETURNS bool LANGUAGE 'sql'
       STABLE AS 'SELECT $1 = 0';
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_B_4(int) RETURNS bool LANGUAGE 'sql'
       VOLATILE AS 'SELECT $1 < 0';
RESULT:
	postgres: None

-----------
QUERY:

SELECT proname, provolatile FROM pg_proc
       WHERE oid in ('functest_B_1'::regproc,
                     'functest_B_2'::regproc,
                     'functest_B_3'::regproc,
		     'functest_B_4'::regproc) ORDER BY proname;
RESULT:
	postgres: [('functest_b_1', 'v'), ('functest_b_2', 'i'), ('functest_b_3', 's'), ('functest_b_4', 'v')]

-----------
QUERY:


ALTER FUNCTION functest_B_2(int) VOLATILE;
RESULT:
	postgres: None

-----------
QUERY:

ALTER FUNCTION functest_B_3(int) COST 100;
RESULT:
	postgres: None

-----------
QUERY:
	-- unrelated change, no effect
SELECT proname, provolatile FROM pg_proc
       WHERE oid in ('functest_B_1'::regproc,
                     'functest_B_2'::regproc,
                     'functest_B_3'::regproc,
		     'functest_B_4'::regproc) ORDER BY proname;
RESULT:
	postgres: [('functest_b_1', 'v'), ('functest_b_2', 'v'), ('functest_b_3', 's'), ('functest_b_4', 'v')]

-----------
QUERY:


--
-- SECURITY DEFINER | INVOKER
--
CREATE FUNCTION functest_C_1(int) RETURNS bool LANGUAGE 'sql'
       AS 'SELECT $1 > 0';
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_C_2(int) RETURNS bool LANGUAGE 'sql'
       SECURITY DEFINER AS 'SELECT $1 = 0';
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_C_3(int) RETURNS bool LANGUAGE 'sql'
       SECURITY INVOKER AS 'SELECT $1 < 0';
RESULT:
	postgres: None

-----------
QUERY:

SELECT proname, prosecdef FROM pg_proc
       WHERE oid in ('functest_C_1'::regproc,
                     'functest_C_2'::regproc,
                     'functest_C_3'::regproc) ORDER BY proname;
RESULT:
	postgres: [('functest_c_1', False), ('functest_c_2', True), ('functest_c_3', False)]

-----------
QUERY:


ALTER FUNCTION functest_C_1(int) IMMUTABLE;
RESULT:
	postgres: None

-----------
QUERY:
	-- unrelated change, no effect
ALTER FUNCTION functest_C_2(int) SECURITY INVOKER;
RESULT:
	postgres: None

-----------
QUERY:

ALTER FUNCTION functest_C_3(int) SECURITY DEFINER;
RESULT:
	postgres: None

-----------
QUERY:

SELECT proname, prosecdef FROM pg_proc
       WHERE oid in ('functest_C_1'::regproc,
                     'functest_C_2'::regproc,
                     'functest_C_3'::regproc) ORDER BY proname;
RESULT:
	postgres: [('functest_c_1', False), ('functest_c_2', False), ('functest_c_3', True)]

-----------
QUERY:


--
-- LEAKPROOF
--
CREATE FUNCTION functest_E_1(int) RETURNS bool LANGUAGE 'sql'
       AS 'SELECT $1 > 100';
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_E_2(int) RETURNS bool LANGUAGE 'sql'
       LEAKPROOF AS 'SELECT $1 > 100';
RESULT:
	postgres: None

-----------
QUERY:

SELECT proname, proleakproof FROM pg_proc
       WHERE oid in ('functest_E_1'::regproc,
                     'functest_E_2'::regproc) ORDER BY proname;
RESULT:
	postgres: [('functest_e_1', False), ('functest_e_2', True)]

-----------
QUERY:


ALTER FUNCTION functest_E_1(int) LEAKPROOF;
RESULT:
	postgres: None

-----------
QUERY:

ALTER FUNCTION functest_E_2(int) STABLE;
RESULT:
	postgres: None

-----------
QUERY:
	-- unrelated change, no effect
SELECT proname, proleakproof FROM pg_proc
       WHERE oid in ('functest_E_1'::regproc,
                     'functest_E_2'::regproc) ORDER BY proname;
RESULT:
	postgres: [('functest_e_1', True), ('functest_e_2', True)]

-----------
QUERY:


ALTER FUNCTION functest_E_2(int) NOT LEAKPROOF;
RESULT:
	postgres: None

-----------
QUERY:
	-- remove leakproof attribute
SELECT proname, proleakproof FROM pg_proc
       WHERE oid in ('functest_E_1'::regproc,
                     'functest_E_2'::regproc) ORDER BY proname;
RESULT:
	postgres: [('functest_e_1', True), ('functest_e_2', False)]

-----------
QUERY:


-- it takes superuser privilege to turn on leakproof, but not to turn off
ALTER FUNCTION functest_E_1(int) OWNER TO regress_unpriv_user;
RESULT:
	postgres: None

-----------
QUERY:

ALTER FUNCTION functest_E_2(int) OWNER TO regress_unpriv_user;
RESULT:
	postgres: None

-----------
QUERY:


SET SESSION AUTHORIZATION regress_unpriv_user;
RESULT:
	postgres: None

-----------
QUERY:

SET search_path TO temp_func_test, public;
RESULT:
	postgres: None

-----------
QUERY:

ALTER FUNCTION functest_E_1(int) NOT LEAKPROOF;
RESULT:
	postgres: None

-----------
QUERY:

ALTER FUNCTION functest_E_2(int) LEAKPROOF;
RESULT:
	postgres: only superuser can define a leakproof function


-----------
QUERY:


CREATE FUNCTION functest_E_3(int) RETURNS bool LANGUAGE 'sql'
       LEAKPROOF AS 'SELECT $1 < 200';
RESULT:
	postgres: only superuser can define a leakproof function


-----------
QUERY:
	-- fail

RESET SESSION AUTHORIZATION;
RESULT:
	postgres: None

-----------
QUERY:


--
-- CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT
--
CREATE FUNCTION functest_F_1(int) RETURNS bool LANGUAGE 'sql'
       AS 'SELECT $1 > 50';
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_F_2(int) RETURNS bool LANGUAGE 'sql'
       CALLED ON NULL INPUT AS 'SELECT $1 = 50';
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_F_3(int) RETURNS bool LANGUAGE 'sql'
       RETURNS NULL ON NULL INPUT AS 'SELECT $1 < 50';
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_F_4(int) RETURNS bool LANGUAGE 'sql'
       STRICT AS 'SELECT $1 = 50';
RESULT:
	postgres: None

-----------
QUERY:

SELECT proname, proisstrict FROM pg_proc
       WHERE oid in ('functest_F_1'::regproc,
                     'functest_F_2'::regproc,
                     'functest_F_3'::regproc,
                     'functest_F_4'::regproc) ORDER BY proname;
RESULT:
	postgres: [('functest_f_1', False), ('functest_f_2', False), ('functest_f_3', True), ('functest_f_4', True)]

-----------
QUERY:


ALTER FUNCTION functest_F_1(int) IMMUTABLE;
RESULT:
	postgres: None

-----------
QUERY:
	-- unrelated change, no effect
ALTER FUNCTION functest_F_2(int) STRICT;
RESULT:
	postgres: None

-----------
QUERY:

ALTER FUNCTION functest_F_3(int) CALLED ON NULL INPUT;
RESULT:
	postgres: None

-----------
QUERY:

SELECT proname, proisstrict FROM pg_proc
       WHERE oid in ('functest_F_1'::regproc,
                     'functest_F_2'::regproc,
                     'functest_F_3'::regproc,
                     'functest_F_4'::regproc) ORDER BY proname;
RESULT:
	postgres: [('functest_f_1', False), ('functest_f_2', True), ('functest_f_3', False), ('functest_f_4', True)]

-----------
QUERY:



-- pg_get_functiondef tests

SELECT pg_get_functiondef('functest_A_1'::regproc);
RESULT:
	postgres: [("CREATE OR REPLACE FUNCTION temp_func_test.functest_a_1(text, date)\n RETURNS boolean\n LANGUAGE sql\nAS $function$SELECT $1 = 'abcd' AND $2 > '2001-01-01'$function$\n",)]

-----------
QUERY:

SELECT pg_get_functiondef('functest_B_3'::regproc);
RESULT:
	postgres: [('CREATE OR REPLACE FUNCTION temp_func_test.functest_b_3(integer)\n RETURNS boolean\n LANGUAGE sql\n STABLE\nAS $function$SELECT $1 = 0$function$\n',)]

-----------
QUERY:

SELECT pg_get_functiondef('functest_C_3'::regproc);
RESULT:
	postgres: [('CREATE OR REPLACE FUNCTION temp_func_test.functest_c_3(integer)\n RETURNS boolean\n LANGUAGE sql\n SECURITY DEFINER\nAS $function$SELECT $1 < 0$function$\n',)]

-----------
QUERY:

SELECT pg_get_functiondef('functest_F_2'::regproc);
RESULT:
	postgres: [('CREATE OR REPLACE FUNCTION temp_func_test.functest_f_2(integer)\n RETURNS boolean\n LANGUAGE sql\n STRICT\nAS $function$SELECT $1 = 50$function$\n',)]

-----------
QUERY:



--
-- SQL-standard body
--
CREATE FUNCTION functest_S_1(a text, b date) RETURNS boolean
    LANGUAGE SQL
    RETURN a = 'abcd' AND b > '2001-01-01';
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_S_2(a text[]) RETURNS int
    RETURN a[1]::int;
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_S_3() RETURNS boolean
    RETURN false;
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_S_3a() RETURNS boolean
    BEGIN ATOMIC
        ;
RESULT:
	postgres: syntax error at end of input
LINE 4:         ;
                 ^


-----------
QUERY:
;
RESULT:
	postgres: can't execute an empty query

-----------
QUERY:
RETURN false;
RESULT:
	postgres: syntax error at or near "RETURN"
LINE 1: RETURN false;
        ^


-----------
QUERY:
;
RESULT:
	postgres: can't execute an empty query

-----------
QUERY:

    END;
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION functest_S_10(a text, b date) RETURNS boolean
    LANGUAGE SQL
    BEGIN ATOMIC
        SELECT a = 'abcd' AND b > '2001-01-01';
RESULT:
	postgres: syntax error at end of input
LINE 6:         SELECT a = 'abcd' AND b > '2001-01-01';
                                                       ^


-----------
QUERY:

    END;
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION functest_S_13() RETURNS boolean
    BEGIN ATOMIC
        SELECT 1;
RESULT:
	postgres: syntax error at end of input
LINE 5:         SELECT 1;
                         ^


-----------
QUERY:

        SELECT false;
RESULT:
	postgres: [(False,)]

-----------
QUERY:

    END;
RESULT:
	postgres: None

-----------
QUERY:


-- check display of function arguments in sub-SELECT
CREATE TABLE functest1 (i int);
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_S_16(a int, b int) RETURNS void
    LANGUAGE SQL
    BEGIN ATOMIC
        INSERT INTO functest1 SELECT a + $2;
RESULT:
	postgres: syntax error at end of input
LINE 5:         INSERT INTO functest1 SELECT a + $2;
                                                    ^


-----------
QUERY:

    END;
RESULT:
	postgres: None

-----------
QUERY:


-- error: duplicate function body
CREATE FUNCTION functest_S_xxx(x int) RETURNS int
    LANGUAGE SQL
    AS $$ SELECT x * 2 $$
    RETURN x * 3;
RESULT:
	postgres: duplicate function body specified


-----------
QUERY:


-- polymorphic arguments not allowed in this form
CREATE FUNCTION functest_S_xx(x anyarray) RETURNS anyelement
    LANGUAGE SQL
    RETURN x[1];
RESULT:
	postgres: SQL function with unquoted function body cannot have polymorphic arguments


-----------
QUERY:


-- check reporting of parse-analysis errors
CREATE FUNCTION functest_S_xx(x date) RETURNS boolean
    LANGUAGE SQL
    RETURN x > 1;
RESULT:
	postgres: operator does not exist: date > integer
LINE 6:     RETURN x > 1;
                     ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


-- tricky parsing
CREATE FUNCTION functest_S_15(x int) RETURNS boolean
LANGUAGE SQL
BEGIN ATOMIC
    select case when x % 2 = 0 then true else false end;
RESULT:
	postgres: syntax error at end of input
LINE 7:     select case when x % 2 = 0 then true else false end;
                                                                ^


-----------
QUERY:

END;
RESULT:
	postgres: None

-----------
QUERY:


SELECT functest_S_1('abcd', '2020-01-01');
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT functest_S_2(ARRAY['1', '2', '3']);
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT functest_S_3();
RESULT:
	postgres: [(False,)]

-----------
QUERY:


SELECT functest_S_10('abcd', '2020-01-01');
RESULT:
	postgres: function functest_s_10(unknown, unknown) does not exist
LINE 3: SELECT functest_S_10('abcd', '2020-01-01');
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT functest_S_13();
RESULT:
	postgres: function functest_s_13() does not exist
LINE 2: SELECT functest_S_13();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


SELECT pg_get_functiondef('functest_S_1'::regproc);
RESULT:
	postgres: [("CREATE OR REPLACE FUNCTION temp_func_test.functest_s_1(a text, b date)\n RETURNS boolean\n LANGUAGE sql\nRETURN ((a = 'abcd'::text) AND (b > '2001-01-01'::date))\n",)]

-----------
QUERY:

SELECT pg_get_functiondef('functest_S_2'::regproc);
RESULT:
	postgres: [('CREATE OR REPLACE FUNCTION temp_func_test.functest_s_2(a text[])\n RETURNS integer\n LANGUAGE sql\nRETURN ((a)[1])::integer\n',)]

-----------
QUERY:

SELECT pg_get_functiondef('functest_S_3'::regproc);
RESULT:
	postgres: [('CREATE OR REPLACE FUNCTION temp_func_test.functest_s_3()\n RETURNS boolean\n LANGUAGE sql\nRETURN false\n',)]

-----------
QUERY:

SELECT pg_get_functiondef('functest_S_3a'::regproc);
RESULT:
	postgres: function "functest_S_3a" does not exist
LINE 2: SELECT pg_get_functiondef('functest_S_3a'::regproc);
                                  ^


-----------
QUERY:

SELECT pg_get_functiondef('functest_S_10'::regproc);
RESULT:
	postgres: function "functest_S_10" does not exist
LINE 2: SELECT pg_get_functiondef('functest_S_10'::regproc);
                                  ^


-----------
QUERY:

SELECT pg_get_functiondef('functest_S_13'::regproc);
RESULT:
	postgres: function "functest_S_13" does not exist
LINE 2: SELECT pg_get_functiondef('functest_S_13'::regproc);
                                  ^


-----------
QUERY:

SELECT pg_get_functiondef('functest_S_15'::regproc);
RESULT:
	postgres: function "functest_S_15" does not exist
LINE 2: SELECT pg_get_functiondef('functest_S_15'::regproc);
                                  ^


-----------
QUERY:

SELECT pg_get_functiondef('functest_S_16'::regproc);
RESULT:
	postgres: function "functest_S_16" does not exist
LINE 2: SELECT pg_get_functiondef('functest_S_16'::regproc);
                                  ^


-----------
QUERY:


DROP TABLE functest1 CASCADE;
RESULT:
	postgres: None

-----------
QUERY:


-- test with views
CREATE TABLE functest3 (a int);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO functest3 VALUES (1), (2);
RESULT:
	postgres: None

-----------
QUERY:

CREATE VIEW functestv3 AS SELECT * FROM functest3;
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION functest_S_14() RETURNS bigint
    RETURN (SELECT count(*) FROM functestv3);
RESULT:
	postgres: None

-----------
QUERY:


SELECT functest_S_14();
RESULT:
	postgres: [(2,)]

-----------
QUERY:


DROP TABLE functest3 CASCADE;
RESULT:
	postgres: None

-----------
QUERY:



-- information_schema tests

CREATE FUNCTION functest_IS_1(a int, b int default 1, c text default 'foo')
    RETURNS int
    LANGUAGE SQL
    AS 'SELECT $1 + $2';
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION functest_IS_2(out a int, b int default 1)
    RETURNS int
    LANGUAGE SQL
    AS 'SELECT $1';
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION functest_IS_3(a int default 1, out b int)
    RETURNS int
    LANGUAGE SQL
    AS 'SELECT $1';
RESULT:
	postgres: None

-----------
QUERY:


SELECT routine_name, ordinal_position, parameter_name, parameter_default
    FROM information_schema.parameters JOIN information_schema.routines USING (specific_schema, specific_name)
    WHERE routine_schema = 'temp_func_test' AND routine_name ~ '^functest_is_'
    ORDER BY 1, 2;
RESULT:
	postgres: [('functest_is_1', 1, 'a', None), ('functest_is_1', 2, 'b', '1'), ('functest_is_1', 3, 'c', "'foo'::text"), ('functest_is_2', 1, 'a', None), ('functest_is_2', 2, 'b', '1'), ('functest_is_3', 1, 'a', '1'), ('functest_is_3', 2, 'b', None)]

-----------
QUERY:


DROP FUNCTION functest_IS_1(int, int, text), functest_IS_2(int), functest_IS_3(int);
RESULT:
	postgres: None

-----------
QUERY:


-- routine usage views

CREATE FUNCTION functest_IS_4a() RETURNS int LANGUAGE SQL AS 'SELECT 1';
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_IS_4b(x int DEFAULT functest_IS_4a()) RETURNS int LANGUAGE SQL AS 'SELECT x';
RESULT:
	postgres: None

-----------
QUERY:


CREATE SEQUENCE functest1;
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION functest_IS_5(x int DEFAULT nextval('functest1'))
    RETURNS int
    LANGUAGE SQL
    AS 'SELECT x';
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION functest_IS_6()
    RETURNS int
    LANGUAGE SQL
    RETURN nextval('functest1');
RESULT:
	postgres: None

-----------
QUERY:


CREATE TABLE functest2 (a int, b int);
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION functest_IS_7()
    RETURNS int
    LANGUAGE SQL
    RETURN (SELECT count(a) FROM functest2);
RESULT:
	postgres: None

-----------
QUERY:


SELECT r0.routine_name, r1.routine_name
  FROM information_schema.routine_routine_usage rru
       JOIN information_schema.routines r0 ON r0.specific_name = rru.specific_name
       JOIN information_schema.routines r1 ON r1.specific_name = rru.routine_name
  WHERE r0.routine_schema = 'temp_func_test' AND
        r1.routine_schema = 'temp_func_test'
  ORDER BY 1, 2;
RESULT:
	postgres: [('functest_is_4b', 'functest_is_4a')]

-----------
QUERY:

SELECT routine_name, sequence_name FROM information_schema.routine_sequence_usage
  WHERE routine_schema = 'temp_func_test'
  ORDER BY 1, 2;
RESULT:
	postgres: [('functest_is_5', 'functest1'), ('functest_is_6', 'functest1')]

-----------
QUERY:

SELECT routine_name, table_name, column_name FROM information_schema.routine_column_usage
  WHERE routine_schema = 'temp_func_test'
  ORDER BY 1, 2;
RESULT:
	postgres: [('functest_is_7', 'functest2', 'a')]

-----------
QUERY:

SELECT routine_name, table_name FROM information_schema.routine_table_usage
  WHERE routine_schema = 'temp_func_test'
  ORDER BY 1, 2;
RESULT:
	postgres: [('functest_is_7', 'functest2')]

-----------
QUERY:


DROP FUNCTION functest_IS_4a CASCADE;
RESULT:
	postgres: None

-----------
QUERY:

DROP SEQUENCE functest1 CASCADE;
RESULT:
	postgres: None

-----------
QUERY:

DROP TABLE functest2 CASCADE;
RESULT:
	postgres: None

-----------
QUERY:



-- overload
CREATE FUNCTION functest_B_2(bigint) RETURNS bool LANGUAGE 'sql'
       IMMUTABLE AS 'SELECT $1 > 0';
RESULT:
	postgres: None

-----------
QUERY:


DROP FUNCTION functest_b_1;
RESULT:
	postgres: None

-----------
QUERY:

DROP FUNCTION functest_b_1;
RESULT:
	postgres: could not find a function named "functest_b_1"


-----------
QUERY:
  -- error, not found
DROP FUNCTION functest_b_2;
RESULT:
	postgres: function name "functest_b_2" is not unique
HINT:  Specify the argument list to select the function unambiguously.


-----------
QUERY:
  -- error, ambiguous


-- CREATE OR REPLACE tests

CREATE FUNCTION functest1(a int) RETURNS int LANGUAGE SQL AS 'SELECT $1';
RESULT:
	postgres: None

-----------
QUERY:

CREATE OR REPLACE FUNCTION functest1(a int) RETURNS int LANGUAGE SQL WINDOW AS 'SELECT $1';
RESULT:
	postgres: cannot change routine kind
DETAIL:  "functest1" is a function.


-----------
QUERY:

CREATE OR REPLACE PROCEDURE functest1(a int) LANGUAGE SQL AS 'SELECT $1';
RESULT:
	postgres: cannot change routine kind
DETAIL:  "functest1" is a function.


-----------
QUERY:

DROP FUNCTION functest1(a int);
RESULT:
	postgres: None

-----------
QUERY:



-- inlining of set-returning functions

CREATE TABLE functest3 (a int);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO functest3 VALUES (1), (2), (3);
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION functest_sri1() RETURNS SETOF int
LANGUAGE SQL
STABLE
AS '
    SELECT * FROM functest3;
RESULT:
	postgres: unterminated quoted string at or near "'
    SELECT * FROM functest3;"
LINE 6: AS '
           ^


-----------
QUERY:

';
RESULT:
	postgres: unterminated quoted string at or near "';"
LINE 2: ';
        ^


-----------
QUERY:


SELECT * FROM functest_sri1();
RESULT:
	postgres: function functest_sri1() does not exist
LINE 3: SELECT * FROM functest_sri1();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

EXPLAIN (verbose, costs off) SELECT * FROM functest_sri1();
RESULT:
	postgres: function functest_sri1() does not exist
LINE 2: EXPLAIN (verbose, costs off) SELECT * FROM functest_sri1();
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


CREATE FUNCTION functest_sri2() RETURNS SETOF int
LANGUAGE SQL
STABLE
BEGIN ATOMIC
    SELECT * FROM functest3;
RESULT:
	postgres: syntax error at end of input
LINE 7:     SELECT * FROM functest3;
                                    ^


-----------
QUERY:

END;
RESULT:
	postgres: None

-----------
QUERY:


SELECT * FROM functest_sri2();
RESULT:
	postgres: function functest_sri2() does not exist
LINE 3: SELECT * FROM functest_sri2();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

EXPLAIN (verbose, costs off) SELECT * FROM functest_sri2();
RESULT:
	postgres: function functest_sri2() does not exist
LINE 2: EXPLAIN (verbose, costs off) SELECT * FROM functest_sri2();
                                                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


DROP TABLE functest3 CASCADE;
RESULT:
	postgres: None

-----------
QUERY:



-- Check behavior of VOID-returning SQL functions

CREATE FUNCTION voidtest1(a int) RETURNS VOID LANGUAGE SQL AS
$$ SELECT a + 1 $$;
RESULT:
	postgres: None

-----------
QUERY:

SELECT voidtest1(42);
RESULT:
	postgres: [(None,)]

-----------
QUERY:


CREATE FUNCTION voidtest2(a int, b int) RETURNS VOID LANGUAGE SQL AS
$$ SELECT voidtest1(a + b) $$;
RESULT:
	postgres: None

-----------
QUERY:

SELECT voidtest2(11,22);
RESULT:
	postgres: [(None,)]

-----------
QUERY:


-- currently, we can inline voidtest2 but not voidtest1
EXPLAIN (verbose, costs off) SELECT voidtest2(11,22);
RESULT:
	postgres: [('Result',), ('  Output: voidtest1(33)',)]

-----------
QUERY:


CREATE TEMP TABLE sometable(f1 int);
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION voidtest3(a int) RETURNS VOID LANGUAGE SQL AS
$$ INSERT INTO sometable VALUES(a + 1) $$;
RESULT:
	postgres: None

-----------
QUERY:

SELECT voidtest3(17);
RESULT:
	postgres: [(None,)]

-----------
QUERY:


CREATE FUNCTION voidtest4(a int) RETURNS VOID LANGUAGE SQL AS
$$ INSERT INTO sometable VALUES(a - 1) RETURNING f1 $$;
RESULT:
	postgres: None

-----------
QUERY:

SELECT voidtest4(39);
RESULT:
	postgres: [(None,)]

-----------
QUERY:


TABLE sometable;
RESULT:
	postgres: [(18,), (38,)]

-----------
QUERY:


CREATE FUNCTION voidtest5(a int) RETURNS SETOF VOID LANGUAGE SQL AS
$$ SELECT generate_series(1, a) $$ STABLE;
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM voidtest5(3);
RESULT:
	postgres: []

-----------
QUERY:


-- Regression tests for bugs:

-- Check that arguments that are R/W expanded datums aren/* REPLACED */''t corrupted by
-- multiple uses.  This test knows that array_append() returns a R/W datum
-- and will modify a R/W array input in-place.  We use SETOF to prevent
-- inlining of the SQL function.
CREATE FUNCTION double_append(anyarray, anyelement) RETURNS SETOF anyarray
LANGUAGE SQL IMMUTABLE AS
$$ SELECT array_append($1, $2) || array_append($1, $2) $$;
RESULT:
	postgres: None

-----------
QUERY:


SELECT double_append(array_append(ARRAY[q1], q2), q3)
  FROM (VALUES(1,2,3), (4,5,6)) v(q1,q2,q3);
RESULT:
	postgres: [([1, 2, 3, 1, 2, 3],), ([4, 5, 6, 4, 5, 6],)]

-----------
QUERY:


-- Things that shouldn/* REPLACED */''t work:

CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL
    AS 'SELECT ''not an integer'';
RESULT:
	postgres: unterminated quoted string at or near "'SELECT ''not an integer'';"
LINE 6:     AS 'SELECT ''not an integer'';
               ^


-----------
QUERY:
';
RESULT:
	postgres: unterminated quoted string at or near "';"
LINE 1: ';
        ^


-----------
QUERY:


CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL
    AS 'not even SQL';
RESULT:
	postgres: syntax error at or near "not"
LINE 4:     AS 'not even SQL';
                ^


-----------
QUERY:


CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL
    AS 'SELECT 1, 2, 3;
RESULT:
	postgres: unterminated quoted string at or near "'SELECT 1, 2, 3;"
LINE 4:     AS 'SELECT 1, 2, 3;
               ^


-----------
QUERY:
';
RESULT:
	postgres: unterminated quoted string at or near "';"
LINE 1: ';
        ^


-----------
QUERY:


CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL
    AS 'SELECT $2;
RESULT:
	postgres: unterminated quoted string at or near "'SELECT $2;"
LINE 4:     AS 'SELECT $2;
               ^


-----------
QUERY:
';
RESULT:
	postgres: unterminated quoted string at or near "';"
LINE 1: ';
        ^


-----------
QUERY:


CREATE FUNCTION test1 (int) RETURNS int LANGUAGE SQL
    AS 'a', 'b';
RESULT:
	postgres: only one AS item needed for language "sql"


-----------
QUERY:


-- Cleanup
DROP SCHEMA temp_func_test CASCADE;
RESULT:
	postgres: None

-----------
QUERY:

DROP USER regress_unpriv_user;
RESULT:
	postgres: None

-----------
QUERY:

RESET search_path;
RESULT:
	postgres: None
