Guest DBMS identified: postgres
-----------
QUERY:
-- ok, superuser can create users with any set of privileges
CREATE ROLE regress_role_super SUPERUSER
RESULT: []

-----------
QUERY:
CREATE ROLE regress_role_admin CREATEDB CREATEROLE REPLICATION BYPASSRLS
RESULT: []

-----------
QUERY:
GRANT CREATE ON DATABASE regression TO regress_role_admin WITH GRANT OPTION
RESULT: []

-----------
QUERY:
CREATE ROLE regress_role_limited_admin CREATEROLE
RESULT: []

-----------
QUERY:
CREATE ROLE regress_role_normal
RESULT: []

-----------
QUERY:
-- fail, CREATEROLE user can/* REPLACED */''t give away role attributes without having them
SET SESSION AUTHORIZATION regress_role_limited_admin
RESULT: []

-----------
QUERY:
CREATE ROLE regress_nosuch_superuser SUPERUSER
RESULT: []

-----------
QUERY:
CREATE ROLE regress_nosuch_replication_bypassrls REPLICATION BYPASSRLS
RESULT: []

-----------
QUERY:
CREATE ROLE regress_nosuch_replication REPLICATION
RESULT: []

-----------
QUERY:
CREATE ROLE regress_nosuch_bypassrls BYPASSRLS
RESULT: []

-----------
QUERY:
CREATE ROLE regress_nosuch_createdb CREATEDB
RESULT: []

-----------
QUERY:
-- ok, can create a role without any special attributes
CREATE ROLE regress_role_limited
RESULT: []

-----------
QUERY:
-- fail, can/* REPLACED */''t give it in any of the restricted attributes
ALTER ROLE regress_role_limited SUPERUSER
RESULT: []

-----------
QUERY:
ALTER ROLE regress_role_limited REPLICATION
RESULT: []

-----------
QUERY:
ALTER ROLE regress_role_limited CREATEDB
RESULT: []

-----------
QUERY:
ALTER ROLE regress_role_limited BYPASSRLS
RESULT: []

-----------
QUERY:
DROP ROLE regress_role_limited
RESULT: []

-----------
QUERY:
-- ok, can give away these role attributes if you have them
SET SESSION AUTHORIZATION regress_role_admin
RESULT: []

-----------
QUERY:
CREATE ROLE regress_replication_bypassrls REPLICATION BYPASSRLS
RESULT: []

-----------
QUERY:
CREATE ROLE regress_replication REPLICATION
RESULT: []

-----------
QUERY:
CREATE ROLE regress_bypassrls BYPASSRLS
RESULT: []

-----------
QUERY:
CREATE ROLE regress_createdb CREATEDB
RESULT: []

-----------
QUERY:
-- ok, can toggle these role attributes off and on if you have them
ALTER ROLE regress_replication NOREPLICATION
RESULT: []

-----------
QUERY:
ALTER ROLE regress_replication REPLICATION
RESULT: []

-----------
QUERY:
ALTER ROLE regress_bypassrls NOBYPASSRLS
RESULT: []

-----------
QUERY:
ALTER ROLE regress_bypassrls BYPASSRLS
RESULT: []

-----------
QUERY:
ALTER ROLE regress_createdb NOCREATEDB
RESULT: []

-----------
QUERY:
ALTER ROLE regress_createdb CREATEDB
RESULT: []

-----------
QUERY:
-- fail, can/* REPLACED */''t toggle SUPERUSER
ALTER ROLE regress_createdb SUPERUSER
RESULT: []

-----------
QUERY:
ALTER ROLE regress_createdb NOSUPERUSER
RESULT: []

-----------
QUERY:
-- ok, having CREATEROLE is enough to create users with these privileges
CREATE ROLE regress_createrole CREATEROLE NOINHERIT
RESULT: []

-----------
QUERY:
GRANT CREATE ON DATABASE regression TO regress_createrole WITH GRANT OPTION
RESULT: []

-----------
QUERY:
CREATE ROLE regress_login LOGIN
RESULT: []

-----------
QUERY:
CREATE ROLE regress_inherit INHERIT
RESULT: []

-----------
QUERY:
CREATE ROLE regress_connection_limit CONNECTION LIMIT 5
RESULT: []

-----------
QUERY:
CREATE ROLE regress_encrypted_password ENCRYPTED PASSWORD 'foo'
RESULT: []

-----------
QUERY:
CREATE ROLE regress_password_null PASSWORD NULL
RESULT: []

-----------
QUERY:
-- ok, backwards compatible noise words should be ignored
CREATE ROLE regress_noiseword SYSID 12345
RESULT: []

-----------
QUERY:
-- fail, cannot grant membership in superuser role
CREATE ROLE regress_nosuch_super IN ROLE regress_role_super
RESULT: []

-----------
QUERY:
-- fail, database owner cannot have members
CREATE ROLE regress_nosuch_dbowner IN ROLE pg_database_owner
RESULT: []

-----------
QUERY:
-- ok, can grant other users into a role
CREATE ROLE regress_inroles ROLE
	regress_role_super, regress_createdb, regress_createrole, regress_login,
	regress_inherit, regress_connection_limit, regress_encrypted_password, regress_password_null
RESULT: []

-----------
QUERY:
-- fail, cannot grant a role into itself
CREATE ROLE regress_nosuch_recursive ROLE regress_nosuch_recursive
RESULT: []

-----------
QUERY:
-- ok, can grant other users into a role with admin option
CREATE ROLE regress_adminroles ADMIN
	regress_role_super, regress_createdb, regress_createrole, regress_login,
	regress_inherit, regress_connection_limit, regress_encrypted_password, regress_password_null
RESULT: []

-----------
QUERY:
-- fail, cannot grant a role into itself with admin option
CREATE ROLE regress_nosuch_admin_recursive ADMIN regress_nosuch_admin_recursive
RESULT: []

-----------
QUERY:
-- fail, regress_createrole does not have CREATEDB privilege
SET SESSION AUTHORIZATION regress_createrole
RESULT: []

-----------
QUERY:
CREATE DATABASE regress_nosuch_db
RESULT: []

-----------
QUERY:
-- ok, regress_createrole can create new roles
CREATE ROLE regress_plainrole
RESULT: []

-----------
QUERY:
-- ok, roles with CREATEROLE can create new roles with it
CREATE ROLE regress_rolecreator CREATEROLE
RESULT: []

-----------
QUERY:
-- ok, roles with CREATEROLE can create new roles with different role
-- attributes, including CREATEROLE
CREATE ROLE regress_hasprivs CREATEROLE LOGIN INHERIT CONNECTION LIMIT 5
RESULT: []

-----------
QUERY:
-- ok, we should be able to modify a role we created
COMMENT ON ROLE regress_hasprivs IS 'some comment'
RESULT: []

-----------
QUERY:
ALTER ROLE regress_hasprivs RENAME TO regress_tenant
RESULT: []

-----------
QUERY:
ALTER ROLE regress_tenant NOINHERIT NOLOGIN CONNECTION LIMIT 7
RESULT: []

-----------
QUERY:
-- fail, we should be unable to modify a role we did not create
COMMENT ON ROLE regress_role_normal IS 'some comment'
RESULT: []

-----------
QUERY:
ALTER ROLE regress_role_normal RENAME TO regress_role_abnormal
RESULT: []

-----------
QUERY:
ALTER ROLE regress_role_normal NOINHERIT NOLOGIN CONNECTION LIMIT 7
RESULT: []

-----------
QUERY:
-- ok, regress_tenant can create objects within the database
SET SESSION AUTHORIZATION regress_tenant
RESULT: []

-----------
QUERY:
CREATE TABLE tenant_table (i integer)
RESULT: []

-----------
QUERY:
CREATE INDEX tenant_idx ON tenant_table(i)
RESULT: []

-----------
QUERY:
CREATE VIEW tenant_view AS SELECT * FROM pg_catalog.pg_class
RESULT: []

-----------
QUERY:
REVOKE ALL PRIVILEGES ON tenant_table FROM PUBLIC
RESULT: []

-----------
QUERY:
-- fail, these objects belonging to regress_tenant
SET SESSION AUTHORIZATION regress_createrole
RESULT: []

-----------
QUERY:
DROP INDEX tenant_idx
RESULT: []

-----------
QUERY:
ALTER TABLE tenant_table ADD COLUMN t text
RESULT: []

-----------
QUERY:
DROP TABLE tenant_table
RESULT: []

-----------
QUERY:
ALTER VIEW tenant_view OWNER TO regress_role_admin
RESULT: []

-----------
QUERY:
DROP VIEW tenant_view
RESULT: []

-----------
QUERY:
-- fail, can/* REPLACED */''t create objects owned as regress_tenant
CREATE SCHEMA regress_tenant_schema AUTHORIZATION regress_tenant
RESULT: []

-----------
QUERY:
-- fail, we don/* REPLACED */''t inherit permissions from regress_tenant
REASSIGN OWNED BY regress_tenant TO regress_createrole
RESULT: []

-----------
QUERY:
-- ok, create a role with a value for createrole_self_grant
SET createrole_self_grant = 'set, inherit'
RESULT: []

-----------
QUERY:
CREATE ROLE regress_tenant2
RESULT: []

-----------
QUERY:
GRANT CREATE ON DATABASE regression TO regress_tenant2
RESULT: []

-----------
QUERY:
-- ok, regress_tenant2 can create objects within the database
SET SESSION AUTHORIZATION regress_tenant2
RESULT: []

-----------
QUERY:
CREATE TABLE tenant2_table (i integer)
RESULT: []

-----------
QUERY:
REVOKE ALL PRIVILEGES ON tenant2_table FROM PUBLIC
RESULT: []

-----------
QUERY:
-- ok, because we have SET and INHERIT on regress_tenant2
SET SESSION AUTHORIZATION regress_createrole
RESULT: []

-----------
QUERY:
CREATE SCHEMA regress_tenant2_schema AUTHORIZATION regress_tenant2
RESULT: []

-----------
QUERY:
ALTER SCHEMA regress_tenant2_schema OWNER TO regress_createrole
RESULT: []

-----------
QUERY:
ALTER TABLE tenant2_table OWNER TO regress_createrole
RESULT: []

-----------
QUERY:
ALTER TABLE tenant2_table OWNER TO regress_tenant2
RESULT: []

-----------
QUERY:
-- with SET but not INHERIT, we can give away objects but not take them
REVOKE INHERIT OPTION FOR regress_tenant2 FROM regress_createrole
RESULT: []

-----------
QUERY:
ALTER SCHEMA regress_tenant2_schema OWNER TO regress_tenant2
RESULT: []

-----------
QUERY:
ALTER TABLE tenant2_table OWNER TO regress_createrole
RESULT: []

-----------
QUERY:
-- with INHERIT but not SET, we can take objects but not give them away
GRANT regress_tenant2 TO regress_createrole WITH INHERIT TRUE, SET FALSE
RESULT: []

-----------
QUERY:
ALTER TABLE tenant2_table OWNER TO regress_createrole
RESULT: []

-----------
QUERY:
ALTER TABLE tenant2_table OWNER TO regress_tenant2
RESULT: []

-----------
QUERY:
DROP TABLE tenant2_table
RESULT: []

-----------
QUERY:
-- fail, CREATEROLE is not enough to create roles in privileged roles
CREATE ROLE regress_read_all_data IN ROLE pg_read_all_data
RESULT: []

-----------
QUERY:
CREATE ROLE regress_write_all_data IN ROLE pg_write_all_data
RESULT: []

-----------
QUERY:
CREATE ROLE regress_monitor IN ROLE pg_monitor
RESULT: []

-----------
QUERY:
CREATE ROLE regress_read_all_settings IN ROLE pg_read_all_settings
RESULT: []

-----------
QUERY:
CREATE ROLE regress_read_all_stats IN ROLE pg_read_all_stats
RESULT: []

-----------
QUERY:
CREATE ROLE regress_stat_scan_tables IN ROLE pg_stat_scan_tables
RESULT: []

-----------
QUERY:
CREATE ROLE regress_read_server_files IN ROLE pg_read_server_files
RESULT: []

-----------
QUERY:
CREATE ROLE regress_write_server_files IN ROLE pg_write_server_files
RESULT: []

-----------
QUERY:
CREATE ROLE regress_execute_server_program IN ROLE pg_execute_server_program
RESULT: []

-----------
QUERY:
CREATE ROLE regress_signal_backend IN ROLE pg_signal_backend
RESULT: []

-----------
QUERY:
-- fail, role still owns database objects
DROP ROLE regress_tenant
RESULT: []

-----------
QUERY:
-- fail, creation of these roles failed above so they do not now exist
SET SESSION AUTHORIZATION regress_role_admin
RESULT: []

-----------
QUERY:
DROP ROLE regress_nosuch_superuser
RESULT: []

-----------
QUERY:
DROP ROLE regress_nosuch_replication_bypassrls
RESULT: []

-----------
QUERY:
DROP ROLE regress_nosuch_replication
RESULT: []

-----------
QUERY:
DROP ROLE regress_nosuch_bypassrls
RESULT: []

-----------
QUERY:
DROP ROLE regress_nosuch_super
RESULT: []

-----------
QUERY:
DROP ROLE regress_nosuch_dbowner
RESULT: []

-----------
QUERY:
DROP ROLE regress_nosuch_recursive
RESULT: []

-----------
QUERY:
DROP ROLE regress_nosuch_admin_recursive
RESULT: []

-----------
QUERY:
DROP ROLE regress_plainrole
RESULT: []

-----------
QUERY:
-- must revoke privileges before dropping role
REVOKE CREATE ON DATABASE regression FROM regress_createrole CASCADE
RESULT: []

-----------
QUERY:
-- ok, should be able to drop non-superuser roles we created
DROP ROLE regress_replication_bypassrls
RESULT: []

-----------
QUERY:
DROP ROLE regress_replication
RESULT: []

-----------
QUERY:
DROP ROLE regress_bypassrls
RESULT: []

-----------
QUERY:
DROP ROLE regress_createdb
RESULT: []

-----------
QUERY:
DROP ROLE regress_createrole
RESULT: []

-----------
QUERY:
DROP ROLE regress_login
RESULT: []

-----------
QUERY:
DROP ROLE regress_inherit
RESULT: []

-----------
QUERY:
DROP ROLE regress_connection_limit
RESULT: []

-----------
QUERY:
DROP ROLE regress_encrypted_password
RESULT: []

-----------
QUERY:
DROP ROLE regress_password_null
RESULT: []

-----------
QUERY:
DROP ROLE regress_noiseword
RESULT: []

-----------
QUERY:
DROP ROLE regress_inroles
RESULT: []

-----------
QUERY:
DROP ROLE regress_adminroles
RESULT: []

-----------
QUERY:
-- fail, cannot drop ourself, nor superusers or roles we lack ADMIN for
DROP ROLE regress_role_super
RESULT: []

-----------
QUERY:
DROP ROLE regress_role_admin
RESULT: []

-----------
QUERY:
DROP ROLE regress_rolecreator
RESULT: []

-----------
QUERY:
-- ok
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
REVOKE CREATE ON DATABASE regression FROM regress_role_admin CASCADE
RESULT: []

-----------
QUERY:
DROP INDEX tenant_idx
RESULT: []

-----------
QUERY:
DROP TABLE tenant_table
RESULT: []

-----------
QUERY:
DROP VIEW tenant_view
RESULT: []

-----------
QUERY:
DROP SCHEMA regress_tenant2_schema
RESULT: []

-----------
QUERY:
-- check for duplicated drop
DROP ROLE regress_tenant, regress_tenant
RESULT: []

-----------
QUERY:
DROP ROLE regress_tenant2
RESULT: []

-----------
QUERY:
DROP ROLE regress_rolecreator
RESULT: []

-----------
QUERY:
DROP ROLE regress_role_admin
RESULT: []

-----------
QUERY:
DROP ROLE regress_role_limited_admin
RESULT: []

-----------
QUERY:
DROP ROLE regress_role_super
RESULT: []

-----------
QUERY:
DROP ROLE regress_role_normal
RESULT: []
=========================================
Summary for test case create_role/test.sql of postgres
=========================================
