
-----------
QUERY:
--
-- CREATE_TYPE
--

-- directory path and dlsuffix are passed to us in environment variables
-- \getenv libdir '/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress'
-- \getenv dlsuffix '.so'

-- \set regresslib /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress' '/regress' /* REPLACED */'.so'

--
-- Test the /* REPLACED */''old style/* REPLACED */'' approach of making the I/O functions first,
-- with no explicit shell type creation.
--
CREATE FUNCTION widget_in(cstring)
   RETURNS widget
   AS /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress/regress.so'
   LANGUAGE C STRICT IMMUTABLE;
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION widget_out(widget)
   RETURNS cstring
   AS /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress/regress.so'
   LANGUAGE C STRICT IMMUTABLE;
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION int44in(cstring)
   RETURNS city_budget
   AS /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress/regress.so'
   LANGUAGE C STRICT IMMUTABLE;
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION int44out(city_budget)
   RETURNS cstring
   AS /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress/regress.so'
   LANGUAGE C STRICT IMMUTABLE;
RESULT:
	postgres: None

-----------
QUERY:


CREATE TYPE widget (
   internallength = 24,
   input = widget_in,
   output = widget_out,
   typmod_in = numerictypmodin,
   typmod_out = numerictypmodout,
   alignment = double
);
RESULT:
	postgres: None

-----------
QUERY:


CREATE TYPE city_budget (
   internallength = 16,
   input = int44in,
   output = int44out,
   element = int4,
   category = 'x',   -- just to verify the system will take it
   preferred = true  -- ditto
);
RESULT:
	postgres: None

-----------
QUERY:


-- Test creation and destruction of shell types
CREATE TYPE shell;
RESULT:
	postgres: None

-----------
QUERY:

CREATE TYPE shell;
RESULT:
	postgres: type "shell" already exists


-----------
QUERY:
   -- fail, type already present
DROP TYPE shell;
RESULT:
	postgres: None

-----------
QUERY:

DROP TYPE shell;
RESULT:
	postgres: type "shell" does not exist


-----------
QUERY:
     -- fail, type not exist

-- also, let/* REPLACED */''s leave one around for purposes of pg_dump testing
CREATE TYPE myshell;
RESULT:
	postgres: None

-----------
QUERY:


--
-- Test type-related default values (broken in releases before PG 7.2)
--
-- This part of the test also exercises the /* REPLACED */''new style/* REPLACED */'' approach of making
-- a shell type and then filling it in.
--
CREATE TYPE int42;
RESULT:
	postgres: None

-----------
QUERY:

CREATE TYPE text_w_default;
RESULT:
	postgres: None

-----------
QUERY:


-- Make dummy I/O routines using the existing internal support for int4, text
CREATE FUNCTION int42_in(cstring)
   RETURNS int42
   AS 'int4in'
   LANGUAGE internal STRICT IMMUTABLE;
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION int42_out(int42)
   RETURNS cstring
   AS 'int4out'
   LANGUAGE internal STRICT IMMUTABLE;
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION text_w_default_in(cstring)
   RETURNS text_w_default
   AS 'textin'
   LANGUAGE internal STRICT IMMUTABLE;
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION text_w_default_out(text_w_default)
   RETURNS cstring
   AS 'textout'
   LANGUAGE internal STRICT IMMUTABLE;
RESULT:
	postgres: None

-----------
QUERY:


CREATE TYPE int42 (
   internallength = 4,
   input = int42_in,
   output = int42_out,
   alignment = int4,
   default = 42,
   passedbyvalue
);
RESULT:
	postgres: None

-----------
QUERY:


CREATE TYPE text_w_default (
   internallength = variable,
   input = text_w_default_in,
   output = text_w_default_out,
   alignment = int4,
   default = 'zippo'
);
RESULT:
	postgres: None

-----------
QUERY:


CREATE TABLE default_test (f1 text_w_default, f2 int42);
RESULT:
	postgres: None

-----------
QUERY:


INSERT INTO default_test DEFAULT VALUES;
RESULT:
	postgres: None

-----------
QUERY:


SELECT * FROM default_test;
RESULT:
	postgres: [('zippo', '42')]

-----------
QUERY:


-- We need a shell type to test some CREATE TYPE failure cases with
CREATE TYPE bogus_type;
RESULT:
	postgres: None

-----------
QUERY:


-- invalid: non-lowercase quoted identifiers
CREATE TYPE bogus_type (
	"Internallength" = 4,
	"Input" = int42_in,
	"Output" = int42_out,
	"Alignment" = int4,
	"Default" = 42,
	"Passedbyvalue"
);
RESULT:
	postgres: type input function must be specified


-----------
QUERY:


-- invalid: input/output function incompatibility
CREATE TYPE bogus_type (INPUT = array_in,
    OUTPUT = array_out,
    ELEMENT = int,
    INTERNALLENGTH = 32);
RESULT:
	postgres: type input function array_in must return type bogus_type


-----------
QUERY:


DROP TYPE bogus_type;
RESULT:
	postgres: None

-----------
QUERY:


-- It no longer is possible to issue CREATE TYPE without making a shell first
CREATE TYPE bogus_type (INPUT = array_in,
    OUTPUT = array_out,
    ELEMENT = int,
    INTERNALLENGTH = 32);
RESULT:
	postgres: type "bogus_type" does not exist
HINT:  Create the type as a shell type, then create its I/O functions, then do a full CREATE TYPE.


-----------
QUERY:


-- Test stand-alone composite type

CREATE TYPE default_test_row AS (f1 text_w_default, f2 int42);
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION get_default_test() RETURNS SETOF default_test_row AS '
  SELECT * FROM default_test;
RESULT:
	postgres: unterminated quoted string at or near "'
  SELECT * FROM default_test;"
LINE 3: ...CTION get_default_test() RETURNS SETOF default_test_row AS '
                                                                      ^


-----------
QUERY:

' LANGUAGE SQL;
RESULT:
	postgres: unterminated quoted string at or near "' LANGUAGE SQL;"
LINE 2: ' LANGUAGE SQL;
        ^


-----------
QUERY:


SELECT * FROM get_default_test();
RESULT:
	postgres: function get_default_test() does not exist
LINE 3: SELECT * FROM get_default_test();
                      ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


-- Test comments
COMMENT ON TYPE bad IS 'bad comment';
RESULT:
	postgres: type "bad" does not exist


-----------
QUERY:

COMMENT ON TYPE default_test_row IS 'good comment';
RESULT:
	postgres: None

-----------
QUERY:

COMMENT ON TYPE default_test_row IS NULL;
RESULT:
	postgres: None

-----------
QUERY:

COMMENT ON COLUMN default_test_row.nope IS 'bad comment';
RESULT:
	postgres: column "nope" of relation "default_test_row" does not exist


-----------
QUERY:

COMMENT ON COLUMN default_test_row.f1 IS 'good comment';
RESULT:
	postgres: None

-----------
QUERY:

COMMENT ON COLUMN default_test_row.f1 IS NULL;
RESULT:
	postgres: None

-----------
QUERY:


-- Check shell type create for existing types
CREATE TYPE text_w_default;
RESULT:
	postgres: type "text_w_default" already exists


-----------
QUERY:
		-- should fail

DROP TYPE default_test_row CASCADE;
RESULT:
	postgres: None

-----------
QUERY:


DROP TABLE default_test;
RESULT:
	postgres: None

-----------
QUERY:


-- Check dependencies are established when creating a new type
CREATE TYPE base_type;
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION base_fn_in(cstring) RETURNS base_type AS 'boolin'
    LANGUAGE internal IMMUTABLE STRICT;
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION base_fn_out(base_type) RETURNS cstring AS 'boolout'
    LANGUAGE internal IMMUTABLE STRICT;
RESULT:
	postgres: None

-----------
QUERY:

CREATE TYPE base_type(INPUT = base_fn_in, OUTPUT = base_fn_out);
RESULT:
	postgres: None

-----------
QUERY:

DROP FUNCTION base_fn_in(cstring);
RESULT:
	postgres: cannot drop function base_fn_in(cstring) because other objects depend on it
DETAIL:  type base_type depends on function base_fn_in(cstring)
function base_fn_out(base_type) depends on type base_type
HINT:  Use DROP ... CASCADE to drop the dependent objects too.


-----------
QUERY:
 -- error
DROP FUNCTION base_fn_out(base_type);
RESULT:
	postgres: cannot drop function base_fn_out(base_type) because other objects depend on it
DETAIL:  type base_type depends on function base_fn_out(base_type)
function base_fn_in(cstring) depends on type base_type
HINT:  Use DROP ... CASCADE to drop the dependent objects too.


-----------
QUERY:
 -- error
DROP TYPE base_type;
RESULT:
	postgres: cannot drop type base_type because other objects depend on it
DETAIL:  function base_fn_in(cstring) depends on type base_type
function base_fn_out(base_type) depends on type base_type
HINT:  Use DROP ... CASCADE to drop the dependent objects too.


-----------
QUERY:
 -- error
DROP TYPE base_type CASCADE;
RESULT:
	postgres: None

-----------
QUERY:


-- Check usage of typmod with a user-defined type
-- (we have borrowed numeric/* REPLACED */''s typmod functions)

CREATE TEMP TABLE mytab (foo widget(42,13,7));
RESULT:
	postgres: invalid NUMERIC type modifier
LINE 6: CREATE TEMP TABLE mytab (foo widget(42,13,7));
                                     ^


-----------
QUERY:
     -- should fail
CREATE TEMP TABLE mytab (foo widget(42,13));
RESULT:
	postgres: None

-----------
QUERY:


SELECT format_type(atttypid,atttypmod) FROM pg_attribute
WHERE attrelid = 'mytab'::regclass AND attnum > 0;
RESULT:
	postgres: [('widget(42,13)',)]

-----------
QUERY:


-- might as well exercise the widget type while we/* REPLACED */''re here
INSERT INTO mytab VALUES ('(1,2,3)'), ('(-44,5.5,12)');
RESULT:
	postgres: None

-----------
QUERY:

TABLE mytab;
RESULT:
	postgres: [('(1,2,3)',), ('(-44,5.5,12)',)]

-----------
QUERY:


-- and test format_type() a bit more, too
select format_type('varchar'::regtype, 42);
RESULT:
	postgres: [('character varying(38)',)]

-----------
QUERY:

select format_type('bpchar'::regtype, null);
RESULT:
	postgres: [('character',)]

-----------
QUERY:

-- this behavior difference is intentional
select format_type('bpchar'::regtype, -1);
RESULT:
	postgres: [('bpchar',)]

-----------
QUERY:


-- Test non-error-throwing APIs using widget, which still throws errors
SELECT pg_input_is_valid('(1,2,3)', 'widget');
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT pg_input_is_valid('(1,2)', 'widget');
RESULT:
	postgres: invalid input syntax for type widget: "(1,2)"


-----------
QUERY:
  -- hard error expected
SELECT pg_input_is_valid('{"(1,2,3)"}', 'widget[]');
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT pg_input_is_valid('{"(1,2)"}', 'widget[]');
RESULT:
	postgres: invalid input syntax for type widget: "(1,2)"


-----------
QUERY:
  -- hard error expected
SELECT pg_input_is_valid('("(1,2,3)")', 'mytab');
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT pg_input_is_valid('("(1,2)")', 'mytab');
RESULT:
	postgres: invalid input syntax for type widget: "(1,2)"


-----------
QUERY:
  -- hard error expected

-- Test creation of an operator over a user-defined type

CREATE FUNCTION pt_in_widget(point, widget)
   RETURNS bool
   AS /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress/regress.so'
   LANGUAGE C STRICT;
RESULT:
	postgres: None

-----------
QUERY:


CREATE OPERATOR <% (
   leftarg = point,
   rightarg = widget,
   procedure = pt_in_widget,
   commutator = >% ,
   negator = >=%
);
RESULT:
	postgres: None

-----------
QUERY:


SELECT point '(1,2)' <% widget '(0,0,3)' AS t,
       point '(1,2)' <% widget '(0,0,1)' AS f;
RESULT:
	postgres: [(True, False)]

-----------
QUERY:


-- exercise city_budget type
CREATE TABLE city (
	name		name,
	location 	box,
	budget 		city_budget
);
RESULT:
	postgres: None

-----------
QUERY:


INSERT INTO city VALUES
('Podunk', '(1,2),(3,4)', '100,127,1000'),
('Gotham', '(1000,34),(1100,334)', '123456,127,-1000,6789');
RESULT:
	postgres: None

-----------
QUERY:


TABLE city;
RESULT:
	postgres: [('Podunk', '(3,4),(1,2)', '100,127,1000,0'), ('Gotham', '(1100,334),(1000,34)', '123456,127,-1000,6789')]

-----------
QUERY:


--
-- Test CREATE/ALTER TYPE using a type that/* REPLACED */''s compatible with varchar,
-- so we can re-use those support functions
--
CREATE TYPE myvarchar;
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION myvarcharin(cstring, oid, integer) RETURNS myvarchar
LANGUAGE internal IMMUTABLE PARALLEL SAFE STRICT AS 'varcharin';
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION myvarcharout(myvarchar) RETURNS cstring
LANGUAGE internal IMMUTABLE PARALLEL SAFE STRICT AS 'varcharout';
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION myvarcharsend(myvarchar) RETURNS bytea
LANGUAGE internal STABLE PARALLEL SAFE STRICT AS 'varcharsend';
RESULT:
	postgres: None

-----------
QUERY:


CREATE FUNCTION myvarcharrecv(internal, oid, integer) RETURNS myvarchar
LANGUAGE internal STABLE PARALLEL SAFE STRICT AS 'varcharrecv';
RESULT:
	postgres: None

-----------
QUERY:


-- fail, it/* REPLACED */''s still a shell:
ALTER TYPE myvarchar SET (storage = extended);
RESULT:
	postgres: type "myvarchar" is only a shell


-----------
QUERY:


CREATE TYPE myvarchar (
    input = myvarcharin,
    output = myvarcharout,
    alignment = integer,
    storage = main
);
RESULT:
	postgres: None

-----------
QUERY:


-- want to check updating of a domain over the target type, too
CREATE DOMAIN myvarchardom AS myvarchar;
RESULT:
	postgres: None

-----------
QUERY:


ALTER TYPE myvarchar SET (storage = plain);
RESULT:
	postgres: cannot change type's storage to PLAIN


-----------
QUERY:
  -- not allowed

ALTER TYPE myvarchar SET (storage = extended);
RESULT:
	postgres: None

-----------
QUERY:


ALTER TYPE myvarchar SET (
    send = myvarcharsend,
    receive = myvarcharrecv,
    typmod_in = varchartypmodin,
    typmod_out = varchartypmodout,
    -- these are bogus, but it/* REPLACED */''s safe as long as we don/* REPLACED */''t use the type:
    analyze = ts_typanalyze,
    subscript = raw_array_subscript_handler
);
RESULT:
	postgres: None

-----------
QUERY:


SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout,
       typanalyze, typsubscript, typstorage
FROM pg_type WHERE typname = 'myvarchar';
RESULT:
	postgres: [('myvarcharin', 'myvarcharout', 'myvarcharrecv', 'myvarcharsend', 'varchartypmodin', 'varchartypmodout', 'ts_typanalyze', 'raw_array_subscript_handler', 'x')]

-----------
QUERY:


SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout,
       typanalyze, typsubscript, typstorage
FROM pg_type WHERE typname = '_myvarchar';
RESULT:
	postgres: [('array_in', 'array_out', 'array_recv', 'array_send', 'varchartypmodin', 'varchartypmodout', 'array_typanalyze', 'array_subscript_handler', 'x')]

-----------
QUERY:


SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout,
       typanalyze, typsubscript, typstorage
FROM pg_type WHERE typname = 'myvarchardom';
RESULT:
	postgres: [('domain_in', 'myvarcharout', 'domain_recv', 'myvarcharsend', '-', '-', 'ts_typanalyze', '-', 'x')]

-----------
QUERY:


SELECT typinput, typoutput, typreceive, typsend, typmodin, typmodout,
       typanalyze, typsubscript, typstorage
FROM pg_type WHERE typname = '_myvarchardom';
RESULT:
	postgres: [('array_in', 'array_out', 'array_recv', 'array_send', '-', '-', 'array_typanalyze', 'array_subscript_handler', 'x')]

-----------
QUERY:


-- ensure dependencies are straight
DROP FUNCTION myvarcharsend(myvarchar);
RESULT:
	postgres: cannot drop function myvarcharsend(myvarchar) because other objects depend on it
DETAIL:  type myvarchar depends on function myvarcharsend(myvarchar)
function myvarcharin(cstring,oid,integer) depends on type myvarchar
function myvarcharout(myvarchar) depends on type myvarchar
function myvarcharrecv(internal,oid,integer) depends on type myvarchar
type myvarchardom depends on function myvarcharsend(myvarchar)
HINT:  Use DROP ... CASCADE to drop the dependent objects too.


-----------
QUERY:
  -- fail
DROP TYPE myvarchar;
RESULT:
	postgres: cannot drop type myvarchar because other objects depend on it
DETAIL:  function myvarcharin(cstring,oid,integer) depends on type myvarchar
function myvarcharout(myvarchar) depends on type myvarchar
function myvarcharsend(myvarchar) depends on type myvarchar
function myvarcharrecv(internal,oid,integer) depends on type myvarchar
type myvarchardom depends on type myvarchar
HINT:  Use DROP ... CASCADE to drop the dependent objects too.


-----------
QUERY:
  -- fail

DROP TYPE myvarchar CASCADE;
RESULT:
	postgres: None
