Guest DBMS identified: postgres
-----------
QUERY:
--
-- DEPENDENCIES
--

CREATE USER regress_dep_user
RESULT: []

-----------
QUERY:
CREATE USER regress_dep_user2
RESULT: []

-----------
QUERY:
CREATE USER regress_dep_user3
RESULT: []

-----------
QUERY:
CREATE GROUP regress_dep_group
RESULT: []

-----------
QUERY:
CREATE TABLE deptest (f1 serial primary key, f2 text)
RESULT: []

-----------
QUERY:
GRANT SELECT ON TABLE deptest TO GROUP regress_dep_group
RESULT: []

-----------
QUERY:
GRANT ALL ON TABLE deptest TO regress_dep_user, regress_dep_user2
RESULT: []

-----------
QUERY:
-- can/* REPLACED */''t drop neither because they have privileges somewhere
DROP USER regress_dep_user
RESULT: []

-----------
QUERY:
DROP GROUP regress_dep_group
RESULT: []

-----------
QUERY:
-- if we revoke the privileges we can drop the group
REVOKE SELECT ON deptest FROM GROUP regress_dep_group
RESULT: []

-----------
QUERY:
DROP GROUP regress_dep_group
RESULT: []

-----------
QUERY:
-- can/* REPLACED */''t drop the user if we revoke the privileges partially
REVOKE SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, MAINTAIN ON deptest FROM regress_dep_user
RESULT: []

-----------
QUERY:
DROP USER regress_dep_user
RESULT: []

-----------
QUERY:
-- now we are OK to drop him
REVOKE TRIGGER ON deptest FROM regress_dep_user
RESULT: []

-----------
QUERY:
DROP USER regress_dep_user
RESULT: []

-----------
QUERY:
-- we are OK too if we drop the privileges all at once
REVOKE ALL ON deptest FROM regress_dep_user2
RESULT: []

-----------
QUERY:
DROP USER regress_dep_user2
RESULT: []

-----------
QUERY:
-- can/* REPLACED */''t drop the owner of an object
-- the error message detail here would include a pg_toast_nnn name that
-- is not constant, so suppress it
-- \set VERBOSITY terse
ALTER TABLE deptest OWNER TO regress_dep_user3
RESULT: []

-----------
QUERY:
DROP USER regress_dep_user3
RESULT: []

-----------
QUERY:
-- \set VERBOSITY default

-- if we drop the object, we can drop the user too
DROP TABLE deptest
RESULT: []

-----------
QUERY:
DROP USER regress_dep_user3
RESULT: []

-----------
QUERY:
-- Test DROP OWNED
CREATE USER regress_dep_user0
RESULT: []

-----------
QUERY:
CREATE USER regress_dep_user1
RESULT: []

-----------
QUERY:
CREATE USER regress_dep_user2
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION regress_dep_user0
RESULT: []

-----------
QUERY:
-- permission denied
DROP OWNED BY regress_dep_user1
RESULT: []

-----------
QUERY:
DROP OWNED BY regress_dep_user0, regress_dep_user2
RESULT: []

-----------
QUERY:
REASSIGN OWNED BY regress_dep_user0 TO regress_dep_user1
RESULT: []

-----------
QUERY:
REASSIGN OWNED BY regress_dep_user1 TO regress_dep_user0
RESULT: []

-----------
QUERY:
-- this one is allowed
DROP OWNED BY regress_dep_user0
RESULT: []

-----------
QUERY:
CREATE TABLE deptest1 (f1 int unique)
RESULT: []

-----------
QUERY:
GRANT ALL ON deptest1 TO regress_dep_user1 WITH GRANT OPTION
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION regress_dep_user1
RESULT: []

-----------
QUERY:
CREATE TABLE deptest (a serial primary key, b text)
RESULT: []

-----------
QUERY:
GRANT ALL ON deptest1 TO regress_dep_user2
RESULT: []

-----------
QUERY:
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
\z deptest1

DROP OWNED BY regress_dep_user1
RESULT: []

-----------
QUERY:
-- all grants revoked
\z deptest1
-- table was dropped
-- \d deptest

-- Test REASSIGN OWNED
GRANT ALL ON deptest1 TO regress_dep_user1
RESULT: []

-----------
QUERY:
GRANT CREATE ON DATABASE regression TO regress_dep_user1
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION regress_dep_user1
RESULT: []

-----------
QUERY:
CREATE SCHEMA deptest
RESULT: []

-----------
QUERY:
CREATE TABLE deptest (a serial primary key, b text)
RESULT: []

-----------
QUERY:
ALTER DEFAULT PRIVILEGES FOR ROLE regress_dep_user1 IN SCHEMA deptest
  GRANT ALL ON TABLES TO regress_dep_user2
RESULT: []

-----------
QUERY:
CREATE FUNCTION deptest_func() RETURNS void LANGUAGE plpgsql
  AS $$ BEGIN END; $$
RESULT: []

-----------
QUERY:
CREATE TYPE deptest_enum AS ENUM ('red')
RESULT: []

-----------
QUERY:
CREATE TYPE deptest_range AS RANGE (SUBTYPE = int4)
RESULT: []

-----------
QUERY:
CREATE TABLE deptest2 (f1 int)
RESULT: []

-----------
QUERY:
-- make a serial column the hard way
CREATE SEQUENCE ss1
RESULT: []

-----------
QUERY:
ALTER TABLE deptest2 ALTER f1 SET DEFAULT nextval('ss1')
RESULT: []

-----------
QUERY:
ALTER SEQUENCE ss1 OWNED BY deptest2.f1
RESULT: []

-----------
QUERY:
-- When reassigning ownership of a composite type, its pg_class entry
-- should match
CREATE TYPE deptest_t AS (a int)
RESULT: []

-----------
QUERY:
SELECT typowner = relowner
FROM pg_type JOIN pg_class c ON typrelid = c.oid WHERE typname = 'deptest_t'
RESULT: []

-----------
QUERY:
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
REASSIGN OWNED BY regress_dep_user1 TO regress_dep_user2
RESULT: []

-----------
QUERY:
-- \dt deptest

SELECT typowner = relowner
FROM pg_type JOIN pg_class c ON typrelid = c.oid WHERE typname = 'deptest_t'
RESULT: []

-----------
QUERY:
-- doesn/* REPLACED */''t work: grant still exists
DROP USER regress_dep_user1
RESULT: []

-----------
QUERY:
DROP OWNED BY regress_dep_user1
RESULT: []

-----------
QUERY:
DROP USER regress_dep_user1
RESULT: []

-----------
QUERY:
DROP USER regress_dep_user2
RESULT: []

-----------
QUERY:
DROP OWNED BY regress_dep_user2, regress_dep_user0
RESULT: []

-----------
QUERY:
DROP USER regress_dep_user2
RESULT: []

-----------
QUERY:
DROP USER regress_dep_user0
RESULT: []
=========================================
Summary for test case dependency/test.sql of postgres
=========================================
