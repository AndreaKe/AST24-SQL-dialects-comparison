Guest DBMS identified: postgres
-----------
QUERY:
--
-- Test domains.
--

-- Test Comment / Drop
create domain domaindroptest int4
RESULT: []

-----------
QUERY:
comment on domain domaindroptest is 'About to drop this..'
RESULT: []

-----------
QUERY:
create domain dependenttypetest domaindroptest
RESULT: []

-----------
QUERY:
-- fail because of dependent type
drop domain domaindroptest
RESULT: []

-----------
QUERY:
drop domain domaindroptest cascade
RESULT: []

-----------
QUERY:
-- this should fail because already gone
drop domain domaindroptest cascade
RESULT: []

-----------
QUERY:
-- Test domain input.

-- Note: the point of checking both INSERT and COPY FROM is that INSERT
-- exercises CoerceToDomain while COPY exercises domain_in.

create domain domainvarchar varchar(5)
RESULT: []

-----------
QUERY:
create domain domainnumeric numeric(8,2)
RESULT: []

-----------
QUERY:
create domain domainint4 int4
RESULT: []

-----------
QUERY:
create domain domaintext text
RESULT: []

-----------
QUERY:
-- Test explicit coercions --- these should succeed (and truncate)
SELECT cast('123456' as domainvarchar)
RESULT: []

-----------
QUERY:
SELECT cast('12345' as domainvarchar)
RESULT: []

-----------
QUERY:
-- Test tables using domains
create table basictest
           ( testint4 domainint4
           , testtext domaintext
           , testvarchar domainvarchar
           , testnumeric domainnumeric
           )
RESULT: []

-----------
QUERY:
INSERT INTO basictest values ('88', 'haha', 'short', '123.12')
RESULT: []

-----------
QUERY:
-- Good
INSERT INTO basictest values ('88', 'haha', 'short text', '123.12')
RESULT: []

-----------
QUERY:
-- Bad varchar
INSERT INTO basictest values ('88', 'haha', 'short', '123.1212')
RESULT: []

-----------
QUERY:
-- Truncate numeric

-- Test copy
COPY basictest (testvarchar) FROM stdin
RESULT: []

-----------
QUERY:
-- fail
notsoshorttext
\.

COPY basictest (testvarchar) FROM stdin
RESULT: []

-----------
QUERY:
short
\.

select * from basictest
RESULT: []

-----------
QUERY:
-- check that domains inherit operations from base types
select testtext || testvarchar as concat, testnumeric + 42 as sum
from basictest
RESULT: []

-----------
QUERY:
-- check that union/case/coalesce type resolution handles domains properly
select pg_typeof(coalesce(4::domainint4, 7))
RESULT: []

-----------
QUERY:
select pg_typeof(coalesce(4::domainint4, 7::domainint4))
RESULT: []

-----------
QUERY:
drop table basictest
RESULT: []

-----------
QUERY:
drop domain domainvarchar restrict
RESULT: []

-----------
QUERY:
drop domain domainnumeric restrict
RESULT: []

-----------
QUERY:
drop domain domainint4 restrict
RESULT: []

-----------
QUERY:
drop domain domaintext
RESULT: []

-----------
QUERY:
-- Test non-error-throwing input

create domain positiveint int4 check(value > 0)
RESULT: []

-----------
QUERY:
create domain weirdfloat float8 check((1 / value) < 10)
RESULT: []

-----------
QUERY:
select pg_input_is_valid('1', 'positiveint')
RESULT: []

-----------
QUERY:
select pg_input_is_valid('junk', 'positiveint')
RESULT: []

-----------
QUERY:
select pg_input_is_valid('-1', 'positiveint')
RESULT: []

-----------
QUERY:
select * from pg_input_error_info('junk', 'positiveint')
RESULT: []

-----------
QUERY:
select * from pg_input_error_info('-1', 'positiveint')
RESULT: []

-----------
QUERY:
select * from pg_input_error_info('junk', 'weirdfloat')
RESULT: []

-----------
QUERY:
select * from pg_input_error_info('0.01', 'weirdfloat')
RESULT: []

-----------
QUERY:
-- We currently can/* REPLACED */''t trap errors raised in the CHECK expression itself
select * from pg_input_error_info('0', 'weirdfloat')
RESULT: []

-----------
QUERY:
drop domain positiveint
RESULT: []

-----------
QUERY:
drop domain weirdfloat
RESULT: []

-----------
QUERY:
-- Test domains over array types

create domain domainint4arr int4[1]
RESULT: []

-----------
QUERY:
create domain domainchar4arr varchar(4)[2][3]
RESULT: []

-----------
QUERY:
create table domarrtest
           ( testint4arr domainint4arr
           , testchar4arr domainchar4arr
            )
RESULT: []

-----------
QUERY:
INSERT INTO domarrtest values ('{2,2}', '{{"a","b"},{"c","d"}}')
RESULT: []

-----------
QUERY:
INSERT INTO domarrtest values ('{{2,2},{2,2}}', '{{"a","b"}}')
RESULT: []

-----------
QUERY:
INSERT INTO domarrtest values ('{2,2}', '{{"a","b"},{"c","d"},{"e","f"}}')
RESULT: []

-----------
QUERY:
INSERT INTO domarrtest values ('{2,2}', '{{"a"},{"c"}}')
RESULT: []

-----------
QUERY:
INSERT INTO domarrtest values (NULL, '{{"a","b","c"},{"d","e","f"}}')
RESULT: []

-----------
QUERY:
INSERT INTO domarrtest values (NULL, '{{"toolong","b","c"},{"d","e","f"}}')
RESULT: []

-----------
QUERY:
INSERT INTO domarrtest (testint4arr[1], testint4arr[3]) values (11,22)
RESULT: []

-----------
QUERY:
select * from domarrtest
RESULT: []

-----------
QUERY:
select testint4arr[1], testchar4arr[2:2] from domarrtest
RESULT: []

-----------
QUERY:
select array_dims(testint4arr), array_dims(testchar4arr) from domarrtest
RESULT: []

-----------
QUERY:
COPY domarrtest FROM stdin
RESULT: []

-----------
QUERY:
{3,4}	{q,w,e}
\N	\N
\.

COPY domarrtest FROM stdin
RESULT: []

-----------
QUERY:
-- fail
{3,4}	{qwerty,w,e}
\.

select * from domarrtest
RESULT: []

-----------
QUERY:
update domarrtest set
  testint4arr[1] = testint4arr[1] + 1,
  testint4arr[3] = testint4arr[3] - 1
where testchar4arr is null
RESULT: []

-----------
QUERY:
select * from domarrtest where testchar4arr is null
RESULT: []

-----------
QUERY:
drop table domarrtest
RESULT: []

-----------
QUERY:
drop domain domainint4arr restrict
RESULT: []

-----------
QUERY:
drop domain domainchar4arr restrict
RESULT: []

-----------
QUERY:
create domain dia as int[]
RESULT: []

-----------
QUERY:
select '{1,2,3}'::dia
RESULT: []

-----------
QUERY:
select array_dims('{1,2,3}'::dia)
RESULT: []

-----------
QUERY:
select pg_typeof('{1,2,3}'::dia)
RESULT: []

-----------
QUERY:
select pg_typeof('{1,2,3}'::dia || 42)
RESULT: []

-----------
QUERY:
-- should be int[] not dia
drop domain dia
RESULT: []

-----------
QUERY:
-- Test domains over composites

create type comptype as (r float8, i float8)
RESULT: []

-----------
QUERY:
create domain dcomptype as comptype
RESULT: []

-----------
QUERY:
create table dcomptable (d1 dcomptype unique)
RESULT: []

-----------
QUERY:
insert into dcomptable values (row(1,2)::dcomptype)
RESULT: []

-----------
QUERY:
insert into dcomptable values (row(3,4)::comptype)
RESULT: []

-----------
QUERY:
insert into dcomptable values (row(1,2)::dcomptype)
RESULT: []

-----------
QUERY:
-- fail on uniqueness
insert into dcomptable (d1.r) values(11)
RESULT: []

-----------
QUERY:
select * from dcomptable
RESULT: []

-----------
QUERY:
select (d1).r, (d1).i, (d1).* from dcomptable
RESULT: []

-----------
QUERY:
update dcomptable set d1.r = (d1).r + 1 where (d1).i > 0
RESULT: []

-----------
QUERY:
select * from dcomptable
RESULT: []

-----------
QUERY:
alter domain dcomptype add constraint c1 check ((value).r <= (value).i)
RESULT: []

-----------
QUERY:
alter domain dcomptype add constraint c2 check ((value).r > (value).i)
RESULT: []

-----------
QUERY:
-- fail

select row(2,1)::dcomptype
RESULT: []

-----------
QUERY:
-- fail
insert into dcomptable values (row(1,2)::comptype)
RESULT: []

-----------
QUERY:
insert into dcomptable values (row(2,1)::comptype)
RESULT: []

-----------
QUERY:
-- fail
insert into dcomptable (d1.r) values(99)
RESULT: []

-----------
QUERY:
insert into dcomptable (d1.r, d1.i) values(99, 100)
RESULT: []

-----------
QUERY:
insert into dcomptable (d1.r, d1.i) values(100, 99)
RESULT: []

-----------
QUERY:
-- fail
update dcomptable set d1.r = (d1).r + 1 where (d1).i > 0
RESULT: []

-----------
QUERY:
-- fail
update dcomptable set d1.r = (d1).r - 1, d1.i = (d1).i + 1 where (d1).i > 0
RESULT: []

-----------
QUERY:
select * from dcomptable
RESULT: []

-----------
QUERY:
explain (verbose, costs off)
  update dcomptable set d1.r = (d1).r - 1, d1.i = (d1).i + 1 where (d1).i > 0
RESULT: []

-----------
QUERY:
create rule silly as on delete to dcomptable do instead
  update dcomptable set d1.r = (d1).r - 1, d1.i = (d1).i + 1 where (d1).i > 0
RESULT: []

-----------
QUERY:
-- \d+ dcomptable

create function makedcomp(r float8, i float8) returns dcomptype
as 'select row(r, i)' language sql
RESULT: []

-----------
QUERY:
select makedcomp(1,2)
RESULT: []

-----------
QUERY:
select makedcomp(2,1)
RESULT: []

-----------
QUERY:
-- fail
select * from makedcomp(1,2) m
RESULT: []

-----------
QUERY:
select m, m is not null from makedcomp(1,2) m
RESULT: []

-----------
QUERY:
drop function makedcomp(float8, float8)
RESULT: []

-----------
QUERY:
drop table dcomptable
RESULT: []

-----------
QUERY:
drop type comptype cascade
RESULT: []

-----------
QUERY:
-- check altering and dropping columns used by domain constraints
create type comptype as (r float8, i float8)
RESULT: []

-----------
QUERY:
create domain dcomptype as comptype
RESULT: []

-----------
QUERY:
alter domain dcomptype add constraint c1 check ((value).r > 0)
RESULT: []

-----------
QUERY:
comment on constraint c1 on domain dcomptype is 'random commentary'
RESULT: []

-----------
QUERY:
select row(0,1)::dcomptype
RESULT: []

-----------
QUERY:
-- fail

alter type comptype alter attribute r type varchar
RESULT: []

-----------
QUERY:
-- fail
alter type comptype alter attribute r type bigint
RESULT: []

-----------
QUERY:
alter type comptype drop attribute r
RESULT: []

-----------
QUERY:
-- fail
alter type comptype drop attribute i
RESULT: []

-----------
QUERY:
select conname, obj_description(oid, 'pg_constraint') from pg_constraint
  where contypid = 'dcomptype'::regtype
RESULT: []

-----------
QUERY:
-- check comment is still there

drop type comptype cascade
RESULT: []

-----------
QUERY:
-- Test domains over arrays of composite

create type comptype as (r float8, i float8)
RESULT: []

-----------
QUERY:
create domain dcomptypea as comptype[]
RESULT: []

-----------
QUERY:
create table dcomptable (d1 dcomptypea unique)
RESULT: []

-----------
QUERY:
insert into dcomptable values (array[row(1,2)]::dcomptypea)
RESULT: []

-----------
QUERY:
insert into dcomptable values (array[row(3,4), row(5,6)]::comptype[])
RESULT: []

-----------
QUERY:
insert into dcomptable values (array[row(7,8)::comptype, row(9,10)::comptype])
RESULT: []

-----------
QUERY:
insert into dcomptable values (array[row(1,2)]::dcomptypea)
RESULT: []

-----------
QUERY:
-- fail on uniqueness
insert into dcomptable (d1[1]) values(row(9,10))
RESULT: []

-----------
QUERY:
insert into dcomptable (d1[1].r) values(11)
RESULT: []

-----------
QUERY:
select * from dcomptable
RESULT: []

-----------
QUERY:
select d1[2], d1[1].r, d1[1].i from dcomptable
RESULT: []

-----------
QUERY:
update dcomptable set d1[2] = row(d1[2].i, d1[2].r)
RESULT: []

-----------
QUERY:
select * from dcomptable
RESULT: []

-----------
QUERY:
update dcomptable set d1[1].r = d1[1].r + 1 where d1[1].i > 0
RESULT: []

-----------
QUERY:
select * from dcomptable
RESULT: []

-----------
QUERY:
alter domain dcomptypea add constraint c1 check (value[1].r <= value[1].i)
RESULT: []

-----------
QUERY:
alter domain dcomptypea add constraint c2 check (value[1].r > value[1].i)
RESULT: []

-----------
QUERY:
-- fail

select array[row(2,1)]::dcomptypea
RESULT: []

-----------
QUERY:
-- fail
insert into dcomptable values (array[row(1,2)]::comptype[])
RESULT: []

-----------
QUERY:
insert into dcomptable values (array[row(2,1)]::comptype[])
RESULT: []

-----------
QUERY:
-- fail
insert into dcomptable (d1[1].r) values(99)
RESULT: []

-----------
QUERY:
insert into dcomptable (d1[1].r, d1[1].i) values(99, 100)
RESULT: []

-----------
QUERY:
insert into dcomptable (d1[1].r, d1[1].i) values(100, 99)
RESULT: []

-----------
QUERY:
-- fail
update dcomptable set d1[1].r = d1[1].r + 1 where d1[1].i > 0
RESULT: []

-----------
QUERY:
-- fail
update dcomptable set d1[1].r = d1[1].r - 1, d1[1].i = d1[1].i + 1
  where d1[1].i > 0
RESULT: []

-----------
QUERY:
select * from dcomptable
RESULT: []

-----------
QUERY:
explain (verbose, costs off)
  update dcomptable set d1[1].r = d1[1].r - 1, d1[1].i = d1[1].i + 1
    where d1[1].i > 0
RESULT: []

-----------
QUERY:
create rule silly as on delete to dcomptable do instead
  update dcomptable set d1[1].r = d1[1].r - 1, d1[1].i = d1[1].i + 1
    where d1[1].i > 0
RESULT: []

-----------
QUERY:
-- \d+ dcomptable

drop table dcomptable
RESULT: []

-----------
QUERY:
drop type comptype cascade
RESULT: []

-----------
QUERY:
-- Test arrays over domains

create domain posint as int check (value > 0)
RESULT: []

-----------
QUERY:
create table pitable (f1 posint[])
RESULT: []

-----------
QUERY:
insert into pitable values(array[42])
RESULT: []

-----------
QUERY:
insert into pitable values(array[-1])
RESULT: []

-----------
QUERY:
-- fail
insert into pitable values('{0}')
RESULT: []

-----------
QUERY:
-- fail
update pitable set f1[1] = f1[1] + 1
RESULT: []

-----------
QUERY:
update pitable set f1[1] = 0
RESULT: []

-----------
QUERY:
-- fail
select * from pitable
RESULT: []

-----------
QUERY:
drop table pitable
RESULT: []

-----------
QUERY:
create domain vc4 as varchar(4)
RESULT: []

-----------
QUERY:
create table vc4table (f1 vc4[])
RESULT: []

-----------
QUERY:
insert into vc4table values(array['too long'])
RESULT: []

-----------
QUERY:
-- fail
insert into vc4table values(array['too long']::vc4[])
RESULT: []

-----------
QUERY:
-- cast truncates
select * from vc4table
RESULT: []

-----------
QUERY:
drop table vc4table
RESULT: []

-----------
QUERY:
drop type vc4
RESULT: []

-----------
QUERY:
-- You can sort of fake arrays-of-arrays by putting a domain in between
create domain dposinta as posint[]
RESULT: []

-----------
QUERY:
create table dposintatable (f1 dposinta[])
RESULT: []

-----------
QUERY:
insert into dposintatable values(array[array[42]])
RESULT: []

-----------
QUERY:
-- fail
insert into dposintatable values(array[array[42]::posint[]])
RESULT: []

-----------
QUERY:
-- still fail
insert into dposintatable values(array[array[42]::dposinta])
RESULT: []

-----------
QUERY:
-- but this works
select f1, f1[1], (f1[1])[1] from dposintatable
RESULT: []

-----------
QUERY:
select pg_typeof(f1) from dposintatable
RESULT: []

-----------
QUERY:
select pg_typeof(f1[1]) from dposintatable
RESULT: []

-----------
QUERY:
select pg_typeof(f1[1][1]) from dposintatable
RESULT: []

-----------
QUERY:
select pg_typeof((f1[1])[1]) from dposintatable
RESULT: []

-----------
QUERY:
update dposintatable set f1[2] = array[99]
RESULT: []

-----------
QUERY:
select f1, f1[1], (f1[2])[1] from dposintatable
RESULT: []

-----------
QUERY:
-- it/* REPLACED */''d be nice if you could do something like this, but for now you can/* REPLACED */''t:
update dposintatable set f1[2][1] = array[97]
RESULT: []

-----------
QUERY:
-- maybe someday we can make this syntax work:
update dposintatable set (f1[2])[1] = array[98]
RESULT: []

-----------
QUERY:
drop table dposintatable
RESULT: []

-----------
QUERY:
drop domain posint cascade
RESULT: []

-----------
QUERY:
-- Test arrays over domains of composite

create type comptype as (cf1 int, cf2 int)
RESULT: []

-----------
QUERY:
create domain dcomptype as comptype check ((value).cf1 > 0)
RESULT: []

-----------
QUERY:
create table dcomptable (f1 dcomptype[])
RESULT: []

-----------
QUERY:
insert into dcomptable values (null)
RESULT: []

-----------
QUERY:
update dcomptable set f1[1].cf2 = 5
RESULT: []

-----------
QUERY:
table dcomptable
RESULT: []

-----------
QUERY:
update dcomptable set f1[1].cf1 = -1
RESULT: []

-----------
QUERY:
-- fail
update dcomptable set f1[1].cf1 = 1
RESULT: []

-----------
QUERY:
table dcomptable
RESULT: []

-----------
QUERY:
-- if there/* REPLACED */''s no constraints, a different code path is taken:
alter domain dcomptype drop constraint dcomptype_check
RESULT: []

-----------
QUERY:
update dcomptable set f1[1].cf1 = -1
RESULT: []

-----------
QUERY:
-- now ok
table dcomptable
RESULT: []

-----------
QUERY:
drop table dcomptable
RESULT: []

-----------
QUERY:
drop type comptype cascade
RESULT: []

-----------
QUERY:
-- Test not-null restrictions

create domain dnotnull varchar(15) NOT NULL
RESULT: []

-----------
QUERY:
create domain dnull    varchar(15)
RESULT: []

-----------
QUERY:
create domain dcheck   varchar(15) NOT NULL CHECK (VALUE = 'a' OR VALUE = 'c' OR VALUE = 'd')
RESULT: []

-----------
QUERY:
create table nulltest
           ( col1 dnotnull
           , col2 dnotnull NULL  -- NOT NULL in the domain cannot be overridden
           , col3 dnull    NOT NULL
           , col4 dnull
           , col5 dcheck CHECK (col5 IN ('c', 'd'))
           )
RESULT: []

-----------
QUERY:
INSERT INTO nulltest DEFAULT VALUES
RESULT: []

-----------
QUERY:
INSERT INTO nulltest values ('a', 'b', 'c', 'd', 'c')
RESULT: []

-----------
QUERY:
-- Good
insert into nulltest values ('a', 'b', 'c', 'd', NULL)
RESULT: []

-----------
QUERY:
insert into nulltest values ('a', 'b', 'c', 'd', 'a')
RESULT: []

-----------
QUERY:
INSERT INTO nulltest values (NULL, 'b', 'c', 'd', 'd')
RESULT: []

-----------
QUERY:
INSERT INTO nulltest values ('a', NULL, 'c', 'd', 'c')
RESULT: []

-----------
QUERY:
INSERT INTO nulltest values ('a', 'b', NULL, 'd', 'c')
RESULT: []

-----------
QUERY:
INSERT INTO nulltest values ('a', 'b', 'c', NULL, 'd')
RESULT: []

-----------
QUERY:
-- Good

-- Test copy
COPY nulltest FROM stdin
RESULT: []

-----------
QUERY:
--fail
a	b	\N	d	d
\.

COPY nulltest FROM stdin
RESULT: []

-----------
QUERY:
--fail
a	b	c	d	\N
\.

-- Last row is bad
COPY nulltest FROM stdin
RESULT: []

-----------
QUERY:
a	b	c	\N	c
a	b	c	\N	d
a	b	c	\N	a
\.

select * from nulltest
RESULT: []

-----------
QUERY:
-- Test out coerced (casted) constraints
SELECT cast('1' as dnotnull)
RESULT: []

-----------
QUERY:
SELECT cast(NULL as dnotnull)
RESULT: []

-----------
QUERY:
-- fail
SELECT cast(cast(NULL as dnull) as dnotnull)
RESULT: []

-----------
QUERY:
-- fail
SELECT cast(col4 as dnotnull) from nulltest
RESULT: []

-----------
QUERY:
-- fail

-- cleanup
drop table nulltest
RESULT: []

-----------
QUERY:
drop domain dnotnull restrict
RESULT: []

-----------
QUERY:
drop domain dnull restrict
RESULT: []

-----------
QUERY:
drop domain dcheck restrict
RESULT: []

-----------
QUERY:
create domain ddef1 int4 DEFAULT 3
RESULT: []

-----------
QUERY:
create domain ddef2 oid DEFAULT '12'
RESULT: []

-----------
QUERY:
-- Type mixing, function returns int8
create domain ddef3 text DEFAULT 5
RESULT: []

-----------
QUERY:
create sequence ddef4_seq
RESULT: []

-----------
QUERY:
create domain ddef4 int4 DEFAULT nextval('ddef4_seq')
RESULT: []

-----------
QUERY:
create domain ddef5 numeric(8,2) NOT NULL DEFAULT '12.12'
RESULT: []

-----------
QUERY:
create table defaulttest
            ( col1 ddef1
            , col2 ddef2
            , col3 ddef3
            , col4 ddef4 PRIMARY KEY
            , col5 ddef1 NOT NULL DEFAULT NULL
            , col6 ddef2 DEFAULT '88'
            , col7 ddef4 DEFAULT 8000
            , col8 ddef5
            )
RESULT: []

-----------
QUERY:
insert into defaulttest(col4) values(0)
RESULT: []

-----------
QUERY:
-- fails, col5 defaults to null
alter table defaulttest alter column col5 drop default
RESULT: []

-----------
QUERY:
insert into defaulttest default values
RESULT: []

-----------
QUERY:
-- succeeds, inserts domain default
-- We used to treat SET DEFAULT NULL as equivalent to DROP DEFAULT /* REPLACED */, wrong
alter table defaulttest alter column col5 set default null
RESULT: []

-----------
QUERY:
insert into defaulttest(col4) values(0)
RESULT: []

-----------
QUERY:
-- fails
alter table defaulttest alter column col5 drop default
RESULT: []

-----------
QUERY:
insert into defaulttest default values
RESULT: []

-----------
QUERY:
insert into defaulttest default values
RESULT: []

-----------
QUERY:
-- Test defaults with copy
COPY defaulttest(col5) FROM stdin
RESULT: []

-----------
QUERY:
42
\.

select * from defaulttest
RESULT: []

-----------
QUERY:
drop table defaulttest cascade
RESULT: []

-----------
QUERY:
-- Test ALTER DOMAIN .. NOT NULL
create domain dnotnulltest integer
RESULT: []

-----------
QUERY:
create table domnotnull
( col1 dnotnulltest
, col2 dnotnulltest
)
RESULT: []

-----------
QUERY:
insert into domnotnull default values
RESULT: []

-----------
QUERY:
alter domain dnotnulltest set not null
RESULT: []

-----------
QUERY:
-- fails

update domnotnull set col1 = 5
RESULT: []

-----------
QUERY:
alter domain dnotnulltest set not null
RESULT: []

-----------
QUERY:
-- fails

update domnotnull set col2 = 6
RESULT: []

-----------
QUERY:
alter domain dnotnulltest set not null
RESULT: []

-----------
QUERY:
update domnotnull set col1 = null
RESULT: []

-----------
QUERY:
-- fails

alter domain dnotnulltest drop not null
RESULT: []

-----------
QUERY:
update domnotnull set col1 = null
RESULT: []

-----------
QUERY:
drop domain dnotnulltest cascade
RESULT: []

-----------
QUERY:
-- Test ALTER DOMAIN .. DEFAULT ..
create table domdeftest (col1 ddef1)
RESULT: []

-----------
QUERY:
insert into domdeftest default values
RESULT: []

-----------
QUERY:
select * from domdeftest
RESULT: []

-----------
QUERY:
alter domain ddef1 set default '42'
RESULT: []

-----------
QUERY:
insert into domdeftest default values
RESULT: []

-----------
QUERY:
select * from domdeftest
RESULT: []

-----------
QUERY:
alter domain ddef1 drop default
RESULT: []

-----------
QUERY:
insert into domdeftest default values
RESULT: []

-----------
QUERY:
select * from domdeftest
RESULT: []

-----------
QUERY:
drop table domdeftest
RESULT: []

-----------
QUERY:
-- Test ALTER DOMAIN .. CONSTRAINT ..
create domain con as integer
RESULT: []

-----------
QUERY:
create table domcontest (col1 con)
RESULT: []

-----------
QUERY:
insert into domcontest values (1)
RESULT: []

-----------
QUERY:
insert into domcontest values (2)
RESULT: []

-----------
QUERY:
alter domain con add constraint t check (VALUE < 1)
RESULT: []

-----------
QUERY:
-- fails

alter domain con add constraint t check (VALUE < 34)
RESULT: []

-----------
QUERY:
alter domain con add check (VALUE > 0)
RESULT: []

-----------
QUERY:
insert into domcontest values (-5)
RESULT: []

-----------
QUERY:
-- fails
insert into domcontest values (42)
RESULT: []

-----------
QUERY:
-- fails
insert into domcontest values (5)
RESULT: []

-----------
QUERY:
alter domain con drop constraint t
RESULT: []

-----------
QUERY:
insert into domcontest values (-5)
RESULT: []

-----------
QUERY:
--fails
insert into domcontest values (42)
RESULT: []

-----------
QUERY:
alter domain con drop constraint nonexistent
RESULT: []

-----------
QUERY:
alter domain con drop constraint if exists nonexistent
RESULT: []

-----------
QUERY:
-- not-null constraints
create domain connotnull integer
RESULT: []

-----------
QUERY:
create table domconnotnulltest
( col1 connotnull
, col2 connotnull
)
RESULT: []

-----------
QUERY:
insert into domconnotnulltest default values
RESULT: []

-----------
QUERY:
alter domain connotnull add not null value
RESULT: []

-----------
QUERY:
-- fails

update domconnotnulltest set col1 = 5
RESULT: []

-----------
QUERY:
alter domain connotnull add not null value
RESULT: []

-----------
QUERY:
-- fails

update domconnotnulltest set col2 = 6
RESULT: []

-----------
QUERY:
alter domain connotnull add constraint constr1 not null value
RESULT: []

-----------
QUERY:
select count(*) from pg_constraint where contypid = 'connotnull'::regtype and contype = 'n'
RESULT: []

-----------
QUERY:
alter domain connotnull add constraint constr1bis not null value
RESULT: []

-----------
QUERY:
-- redundant
select count(*) from pg_constraint where contypid = 'connotnull'::regtype and contype = 'n'
RESULT: []

-----------
QUERY:
update domconnotnulltest set col1 = null
RESULT: []

-----------
QUERY:
-- fails

alter domain connotnull drop constraint constr1
RESULT: []

-----------
QUERY:
update domconnotnulltest set col1 = null
RESULT: []

-----------
QUERY:
drop domain connotnull cascade
RESULT: []

-----------
QUERY:
drop table domconnotnulltest
RESULT: []

-----------
QUERY:
-- Test ALTER DOMAIN .. CONSTRAINT .. NOT VALID
create domain things AS INT
RESULT: []

-----------
QUERY:
CREATE TABLE thethings (stuff things)
RESULT: []

-----------
QUERY:
INSERT INTO thethings (stuff) VALUES (55)
RESULT: []

-----------
QUERY:
ALTER DOMAIN things ADD CONSTRAINT meow CHECK (VALUE < 11)
RESULT: []

-----------
QUERY:
ALTER DOMAIN things ADD CONSTRAINT meow CHECK (VALUE < 11) NOT VALID
RESULT: []

-----------
QUERY:
ALTER DOMAIN things VALIDATE CONSTRAINT meow
RESULT: []

-----------
QUERY:
UPDATE thethings SET stuff = 10
RESULT: []

-----------
QUERY:
ALTER DOMAIN things VALIDATE CONSTRAINT meow
RESULT: []

-----------
QUERY:
-- Confirm ALTER DOMAIN with RULES.
create table domtab (col1 integer)
RESULT: []

-----------
QUERY:
create domain dom as integer
RESULT: []

-----------
QUERY:
create view domview as select cast(col1 as dom) from domtab
RESULT: []

-----------
QUERY:
insert into domtab (col1) values (null)
RESULT: []

-----------
QUERY:
insert into domtab (col1) values (5)
RESULT: []

-----------
QUERY:
select * from domview
RESULT: []

-----------
QUERY:
alter domain dom set not null
RESULT: []

-----------
QUERY:
select * from domview
RESULT: []

-----------
QUERY:
-- fail

alter domain dom drop not null
RESULT: []

-----------
QUERY:
select * from domview
RESULT: []

-----------
QUERY:
alter domain dom add constraint domchkgt6 check(value > 6)
RESULT: []

-----------
QUERY:
select * from domview
RESULT: []

-----------
QUERY:
--fail

alter domain dom drop constraint domchkgt6 restrict
RESULT: []

-----------
QUERY:
select * from domview
RESULT: []

-----------
QUERY:
-- cleanup
drop domain ddef1 restrict
RESULT: []

-----------
QUERY:
drop domain ddef2 restrict
RESULT: []

-----------
QUERY:
drop domain ddef3 restrict
RESULT: []

-----------
QUERY:
drop domain ddef4 restrict
RESULT: []

-----------
QUERY:
drop domain ddef5 restrict
RESULT: []

-----------
QUERY:
drop sequence ddef4_seq
RESULT: []

-----------
QUERY:
-- Test domains over domains
create domain vchar4 varchar(4)
RESULT: []

-----------
QUERY:
create domain dinter vchar4 check (substring(VALUE, 1, 1) = 'x')
RESULT: []

-----------
QUERY:
create domain dtop dinter check (substring(VALUE, 2, 1) = '1')
RESULT: []

-----------
QUERY:
select 'x123'::dtop
RESULT: []

-----------
QUERY:
select 'x1234'::dtop
RESULT: []

-----------
QUERY:
-- explicit coercion should truncate
select 'y1234'::dtop
RESULT: []

-----------
QUERY:
-- fail
select 'y123'::dtop
RESULT: []

-----------
QUERY:
-- fail
select 'yz23'::dtop
RESULT: []

-----------
QUERY:
-- fail
select 'xz23'::dtop
RESULT: []

-----------
QUERY:
-- fail

create temp table dtest(f1 dtop)
RESULT: []

-----------
QUERY:
insert into dtest values('x123')
RESULT: []

-----------
QUERY:
insert into dtest values('x1234')
RESULT: []

-----------
QUERY:
-- fail, implicit coercion
insert into dtest values('y1234')
RESULT: []

-----------
QUERY:
-- fail, implicit coercion
insert into dtest values('y123')
RESULT: []

-----------
QUERY:
-- fail
insert into dtest values('yz23')
RESULT: []

-----------
QUERY:
-- fail
insert into dtest values('xz23')
RESULT: []

-----------
QUERY:
-- fail

drop table dtest
RESULT: []

-----------
QUERY:
drop domain vchar4 cascade
RESULT: []

-----------
QUERY:
-- Make sure that constraints of newly-added domain columns are
-- enforced correctly, even if there/* REPLACED */''s no default value for the new
-- column. Per bug #1433
create domain str_domain as text not null
RESULT: []

-----------
QUERY:
create table domain_test (a int, b int)
RESULT: []

-----------
QUERY:
insert into domain_test values (1, 2)
RESULT: []

-----------
QUERY:
insert into domain_test values (1, 2)
RESULT: []

-----------
QUERY:
-- should fail
alter table domain_test add column c str_domain
RESULT: []

-----------
QUERY:
create domain str_domain2 as text check (value <> 'foo') default 'foo'
RESULT: []

-----------
QUERY:
-- should fail
alter table domain_test add column d str_domain2
RESULT: []

-----------
QUERY:
-- Check that domain constraints on prepared statement parameters of
-- unknown type are enforced correctly.
create domain pos_int as int4 check (value > 0) not null
RESULT: []

-----------
QUERY:
prepare s1 as select $1::pos_int = 10 as "is_ten"
RESULT: []

-----------
QUERY:
execute s1(10)
RESULT: []

-----------
QUERY:
execute s1(0)
RESULT: []

-----------
QUERY:
-- should fail
execute s1(NULL)
RESULT: []

-----------
QUERY:
-- should fail

-- Check that domain constraints on plpgsql function parameters, results,
-- and local variables are enforced correctly.

create function doubledecrement(p1 pos_int) returns pos_int as $$
declare v pos_int;
begin
    return p1;
end$$ language plpgsql
RESULT: []

-----------
QUERY:
select doubledecrement(3)
RESULT: []

-----------
QUERY:
-- fail because of implicit null assignment

create or replace function doubledecrement(p1 pos_int) returns pos_int as $$
declare v pos_int := 0;
begin
    return p1;
end$$ language plpgsql
RESULT: []

-----------
QUERY:
select doubledecrement(3)
RESULT: []

-----------
QUERY:
-- fail at initialization assignment

create or replace function doubledecrement(p1 pos_int) returns pos_int as $$
declare v pos_int := 1;
begin
    v := p1 - 1;
    return v - 1;
end$$ language plpgsql
RESULT: []

-----------
QUERY:
select doubledecrement(null)
RESULT: []

-----------
QUERY:
-- fail before call
select doubledecrement(0)
RESULT: []

-----------
QUERY:
-- fail before call
select doubledecrement(1)
RESULT: []

-----------
QUERY:
-- fail at assignment to v
select doubledecrement(2)
RESULT: []

-----------
QUERY:
-- fail at return
select doubledecrement(3)
RESULT: []

-----------
QUERY:
-- good

-- Check that ALTER DOMAIN tests columns of derived types

create domain posint as int4
RESULT: []

-----------
QUERY:
-- Currently, this doesn/* REPLACED */''t work for composite types, but verify it complains
create type ddtest1 as (f1 posint)
RESULT: []

-----------
QUERY:
create table ddtest2(f1 ddtest1)
RESULT: []

-----------
QUERY:
insert into ddtest2 values(row(-1))
RESULT: []

-----------
QUERY:
alter domain posint add constraint c1 check(value >= 0)
RESULT: []

-----------
QUERY:
drop table ddtest2
RESULT: []

-----------
QUERY:
-- Likewise for domains within arrays of composite
create table ddtest2(f1 ddtest1[])
RESULT: []

-----------
QUERY:
insert into ddtest2 values('{(-1)}')
RESULT: []

-----------
QUERY:
alter domain posint add constraint c1 check(value >= 0)
RESULT: []

-----------
QUERY:
drop table ddtest2
RESULT: []

-----------
QUERY:
-- Likewise for domains within domains over composite
create domain ddtest1d as ddtest1
RESULT: []

-----------
QUERY:
create table ddtest2(f1 ddtest1d)
RESULT: []

-----------
QUERY:
insert into ddtest2 values('(-1)')
RESULT: []

-----------
QUERY:
alter domain posint add constraint c1 check(value >= 0)
RESULT: []

-----------
QUERY:
drop table ddtest2
RESULT: []

-----------
QUERY:
drop domain ddtest1d
RESULT: []

-----------
QUERY:
-- Likewise for domains within domains over array of composite
create domain ddtest1d as ddtest1[]
RESULT: []

-----------
QUERY:
create table ddtest2(f1 ddtest1d)
RESULT: []

-----------
QUERY:
insert into ddtest2 values('{(-1)}')
RESULT: []

-----------
QUERY:
alter domain posint add constraint c1 check(value >= 0)
RESULT: []

-----------
QUERY:
drop table ddtest2
RESULT: []

-----------
QUERY:
drop domain ddtest1d
RESULT: []

-----------
QUERY:
-- Doesn/* REPLACED */''t work for ranges, either
create type rposint as range (subtype = posint)
RESULT: []

-----------
QUERY:
create table ddtest2(f1 rposint)
RESULT: []

-----------
QUERY:
insert into ddtest2 values('(-1,3]')
RESULT: []

-----------
QUERY:
alter domain posint add constraint c1 check(value >= 0)
RESULT: []

-----------
QUERY:
drop table ddtest2
RESULT: []

-----------
QUERY:
drop type rposint
RESULT: []

-----------
QUERY:
alter domain posint add constraint c1 check(value >= 0)
RESULT: []

-----------
QUERY:
create domain posint2 as posint check (value % 2 = 0)
RESULT: []

-----------
QUERY:
create table ddtest2(f1 posint2)
RESULT: []

-----------
QUERY:
insert into ddtest2 values(11)
RESULT: []

-----------
QUERY:
-- fail
insert into ddtest2 values(-2)
RESULT: []

-----------
QUERY:
-- fail
insert into ddtest2 values(2)
RESULT: []

-----------
QUERY:
alter domain posint add constraint c2 check(value >= 10)
RESULT: []

-----------
QUERY:
-- fail
alter domain posint add constraint c2 check(value > 0)
RESULT: []

-----------
QUERY:
-- OK

drop table ddtest2
RESULT: []

-----------
QUERY:
drop type ddtest1
RESULT: []

-----------
QUERY:
drop domain posint cascade
RESULT: []

-----------
QUERY:
--
-- Check enforcement of domain-related typmod in plpgsql (bug #5717)
--

create or replace function array_elem_check(numeric) returns numeric as $$
declare
  x numeric(4,2)[1];
begin
  x[1] := $1;
  return x[1];
end$$ language plpgsql
RESULT: []

-----------
QUERY:
select array_elem_check(121.00)
RESULT: []

-----------
QUERY:
select array_elem_check(1.23456)
RESULT: []

-----------
QUERY:
create domain mynums as numeric(4,2)[1]
RESULT: []

-----------
QUERY:
create or replace function array_elem_check(numeric) returns numeric as $$
declare
  x mynums;
begin
  x[1] := $1;
  return x[1];
end$$ language plpgsql
RESULT: []

-----------
QUERY:
select array_elem_check(121.00)
RESULT: []

-----------
QUERY:
select array_elem_check(1.23456)
RESULT: []

-----------
QUERY:
create domain mynums2 as mynums
RESULT: []

-----------
QUERY:
create or replace function array_elem_check(numeric) returns numeric as $$
declare
  x mynums2;
begin
  x[1] := $1;
  return x[1];
end$$ language plpgsql
RESULT: []

-----------
QUERY:
select array_elem_check(121.00)
RESULT: []

-----------
QUERY:
select array_elem_check(1.23456)
RESULT: []

-----------
QUERY:
drop function array_elem_check(numeric)
RESULT: []

-----------
QUERY:
--
-- Check enforcement of array-level domain constraints
--

create domain orderedpair as int[2] check (value[1] < value[2])
RESULT: []

-----------
QUERY:
select array[1,2]::orderedpair
RESULT: []

-----------
QUERY:
select array[2,1]::orderedpair
RESULT: []

-----------
QUERY:
-- fail

create temp table op (f1 orderedpair)
RESULT: []

-----------
QUERY:
insert into op values (array[1,2])
RESULT: []

-----------
QUERY:
insert into op values (array[2,1])
RESULT: []

-----------
QUERY:
-- fail

update op set f1[2] = 3
RESULT: []

-----------
QUERY:
update op set f1[2] = 0
RESULT: []

-----------
QUERY:
-- fail
select * from op
RESULT: []

-----------
QUERY:
create or replace function array_elem_check(int) returns int as $$
declare
  x orderedpair := '{1,2}';
begin
  x[2] := $1;
  return x[2];
end$$ language plpgsql
RESULT: []

-----------
QUERY:
select array_elem_check(3)
RESULT: []

-----------
QUERY:
select array_elem_check(-1)
RESULT: []

-----------
QUERY:
drop function array_elem_check(int)
RESULT: []

-----------
QUERY:
--
-- Check enforcement of changing constraints in plpgsql
--

create domain di as int
RESULT: []

-----------
QUERY:
create function dom_check(int) returns di as $$
declare d di;
begin
  d := $1::di;
  return d;
end
$$ language plpgsql immutable
RESULT: []

-----------
QUERY:
select dom_check(0)
RESULT: []

-----------
QUERY:
alter domain di add constraint pos check (value > 0)
RESULT: []

-----------
QUERY:
select dom_check(0)
RESULT: []

-----------
QUERY:
-- fail

alter domain di drop constraint pos
RESULT: []

-----------
QUERY:
select dom_check(0)
RESULT: []

-----------
QUERY:
-- implicit cast during assignment is a separate code path, test that too

create or replace function dom_check(int) returns di as $$
declare d di;
begin
  d := $1;
  return d;
end
$$ language plpgsql immutable
RESULT: []

-----------
QUERY:
select dom_check(0)
RESULT: []

-----------
QUERY:
alter domain di add constraint pos check (value > 0)
RESULT: []

-----------
QUERY:
select dom_check(0)
RESULT: []

-----------
QUERY:
-- fail

alter domain di drop constraint pos
RESULT: []

-----------
QUERY:
select dom_check(0)
RESULT: []

-----------
QUERY:
drop function dom_check(int)
RESULT: []

-----------
QUERY:
drop domain di
RESULT: []

-----------
QUERY:
--
-- Check use of a (non-inline-able) SQL function in a domain constraint /* REPLACED */,
-- this has caused issues in the past
--

create function sql_is_distinct_from(anyelement, anyelement)
returns boolean language sql
as 'select $1 is distinct from $2 limit 1'
RESULT: []

-----------
QUERY:
create domain inotnull int
  check (sql_is_distinct_from(value, null))
RESULT: []

-----------
QUERY:
select 1::inotnull
RESULT: []

-----------
QUERY:
select null::inotnull
RESULT: []

-----------
QUERY:
create table dom_table (x inotnull)
RESULT: []

-----------
QUERY:
insert into dom_table values ('1')
RESULT: []

-----------
QUERY:
insert into dom_table values (1)
RESULT: []

-----------
QUERY:
insert into dom_table values (null)
RESULT: []

-----------
QUERY:
drop table dom_table
RESULT: []

-----------
QUERY:
drop domain inotnull
RESULT: []

-----------
QUERY:
drop function sql_is_distinct_from(anyelement, anyelement)
RESULT: []

-----------
QUERY:
--
-- Renaming
--

create domain testdomain1 as int
RESULT: []

-----------
QUERY:
alter domain testdomain1 rename to testdomain2
RESULT: []

-----------
QUERY:
alter type testdomain2 rename to testdomain3
RESULT: []

-----------
QUERY:
-- alter type also works
drop domain testdomain3
RESULT: []

-----------
QUERY:
--
-- Renaming domain constraints
--

create domain testdomain1 as int constraint unsigned check (value > 0)
RESULT: []

-----------
QUERY:
alter domain testdomain1 rename constraint unsigned to unsigned_foo
RESULT: []

-----------
QUERY:
alter domain testdomain1 drop constraint unsigned_foo
RESULT: []

-----------
QUERY:
drop domain testdomain1
RESULT: []

-----------
QUERY:
--
-- Information schema
--

SELECT * FROM information_schema.column_domain_usage
  WHERE domain_name IN ('con', 'dom', 'pos_int', 'things')
  ORDER BY domain_name
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.domain_constraints
  WHERE domain_name IN ('con', 'dom', 'pos_int', 'things')
  ORDER BY constraint_name
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.domains
  WHERE domain_name IN ('con', 'dom', 'pos_int', 'things')
  ORDER BY domain_name
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.check_constraints
  WHERE (constraint_schema, constraint_name)
        IN (SELECT constraint_schema, constraint_name
            FROM information_schema.domain_constraints
            WHERE domain_name IN ('con', 'dom', 'pos_int', 'things'))
  ORDER BY constraint_name
RESULT: []
=========================================
Summary for test case domain/test.sql of postgres
=========================================
