
-----------
QUERY:
--
-- IF EXISTS tests
--

-- table (will be really dropped at the end)

DROP TABLE test_exists;
RESULT:
	postgres: table "test_exists" does not exist


-----------
QUERY:


DROP TABLE IF EXISTS test_exists;
RESULT:
	postgres: None

-----------
QUERY:


CREATE TABLE test_exists (a int, b text);
RESULT:
	postgres: None

-----------
QUERY:


-- view

DROP VIEW test_view_exists;
RESULT:
	postgres: view "test_view_exists" does not exist


-----------
QUERY:


DROP VIEW IF EXISTS test_view_exists;
RESULT:
	postgres: None

-----------
QUERY:


CREATE VIEW test_view_exists AS select * from test_exists;
RESULT:
	postgres: None

-----------
QUERY:


DROP VIEW IF EXISTS test_view_exists;
RESULT:
	postgres: None

-----------
QUERY:


DROP VIEW test_view_exists;
RESULT:
	postgres: view "test_view_exists" does not exist


-----------
QUERY:


-- index

DROP INDEX test_index_exists;
RESULT:
	postgres: index "test_index_exists" does not exist


-----------
QUERY:


DROP INDEX IF EXISTS test_index_exists;
RESULT:
	postgres: None

-----------
QUERY:


CREATE INDEX test_index_exists on test_exists(a);
RESULT:
	postgres: None

-----------
QUERY:


DROP INDEX IF EXISTS test_index_exists;
RESULT:
	postgres: None

-----------
QUERY:


DROP INDEX test_index_exists;
RESULT:
	postgres: index "test_index_exists" does not exist


-----------
QUERY:


-- sequence

DROP SEQUENCE test_sequence_exists;
RESULT:
	postgres: sequence "test_sequence_exists" does not exist


-----------
QUERY:


DROP SEQUENCE IF EXISTS test_sequence_exists;
RESULT:
	postgres: None

-----------
QUERY:


CREATE SEQUENCE test_sequence_exists;
RESULT:
	postgres: None

-----------
QUERY:


DROP SEQUENCE IF EXISTS test_sequence_exists;
RESULT:
	postgres: None

-----------
QUERY:


DROP SEQUENCE test_sequence_exists;
RESULT:
	postgres: sequence "test_sequence_exists" does not exist


-----------
QUERY:


-- schema

DROP SCHEMA test_schema_exists;
RESULT:
	postgres: schema "test_schema_exists" does not exist


-----------
QUERY:


DROP SCHEMA IF EXISTS test_schema_exists;
RESULT:
	postgres: None

-----------
QUERY:


CREATE SCHEMA test_schema_exists;
RESULT:
	postgres: None

-----------
QUERY:


DROP SCHEMA IF EXISTS test_schema_exists;
RESULT:
	postgres: None

-----------
QUERY:


DROP SCHEMA test_schema_exists;
RESULT:
	postgres: schema "test_schema_exists" does not exist


-----------
QUERY:


-- type

DROP TYPE test_type_exists;
RESULT:
	postgres: type "test_type_exists" does not exist


-----------
QUERY:


DROP TYPE IF EXISTS test_type_exists;
RESULT:
	postgres: None

-----------
QUERY:


CREATE type test_type_exists as (a int, b text);
RESULT:
	postgres: None

-----------
QUERY:


DROP TYPE IF EXISTS test_type_exists;
RESULT:
	postgres: None

-----------
QUERY:


DROP TYPE test_type_exists;
RESULT:
	postgres: type "test_type_exists" does not exist


-----------
QUERY:


-- domain

DROP DOMAIN test_domain_exists;
RESULT:
	postgres: type "test_domain_exists" does not exist


-----------
QUERY:


DROP DOMAIN IF EXISTS test_domain_exists;
RESULT:
	postgres: None

-----------
QUERY:


CREATE domain test_domain_exists as int not null check (value > 0);
RESULT:
	postgres: None

-----------
QUERY:


DROP DOMAIN IF EXISTS test_domain_exists;
RESULT:
	postgres: None

-----------
QUERY:


DROP DOMAIN test_domain_exists;
RESULT:
	postgres: type "test_domain_exists" does not exist


-----------
QUERY:


---
--- role/user/group
---

CREATE USER regress_test_u1;
RESULT:
	postgres: None

-----------
QUERY:

CREATE ROLE regress_test_r1;
RESULT:
	postgres: None

-----------
QUERY:

CREATE GROUP regress_test_g1;
RESULT:
	postgres: None

-----------
QUERY:


DROP USER regress_test_u2;
RESULT:
	postgres: role "regress_test_u2" does not exist


-----------
QUERY:


DROP USER IF EXISTS regress_test_u1, regress_test_u2;
RESULT:
	postgres: None

-----------
QUERY:


DROP USER regress_test_u1;
RESULT:
	postgres: role "regress_test_u1" does not exist


-----------
QUERY:


DROP ROLE regress_test_r2;
RESULT:
	postgres: role "regress_test_r2" does not exist


-----------
QUERY:


DROP ROLE IF EXISTS regress_test_r1, regress_test_r2;
RESULT:
	postgres: None

-----------
QUERY:


DROP ROLE regress_test_r1;
RESULT:
	postgres: role "regress_test_r1" does not exist


-----------
QUERY:


DROP GROUP regress_test_g2;
RESULT:
	postgres: role "regress_test_g2" does not exist


-----------
QUERY:


DROP GROUP IF EXISTS regress_test_g1, regress_test_g2;
RESULT:
	postgres: None

-----------
QUERY:


DROP GROUP regress_test_g1;
RESULT:
	postgres: role "regress_test_g1" does not exist


-----------
QUERY:


-- collation
DROP COLLATION IF EXISTS test_collation_exists;
RESULT:
	postgres: None

-----------
QUERY:


-- conversion
DROP CONVERSION test_conversion_exists;
RESULT:
	postgres: conversion "test_conversion_exists" does not exist


-----------
QUERY:

DROP CONVERSION IF EXISTS test_conversion_exists;
RESULT:
	postgres: None

-----------
QUERY:

CREATE CONVERSION test_conversion_exists
    FOR 'LATIN1' TO 'UTF8' FROM iso8859_1_to_utf8;
RESULT:
	postgres: None

-----------
QUERY:

DROP CONVERSION test_conversion_exists;
RESULT:
	postgres: None

-----------
QUERY:


-- text search parser
DROP TEXT SEARCH PARSER test_tsparser_exists;
RESULT:
	postgres: text search parser "test_tsparser_exists" does not exist


-----------
QUERY:

DROP TEXT SEARCH PARSER IF EXISTS test_tsparser_exists;
RESULT:
	postgres: None

-----------
QUERY:


-- text search dictionary
DROP TEXT SEARCH DICTIONARY test_tsdict_exists;
RESULT:
	postgres: text search dictionary "test_tsdict_exists" does not exist


-----------
QUERY:

DROP TEXT SEARCH DICTIONARY IF EXISTS test_tsdict_exists;
RESULT:
	postgres: None

-----------
QUERY:

CREATE TEXT SEARCH DICTIONARY test_tsdict_exists (
        Template=ispell,
        DictFile=ispell_sample,
        AffFile=ispell_sample
);
RESULT:
	postgres: None

-----------
QUERY:

DROP TEXT SEARCH DICTIONARY test_tsdict_exists;
RESULT:
	postgres: None

-----------
QUERY:


-- test search template
DROP TEXT SEARCH TEMPLATE test_tstemplate_exists;
RESULT:
	postgres: text search template "test_tstemplate_exists" does not exist


-----------
QUERY:

DROP TEXT SEARCH TEMPLATE IF EXISTS test_tstemplate_exists;
RESULT:
	postgres: None

-----------
QUERY:


-- text search configuration
DROP TEXT SEARCH CONFIGURATION test_tsconfig_exists;
RESULT:
	postgres: text search configuration "test_tsconfig_exists" does not exist


-----------
QUERY:

DROP TEXT SEARCH CONFIGURATION IF EXISTS test_tsconfig_exists;
RESULT:
	postgres: None

-----------
QUERY:

CREATE TEXT SEARCH CONFIGURATION test_tsconfig_exists (COPY=english);
RESULT:
	postgres: None

-----------
QUERY:

DROP TEXT SEARCH CONFIGURATION test_tsconfig_exists;
RESULT:
	postgres: None

-----------
QUERY:


-- extension
DROP EXTENSION test_extension_exists;
RESULT:
	postgres: extension "test_extension_exists" does not exist


-----------
QUERY:

DROP EXTENSION IF EXISTS test_extension_exists;
RESULT:
	postgres: None

-----------
QUERY:


-- functions
DROP FUNCTION test_function_exists();
RESULT:
	postgres: function test_function_exists() does not exist


-----------
QUERY:

DROP FUNCTION IF EXISTS test_function_exists();
RESULT:
	postgres: None

-----------
QUERY:


DROP FUNCTION test_function_exists(int, text, int[]);
RESULT:
	postgres: function test_function_exists(integer, text, integer[]) does not exist


-----------
QUERY:

DROP FUNCTION IF EXISTS test_function_exists(int, text, int[]);
RESULT:
	postgres: None

-----------
QUERY:


-- aggregate
DROP AGGREGATE test_aggregate_exists(*);
RESULT:
	postgres: aggregate test_aggregate_exists(*) does not exist


-----------
QUERY:

DROP AGGREGATE IF EXISTS test_aggregate_exists(*);
RESULT:
	postgres: None

-----------
QUERY:


DROP AGGREGATE test_aggregate_exists(int);
RESULT:
	postgres: aggregate test_aggregate_exists(integer) does not exist


-----------
QUERY:

DROP AGGREGATE IF EXISTS test_aggregate_exists(int);
RESULT:
	postgres: None

-----------
QUERY:


-- operator
DROP OPERATOR @#@ (int, int);
RESULT:
	postgres: operator does not exist: integer @#@ integer


-----------
QUERY:

DROP OPERATOR IF EXISTS @#@ (int, int);
RESULT:
	postgres: None

-----------
QUERY:

CREATE OPERATOR @#@
        (leftarg = int8, rightarg = int8, procedure = int8xor);
RESULT:
	postgres: None

-----------
QUERY:

DROP OPERATOR @#@ (int8, int8);
RESULT:
	postgres: None

-----------
QUERY:


-- language
DROP LANGUAGE test_language_exists;
RESULT:
	postgres: language "test_language_exists" does not exist


-----------
QUERY:

DROP LANGUAGE IF EXISTS test_language_exists;
RESULT:
	postgres: None

-----------
QUERY:


-- cast
DROP CAST (text AS text);
RESULT:
	postgres: cast from type text to type text does not exist


-----------
QUERY:

DROP CAST IF EXISTS (text AS text);
RESULT:
	postgres: None

-----------
QUERY:


-- trigger
DROP TRIGGER test_trigger_exists ON test_exists;
RESULT:
	postgres: trigger "test_trigger_exists" for table "test_exists" does not exist


-----------
QUERY:

DROP TRIGGER IF EXISTS test_trigger_exists ON test_exists;
RESULT:
	postgres: None

-----------
QUERY:


DROP TRIGGER test_trigger_exists ON no_such_table;
RESULT:
	postgres: relation "no_such_table" does not exist


-----------
QUERY:

DROP TRIGGER IF EXISTS test_trigger_exists ON no_such_table;
RESULT:
	postgres: None

-----------
QUERY:


DROP TRIGGER test_trigger_exists ON no_such_schema.no_such_table;
RESULT:
	postgres: schema "no_such_schema" does not exist


-----------
QUERY:

DROP TRIGGER IF EXISTS test_trigger_exists ON no_such_schema.no_such_table;
RESULT:
	postgres: None

-----------
QUERY:


CREATE TRIGGER test_trigger_exists
    BEFORE UPDATE ON test_exists
    FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger();
RESULT:
	postgres: None

-----------
QUERY:

DROP TRIGGER test_trigger_exists ON test_exists;
RESULT:
	postgres: None

-----------
QUERY:


-- rule
DROP RULE test_rule_exists ON test_exists;
RESULT:
	postgres: rule "test_rule_exists" for relation "test_exists" does not exist


-----------
QUERY:

DROP RULE IF EXISTS test_rule_exists ON test_exists;
RESULT:
	postgres: None

-----------
QUERY:


DROP RULE test_rule_exists ON no_such_table;
RESULT:
	postgres: relation "no_such_table" does not exist


-----------
QUERY:

DROP RULE IF EXISTS test_rule_exists ON no_such_table;
RESULT:
	postgres: None

-----------
QUERY:


DROP RULE test_rule_exists ON no_such_schema.no_such_table;
RESULT:
	postgres: schema "no_such_schema" does not exist


-----------
QUERY:

DROP RULE IF EXISTS test_rule_exists ON no_such_schema.no_such_table;
RESULT:
	postgres: None

-----------
QUERY:


CREATE RULE test_rule_exists AS ON INSERT TO test_exists
    DO INSTEAD
    INSERT INTO test_exists VALUES (NEW.a, NEW.b || NEW.a::text);
RESULT:
	postgres: None

-----------
QUERY:

DROP RULE test_rule_exists ON test_exists;
RESULT:
	postgres: None

-----------
QUERY:


-- foreign data wrapper
DROP FOREIGN DATA WRAPPER test_fdw_exists;
RESULT:
	postgres: foreign-data wrapper "test_fdw_exists" does not exist


-----------
QUERY:

DROP FOREIGN DATA WRAPPER IF EXISTS test_fdw_exists;
RESULT:
	postgres: None

-----------
QUERY:


-- foreign server
DROP SERVER test_server_exists;
RESULT:
	postgres: server "test_server_exists" does not exist


-----------
QUERY:

DROP SERVER IF EXISTS test_server_exists;
RESULT:
	postgres: None

-----------
QUERY:


-- operator class
DROP OPERATOR CLASS test_operator_class USING btree;
RESULT:
	postgres: operator class "test_operator_class" does not exist for access method "btree"


-----------
QUERY:

DROP OPERATOR CLASS IF EXISTS test_operator_class USING btree;
RESULT:
	postgres: None

-----------
QUERY:


DROP OPERATOR CLASS test_operator_class USING no_such_am;
RESULT:
	postgres: access method "no_such_am" does not exist


-----------
QUERY:

DROP OPERATOR CLASS IF EXISTS test_operator_class USING no_such_am;
RESULT:
	postgres: access method "no_such_am" does not exist


-----------
QUERY:


-- operator family
DROP OPERATOR FAMILY test_operator_family USING btree;
RESULT:
	postgres: operator family "test_operator_family" does not exist for access method "btree"


-----------
QUERY:

DROP OPERATOR FAMILY IF EXISTS test_operator_family USING btree;
RESULT:
	postgres: None

-----------
QUERY:


DROP OPERATOR FAMILY test_operator_family USING no_such_am;
RESULT:
	postgres: access method "no_such_am" does not exist


-----------
QUERY:

DROP OPERATOR FAMILY IF EXISTS test_operator_family USING no_such_am;
RESULT:
	postgres: access method "no_such_am" does not exist


-----------
QUERY:


-- access method
DROP ACCESS METHOD no_such_am;
RESULT:
	postgres: access method "no_such_am" does not exist


-----------
QUERY:

DROP ACCESS METHOD IF EXISTS no_such_am;
RESULT:
	postgres: None

-----------
QUERY:


-- drop the table

DROP TABLE IF EXISTS test_exists;
RESULT:
	postgres: None

-----------
QUERY:


DROP TABLE test_exists;
RESULT:
	postgres: table "test_exists" does not exist


-----------
QUERY:


-- be tolerant with missing schemas, types, etc

DROP AGGREGATE IF EXISTS no_such_schema.foo(int);
RESULT:
	postgres: None

-----------
QUERY:

DROP AGGREGATE IF EXISTS foo(no_such_type);
RESULT:
	postgres: None

-----------
QUERY:

DROP AGGREGATE IF EXISTS foo(no_such_schema.no_such_type);
RESULT:
	postgres: None

-----------
QUERY:

DROP CAST IF EXISTS (INTEGER AS no_such_type2);
RESULT:
	postgres: None

-----------
QUERY:

DROP CAST IF EXISTS (no_such_type1 AS INTEGER);
RESULT:
	postgres: None

-----------
QUERY:

DROP CAST IF EXISTS (INTEGER AS no_such_schema.bar);
RESULT:
	postgres: None

-----------
QUERY:

DROP CAST IF EXISTS (no_such_schema.foo AS INTEGER);
RESULT:
	postgres: None

-----------
QUERY:

DROP COLLATION IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:

DROP CONVERSION IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:

DROP DOMAIN IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:

DROP FOREIGN TABLE IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:

DROP FUNCTION IF EXISTS no_such_schema.foo();
RESULT:
	postgres: None

-----------
QUERY:

DROP FUNCTION IF EXISTS foo(no_such_type);
RESULT:
	postgres: None

-----------
QUERY:

DROP FUNCTION IF EXISTS foo(no_such_schema.no_such_type);
RESULT:
	postgres: None

-----------
QUERY:

DROP INDEX IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:

DROP MATERIALIZED VIEW IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:

DROP OPERATOR IF EXISTS no_such_schema.+ (int, int);
RESULT:
	postgres: None

-----------
QUERY:

DROP OPERATOR IF EXISTS + (no_such_type, no_such_type);
RESULT:
	postgres: None

-----------
QUERY:

DROP OPERATOR IF EXISTS + (no_such_schema.no_such_type, no_such_schema.no_such_type);
RESULT:
	postgres: None

-----------
QUERY:

DROP OPERATOR IF EXISTS # (NONE, no_such_schema.no_such_type);
RESULT:
	postgres: None

-----------
QUERY:

DROP OPERATOR CLASS IF EXISTS no_such_schema.widget_ops USING btree;
RESULT:
	postgres: None

-----------
QUERY:

DROP OPERATOR FAMILY IF EXISTS no_such_schema.float_ops USING btree;
RESULT:
	postgres: None

-----------
QUERY:

DROP RULE IF EXISTS foo ON no_such_schema.bar;
RESULT:
	postgres: None

-----------
QUERY:

DROP SEQUENCE IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:

DROP TABLE IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:

DROP TEXT SEARCH CONFIGURATION IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:

DROP TEXT SEARCH DICTIONARY IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:

DROP TEXT SEARCH PARSER IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:

DROP TEXT SEARCH TEMPLATE IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:

DROP TRIGGER IF EXISTS foo ON no_such_schema.bar;
RESULT:
	postgres: None

-----------
QUERY:

DROP TYPE IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:

DROP VIEW IF EXISTS no_such_schema.foo;
RESULT:
	postgres: None

-----------
QUERY:


-- Check we receive an ambiguous function error when there are
-- multiple matching functions.
CREATE FUNCTION test_ambiguous_funcname(int) returns int as $$ select $1; $$ language sql;
RESULT:
	postgres: None

-----------
QUERY:

CREATE FUNCTION test_ambiguous_funcname(text) returns text as $$ select $1; $$ language sql;
RESULT:
	postgres: None

-----------
QUERY:

DROP FUNCTION test_ambiguous_funcname;
RESULT:
	postgres: function name "test_ambiguous_funcname" is not unique
HINT:  Specify the argument list to select the function unambiguously.


-----------
QUERY:

DROP FUNCTION IF EXISTS test_ambiguous_funcname;
RESULT:
	postgres: function name "test_ambiguous_funcname" is not unique
HINT:  Specify the argument list to select the function unambiguously.


-----------
QUERY:


-- cleanup
DROP FUNCTION test_ambiguous_funcname(int);
RESULT:
	postgres: None

-----------
QUERY:

DROP FUNCTION test_ambiguous_funcname(text);
RESULT:
	postgres: None

-----------
QUERY:


-- Likewise for procedures.
CREATE PROCEDURE test_ambiguous_procname(int) as $$ begin end; $$ language plpgsql;
RESULT:
	postgres: None

-----------
QUERY:

CREATE PROCEDURE test_ambiguous_procname(text) as $$ begin end; $$ language plpgsql;
RESULT:
	postgres: None

-----------
QUERY:

DROP PROCEDURE test_ambiguous_procname;
RESULT:
	postgres: procedure name "test_ambiguous_procname" is not unique
HINT:  Specify the argument list to select the procedure unambiguously.


-----------
QUERY:

DROP PROCEDURE IF EXISTS test_ambiguous_procname;
RESULT:
	postgres: procedure name "test_ambiguous_procname" is not unique
HINT:  Specify the argument list to select the procedure unambiguously.


-----------
QUERY:


-- Check we get a similar error if we use ROUTINE instead of PROCEDURE.
DROP ROUTINE IF EXISTS test_ambiguous_procname;
RESULT:
	postgres: routine name "test_ambiguous_procname" is not unique
HINT:  Specify the argument list to select the routine unambiguously.


-----------
QUERY:


-- cleanup
DROP PROCEDURE test_ambiguous_procname(int);
RESULT:
	postgres: None

-----------
QUERY:

DROP PROCEDURE test_ambiguous_procname(text);
RESULT:
	postgres: None

-----------
QUERY:


-- This test checks both the functionality of /* REPLACED */''if exists/* REPLACED */'' and the syntax
-- of the drop database command.
drop database test_database_exists (force);
RESULT:
	postgres: database "test_database_exists" does not exist


-----------
QUERY:

drop database test_database_exists with (force);
RESULT:
	postgres: database "test_database_exists" does not exist


-----------
QUERY:

drop database if exists test_database_exists (force);
RESULT:
	postgres: None

-----------
QUERY:

drop database if exists test_database_exists with (force);
RESULT:
	postgres: None
