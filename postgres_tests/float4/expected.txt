
-----------
QUERY:
--
-- FLOAT4
--

CREATE TABLE FLOAT4_TBL (f1  float4);
RESULT:
	postgres: None

-----------
QUERY:


INSERT INTO FLOAT4_TBL(f1) VALUES ('    0.0');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('1004.30   ');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('     -34.84    ');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('1.2345678901234e+20');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('1.2345678901234e-20');
RESULT:
	postgres: None

-----------
QUERY:


-- test for over and under flow
INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70');
RESULT:
	postgres: "10e70" is out of range for type real
LINE 4: INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70');
RESULT:
	postgres: "-10e70" is out of range for type real
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70');
RESULT:
	postgres: "10e-70" is out of range for type real
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70');
RESULT:
	postgres: "-10e-70" is out of range for type real
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70');
                                           ^


-----------
QUERY:


INSERT INTO FLOAT4_TBL(f1) VALUES ('10e70'::float8);
RESULT:
	postgres: value out of range: overflow


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e70'::float8);
RESULT:
	postgres: value out of range: overflow


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-70'::float8);
RESULT:
	postgres: value out of range: underflow


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-70'::float8);
RESULT:
	postgres: value out of range: underflow


-----------
QUERY:


INSERT INTO FLOAT4_TBL(f1) VALUES ('10e400');
RESULT:
	postgres: "10e400" is out of range for type real
LINE 3: INSERT INTO FLOAT4_TBL(f1) VALUES ('10e400');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e400');
RESULT:
	postgres: "-10e400" is out of range for type real
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e400');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-400');
RESULT:
	postgres: "10e-400" is out of range for type real
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('10e-400');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-400');
RESULT:
	postgres: "-10e-400" is out of range for type real
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('-10e-400');
                                           ^


-----------
QUERY:


-- bad input
INSERT INTO FLOAT4_TBL(f1) VALUES ('');
RESULT:
	postgres: invalid input syntax for type real: ""
LINE 4: INSERT INTO FLOAT4_TBL(f1) VALUES ('');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('       ');
RESULT:
	postgres: invalid input syntax for type real: "       "
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('       ');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('xyz');
RESULT:
	postgres: invalid input syntax for type real: "xyz"
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('xyz');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('5.0.0');
RESULT:
	postgres: invalid input syntax for type real: "5.0.0"
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('5.0.0');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('5 . 0');
RESULT:
	postgres: invalid input syntax for type real: "5 . 0"
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('5 . 0');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('5.   0');
RESULT:
	postgres: invalid input syntax for type real: "5.   0"
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('5.   0');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('     - 3.0');
RESULT:
	postgres: invalid input syntax for type real: "     - 3.0"
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('     - 3.0');
                                           ^


-----------
QUERY:

INSERT INTO FLOAT4_TBL(f1) VALUES ('123            5');
RESULT:
	postgres: invalid input syntax for type real: "123            5"
LINE 2: INSERT INTO FLOAT4_TBL(f1) VALUES ('123            5');
                                           ^


-----------
QUERY:


-- Also try it with non-error-throwing API
SELECT pg_input_is_valid('34.5', 'float4');
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT pg_input_is_valid('xyz', 'float4');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT pg_input_is_valid('1e400', 'float4');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('1e400', 'float4');
RESULT:
	postgres: [('"1e400" is out of range for type real', None, None, '22003')]

-----------
QUERY:


-- special inputs
SELECT 'NaN'::float4;
RESULT:
	postgres: [(nan,)]

-----------
QUERY:

SELECT 'nan'::float4;
RESULT:
	postgres: [(nan,)]

-----------
QUERY:

SELECT '   NAN  '::float4;
RESULT:
	postgres: [(nan,)]

-----------
QUERY:

SELECT 'infinity'::float4;
RESULT:
	postgres: [(inf,)]

-----------
QUERY:

SELECT '          -INFINiTY   '::float4;
RESULT:
	postgres: [(-inf,)]

-----------
QUERY:

-- bad special inputs
SELECT 'N A N'::float4;
RESULT:
	postgres: invalid input syntax for type real: "N A N"
LINE 3: SELECT 'N A N'::float4;
               ^


-----------
QUERY:

SELECT 'NaN x'::float4;
RESULT:
	postgres: invalid input syntax for type real: "NaN x"
LINE 2: SELECT 'NaN x'::float4;
               ^


-----------
QUERY:

SELECT ' INFINITY    x'::float4;
RESULT:
	postgres: invalid input syntax for type real: " INFINITY    x"
LINE 2: SELECT ' INFINITY    x'::float4;
               ^


-----------
QUERY:


SELECT 'Infinity'::float4 + 100.0;
RESULT:
	postgres: [(inf,)]

-----------
QUERY:

SELECT 'Infinity'::float4 / 'Infinity'::float4;
RESULT:
	postgres: [(nan,)]

-----------
QUERY:

SELECT '42'::float4 / 'Infinity'::float4;
RESULT:
	postgres: [(0.0,)]

-----------
QUERY:

SELECT 'nan'::float4 / 'nan'::float4;
RESULT:
	postgres: [(nan,)]

-----------
QUERY:

SELECT 'nan'::float4 / '0'::float4;
RESULT:
	postgres: [(nan,)]

-----------
QUERY:

SELECT 'nan'::numeric::float4;
RESULT:
	postgres: [(nan,)]

-----------
QUERY:


SELECT * FROM FLOAT4_TBL;
RESULT:
	postgres: [(0.0,), (1004.3,), (-34.84,), (1.2345679e+20,), (1.2345679e-20,)]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE f.f1 <> '1004.3';
RESULT:
	postgres: [(0.0,), (-34.84,), (1.2345679e+20,), (1.2345679e-20,)]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE f.f1 = '1004.3';
RESULT:
	postgres: [(1004.3,)]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE '1004.3' > f.f1;
RESULT:
	postgres: [(0.0,), (-34.84,), (1.2345679e-20,)]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE  f.f1 < '1004.3';
RESULT:
	postgres: [(0.0,), (-34.84,), (1.2345679e-20,)]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE '1004.3' >= f.f1;
RESULT:
	postgres: [(0.0,), (1004.3,), (-34.84,), (1.2345679e-20,)]

-----------
QUERY:


SELECT f.* FROM FLOAT4_TBL f WHERE  f.f1 <= '1004.3';
RESULT:
	postgres: [(0.0,), (1004.3,), (-34.84,), (1.2345679e-20,)]

-----------
QUERY:


SELECT f.f1, f.f1 * '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	postgres: [(1004.3, -10043.0), (1.2345679e+20, -1.2345678e+21), (1.2345679e-20, -1.2345678e-19)]

-----------
QUERY:


SELECT f.f1, f.f1 + '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	postgres: [(1004.3, 994.3), (1.2345679e+20, 1.2345679e+20), (1.2345679e-20, -10.0)]

-----------
QUERY:


SELECT f.f1, f.f1 / '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	postgres: [(1004.3, -100.43), (1.2345679e+20, -1.2345679e+19), (1.2345679e-20, -1.2345679e-21)]

-----------
QUERY:


SELECT f.f1, f.f1 - '-10' AS x FROM FLOAT4_TBL f
   WHERE f.f1 > '0.0';
RESULT:
	postgres: [(1004.3, 1014.3), (1.2345679e+20, 1.2345679e+20), (1.2345679e-20, 10.0)]

-----------
QUERY:


-- test divide by zero
SELECT f.f1 / '0.0' from FLOAT4_TBL f;
RESULT:
	postgres: division by zero


-----------
QUERY:


SELECT * FROM FLOAT4_TBL;
RESULT:
	postgres: [(0.0,), (1004.3,), (-34.84,), (1.2345679e+20,), (1.2345679e-20,)]

-----------
QUERY:


-- test the unary float4abs operator
SELECT f.f1, @f.f1 AS abs_f1 FROM FLOAT4_TBL f;
RESULT:
	postgres: [(0.0, 0.0), (1004.3, 1004.3), (-34.84, 34.84), (1.2345679e+20, 1.2345679e+20), (1.2345679e-20, 1.2345679e-20)]

-----------
QUERY:


UPDATE FLOAT4_TBL
   SET f1 = FLOAT4_TBL.f1 * '-1'
   WHERE FLOAT4_TBL.f1 > '0.0';
RESULT:
	postgres: None

-----------
QUERY:


SELECT * FROM FLOAT4_TBL;
RESULT:
	postgres: [(0.0,), (-34.84,), (-1004.3,), (-1.2345679e+20,), (-1.2345679e-20,)]

-----------
QUERY:


-- test edge-case coercions to integer
SELECT '32767.4'::float4::int2;
RESULT:
	postgres: [(32767,)]

-----------
QUERY:

SELECT '32767.6'::float4::int2;
RESULT:
	postgres: smallint out of range


-----------
QUERY:

SELECT '-32768.4'::float4::int2;
RESULT:
	postgres: [(-32768,)]

-----------
QUERY:

SELECT '-32768.6'::float4::int2;
RESULT:
	postgres: smallint out of range


-----------
QUERY:

SELECT '2147483520'::float4::int4;
RESULT:
	postgres: [(2147483520,)]

-----------
QUERY:

SELECT '2147483647'::float4::int4;
RESULT:
	postgres: integer out of range


-----------
QUERY:

SELECT '-2147483648.5'::float4::int4;
RESULT:
	postgres: [(-2147483648,)]

-----------
QUERY:

SELECT '-2147483900'::float4::int4;
RESULT:
	postgres: integer out of range


-----------
QUERY:

SELECT '9223369837831520256'::float4::int8;
RESULT:
	postgres: [(9223369837831520256,)]

-----------
QUERY:

SELECT '9223372036854775807'::float4::int8;
RESULT:
	postgres: bigint out of range


-----------
QUERY:

SELECT '-9223372036854775808.5'::float4::int8;
RESULT:
	postgres: [(-9223372036854775808,)]

-----------
QUERY:

SELECT '-9223380000000000000'::float4::int8;
RESULT:
	postgres: bigint out of range


-----------
QUERY:


-- test output (and round-trip safety) of various values.
-- To ensure we/* REPLACED */''re testing what we think we/* REPLACED */''re testing, start with
-- float values specified by bit patterns (as a useful side effect,
-- this means we/* REPLACED */''ll fail on non-IEEE platforms).

create type xfloat4;
RESULT:
	postgres: None

-----------
QUERY:

create function xfloat4in(cstring) returns xfloat4 immutable strict
  language internal as 'int4in';
RESULT:
	postgres: None

-----------
QUERY:

create function xfloat4out(xfloat4) returns cstring immutable strict
  language internal as 'int4out';
RESULT:
	postgres: None

-----------
QUERY:

create type xfloat4 (input = xfloat4in, output = xfloat4out, like = float4);
RESULT:
	postgres: None

-----------
QUERY:

create cast (xfloat4 as float4) without function;
RESULT:
	postgres: None

-----------
QUERY:

create cast (float4 as xfloat4) without function;
RESULT:
	postgres: None

-----------
QUERY:

create cast (xfloat4 as integer) without function;
RESULT:
	postgres: None

-----------
QUERY:

create cast (integer as xfloat4) without function;
RESULT:
	postgres: None

-----------
QUERY:


-- clean up, lest opr_sanity complain
drop type xfloat4 cascade;
RESULT:
	postgres: None
