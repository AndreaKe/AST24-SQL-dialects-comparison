Guest DBMS identified: postgres
-----------
QUERY:
--
-- Test foreign-data wrapper and server management.
--

-- directory paths and dlsuffix are passed to us in environment variables
-- \getenv libdir '/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress'
-- \getenv dlsuffix '.so'

-- \set regresslib /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress' '/regress' /* REPLACED */'.so'

CREATE FUNCTION test_fdw_handler()
    RETURNS fdw_handler
    AS /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress/regress.so', 'test_fdw_handler'
    LANGUAGE C
RESULT: []

-----------
QUERY:
-- Clean up in case a prior regression run failed

-- Suppress NOTICE messages when roles don/* REPLACED */''t exist
SET client_min_messages TO 'warning'
RESULT: []

-----------
QUERY:
DROP ROLE IF EXISTS regress_foreign_data_user, regress_test_role, regress_test_role2, regress_test_role_super, regress_test_indirect, regress_unprivileged_role
RESULT: []

-----------
QUERY:
RESET client_min_messages
RESULT: []

-----------
QUERY:
CREATE ROLE regress_foreign_data_user LOGIN SUPERUSER
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION 'regress_foreign_data_user'
RESULT: []

-----------
QUERY:
CREATE ROLE regress_test_role
RESULT: []

-----------
QUERY:
CREATE ROLE regress_test_role2
RESULT: []

-----------
QUERY:
CREATE ROLE regress_test_role_super SUPERUSER
RESULT: []

-----------
QUERY:
CREATE ROLE regress_test_indirect
RESULT: []

-----------
QUERY:
CREATE ROLE regress_unprivileged_role
RESULT: []

-----------
QUERY:
CREATE FOREIGN DATA WRAPPER dummy
RESULT: []

-----------
QUERY:
COMMENT ON FOREIGN DATA WRAPPER dummy IS 'useless'
RESULT: []

-----------
QUERY:
CREATE FOREIGN DATA WRAPPER postgresql VALIDATOR postgresql_fdw_validator
RESULT: []

-----------
QUERY:
-- At this point we should have 2 built-in wrappers and no servers.
SELECT fdwname, fdwhandler::regproc, fdwvalidator::regproc, fdwoptions FROM pg_foreign_data_wrapper ORDER BY 1, 2, 3
RESULT: []

-----------
QUERY:
SELECT srvname, srvoptions FROM pg_foreign_server
RESULT: []

-----------
QUERY:
SELECT * FROM pg_user_mapping
RESULT: []

-----------
QUERY:
-- CREATE FOREIGN DATA WRAPPER
CREATE FOREIGN DATA WRAPPER foo VALIDATOR bar
RESULT: []

-----------
QUERY:
-- ERROR
CREATE FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- \dew

CREATE FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- duplicate
DROP FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
CREATE FOREIGN DATA WRAPPER foo OPTIONS (testing '1')
RESULT: []

-----------
QUERY:
-- \dew+

DROP FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
CREATE FOREIGN DATA WRAPPER foo OPTIONS (testing '1', testing '2')
RESULT: []

-----------
QUERY:
-- ERROR
CREATE FOREIGN DATA WRAPPER foo OPTIONS (testing '1', another '2')
RESULT: []

-----------
QUERY:
-- \dew+

DROP FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
CREATE FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- ERROR
RESET ROLE
RESULT: []

-----------
QUERY:
CREATE FOREIGN DATA WRAPPER foo VALIDATOR postgresql_fdw_validator
RESULT: []

-----------
QUERY:
-- \dew+

-- HANDLER related checks
CREATE FUNCTION invalid_fdw_handler() RETURNS int LANGUAGE SQL AS 'SELECT 1
RESULT: []

-----------
QUERY:
'
RESULT: []

-----------
QUERY:
CREATE FOREIGN DATA WRAPPER test_fdw HANDLER invalid_fdw_handler
RESULT: []

-----------
QUERY:
-- ERROR
CREATE FOREIGN DATA WRAPPER test_fdw HANDLER test_fdw_handler HANDLER invalid_fdw_handler
RESULT: []

-----------
QUERY:
-- ERROR
CREATE FOREIGN DATA WRAPPER test_fdw HANDLER test_fdw_handler
RESULT: []

-----------
QUERY:
DROP FOREIGN DATA WRAPPER test_fdw
RESULT: []

-----------
QUERY:
-- ALTER FOREIGN DATA WRAPPER
ALTER FOREIGN DATA WRAPPER foo OPTIONS (nonexistent 'fdw')
RESULT: []

-----------
QUERY:
-- ERROR

ALTER FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN DATA WRAPPER foo VALIDATOR bar
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN DATA WRAPPER foo NO VALIDATOR
RESULT: []

-----------
QUERY:
-- \dew+

ALTER FOREIGN DATA WRAPPER foo OPTIONS (a '1', b '2')
RESULT: []

-----------
QUERY:
ALTER FOREIGN DATA WRAPPER foo OPTIONS (SET c '4')
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN DATA WRAPPER foo OPTIONS (DROP c)
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN DATA WRAPPER foo OPTIONS (ADD x '1', DROP x)
RESULT: []

-----------
QUERY:
-- \dew+

ALTER FOREIGN DATA WRAPPER foo OPTIONS (DROP a, SET b '3', ADD c '4')
RESULT: []

-----------
QUERY:
-- \dew+

ALTER FOREIGN DATA WRAPPER foo OPTIONS (a '2')
RESULT: []

-----------
QUERY:
ALTER FOREIGN DATA WRAPPER foo OPTIONS (b '4')
RESULT: []

-----------
QUERY:
-- ERROR
-- \dew+

SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
ALTER FOREIGN DATA WRAPPER foo OPTIONS (ADD d '5')
RESULT: []

-----------
QUERY:
-- ERROR
SET ROLE regress_test_role_super
RESULT: []

-----------
QUERY:
ALTER FOREIGN DATA WRAPPER foo OPTIONS (ADD d '5')
RESULT: []

-----------
QUERY:
-- \dew+

ALTER FOREIGN DATA WRAPPER foo OWNER TO regress_test_role
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN DATA WRAPPER foo OWNER TO regress_test_role_super
RESULT: []

-----------
QUERY:
ALTER ROLE regress_test_role_super NOSUPERUSER
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role_super
RESULT: []

-----------
QUERY:
ALTER FOREIGN DATA WRAPPER foo OPTIONS (ADD e '6')
RESULT: []

-----------
QUERY:
-- ERROR
RESET ROLE
RESULT: []

-----------
QUERY:
-- \dew+

ALTER FOREIGN DATA WRAPPER foo RENAME TO foo1
RESULT: []

-----------
QUERY:
-- \dew+
ALTER FOREIGN DATA WRAPPER foo1 RENAME TO foo
RESULT: []

-----------
QUERY:
-- HANDLER related checks
ALTER FOREIGN DATA WRAPPER foo HANDLER invalid_fdw_handler
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN DATA WRAPPER foo HANDLER test_fdw_handler HANDLER anything
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN DATA WRAPPER foo HANDLER test_fdw_handler
RESULT: []

-----------
QUERY:
DROP FUNCTION invalid_fdw_handler()
RESULT: []

-----------
QUERY:
-- DROP FOREIGN DATA WRAPPER
DROP FOREIGN DATA WRAPPER nonexistent
RESULT: []

-----------
QUERY:
-- ERROR
DROP FOREIGN DATA WRAPPER IF EXISTS nonexistent
RESULT: []

-----------
QUERY:
-- \dew+

DROP ROLE regress_test_role_super
RESULT: []

-----------
QUERY:
-- ERROR
SET ROLE regress_test_role_super
RESULT: []

-----------
QUERY:
DROP FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
RESET ROLE
RESULT: []

-----------
QUERY:
DROP ROLE regress_test_role_super
RESULT: []

-----------
QUERY:
-- \dew+

CREATE FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
CREATE SERVER s1 FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
COMMENT ON SERVER s1 IS 'foreign server'
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR current_user SERVER s1
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR current_user SERVER s1
RESULT: []

-----------
QUERY:
-- ERROR
CREATE USER MAPPING IF NOT EXISTS FOR current_user SERVER s1
RESULT: []

-----------
QUERY:
-- NOTICE
-- \dew+
-- \des+
-- \deu+
DROP FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- ERROR
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
DROP FOREIGN DATA WRAPPER foo CASCADE
RESULT: []

-----------
QUERY:
-- ERROR
RESET ROLE
RESULT: []

-----------
QUERY:
DROP FOREIGN DATA WRAPPER foo CASCADE
RESULT: []

-----------
QUERY:
-- \dew+
-- \des+
-- \deu+

-- exercise CREATE SERVER
CREATE SERVER s1 FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- ERROR
CREATE FOREIGN DATA WRAPPER foo OPTIONS ("test wrapper" 'true')
RESULT: []

-----------
QUERY:
CREATE SERVER s1 FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
CREATE SERVER s1 FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- ERROR
CREATE SERVER IF NOT EXISTS s1 FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- No ERROR, just NOTICE
CREATE SERVER s2 FOREIGN DATA WRAPPER foo OPTIONS (host 'a', dbname 'b')
RESULT: []

-----------
QUERY:
CREATE SERVER s3 TYPE 'oracle' FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
CREATE SERVER s4 TYPE 'oracle' FOREIGN DATA WRAPPER foo OPTIONS (host 'a', dbname 'b')
RESULT: []

-----------
QUERY:
CREATE SERVER s5 VERSION '15.0' FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
CREATE SERVER s6 VERSION '16.0' FOREIGN DATA WRAPPER foo OPTIONS (host 'a', dbname 'b')
RESULT: []

-----------
QUERY:
CREATE SERVER s7 TYPE 'oracle' VERSION '17.0' FOREIGN DATA WRAPPER foo OPTIONS (host 'a', dbname 'b')
RESULT: []

-----------
QUERY:
CREATE SERVER s8 FOREIGN DATA WRAPPER postgresql OPTIONS (foo '1')
RESULT: []

-----------
QUERY:
-- ERROR
CREATE SERVER s8 FOREIGN DATA WRAPPER postgresql OPTIONS (host 'localhost', dbname 's8db')
RESULT: []

-----------
QUERY:
-- \des+
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
CREATE SERVER t1 FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- ERROR: no usage on FDW
RESET ROLE
RESULT: []

-----------
QUERY:
GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_role
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
CREATE SERVER t1 FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
RESET ROLE
RESULT: []

-----------
QUERY:
-- \des+

REVOKE USAGE ON FOREIGN DATA WRAPPER foo FROM regress_test_role
RESULT: []

-----------
QUERY:
GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_indirect
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
CREATE SERVER t2 FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- ERROR
RESET ROLE
RESULT: []

-----------
QUERY:
GRANT regress_test_indirect TO regress_test_role
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
CREATE SERVER t2 FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- \des+
RESET ROLE
RESULT: []

-----------
QUERY:
REVOKE regress_test_indirect FROM regress_test_role
RESULT: []

-----------
QUERY:
-- ALTER SERVER
ALTER SERVER s0
RESULT: []

-----------
QUERY:
-- ERROR
ALTER SERVER s0 OPTIONS (a '1')
RESULT: []

-----------
QUERY:
-- ERROR
ALTER SERVER s1 VERSION '1.0' OPTIONS (servername 's1')
RESULT: []

-----------
QUERY:
ALTER SERVER s2 VERSION '1.1'
RESULT: []

-----------
QUERY:
ALTER SERVER s3 OPTIONS ("tns name" 'orcl', port '1521')
RESULT: []

-----------
QUERY:
GRANT USAGE ON FOREIGN SERVER s1 TO regress_test_role
RESULT: []

-----------
QUERY:
GRANT USAGE ON FOREIGN SERVER s6 TO regress_test_role2 WITH GRANT OPTION
RESULT: []

-----------
QUERY:
-- \des+
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
ALTER SERVER s1 VERSION '1.1'
RESULT: []

-----------
QUERY:
-- ERROR
ALTER SERVER s1 OWNER TO regress_test_role
RESULT: []

-----------
QUERY:
-- ERROR
RESET ROLE
RESULT: []

-----------
QUERY:
ALTER SERVER s1 OWNER TO regress_test_role
RESULT: []

-----------
QUERY:
GRANT regress_test_role2 TO regress_test_role
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
ALTER SERVER s1 VERSION '1.1'
RESULT: []

-----------
QUERY:
ALTER SERVER s1 OWNER TO regress_test_role2
RESULT: []

-----------
QUERY:
-- ERROR
RESET ROLE
RESULT: []

-----------
QUERY:
ALTER SERVER s8 OPTIONS (foo '1')
RESULT: []

-----------
QUERY:
-- ERROR option validation
ALTER SERVER s8 OPTIONS (connect_timeout '30', SET dbname 'db1', DROP host)
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
ALTER SERVER s1 OWNER TO regress_test_indirect
RESULT: []

-----------
QUERY:
-- ERROR
RESET ROLE
RESULT: []

-----------
QUERY:
GRANT regress_test_indirect TO regress_test_role
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
ALTER SERVER s1 OWNER TO regress_test_indirect
RESULT: []

-----------
QUERY:
RESET ROLE
RESULT: []

-----------
QUERY:
GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_indirect
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
ALTER SERVER s1 OWNER TO regress_test_indirect
RESULT: []

-----------
QUERY:
RESET ROLE
RESULT: []

-----------
QUERY:
DROP ROLE regress_test_indirect
RESULT: []

-----------
QUERY:
-- ERROR
-- \des+

ALTER SERVER s8 RENAME to s8new
RESULT: []

-----------
QUERY:
-- \des+
ALTER SERVER s8new RENAME to s8
RESULT: []

-----------
QUERY:
-- DROP SERVER
DROP SERVER nonexistent
RESULT: []

-----------
QUERY:
-- ERROR
DROP SERVER IF EXISTS nonexistent
RESULT: []

-----------
QUERY:
-- \des
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
DROP SERVER s2
RESULT: []

-----------
QUERY:
-- ERROR
DROP SERVER s1
RESULT: []

-----------
QUERY:
RESET ROLE
RESULT: []

-----------
QUERY:
-- \des
ALTER SERVER s2 OWNER TO regress_test_role
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
DROP SERVER s2
RESULT: []

-----------
QUERY:
RESET ROLE
RESULT: []

-----------
QUERY:
-- \des
CREATE USER MAPPING FOR current_user SERVER s3
RESULT: []

-----------
QUERY:
-- \deu
DROP SERVER s3
RESULT: []

-----------
QUERY:
-- ERROR
DROP SERVER s3 CASCADE
RESULT: []

-----------
QUERY:
-- \des
-- \deu

-- CREATE USER MAPPING
CREATE USER MAPPING FOR regress_test_missing_role SERVER s1
RESULT: []

-----------
QUERY:
-- ERROR
CREATE USER MAPPING FOR current_user SERVER s1
RESULT: []

-----------
QUERY:
-- ERROR
CREATE USER MAPPING FOR current_user SERVER s4
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR user SERVER s4
RESULT: []

-----------
QUERY:
-- ERROR duplicate
CREATE USER MAPPING FOR public SERVER s4 OPTIONS ("this mapping" 'is public')
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR user SERVER s8 OPTIONS (username 'test', password 'secret')
RESULT: []

-----------
QUERY:
-- ERROR
CREATE USER MAPPING FOR user SERVER s8 OPTIONS (user 'test', password 'secret')
RESULT: []

-----------
QUERY:
ALTER SERVER s5 OWNER TO regress_test_role
RESULT: []

-----------
QUERY:
ALTER SERVER s6 OWNER TO regress_test_indirect
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR current_user SERVER s5
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR current_user SERVER s6 OPTIONS (username 'test')
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR current_user SERVER s7
RESULT: []

-----------
QUERY:
-- ERROR
CREATE USER MAPPING FOR public SERVER s8
RESULT: []

-----------
QUERY:
-- ERROR
RESET ROLE
RESULT: []

-----------
QUERY:
ALTER SERVER t1 OWNER TO regress_test_indirect
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR current_user SERVER t1 OPTIONS (username 'bob', password 'boo')
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR public SERVER t1
RESULT: []

-----------
QUERY:
RESET ROLE
RESULT: []

-----------
QUERY:
-- \deu

-- ALTER USER MAPPING
ALTER USER MAPPING FOR regress_test_missing_role SERVER s4 OPTIONS (gotcha 'true')
RESULT: []

-----------
QUERY:
-- ERROR
ALTER USER MAPPING FOR user SERVER ss4 OPTIONS (gotcha 'true')
RESULT: []

-----------
QUERY:
-- ERROR
ALTER USER MAPPING FOR public SERVER s5 OPTIONS (gotcha 'true')
RESULT: []

-----------
QUERY:
-- ERROR
ALTER USER MAPPING FOR current_user SERVER s8 OPTIONS (username 'test')
RESULT: []

-----------
QUERY:
-- ERROR
ALTER USER MAPPING FOR current_user SERVER s8 OPTIONS (DROP user, SET password 'public')
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
ALTER USER MAPPING FOR current_user SERVER s5 OPTIONS (ADD modified '1')
RESULT: []

-----------
QUERY:
ALTER USER MAPPING FOR public SERVER s4 OPTIONS (ADD modified '1')
RESULT: []

-----------
QUERY:
-- ERROR
ALTER USER MAPPING FOR public SERVER t1 OPTIONS (ADD modified '1')
RESULT: []

-----------
QUERY:
RESET ROLE
RESULT: []

-----------
QUERY:
-- \deu+

-- DROP USER MAPPING
DROP USER MAPPING FOR regress_test_missing_role SERVER s4
RESULT: []

-----------
QUERY:
-- ERROR
DROP USER MAPPING FOR user SERVER ss4
RESULT: []

-----------
QUERY:
DROP USER MAPPING FOR public SERVER s7
RESULT: []

-----------
QUERY:
-- ERROR
DROP USER MAPPING IF EXISTS FOR regress_test_missing_role SERVER s4
RESULT: []

-----------
QUERY:
DROP USER MAPPING IF EXISTS FOR user SERVER ss4
RESULT: []

-----------
QUERY:
DROP USER MAPPING IF EXISTS FOR public SERVER s7
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR public SERVER s8
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
DROP USER MAPPING FOR public SERVER s8
RESULT: []

-----------
QUERY:
-- ERROR
RESET ROLE
RESULT: []

-----------
QUERY:
DROP SERVER s7
RESULT: []

-----------
QUERY:
-- \deu

-- CREATE FOREIGN TABLE
CREATE SCHEMA foreign_schema
RESULT: []

-----------
QUERY:
CREATE SERVER s0 FOREIGN DATA WRAPPER dummy
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft1 ()
RESULT: []

-----------
QUERY:
-- ERROR
CREATE FOREIGN TABLE ft1 () SERVER no_server
RESULT: []

-----------
QUERY:
-- ERROR
CREATE FOREIGN TABLE ft1 (
	c1 integer OPTIONS ("param 1" 'val1') PRIMARY KEY,
	c2 text OPTIONS (param2 'val2', param3 'val3'),
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
RESULT: []

-----------
QUERY:
-- ERROR
CREATE TABLE ref_table (id integer PRIMARY KEY)
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft1 (
	c1 integer OPTIONS ("param 1" 'val1') REFERENCES ref_table (id),
	c2 text OPTIONS (param2 'val2', param3 'val3'),
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
RESULT: []

-----------
QUERY:
-- ERROR
DROP TABLE ref_table
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft1 (
	c1 integer OPTIONS ("param 1" 'val1') NOT NULL,
	c2 text OPTIONS (param2 'val2', param3 'val3'),
	c3 date,
	UNIQUE (c3)
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
RESULT: []

-----------
QUERY:
-- ERROR
CREATE FOREIGN TABLE ft1 (
	c1 integer OPTIONS ("param 1" 'val1') NOT NULL,
	c2 text OPTIONS (param2 'val2', param3 'val3') CHECK (c2 <> ''),
	c3 date,
	CHECK (c3 BETWEEN '1994-01-01'::date AND '1994-01-31'::date)
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
RESULT: []

-----------
QUERY:
COMMENT ON FOREIGN TABLE ft1 IS 'ft1'
RESULT: []

-----------
QUERY:
COMMENT ON COLUMN ft1.c1 IS 'ft1.c1'
RESULT: []

-----------
QUERY:
-- \d+ ft1
-- \det+
CREATE INDEX id_ft1_c2 ON ft1 (c2)
RESULT: []

-----------
QUERY:
-- ERROR
SELECT * FROM ft1
RESULT: []

-----------
QUERY:
-- ERROR
EXPLAIN SELECT * FROM ft1
RESULT: []

-----------
QUERY:
-- ERROR

CREATE TABLE lt1 (a INT) PARTITION BY RANGE (a)
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft_part1
  PARTITION OF lt1 FOR VALUES FROM (0) TO (1000) SERVER s0
RESULT: []

-----------
QUERY:
CREATE INDEX ON lt1 (a)
RESULT: []

-----------
QUERY:
-- skips partition
CREATE UNIQUE INDEX ON lt1 (a)
RESULT: []

-----------
QUERY:
-- ERROR
ALTER TABLE lt1 ADD PRIMARY KEY (a)
RESULT: []

-----------
QUERY:
-- ERROR
DROP TABLE lt1
RESULT: []

-----------
QUERY:
CREATE TABLE lt1 (a INT) PARTITION BY RANGE (a)
RESULT: []

-----------
QUERY:
CREATE INDEX ON lt1 (a)
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft_part1
  PARTITION OF lt1 FOR VALUES FROM (0) TO (1000) SERVER s0
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft_part2 (a INT) SERVER s0
RESULT: []

-----------
QUERY:
ALTER TABLE lt1 ATTACH PARTITION ft_part2 FOR VALUES FROM (1000) TO (2000)
RESULT: []

-----------
QUERY:
DROP FOREIGN TABLE ft_part1, ft_part2
RESULT: []

-----------
QUERY:
CREATE UNIQUE INDEX ON lt1 (a)
RESULT: []

-----------
QUERY:
ALTER TABLE lt1 ADD PRIMARY KEY (a)
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft_part1
  PARTITION OF lt1 FOR VALUES FROM (0) TO (1000) SERVER s0
RESULT: []

-----------
QUERY:
-- ERROR
CREATE FOREIGN TABLE ft_part2 (a INT NOT NULL) SERVER s0
RESULT: []

-----------
QUERY:
ALTER TABLE lt1 ATTACH PARTITION ft_part2
  FOR VALUES FROM (1000) TO (2000)
RESULT: []

-----------
QUERY:
-- ERROR
DROP TABLE lt1
RESULT: []

-----------
QUERY:
DROP FOREIGN TABLE ft_part2
RESULT: []

-----------
QUERY:
CREATE TABLE lt1 (a INT) PARTITION BY RANGE (a)
RESULT: []

-----------
QUERY:
CREATE INDEX ON lt1 (a)
RESULT: []

-----------
QUERY:
CREATE TABLE lt1_part1
  PARTITION OF lt1 FOR VALUES FROM (0) TO (1000)
  PARTITION BY RANGE (a)
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft_part_1_1
  PARTITION OF lt1_part1 FOR VALUES FROM (0) TO (100) SERVER s0
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft_part_1_2 (a INT) SERVER s0
RESULT: []

-----------
QUERY:
ALTER TABLE lt1_part1 ATTACH PARTITION ft_part_1_2 FOR VALUES FROM (100) TO (200)
RESULT: []

-----------
QUERY:
CREATE UNIQUE INDEX ON lt1 (a)
RESULT: []

-----------
QUERY:
ALTER TABLE lt1 ADD PRIMARY KEY (a)
RESULT: []

-----------
QUERY:
DROP FOREIGN TABLE ft_part_1_1, ft_part_1_2
RESULT: []

-----------
QUERY:
CREATE UNIQUE INDEX ON lt1 (a)
RESULT: []

-----------
QUERY:
ALTER TABLE lt1 ADD PRIMARY KEY (a)
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft_part_1_1
  PARTITION OF lt1_part1 FOR VALUES FROM (0) TO (100) SERVER s0
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft_part_1_2 (a INT NOT NULL) SERVER s0
RESULT: []

-----------
QUERY:
ALTER TABLE lt1_part1 ATTACH PARTITION ft_part_1_2 FOR VALUES FROM (100) TO (200)
RESULT: []

-----------
QUERY:
DROP TABLE lt1
RESULT: []

-----------
QUERY:
DROP FOREIGN TABLE ft_part_1_2
RESULT: []

-----------
QUERY:
-- ALTER FOREIGN TABLE
COMMENT ON FOREIGN TABLE ft1 IS 'foreign table'
RESULT: []

-----------
QUERY:
COMMENT ON FOREIGN TABLE ft1 IS NULL
RESULT: []

-----------
QUERY:
COMMENT ON COLUMN ft1.c1 IS 'foreign column'
RESULT: []

-----------
QUERY:
COMMENT ON COLUMN ft1.c1 IS NULL
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ADD COLUMN c4 integer
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ADD COLUMN c5 integer DEFAULT 0
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ADD COLUMN c6 integer
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ADD COLUMN c7 integer NOT NULL
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ADD COLUMN c8 integer
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ADD COLUMN c9 integer
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ADD COLUMN c10 integer OPTIONS (p1 'v1')
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c4 SET DEFAULT 0
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c5 DROP DEFAULT
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c6 SET NOT NULL
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c7 DROP NOT NULL
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE char(10) USING '0'
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE char(10)
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 SET DATA TYPE text
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER COLUMN xmin OPTIONS (ADD p1 'v1')
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN TABLE ft1 ALTER COLUMN c7 OPTIONS (ADD p1 'v1', ADD p2 'v2'),
                        ALTER COLUMN c8 OPTIONS (ADD p1 'v1', ADD p2 'v2')
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 OPTIONS (SET p2 'V2', DROP p1)
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c1 SET STATISTICS 10000
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c1 SET (n_distinct = 100)
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 SET STATISTICS -1
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 SET STORAGE PLAIN
RESULT: []

-----------
QUERY:
-- \d+ ft1
-- can/* REPLACED */''t change the column type if it/* REPLACED */''s used elsewhere
CREATE TABLE use_ft1_column_type (x ft1)
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 SET DATA TYPE integer
RESULT: []

-----------
QUERY:
-- ERROR
DROP TABLE use_ft1_column_type
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ADD PRIMARY KEY (c7)
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c9_check CHECK (c9 < 0) NOT VALID
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 ALTER CONSTRAINT ft1_c9_check DEFERRABLE
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c9_check
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT no_const
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT IF EXISTS no_const
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 OWNER TO regress_test_role
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 OPTIONS (DROP delimiter, SET quote '~', ADD escape '@')
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 DROP COLUMN no_column
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN TABLE ft1 DROP COLUMN IF EXISTS no_column
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 DROP COLUMN c9
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 SET SCHEMA foreign_schema
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft1 SET TABLESPACE ts
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN TABLE foreign_schema.ft1 RENAME c1 TO foreign_column_1
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE foreign_schema.ft1 RENAME TO foreign_table_1
RESULT: []

-----------
QUERY:
-- \d foreign_schema.foreign_table_1

-- alter noexisting table
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c4 integer
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c6 integer
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c7 integer NOT NULL
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c8 integer
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c9 integer
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ADD COLUMN c10 integer OPTIONS (p1 'v1')
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c6 SET NOT NULL
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c7 DROP NOT NULL
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c8 TYPE char(10)
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c8 SET DATA TYPE text
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c7 OPTIONS (ADD p1 'v1', ADD p2 'v2'),
                        ALTER COLUMN c8 OPTIONS (ADD p1 'v1', ADD p2 'v2')
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 ALTER COLUMN c8 OPTIONS (SET p2 'V2', DROP p1)
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 DROP CONSTRAINT IF EXISTS no_const
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 DROP CONSTRAINT ft1_c1_check
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 OWNER TO regress_test_role
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 OPTIONS (DROP delimiter, SET quote '~', ADD escape '@')
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 DROP COLUMN IF EXISTS no_column
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 DROP COLUMN c9
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 SET SCHEMA foreign_schema
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 RENAME c1 TO foreign_column_1
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE IF EXISTS doesnt_exist_ft1 RENAME TO foreign_table_1
RESULT: []

-----------
QUERY:
-- Information schema

SELECT * FROM information_schema.foreign_data_wrappers ORDER BY 1, 2
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.foreign_data_wrapper_options ORDER BY 1, 2, 3
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.foreign_servers ORDER BY 1, 2
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.foreign_server_options ORDER BY 1, 2, 3
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.user_mappings ORDER BY lower(authorization_identifier), 2, 3
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.user_mapping_options ORDER BY lower(authorization_identifier), 2, 3, 4
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.usage_privileges WHERE object_type LIKE 'FOREIGN%' AND object_name IN ('s6', 'foo') ORDER BY 1, 2, 3, 4, 5
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.role_usage_grants WHERE object_type LIKE 'FOREIGN%' AND object_name IN ('s6', 'foo') ORDER BY 1, 2, 3, 4, 5
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.foreign_tables ORDER BY 1, 2, 3
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.foreign_table_options ORDER BY 1, 2, 3, 4
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.user_mapping_options ORDER BY 1, 2, 3, 4
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.usage_privileges WHERE object_type LIKE 'FOREIGN%' AND object_name IN ('s6', 'foo') ORDER BY 1, 2, 3, 4, 5
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.role_usage_grants WHERE object_type LIKE 'FOREIGN%' AND object_name IN ('s6', 'foo') ORDER BY 1, 2, 3, 4, 5
RESULT: []

-----------
QUERY:
DROP USER MAPPING FOR current_user SERVER t1
RESULT: []

-----------
QUERY:
SET ROLE regress_test_role2
RESULT: []

-----------
QUERY:
SELECT * FROM information_schema.user_mapping_options ORDER BY 1, 2, 3, 4
RESULT: []

-----------
QUERY:
RESET ROLE
RESULT: []

-----------
QUERY:
-- has_foreign_data_wrapper_privilege
SELECT has_foreign_data_wrapper_privilege('regress_test_role',
    (SELECT oid FROM pg_foreign_data_wrapper WHERE fdwname='foo'), 'USAGE')
RESULT: []

-----------
QUERY:
SELECT has_foreign_data_wrapper_privilege('regress_test_role', 'foo', 'USAGE')
RESULT: []

-----------
QUERY:
SELECT has_foreign_data_wrapper_privilege(
    (SELECT oid FROM pg_roles WHERE rolname='regress_test_role'),
    (SELECT oid FROM pg_foreign_data_wrapper WHERE fdwname='foo'), 'USAGE')
RESULT: []

-----------
QUERY:
SELECT has_foreign_data_wrapper_privilege(
    (SELECT oid FROM pg_foreign_data_wrapper WHERE fdwname='foo'), 'USAGE')
RESULT: []

-----------
QUERY:
SELECT has_foreign_data_wrapper_privilege(
    (SELECT oid FROM pg_roles WHERE rolname='regress_test_role'), 'foo', 'USAGE')
RESULT: []

-----------
QUERY:
SELECT has_foreign_data_wrapper_privilege('foo', 'USAGE')
RESULT: []

-----------
QUERY:
GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_role
RESULT: []

-----------
QUERY:
SELECT has_foreign_data_wrapper_privilege('regress_test_role', 'foo', 'USAGE')
RESULT: []

-----------
QUERY:
-- has_server_privilege
SELECT has_server_privilege('regress_test_role',
    (SELECT oid FROM pg_foreign_server WHERE srvname='s8'), 'USAGE')
RESULT: []

-----------
QUERY:
SELECT has_server_privilege('regress_test_role', 's8', 'USAGE')
RESULT: []

-----------
QUERY:
SELECT has_server_privilege(
    (SELECT oid FROM pg_roles WHERE rolname='regress_test_role'),
    (SELECT oid FROM pg_foreign_server WHERE srvname='s8'), 'USAGE')
RESULT: []

-----------
QUERY:
SELECT has_server_privilege(
    (SELECT oid FROM pg_foreign_server WHERE srvname='s8'), 'USAGE')
RESULT: []

-----------
QUERY:
SELECT has_server_privilege(
    (SELECT oid FROM pg_roles WHERE rolname='regress_test_role'), 's8', 'USAGE')
RESULT: []

-----------
QUERY:
SELECT has_server_privilege('s8', 'USAGE')
RESULT: []

-----------
QUERY:
GRANT USAGE ON FOREIGN SERVER s8 TO regress_test_role
RESULT: []

-----------
QUERY:
SELECT has_server_privilege('regress_test_role', 's8', 'USAGE')
RESULT: []

-----------
QUERY:
REVOKE USAGE ON FOREIGN SERVER s8 FROM regress_test_role
RESULT: []

-----------
QUERY:
GRANT USAGE ON FOREIGN SERVER s4 TO regress_test_role
RESULT: []

-----------
QUERY:
DROP USER MAPPING FOR public SERVER s4
RESULT: []

-----------
QUERY:
ALTER SERVER s6 OPTIONS (DROP host, DROP dbname)
RESULT: []

-----------
QUERY:
ALTER USER MAPPING FOR regress_test_role SERVER s6 OPTIONS (DROP username)
RESULT: []

-----------
QUERY:
ALTER FOREIGN DATA WRAPPER foo VALIDATOR postgresql_fdw_validator
RESULT: []

-----------
QUERY:
-- Privileges
SET ROLE regress_unprivileged_role
RESULT: []

-----------
QUERY:
CREATE FOREIGN DATA WRAPPER foobar
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN DATA WRAPPER foo OPTIONS (gotcha 'true')
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN DATA WRAPPER foo OWNER TO regress_unprivileged_role
RESULT: []

-----------
QUERY:
-- ERROR
DROP FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- ERROR
GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_role
RESULT: []

-----------
QUERY:
-- ERROR
CREATE SERVER s9 FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- ERROR
ALTER SERVER s4 VERSION '0.5'
RESULT: []

-----------
QUERY:
-- ERROR
ALTER SERVER s4 OWNER TO regress_unprivileged_role
RESULT: []

-----------
QUERY:
-- ERROR
DROP SERVER s4
RESULT: []

-----------
QUERY:
-- ERROR
GRANT USAGE ON FOREIGN SERVER s4 TO regress_test_role
RESULT: []

-----------
QUERY:
-- ERROR
CREATE USER MAPPING FOR public SERVER s4
RESULT: []

-----------
QUERY:
-- ERROR
ALTER USER MAPPING FOR regress_test_role SERVER s6 OPTIONS (gotcha 'true')
RESULT: []

-----------
QUERY:
-- ERROR
DROP USER MAPPING FOR regress_test_role SERVER s6
RESULT: []

-----------
QUERY:
-- ERROR
RESET ROLE
RESULT: []

-----------
QUERY:
GRANT USAGE ON FOREIGN DATA WRAPPER postgresql TO regress_unprivileged_role
RESULT: []

-----------
QUERY:
GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_unprivileged_role WITH GRANT OPTION
RESULT: []

-----------
QUERY:
SET ROLE regress_unprivileged_role
RESULT: []

-----------
QUERY:
CREATE FOREIGN DATA WRAPPER foobar
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN DATA WRAPPER foo OPTIONS (gotcha 'true')
RESULT: []

-----------
QUERY:
-- ERROR
DROP FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- ERROR
GRANT USAGE ON FOREIGN DATA WRAPPER postgresql TO regress_test_role
RESULT: []

-----------
QUERY:
-- WARNING
GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_role
RESULT: []

-----------
QUERY:
CREATE SERVER s9 FOREIGN DATA WRAPPER postgresql
RESULT: []

-----------
QUERY:
ALTER SERVER s6 VERSION '0.5'
RESULT: []

-----------
QUERY:
-- ERROR
DROP SERVER s6
RESULT: []

-----------
QUERY:
-- ERROR
GRANT USAGE ON FOREIGN SERVER s6 TO regress_test_role
RESULT: []

-----------
QUERY:
-- ERROR
GRANT USAGE ON FOREIGN SERVER s9 TO regress_test_role
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR public SERVER s6
RESULT: []

-----------
QUERY:
-- ERROR
CREATE USER MAPPING FOR public SERVER s9
RESULT: []

-----------
QUERY:
ALTER USER MAPPING FOR regress_test_role SERVER s6 OPTIONS (gotcha 'true')
RESULT: []

-----------
QUERY:
-- ERROR
DROP USER MAPPING FOR regress_test_role SERVER s6
RESULT: []

-----------
QUERY:
-- ERROR
RESET ROLE
RESULT: []

-----------
QUERY:
REVOKE USAGE ON FOREIGN DATA WRAPPER foo FROM regress_unprivileged_role
RESULT: []

-----------
QUERY:
-- ERROR
REVOKE USAGE ON FOREIGN DATA WRAPPER foo FROM regress_unprivileged_role CASCADE
RESULT: []

-----------
QUERY:
SET ROLE regress_unprivileged_role
RESULT: []

-----------
QUERY:
GRANT USAGE ON FOREIGN DATA WRAPPER foo TO regress_test_role
RESULT: []

-----------
QUERY:
-- ERROR
CREATE SERVER s10 FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
-- ERROR
ALTER SERVER s9 VERSION '1.1'
RESULT: []

-----------
QUERY:
GRANT USAGE ON FOREIGN SERVER s9 TO regress_test_role
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR current_user SERVER s9
RESULT: []

-----------
QUERY:
DROP SERVER s9 CASCADE
RESULT: []

-----------
QUERY:
RESET ROLE
RESULT: []

-----------
QUERY:
CREATE SERVER s9 FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
GRANT USAGE ON FOREIGN SERVER s9 TO regress_unprivileged_role
RESULT: []

-----------
QUERY:
SET ROLE regress_unprivileged_role
RESULT: []

-----------
QUERY:
ALTER SERVER s9 VERSION '1.2'
RESULT: []

-----------
QUERY:
-- ERROR
GRANT USAGE ON FOREIGN SERVER s9 TO regress_test_role
RESULT: []

-----------
QUERY:
-- WARNING
CREATE USER MAPPING FOR current_user SERVER s9
RESULT: []

-----------
QUERY:
DROP SERVER s9 CASCADE
RESULT: []

-----------
QUERY:
-- ERROR

-- Check visibility of user mapping data
SET ROLE regress_test_role
RESULT: []

-----------
QUERY:
CREATE SERVER s10 FOREIGN DATA WRAPPER foo
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR public SERVER s10 OPTIONS (user 'secret')
RESULT: []

-----------
QUERY:
CREATE USER MAPPING FOR regress_unprivileged_role SERVER s10 OPTIONS (user 'secret')
RESULT: []

-----------
QUERY:
-- owner of server can see some option fields
-- \deu+
RESET ROLE
RESULT: []

-----------
QUERY:
-- superuser can see all option fields
-- \deu+
-- unprivileged user cannot see any option field
SET ROLE regress_unprivileged_role
RESULT: []

-----------
QUERY:
-- \deu+
RESET ROLE
RESULT: []

-----------
QUERY:
DROP SERVER s10 CASCADE
RESULT: []

-----------
QUERY:
-- Triggers
CREATE FUNCTION dummy_trigger() RETURNS TRIGGER AS $$
  BEGIN
    RETURN NULL;
  END
$$ language plpgsql
RESULT: []

-----------
QUERY:
CREATE TRIGGER trigtest_before_stmt BEFORE INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH STATEMENT
EXECUTE PROCEDURE dummy_trigger()
RESULT: []

-----------
QUERY:
CREATE TRIGGER trigtest_after_stmt AFTER INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH STATEMENT
EXECUTE PROCEDURE dummy_trigger()
RESULT: []

-----------
QUERY:
CREATE TRIGGER trigtest_after_stmt_tt AFTER INSERT OR UPDATE OR DELETE -- ERROR
ON foreign_schema.foreign_table_1
REFERENCING NEW TABLE AS new_table
FOR EACH STATEMENT
EXECUTE PROCEDURE dummy_trigger()
RESULT: []

-----------
QUERY:
CREATE TRIGGER trigtest_before_row BEFORE INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH ROW
EXECUTE PROCEDURE dummy_trigger()
RESULT: []

-----------
QUERY:
CREATE TRIGGER trigtest_after_row AFTER INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH ROW
EXECUTE PROCEDURE dummy_trigger()
RESULT: []

-----------
QUERY:
CREATE CONSTRAINT TRIGGER trigtest_constraint AFTER INSERT OR UPDATE OR DELETE
ON foreign_schema.foreign_table_1
FOR EACH ROW
EXECUTE PROCEDURE dummy_trigger()
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE foreign_schema.foreign_table_1
	DISABLE TRIGGER trigtest_before_stmt
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE foreign_schema.foreign_table_1
	ENABLE TRIGGER trigtest_before_stmt
RESULT: []

-----------
QUERY:
DROP TRIGGER trigtest_before_stmt ON foreign_schema.foreign_table_1
RESULT: []

-----------
QUERY:
DROP TRIGGER trigtest_before_row ON foreign_schema.foreign_table_1
RESULT: []

-----------
QUERY:
DROP TRIGGER trigtest_after_stmt ON foreign_schema.foreign_table_1
RESULT: []

-----------
QUERY:
DROP TRIGGER trigtest_after_row ON foreign_schema.foreign_table_1
RESULT: []

-----------
QUERY:
DROP FUNCTION dummy_trigger()
RESULT: []

-----------
QUERY:
-- Table inheritance
CREATE TABLE fd_pt1 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
)
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft2 () INHERITS (fd_pt1)
  SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
RESULT: []

-----------
QUERY:
-- \d+ fd_pt1
-- \d+ ft2
DROP FOREIGN TABLE ft2
RESULT: []

-----------
QUERY:
-- \d+ fd_pt1
CREATE FOREIGN TABLE ft2 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
RESULT: []

-----------
QUERY:
-- \d+ ft2
ALTER FOREIGN TABLE ft2 INHERIT fd_pt1
RESULT: []

-----------
QUERY:
-- \d+ fd_pt1
-- \d+ ft2
CREATE TABLE ct3() INHERITS(ft2)
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft3 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
) INHERITS(ft2)
  SERVER s0
RESULT: []

-----------
QUERY:
-- \d+ ft2
-- \d+ ct3
-- \d+ ft3

-- add attributes recursively
ALTER TABLE fd_pt1 ADD COLUMN c4 integer
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ADD COLUMN c5 integer DEFAULT 0
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ADD COLUMN c6 integer
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ADD COLUMN c7 integer NOT NULL
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ADD COLUMN c8 integer
RESULT: []

-----------
QUERY:
-- \d+ fd_pt1
-- \d+ ft2
-- \d+ ct3
-- \d+ ft3

-- alter attributes recursively
ALTER TABLE fd_pt1 ALTER COLUMN c4 SET DEFAULT 0
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ALTER COLUMN c5 DROP DEFAULT
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ALTER COLUMN c6 SET NOT NULL
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ALTER COLUMN c7 DROP NOT NULL
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ALTER COLUMN c8 TYPE char(10) USING '0'
RESULT: []

-----------
QUERY:
-- ERROR
ALTER TABLE fd_pt1 ALTER COLUMN c8 TYPE char(10)
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ALTER COLUMN c8 SET DATA TYPE text
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ALTER COLUMN c1 SET STATISTICS 10000
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ALTER COLUMN c1 SET (n_distinct = 100)
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ALTER COLUMN c8 SET STATISTICS -1
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ALTER COLUMN c8 SET STORAGE EXTERNAL
RESULT: []

-----------
QUERY:
-- \d+ fd_pt1
-- \d+ ft2

-- drop attributes recursively
ALTER TABLE fd_pt1 DROP COLUMN c4
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 DROP COLUMN c5
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 DROP COLUMN c6
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 DROP COLUMN c7
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 DROP COLUMN c8
RESULT: []

-----------
QUERY:
-- \d+ fd_pt1
-- \d+ ft2

-- add constraints recursively
ALTER TABLE fd_pt1 ADD CONSTRAINT fd_pt1chk1 CHECK (c1 > 0) NO INHERIT
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ADD CONSTRAINT fd_pt1chk2 CHECK (c2 <> '')
RESULT: []

-----------
QUERY:
-- connoinherit should be true for NO INHERIT constraint
SELECT relname, conname, contype, conislocal, coninhcount, connoinherit
  FROM pg_class AS pc JOIN pg_constraint AS pgc ON (conrelid = pc.oid)
  WHERE pc.relname = 'fd_pt1'
  ORDER BY 1,2
RESULT: []

-----------
QUERY:
-- child does not inherit NO INHERIT constraints
-- \d+ fd_pt1
-- \d+ ft2
DROP FOREIGN TABLE ft2
RESULT: []

-----------
QUERY:
-- ERROR
DROP FOREIGN TABLE ft2 CASCADE
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE ft2 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
RESULT: []

-----------
QUERY:
-- child must have parent/* REPLACED */''s INHERIT constraints
ALTER FOREIGN TABLE ft2 INHERIT fd_pt1
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN TABLE ft2 ADD CONSTRAINT fd_pt1chk2 CHECK (c2 <> '')
RESULT: []

-----------
QUERY:
ALTER FOREIGN TABLE ft2 INHERIT fd_pt1
RESULT: []

-----------
QUERY:
-- child does not inherit NO INHERIT constraints
-- \d+ fd_pt1
-- \d+ ft2

-- drop constraints recursively
ALTER TABLE fd_pt1 DROP CONSTRAINT fd_pt1chk1 CASCADE
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 DROP CONSTRAINT fd_pt1chk2 CASCADE
RESULT: []

-----------
QUERY:
-- NOT VALID case
INSERT INTO fd_pt1 VALUES (1, 'fd_pt1'::text, '1994-01-01'::date)
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 ADD CONSTRAINT fd_pt1chk3 CHECK (c2 <> '') NOT VALID
RESULT: []

-----------
QUERY:
-- \d+ fd_pt1
-- \d+ ft2
-- VALIDATE CONSTRAINT need do nothing on foreign tables
ALTER TABLE fd_pt1 VALIDATE CONSTRAINT fd_pt1chk3
RESULT: []

-----------
QUERY:
-- \d+ fd_pt1
-- \d+ ft2

-- changes name of an attribute recursively
ALTER TABLE fd_pt1 RENAME COLUMN c1 TO f1
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 RENAME COLUMN c2 TO f2
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt1 RENAME COLUMN c3 TO f3
RESULT: []

-----------
QUERY:
-- changes name of a constraint recursively
ALTER TABLE fd_pt1 RENAME CONSTRAINT fd_pt1chk3 TO f2_check
RESULT: []

-----------
QUERY:
-- \d+ fd_pt1
-- \d+ ft2

DROP TABLE fd_pt1 CASCADE
RESULT: []

-----------
QUERY:
-- IMPORT FOREIGN SCHEMA
IMPORT FOREIGN SCHEMA s1 FROM SERVER s9 INTO public
RESULT: []

-----------
QUERY:
-- ERROR
IMPORT FOREIGN SCHEMA s1 LIMIT TO (t1) FROM SERVER s9 INTO public
RESULT: []

-----------
QUERY:
--ERROR
IMPORT FOREIGN SCHEMA s1 EXCEPT (t1) FROM SERVER s9 INTO public
RESULT: []

-----------
QUERY:
-- ERROR
IMPORT FOREIGN SCHEMA s1 EXCEPT (t1, t2) FROM SERVER s9 INTO public
OPTIONS (option1 'value1', option2 'value2')
RESULT: []

-----------
QUERY:
-- ERROR

-- DROP FOREIGN TABLE
DROP FOREIGN TABLE no_table
RESULT: []

-----------
QUERY:
-- ERROR
DROP FOREIGN TABLE IF EXISTS no_table
RESULT: []

-----------
QUERY:
DROP FOREIGN TABLE foreign_schema.foreign_table_1
RESULT: []

-----------
QUERY:
-- REASSIGN OWNED/DROP OWNED of foreign objects
REASSIGN OWNED BY regress_test_role TO regress_test_role2
RESULT: []

-----------
QUERY:
DROP OWNED BY regress_test_role2
RESULT: []

-----------
QUERY:
DROP OWNED BY regress_test_role2 CASCADE
RESULT: []

-----------
QUERY:
-- Foreign partition DDL stuff
CREATE TABLE fd_pt2 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
) PARTITION BY LIST (c1)
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE fd_pt2_1 PARTITION OF fd_pt2 FOR VALUES IN (1)
  SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
RESULT: []

-----------
QUERY:
-- \d+ fd_pt2
-- \d+ fd_pt2_1

-- partition cannot have additional columns
DROP FOREIGN TABLE fd_pt2_1
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE fd_pt2_1 (
	c1 integer NOT NULL,
	c2 text,
	c3 date,
	c4 char
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
RESULT: []

-----------
QUERY:
-- \d+ fd_pt2_1
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)
RESULT: []

-----------
QUERY:
-- ERROR

DROP FOREIGN TABLE fd_pt2_1
RESULT: []

-----------
QUERY:
-- \d+ fd_pt2
CREATE FOREIGN TABLE fd_pt2_1 (
	c1 integer NOT NULL,
	c2 text,
	c3 date
) SERVER s0 OPTIONS (delimiter ',', quote '"', "be quoted" 'value')
RESULT: []

-----------
QUERY:
-- \d+ fd_pt2_1
-- no attach partition validation occurs for foreign tables
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)
RESULT: []

-----------
QUERY:
-- \d+ fd_pt2
-- \d+ fd_pt2_1

-- cannot add column to a partition
ALTER TABLE fd_pt2_1 ADD c4 char
RESULT: []

-----------
QUERY:
-- ok to have a partition/* REPLACED */''s own constraints though
ALTER TABLE fd_pt2_1 ALTER c3 SET NOT NULL
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt2_1 ADD CONSTRAINT p21chk CHECK (c2 <> '')
RESULT: []

-----------
QUERY:
-- \d+ fd_pt2
-- \d+ fd_pt2_1

-- cannot drop inherited NOT NULL constraint from a partition
ALTER TABLE fd_pt2_1 ALTER c1 DROP NOT NULL
RESULT: []

-----------
QUERY:
-- partition must have parent/* REPLACED */''s constraints
ALTER TABLE fd_pt2 DETACH PARTITION fd_pt2_1
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt2 ALTER c2 SET NOT NULL
RESULT: []

-----------
QUERY:
-- \d+ fd_pt2
-- \d+ fd_pt2_1
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN TABLE fd_pt2_1 ALTER c2 SET NOT NULL
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt2 DETACH PARTITION fd_pt2_1
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt2 ADD CONSTRAINT fd_pt2chk1 CHECK (c1 > 0)
RESULT: []

-----------
QUERY:
-- \d+ fd_pt2
-- \d+ fd_pt2_1
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)
RESULT: []

-----------
QUERY:
-- ERROR
ALTER FOREIGN TABLE fd_pt2_1 ADD CONSTRAINT fd_pt2chk1 CHECK (c1 > 0)
RESULT: []

-----------
QUERY:
ALTER TABLE fd_pt2 ATTACH PARTITION fd_pt2_1 FOR VALUES IN (1)
RESULT: []

-----------
QUERY:
DROP FOREIGN TABLE fd_pt2_1
RESULT: []

-----------
QUERY:
DROP TABLE fd_pt2
RESULT: []

-----------
QUERY:
-- foreign table cannot be part of partition tree made of temporary
-- relations.
CREATE TEMP TABLE temp_parted (a int) PARTITION BY LIST (a)
RESULT: []

-----------
QUERY:
CREATE FOREIGN TABLE foreign_part PARTITION OF temp_parted DEFAULT
  SERVER s0
RESULT: []

-----------
QUERY:
-- ERROR
CREATE FOREIGN TABLE foreign_part (a int) SERVER s0
RESULT: []

-----------
QUERY:
ALTER TABLE temp_parted ATTACH PARTITION foreign_part DEFAULT
RESULT: []

-----------
QUERY:
-- ERROR
DROP FOREIGN TABLE foreign_part
RESULT: []

-----------
QUERY:
DROP TABLE temp_parted
RESULT: []

-----------
QUERY:
-- Cleanup
DROP SCHEMA foreign_schema CASCADE
RESULT: []

-----------
QUERY:
DROP ROLE regress_test_role
RESULT: []

-----------
QUERY:
-- ERROR
DROP SERVER t1 CASCADE
RESULT: []

-----------
QUERY:
DROP USER MAPPING FOR regress_test_role SERVER s6
RESULT: []

-----------
QUERY:
DROP FOREIGN DATA WRAPPER foo CASCADE
RESULT: []

-----------
QUERY:
DROP SERVER s8 CASCADE
RESULT: []

-----------
QUERY:
DROP ROLE regress_test_indirect
RESULT: []

-----------
QUERY:
DROP ROLE regress_test_role
RESULT: []

-----------
QUERY:
DROP ROLE regress_unprivileged_role
RESULT: []

-----------
QUERY:
-- ERROR
REVOKE ALL ON FOREIGN DATA WRAPPER postgresql FROM regress_unprivileged_role
RESULT: []

-----------
QUERY:
DROP ROLE regress_unprivileged_role
RESULT: []

-----------
QUERY:
DROP ROLE regress_test_role2
RESULT: []

-----------
QUERY:
DROP FOREIGN DATA WRAPPER postgresql CASCADE
RESULT: []

-----------
QUERY:
DROP FOREIGN DATA WRAPPER dummy CASCADE
RESULT: []

-----------
QUERY:
\c
DROP ROLE regress_foreign_data_user
RESULT: []

-----------
QUERY:
-- At this point we should have no wrappers, no servers, and no mappings.
SELECT fdwname, fdwhandler, fdwvalidator, fdwoptions FROM pg_foreign_data_wrapper
RESULT: []

-----------
QUERY:
SELECT srvname, srvoptions FROM pg_foreign_server
RESULT: []

-----------
QUERY:
SELECT * FROM pg_user_mapping
RESULT: []
=========================================
Summary for test case foreign_data/test.sql of postgres
=========================================
