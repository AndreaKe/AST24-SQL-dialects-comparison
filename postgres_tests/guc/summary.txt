Guest DBMS identified: postgres
-----------
QUERY:
-- pg_regress should ensure that this default value applies /* REPLACED */, however
-- we can/* REPLACED */''t rely on any specific default value of vacuum_cost_delay
SHOW datestyle
RESULT: []

-----------
QUERY:
-- SET to some nondefault value
SET vacuum_cost_delay TO 40
RESULT: []

-----------
QUERY:
SET datestyle = 'ISO, YMD'
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
-- SET LOCAL has no effect outside of a transaction
SET LOCAL vacuum_cost_delay TO 50
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SET LOCAL datestyle = 'SQL'
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
-- SET LOCAL within a transaction that commits
BEGIN
RESULT: []

-----------
QUERY:
SET LOCAL vacuum_cost_delay TO 50
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SET LOCAL datestyle = 'SQL'
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
-- SET should be reverted after ROLLBACK
BEGIN
RESULT: []

-----------
QUERY:
SET vacuum_cost_delay TO 60
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SET datestyle = 'German'
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
ROLLBACK
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
-- Some tests with subtransactions
BEGIN
RESULT: []

-----------
QUERY:
SET vacuum_cost_delay TO 70
RESULT: []

-----------
QUERY:
SET datestyle = 'MDY'
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
SAVEPOINT first_sp
RESULT: []

-----------
QUERY:
SET vacuum_cost_delay TO 80.1
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SET datestyle = 'German, DMY'
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
ROLLBACK TO first_sp
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
SAVEPOINT second_sp
RESULT: []

-----------
QUERY:
SET vacuum_cost_delay TO '900us'
RESULT: []

-----------
QUERY:
SET datestyle = 'SQL, YMD'
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
SAVEPOINT third_sp
RESULT: []

-----------
QUERY:
SET vacuum_cost_delay TO 100
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SET datestyle = 'Postgres, MDY'
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
ROLLBACK TO third_sp
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
ROLLBACK TO second_sp
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
ROLLBACK
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
-- SET LOCAL with Savepoints
BEGIN
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
SAVEPOINT sp
RESULT: []

-----------
QUERY:
SET LOCAL vacuum_cost_delay TO 30
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SET LOCAL datestyle = 'Postgres, MDY'
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
ROLLBACK TO sp
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
ROLLBACK
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
-- SET LOCAL persists through RELEASE (which was not true in 8.0-8.2)
BEGIN
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
SAVEPOINT sp
RESULT: []

-----------
QUERY:
SET LOCAL vacuum_cost_delay TO 30
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SET LOCAL datestyle = 'Postgres, MDY'
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
RELEASE SAVEPOINT sp
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
ROLLBACK
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
-- SET followed by SET LOCAL
BEGIN
RESULT: []

-----------
QUERY:
SET vacuum_cost_delay TO 40
RESULT: []

-----------
QUERY:
SET LOCAL vacuum_cost_delay TO 50
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SET datestyle = 'ISO, DMY'
RESULT: []

-----------
QUERY:
SET LOCAL datestyle = 'Postgres, MDY'
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
--
-- Test RESET.  We use datestyle because the reset value is forced by
-- pg_regress, so it doesn/* REPLACED */''t depend on the installation/* REPLACED */''s configuration.
--
SET datestyle = iso, ymd
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
RESET datestyle
RESULT: []

-----------
QUERY:
SHOW datestyle
RESULT: []

-----------
QUERY:
SELECT '2006-08-13 12:34:56'::timestamptz
RESULT: []

-----------
QUERY:
-- Test some simple error cases
SET seq_page_cost TO 'NaN'
RESULT: []

-----------
QUERY:
SET vacuum_cost_delay TO '10s'
RESULT: []

-----------
QUERY:
SET no_such_variable TO 42
RESULT: []

-----------
QUERY:
-- Test /* REPLACED */''custom/* REPLACED */'' GUCs created on the fly (which aren/* REPLACED */''t really an
-- intended feature, but many people use them).
SHOW custom.my_guc
RESULT: []

-----------
QUERY:
-- error, not known yet
SET custom.my_guc = 42
RESULT: []

-----------
QUERY:
SHOW custom.my_guc
RESULT: []

-----------
QUERY:
RESET custom.my_guc
RESULT: []

-----------
QUERY:
-- this makes it go to empty, not become unknown again
SHOW custom.my_guc
RESULT: []

-----------
QUERY:
SET custom.my.qualified.guc = 'foo'
RESULT: []

-----------
QUERY:
SHOW custom.my.qualified.guc
RESULT: []

-----------
QUERY:
SET custom."bad-guc" = 42
RESULT: []

-----------
QUERY:
-- disallowed because -c cannot set this name
SHOW custom."bad-guc"
RESULT: []

-----------
QUERY:
SET special."weird name" = 'foo'
RESULT: []

-----------
QUERY:
-- could be allowed, but we choose not to
SHOW special."weird name"
RESULT: []

-----------
QUERY:
-- Check what happens when you try to set a /* REPLACED */''custom/* REPLACED */'' GUC within the
-- namespace of an extension.
SET plpgsql.extra_foo_warnings = true
RESULT: []

-----------
QUERY:
-- allowed if plpgsql is not loaded yet
LOAD 'plpgsql'
RESULT: []

-----------
QUERY:
-- this will throw a warning and delete the variable
SET plpgsql.extra_foo_warnings = true
RESULT: []

-----------
QUERY:
-- now, it/* REPLACED */''s an error
SHOW plpgsql.extra_foo_warnings
RESULT: []

-----------
QUERY:
--
-- Test DISCARD TEMP
--
CREATE TEMP TABLE reset_test ( data text ) ON COMMIT DELETE ROWS
RESULT: []

-----------
QUERY:
SELECT relname FROM pg_class WHERE relname = 'reset_test'
RESULT: []

-----------
QUERY:
DISCARD TEMP
RESULT: []

-----------
QUERY:
SELECT relname FROM pg_class WHERE relname = 'reset_test'
RESULT: []

-----------
QUERY:
--
-- Test DISCARD ALL
--

-- do changes
DECLARE foo CURSOR WITH HOLD FOR SELECT 1
RESULT: []

-----------
QUERY:
PREPARE foo AS SELECT 1
RESULT: []

-----------
QUERY:
LISTEN foo_event
RESULT: []

-----------
QUERY:
SET vacuum_cost_delay = 13
RESULT: []

-----------
QUERY:
CREATE TEMP TABLE tmp_foo (data text) ON COMMIT DELETE ROWS
RESULT: []

-----------
QUERY:
CREATE ROLE regress_guc_user
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION regress_guc_user
RESULT: []

-----------
QUERY:
-- look changes
SELECT pg_listening_channels()
RESULT: []

-----------
QUERY:
SELECT name FROM pg_prepared_statements
RESULT: []

-----------
QUERY:
SELECT name FROM pg_cursors
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SELECT relname from pg_class where relname = 'tmp_foo'
RESULT: []

-----------
QUERY:
SELECT current_user = 'regress_guc_user'
RESULT: []

-----------
QUERY:
-- discard everything
DISCARD ALL
RESULT: []

-----------
QUERY:
-- look again
SELECT pg_listening_channels()
RESULT: []

-----------
QUERY:
SELECT name FROM pg_prepared_statements
RESULT: []

-----------
QUERY:
SELECT name FROM pg_cursors
RESULT: []

-----------
QUERY:
SHOW vacuum_cost_delay
RESULT: []

-----------
QUERY:
SELECT relname from pg_class where relname = 'tmp_foo'
RESULT: []

-----------
QUERY:
SELECT current_user = 'regress_guc_user'
RESULT: []

-----------
QUERY:
DROP ROLE regress_guc_user
RESULT: []

-----------
QUERY:
--
-- search_path should react to changes in pg_namespace
--

set search_path = foo, public, not_there_initially
RESULT: []

-----------
QUERY:
select current_schemas(false)
RESULT: []

-----------
QUERY:
create schema not_there_initially
RESULT: []

-----------
QUERY:
select current_schemas(false)
RESULT: []

-----------
QUERY:
drop schema not_there_initially
RESULT: []

-----------
QUERY:
select current_schemas(false)
RESULT: []

-----------
QUERY:
reset search_path
RESULT: []

-----------
QUERY:
--
-- Tests for function-local GUC settings
--

set work_mem = '3MB'
RESULT: []

-----------
QUERY:
create function report_guc(text) returns text as
$$ select current_setting($1) $$ language sql
set work_mem = '1MB'
RESULT: []

-----------
QUERY:
select report_guc('work_mem'), current_setting('work_mem')
RESULT: []

-----------
QUERY:
alter function report_guc(text) set work_mem = '2MB'
RESULT: []

-----------
QUERY:
select report_guc('work_mem'), current_setting('work_mem')
RESULT: []

-----------
QUERY:
alter function report_guc(text) reset all
RESULT: []

-----------
QUERY:
select report_guc('work_mem'), current_setting('work_mem')
RESULT: []

-----------
QUERY:
-- SET LOCAL is restricted by a function SET option
create or replace function myfunc(int) returns text as $$
begin
  set local work_mem = '2MB';
  return current_setting('work_mem');
end $$
language plpgsql
set work_mem = '1MB'
RESULT: []

-----------
QUERY:
select myfunc(0), current_setting('work_mem')
RESULT: []

-----------
QUERY:
alter function myfunc(int) reset all
RESULT: []

-----------
QUERY:
select myfunc(0), current_setting('work_mem')
RESULT: []

-----------
QUERY:
set work_mem = '3MB'
RESULT: []

-----------
QUERY:
-- but SET isn/* REPLACED */''t
create or replace function myfunc(int) returns text as $$
begin
  set work_mem = '2MB';
  return current_setting('work_mem');
end $$
language plpgsql
set work_mem = '1MB'
RESULT: []

-----------
QUERY:
select myfunc(0), current_setting('work_mem')
RESULT: []

-----------
QUERY:
set work_mem = '3MB'
RESULT: []

-----------
QUERY:
-- it should roll back on error, though
create or replace function myfunc(int) returns text as $$
begin
  set work_mem = '2MB';
  perform 1/$1;
  return current_setting('work_mem');
end $$
language plpgsql
set work_mem = '1MB'
RESULT: []

-----------
QUERY:
select myfunc(0)
RESULT: []

-----------
QUERY:
select current_setting('work_mem')
RESULT: []

-----------
QUERY:
select myfunc(1), current_setting('work_mem')
RESULT: []

-----------
QUERY:
-- check current_setting()/* REPLACED */''s behavior with invalid setting name

select current_setting('nosuch.setting')
RESULT: []

-----------
QUERY:
-- FAIL
select current_setting('nosuch.setting', false)
RESULT: []

-----------
QUERY:
-- FAIL
select current_setting('nosuch.setting', true) is null
RESULT: []

-----------
QUERY:
-- after this, all three cases should yield /* REPLACED */''nada/* REPLACED */''
set nosuch.setting = 'nada'
RESULT: []

-----------
QUERY:
select current_setting('nosuch.setting')
RESULT: []

-----------
QUERY:
select current_setting('nosuch.setting', false)
RESULT: []

-----------
QUERY:
select current_setting('nosuch.setting', true)
RESULT: []

-----------
QUERY:
-- Normally, CREATE FUNCTION should complain about invalid values in
-- function SET options /* REPLACED */, but not if check_function_bodies is off,
-- because that creates ordering hazards for pg_dump

create function func_with_bad_set() returns int as $$ select 1 $$
language sql
set default_text_search_config = no_such_config
RESULT: []

-----------
QUERY:
set check_function_bodies = off
RESULT: []

-----------
QUERY:
create function func_with_bad_set() returns int as $$ select 1 $$
language sql
set default_text_search_config = no_such_config
RESULT: []

-----------
QUERY:
select func_with_bad_set()
RESULT: []

-----------
QUERY:
reset check_function_bodies
RESULT: []

-----------
QUERY:
set default_with_oids to f
RESULT: []

-----------
QUERY:
-- Should not allow to set it to true.
set default_with_oids to t
RESULT: []

-----------
QUERY:
-- Test GUC categories and flag patterns
SELECT pg_settings_get_flags(NULL)
RESULT: []

-----------
QUERY:
SELECT pg_settings_get_flags('does_not_exist')
RESULT: []

-----------
QUERY:
CREATE TABLE tab_settings_flags AS SELECT name, category,
    'EXPLAIN'          = ANY(flags) AS explain,
    'NO_RESET'         = ANY(flags) AS no_reset,
    'NO_RESET_ALL'     = ANY(flags) AS no_reset_all,
    'NOT_IN_SAMPLE'    = ANY(flags) AS not_in_sample,
    'RUNTIME_COMPUTED' = ANY(flags) AS runtime_computed
  FROM pg_show_all_settings() AS psas,
    pg_settings_get_flags(psas.name) AS flags
RESULT: []

-----------
QUERY:
-- Developer GUCs should be flagged with GUC_NOT_IN_SAMPLE:
SELECT name FROM tab_settings_flags
  WHERE category = 'Developer Options' AND NOT not_in_sample
  ORDER BY 1
RESULT: []

-----------
QUERY:
-- Most query-tuning GUCs are flagged as valid for EXPLAIN.
-- default_statistics_target is an exception.
SELECT name FROM tab_settings_flags
  WHERE category ~ '^Query Tuning' AND NOT explain
  ORDER BY 1
RESULT: []

-----------
QUERY:
-- Runtime-computed GUCs should be part of the preset category.
SELECT name FROM tab_settings_flags
  WHERE NOT category = 'Preset Options' AND runtime_computed
  ORDER BY 1
RESULT: []

-----------
QUERY:
-- Preset GUCs are flagged as NOT_IN_SAMPLE.
SELECT name FROM tab_settings_flags
  WHERE category = 'Preset Options' AND NOT not_in_sample
  ORDER BY 1
RESULT: []

-----------
QUERY:
-- NO_RESET implies NO_RESET_ALL.
SELECT name FROM tab_settings_flags
  WHERE no_reset AND NOT no_reset_all
  ORDER BY 1
RESULT: []

-----------
QUERY:
DROP TABLE tab_settings_flags
RESULT: []
=========================================
Summary for test case guc/test.sql of postgres
=========================================
