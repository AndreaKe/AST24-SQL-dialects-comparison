
-----------
QUERY:
--
-- HASH_INDEX
--

-- directory paths are passed to us in environment variables
-- \getenv abs_srcdir '/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests'

CREATE TABLE hash_i4_heap (
	seqno 		int4,
	random 		int4
);
RESULT:
	postgres: None

-----------
QUERY:


CREATE TABLE hash_name_heap (
	seqno 		int4,
	random 		name
);
RESULT:
	postgres: None

-----------
QUERY:


CREATE TABLE hash_txt_heap (
	seqno 		int4,
	random 		text
);
RESULT:
	postgres: None

-----------
QUERY:


CREATE TABLE hash_f8_heap (
	seqno		int4,
	random 		float8
);
RESULT:
	postgres: None

-----------
QUERY:


-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' '/data/hash.data'
COPY hash_i4_heap FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/hash.data';
RESULT:
	postgres: None

-----------
QUERY:

COPY hash_name_heap FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/hash.data';
RESULT:
	postgres: None

-----------
QUERY:

COPY hash_txt_heap FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/hash.data';
RESULT:
	postgres: None

-----------
QUERY:

COPY hash_f8_heap FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/hash.data';
RESULT:
	postgres: None

-----------
QUERY:


-- the data in this file has a lot of duplicates in the index key
-- fields, leading to long bucket chains and lots of table expansion.
-- this is therefore a stress test of the bucket overflow code (unlike
-- the data in hash.data, which has unique index keys).
--
-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' /* REPLACED */''/data/hashovfl.data/* REPLACED */''
-- COPY hash_ovfl_heap FROM :/* REPLACED */''filename/* REPLACED */'' /* REPLACED */,

ANALYZE hash_i4_heap;
RESULT:
	postgres: None

-----------
QUERY:

ANALYZE hash_name_heap;
RESULT:
	postgres: None

-----------
QUERY:

ANALYZE hash_txt_heap;
RESULT:
	postgres: None

-----------
QUERY:

ANALYZE hash_f8_heap;
RESULT:
	postgres: None

-----------
QUERY:


CREATE INDEX hash_i4_index ON hash_i4_heap USING hash (random int4_ops);
RESULT:
	postgres: None

-----------
QUERY:


CREATE INDEX hash_name_index ON hash_name_heap USING hash (random name_ops);
RESULT:
	postgres: None

-----------
QUERY:


CREATE INDEX hash_txt_index ON hash_txt_heap USING hash (random text_ops);
RESULT:
	postgres: None

-----------
QUERY:


CREATE INDEX hash_f8_index ON hash_f8_heap USING hash (random float8_ops)
  WITH (fillfactor=60);
RESULT:
	postgres: None

-----------
QUERY:


--
-- Also try building functional, expressional, and partial indexes on
-- tables that already contain data.
--
create unique index hash_f8_index_1 on hash_f8_heap(abs(random));
RESULT:
	postgres: None

-----------
QUERY:

create unique index hash_f8_index_2 on hash_f8_heap((seqno + 1), random);
RESULT:
	postgres: None

-----------
QUERY:

create unique index hash_f8_index_3 on hash_f8_heap(random) where seqno > 1000;
RESULT:
	postgres: None

-----------
QUERY:


--
-- hash index
-- grep 843938989 hash.data
--
SELECT * FROM hash_i4_heap
   WHERE hash_i4_heap.random = 843938989;
RESULT:
	postgres: [(15, 843938989)]

-----------
QUERY:


--
-- hash index
-- grep 66766766 hash.data
--
SELECT * FROM hash_i4_heap
   WHERE hash_i4_heap.random = 66766766;
RESULT:
	postgres: []

-----------
QUERY:


--
-- hash index
-- grep 1505703298 hash.data
--
SELECT * FROM hash_name_heap
   WHERE hash_name_heap.random = '1505703298'::name;
RESULT:
	postgres: [(9838, '1505703298')]

-----------
QUERY:


--
-- hash index
-- grep 7777777 hash.data
--
SELECT * FROM hash_name_heap
   WHERE hash_name_heap.random = '7777777'::name;
RESULT:
	postgres: []

-----------
QUERY:


--
-- hash index
-- grep 1351610853 hash.data
--
SELECT * FROM hash_txt_heap
   WHERE hash_txt_heap.random = '1351610853'::text;
RESULT:
	postgres: [(5677, '1351610853')]

-----------
QUERY:


--
-- hash index
-- grep 111111112222222233333333 hash.data
--
SELECT * FROM hash_txt_heap
   WHERE hash_txt_heap.random = '111111112222222233333333'::text;
RESULT:
	postgres: []

-----------
QUERY:


--
-- hash index
-- grep 444705537 hash.data
--
SELECT * FROM hash_f8_heap
   WHERE hash_f8_heap.random = '444705537'::float8;
RESULT:
	postgres: [(7853, 444705537.0)]

-----------
QUERY:


--
-- hash index
-- grep 88888888 hash.data
--
SELECT * FROM hash_f8_heap
   WHERE hash_f8_heap.random = '88888888'::float8;
RESULT:
	postgres: []

-----------
QUERY:


--
-- hash index
-- grep /* REPLACED */''^90[^0-9]/* REPLACED */'' hashovfl.data
--
-- SELECT count(*) AS i988 FROM hash_ovfl_heap
--    WHERE x = 90 /* REPLACED */,

--
-- hash index
-- grep /* REPLACED */''^1000[^0-9]/* REPLACED */'' hashovfl.data
--
-- SELECT count(*) AS i0 FROM hash_ovfl_heap
--    WHERE x = 1000 /* REPLACED */,

--
-- HASH
--
UPDATE hash_i4_heap
   SET random = 1
   WHERE hash_i4_heap.seqno = 1492;
RESULT:
	postgres: None

-----------
QUERY:


SELECT h.seqno AS i1492, h.random AS i1
   FROM hash_i4_heap h
   WHERE h.random = 1;
RESULT:
	postgres: [(1492, 1)]

-----------
QUERY:


UPDATE hash_i4_heap
   SET seqno = 20000
   WHERE hash_i4_heap.random = 1492795354;
RESULT:
	postgres: None

-----------
QUERY:


SELECT h.seqno AS i20000
   FROM hash_i4_heap h
   WHERE h.random = 1492795354;
RESULT:
	postgres: [(20000,)]

-----------
QUERY:


UPDATE hash_name_heap
   SET random = '0123456789abcdef'::name
   WHERE hash_name_heap.seqno = 6543;
RESULT:
	postgres: None

-----------
QUERY:


SELECT h.seqno AS i6543, h.random AS c0_to_f
   FROM hash_name_heap h
   WHERE h.random = '0123456789abcdef'::name;
RESULT:
	postgres: [(6543, '0123456789abcdef')]

-----------
QUERY:


UPDATE hash_name_heap
   SET seqno = 20000
   WHERE hash_name_heap.random = '76652222'::name;
RESULT:
	postgres: None

-----------
QUERY:


--
-- this is the row we just replaced /* REPLACED */, index scan should return zero rows
--
SELECT h.seqno AS emptyset
   FROM hash_name_heap h
   WHERE h.random = '76652222'::name;
RESULT:
	postgres: []

-----------
QUERY:


UPDATE hash_txt_heap
   SET random = '0123456789abcdefghijklmnop'::text
   WHERE hash_txt_heap.seqno = 4002;
RESULT:
	postgres: None

-----------
QUERY:


SELECT h.seqno AS i4002, h.random AS c0_to_p
   FROM hash_txt_heap h
   WHERE h.random = '0123456789abcdefghijklmnop'::text;
RESULT:
	postgres: [(4002, '0123456789abcdefghijklmnop')]

-----------
QUERY:


UPDATE hash_txt_heap
   SET seqno = 20000
   WHERE hash_txt_heap.random = '959363399'::text;
RESULT:
	postgres: None

-----------
QUERY:


SELECT h.seqno AS t20000
   FROM hash_txt_heap h
   WHERE h.random = '959363399'::text;
RESULT:
	postgres: [(20000,)]

-----------
QUERY:


UPDATE hash_f8_heap
   SET random = '-1234.1234'::float8
   WHERE hash_f8_heap.seqno = 8906;
RESULT:
	postgres: None

-----------
QUERY:


SELECT h.seqno AS i8096, h.random AS f1234_1234
   FROM hash_f8_heap h
   WHERE h.random = '-1234.1234'::float8;
RESULT:
	postgres: [(8906, -1234.1234)]

-----------
QUERY:


UPDATE hash_f8_heap
   SET seqno = 20000
   WHERE hash_f8_heap.random = '488912369'::float8;
RESULT:
	postgres: None

-----------
QUERY:


SELECT h.seqno AS f20000
   FROM hash_f8_heap h
   WHERE h.random = '488912369'::float8;
RESULT:
	postgres: [(20000,)]

-----------
QUERY:


-- UPDATE hash_ovfl_heap
--    SET x = 1000
--   WHERE x = 90 /* REPLACED */,

-- this vacuums the index as well
-- VACUUM hash_ovfl_heap /* REPLACED */,

-- SELECT count(*) AS i0 FROM hash_ovfl_heap
--   WHERE x = 90 /* REPLACED */,

-- SELECT count(*) AS i988 FROM hash_ovfl_heap
--  WHERE x = 1000 /* REPLACED */,

--
-- Cause some overflow insert and splits.
--
CREATE TABLE hash_split_heap (keycol INT);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO hash_split_heap SELECT 1 FROM generate_series(1, 500) a;
RESULT:
	postgres: None

-----------
QUERY:

CREATE INDEX hash_split_index on hash_split_heap USING HASH (keycol);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO hash_split_heap SELECT 1 FROM generate_series(1, 5000) a;
RESULT:
	postgres: None

-----------
QUERY:


-- Let/* REPLACED */''s do a backward scan.
BEGIN;
RESULT:
	postgres: None

-----------
QUERY:

SET enable_seqscan = OFF;
RESULT:
	postgres: None

-----------
QUERY:

SET enable_bitmapscan = OFF;
RESULT:
	postgres: None

-----------
QUERY:


DECLARE c CURSOR FOR SELECT * from hash_split_heap WHERE keycol = 1;
RESULT:
	postgres: None

-----------
QUERY:

MOVE FORWARD ALL FROM c;
RESULT:
	postgres: None

-----------
QUERY:

MOVE BACKWARD 10000 FROM c;
RESULT:
	postgres: None

-----------
QUERY:

MOVE BACKWARD ALL FROM c;
RESULT:
	postgres: None

-----------
QUERY:

CLOSE c;
RESULT:
	postgres: None

-----------
QUERY:

END;
RESULT:
	postgres: None

-----------
QUERY:


-- DELETE, INSERT, VACUUM.
DELETE FROM hash_split_heap WHERE keycol = 1;
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO hash_split_heap SELECT a/2 FROM generate_series(1, 25000) a;
RESULT:
	postgres: None

-----------
QUERY:


VACUUM hash_split_heap;
RESULT:
	postgres: None

-----------
QUERY:


-- Rebuild the index using a different fillfactor
ALTER INDEX hash_split_index SET (fillfactor = 10);
RESULT:
	postgres: None

-----------
QUERY:

REINDEX INDEX hash_split_index;
RESULT:
	postgres: None

-----------
QUERY:


-- Clean up.
DROP TABLE hash_split_heap;
RESULT:
	postgres: None

-----------
QUERY:


-- Testcases for removing overflow pages.
CREATE TABLE hash_cleanup_heap(keycol INT);
RESULT:
	postgres: None

-----------
QUERY:

CREATE INDEX hash_cleanup_index on hash_cleanup_heap USING HASH (keycol);
RESULT:
	postgres: None

-----------
QUERY:


-- Insert tuples to both the primary bucket page and overflow pages.
INSERT INTO hash_cleanup_heap SELECT 1 FROM generate_series(1, 500) as i;
RESULT:
	postgres: None

-----------
QUERY:


-- Fill overflow pages by /* REPLACED */''dead/* REPLACED */'' tuples.
BEGIN;
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO hash_cleanup_heap SELECT 1 FROM generate_series(1, 1000) as i;
RESULT:
	postgres: None

-----------
QUERY:

ROLLBACK;
RESULT:
	postgres: None

-----------
QUERY:


-- Checkpoint will ensure that all hash buffers are cleaned before we try
-- to remove overflow pages.
CHECKPOINT;
RESULT:
	postgres: None

-----------
QUERY:


-- This will squeeze the bucket and remove overflow pages.
VACUUM hash_cleanup_heap;
RESULT:
	postgres: None

-----------
QUERY:


TRUNCATE hash_cleanup_heap;
RESULT:
	postgres: None

-----------
QUERY:


-- Insert a few tuples so that the primary bucket page doesn/* REPLACED */''t get full and
-- tuples can be moved to it.
INSERT INTO hash_cleanup_heap SELECT 1 FROM generate_series(1, 50) as i;
RESULT:
	postgres: None

-----------
QUERY:


-- Fill overflow pages by /* REPLACED */''dead/* REPLACED */'' tuples.
BEGIN;
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO hash_cleanup_heap SELECT 1 FROM generate_series(1, 1500) as i;
RESULT:
	postgres: None

-----------
QUERY:

ROLLBACK;
RESULT:
	postgres: None

-----------
QUERY:


-- And insert some tuples again. During squeeze operation, these will be moved
-- to the primary bucket allowing to test freeing intermediate overflow pages.
INSERT INTO hash_cleanup_heap SELECT 1 FROM generate_series(1, 500) as i;
RESULT:
	postgres: None

-----------
QUERY:


CHECKPOINT;
RESULT:
	postgres: None

-----------
QUERY:

VACUUM hash_cleanup_heap;
RESULT:
	postgres: None

-----------
QUERY:


TRUNCATE hash_cleanup_heap;
RESULT:
	postgres: None

-----------
QUERY:


-- Insert tuples to both the primary bucket page and overflow pages.
INSERT INTO hash_cleanup_heap SELECT 1 FROM generate_series(1, 500) as i;
RESULT:
	postgres: None

-----------
QUERY:

-- Fill overflow pages by /* REPLACED */''dead/* REPLACED */'' tuples.
BEGIN;
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO hash_cleanup_heap SELECT 1 FROM generate_series(1, 1500) as i;
RESULT:
	postgres: None

-----------
QUERY:

ROLLBACK;
RESULT:
	postgres: None

-----------
QUERY:

-- And insert some tuples again. During squeeze operation, these will be moved
-- to other overflow pages and also allow overflow pages filled by dead tuples
-- to be freed. Note the main purpose of this test is to test the case where
-- we don/* REPLACED */''t need to move any tuple from the overflow page being freed.
INSERT INTO hash_cleanup_heap SELECT 1 FROM generate_series(1, 50) as i;
RESULT:
	postgres: None

-----------
QUERY:


CHECKPOINT;
RESULT:
	postgres: None

-----------
QUERY:

VACUUM hash_cleanup_heap;
RESULT:
	postgres: None

-----------
QUERY:


-- Clean up.
DROP TABLE hash_cleanup_heap;
RESULT:
	postgres: None

-----------
QUERY:


-- Index on temp table.
CREATE TEMP TABLE hash_temp_heap (x int, y int);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO hash_temp_heap VALUES (1,1);
RESULT:
	postgres: None

-----------
QUERY:

CREATE INDEX hash_idx ON hash_temp_heap USING hash (x);
RESULT:
	postgres: None

-----------
QUERY:

DROP TABLE hash_temp_heap CASCADE;
RESULT:
	postgres: None

-----------
QUERY:


-- Float4 type.
CREATE TABLE hash_heap_float4 (x float4, y int);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO hash_heap_float4 VALUES (1.1,1);
RESULT:
	postgres: None

-----------
QUERY:

CREATE INDEX hash_idx ON hash_heap_float4 USING hash (x);
RESULT:
	postgres: None

-----------
QUERY:

DROP TABLE hash_heap_float4 CASCADE;
RESULT:
	postgres: None

-----------
QUERY:


-- Test out-of-range fillfactor values
CREATE INDEX hash_f8_index2 ON hash_f8_heap USING hash (random float8_ops)
	WITH (fillfactor=9);
RESULT:
	postgres: value 9 out of bounds for option "fillfactor"
DETAIL:  Valid values are between "10" and "100".


-----------
QUERY:

CREATE INDEX hash_f8_index2 ON hash_f8_heap USING hash (random float8_ops)
	WITH (fillfactor=101);
RESULT:
	postgres: value 101 out of bounds for option "fillfactor"
DETAIL:  Valid values are between "10" and "100".

