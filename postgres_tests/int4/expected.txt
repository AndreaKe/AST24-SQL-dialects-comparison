
-----------
QUERY:
--
-- INT4
--

-- int4_tbl was already created and filled in test_setup.sql.
-- Here we just try to insert bad values.

INSERT INTO INT4_TBL(f1) VALUES ('34.5');
RESULT:
	postgres: invalid input syntax for type integer: "34.5"
LINE 8: INSERT INTO INT4_TBL(f1) VALUES ('34.5');
                                         ^


-----------
QUERY:

INSERT INTO INT4_TBL(f1) VALUES ('1000000000000');
RESULT:
	postgres: value "1000000000000" is out of range for type integer
LINE 2: INSERT INTO INT4_TBL(f1) VALUES ('1000000000000');
                                         ^


-----------
QUERY:

INSERT INTO INT4_TBL(f1) VALUES ('asdf');
RESULT:
	postgres: invalid input syntax for type integer: "asdf"
LINE 2: INSERT INTO INT4_TBL(f1) VALUES ('asdf');
                                         ^


-----------
QUERY:

INSERT INTO INT4_TBL(f1) VALUES ('     ');
RESULT:
	postgres: invalid input syntax for type integer: "     "
LINE 2: INSERT INTO INT4_TBL(f1) VALUES ('     ');
                                         ^


-----------
QUERY:

INSERT INTO INT4_TBL(f1) VALUES ('   asdf   ');
RESULT:
	postgres: invalid input syntax for type integer: "   asdf   "
LINE 2: INSERT INTO INT4_TBL(f1) VALUES ('   asdf   ');
                                         ^


-----------
QUERY:

INSERT INTO INT4_TBL(f1) VALUES ('- 1234');
RESULT:
	postgres: invalid input syntax for type integer: "- 1234"
LINE 2: INSERT INTO INT4_TBL(f1) VALUES ('- 1234');
                                         ^


-----------
QUERY:

INSERT INTO INT4_TBL(f1) VALUES ('123       5');
RESULT:
	postgres: invalid input syntax for type integer: "123       5"
LINE 2: INSERT INTO INT4_TBL(f1) VALUES ('123       5');
                                         ^


-----------
QUERY:

INSERT INTO INT4_TBL(f1) VALUES ('');
RESULT:
	postgres: invalid input syntax for type integer: ""
LINE 2: INSERT INTO INT4_TBL(f1) VALUES ('');
                                         ^


-----------
QUERY:



SELECT * FROM INT4_TBL;
RESULT:
	postgres: [(0,), (123456,), (-123456,), (2147483647,), (-2147483647,)]

-----------
QUERY:


-- Also try it with non-error-throwing API
SELECT pg_input_is_valid('34', 'int4');
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT pg_input_is_valid('asdf', 'int4');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT pg_input_is_valid('1000000000000', 'int4');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('1000000000000', 'int4');
RESULT:
	postgres: [('value "1000000000000" is out of range for type integer', None, None, '22003')]

-----------
QUERY:


SELECT i.* FROM INT4_TBL i WHERE i.f1 <> int2 '0';
RESULT:
	postgres: [(123456,), (-123456,), (2147483647,), (-2147483647,)]

-----------
QUERY:


SELECT i.* FROM INT4_TBL i WHERE i.f1 <> int4 '0';
RESULT:
	postgres: [(123456,), (-123456,), (2147483647,), (-2147483647,)]

-----------
QUERY:


SELECT i.* FROM INT4_TBL i WHERE i.f1 = int2 '0';
RESULT:
	postgres: [(0,)]

-----------
QUERY:


SELECT i.* FROM INT4_TBL i WHERE i.f1 = int4 '0';
RESULT:
	postgres: [(0,)]

-----------
QUERY:


SELECT i.* FROM INT4_TBL i WHERE i.f1 < int2 '0';
RESULT:
	postgres: [(-123456,), (-2147483647,)]

-----------
QUERY:


SELECT i.* FROM INT4_TBL i WHERE i.f1 < int4 '0';
RESULT:
	postgres: [(-123456,), (-2147483647,)]

-----------
QUERY:


SELECT i.* FROM INT4_TBL i WHERE i.f1 <= int2 '0';
RESULT:
	postgres: [(0,), (-123456,), (-2147483647,)]

-----------
QUERY:


SELECT i.* FROM INT4_TBL i WHERE i.f1 <= int4 '0';
RESULT:
	postgres: [(0,), (-123456,), (-2147483647,)]

-----------
QUERY:


SELECT i.* FROM INT4_TBL i WHERE i.f1 > int2 '0';
RESULT:
	postgres: [(123456,), (2147483647,)]

-----------
QUERY:


SELECT i.* FROM INT4_TBL i WHERE i.f1 > int4 '0';
RESULT:
	postgres: [(123456,), (2147483647,)]

-----------
QUERY:


SELECT i.* FROM INT4_TBL i WHERE i.f1 >= int2 '0';
RESULT:
	postgres: [(0,), (123456,), (2147483647,)]

-----------
QUERY:


SELECT i.* FROM INT4_TBL i WHERE i.f1 >= int4 '0';
RESULT:
	postgres: [(0,), (123456,), (2147483647,)]

-----------
QUERY:


-- positive odds
SELECT i.* FROM INT4_TBL i WHERE (i.f1 % int2 '2') = int2 '1';
RESULT:
	postgres: [(2147483647,)]

-----------
QUERY:


-- any evens
SELECT i.* FROM INT4_TBL i WHERE (i.f1 % int4 '2') = int2 '0';
RESULT:
	postgres: [(0,), (123456,), (-123456,)]

-----------
QUERY:


SELECT i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i;
RESULT:
	postgres: integer out of range


-----------
QUERY:


SELECT i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i
WHERE abs(f1) < 1073741824;
RESULT:
	postgres: [(0, 0), (123456, 246912), (-123456, -246912)]

-----------
QUERY:


SELECT i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i;
RESULT:
	postgres: integer out of range


-----------
QUERY:


SELECT i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i
WHERE abs(f1) < 1073741824;
RESULT:
	postgres: [(0, 0), (123456, 246912), (-123456, -246912)]

-----------
QUERY:


SELECT i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i;
RESULT:
	postgres: integer out of range


-----------
QUERY:


SELECT i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i
WHERE f1 < 2147483646;
RESULT:
	postgres: [(0, 2), (123456, 123458), (-123456, -123454), (-2147483647, -2147483645)]

-----------
QUERY:


SELECT i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i;
RESULT:
	postgres: integer out of range


-----------
QUERY:


SELECT i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i
WHERE f1 < 2147483646;
RESULT:
	postgres: [(0, 2), (123456, 123458), (-123456, -123454), (-2147483647, -2147483645)]

-----------
QUERY:


SELECT i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i;
RESULT:
	postgres: integer out of range


-----------
QUERY:


SELECT i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i
WHERE f1 > -2147483647;
RESULT:
	postgres: [(0, -2), (123456, 123454), (-123456, -123458), (2147483647, 2147483645)]

-----------
QUERY:


SELECT i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i;
RESULT:
	postgres: integer out of range


-----------
QUERY:


SELECT i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i
WHERE f1 > -2147483647;
RESULT:
	postgres: [(0, -2), (123456, 123454), (-123456, -123458), (2147483647, 2147483645)]

-----------
QUERY:


SELECT i.f1, i.f1 / int2 '2' AS x FROM INT4_TBL i;
RESULT:
	postgres: [(0, 0), (123456, 61728), (-123456, -61728), (2147483647, 1073741823), (-2147483647, -1073741823)]

-----------
QUERY:


SELECT i.f1, i.f1 / int4 '2' AS x FROM INT4_TBL i;
RESULT:
	postgres: [(0, 0), (123456, 61728), (-123456, -61728), (2147483647, 1073741823), (-2147483647, -1073741823)]

-----------
QUERY:


--
-- more complex expressions
--

-- variations on unary minus parsing
SELECT -2+3 AS one;
RESULT:
	postgres: [(1,)]

-----------
QUERY:


SELECT 4-2 AS two;
RESULT:
	postgres: [(2,)]

-----------
QUERY:


SELECT 2- -1 AS three;
RESULT:
	postgres: [(3,)]

-----------
QUERY:


SELECT 2 - -2 AS four;
RESULT:
	postgres: [(4,)]

-----------
QUERY:


SELECT int2 '2' * int2 '2' = int2 '16' / int2 '4' AS true;
RESULT:
	postgres: [(True,)]

-----------
QUERY:


SELECT int4 '2' * int2 '2' = int2 '16' / int4 '4' AS true;
RESULT:
	postgres: [(True,)]

-----------
QUERY:


SELECT int2 '2' * int4 '2' = int4 '16' / int2 '4' AS true;
RESULT:
	postgres: [(True,)]

-----------
QUERY:


SELECT int4 '1000' < int4 '999' AS false;
RESULT:
	postgres: [(False,)]

-----------
QUERY:


SELECT 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 AS ten;
RESULT:
	postgres: [(10,)]

-----------
QUERY:


SELECT 2 + 2 / 2 AS three;
RESULT:
	postgres: [(3,)]

-----------
QUERY:


SELECT (2 + 2) / 2 AS two;
RESULT:
	postgres: [(2,)]

-----------
QUERY:


-- corner case
SELECT (-1::int4<<31)::text;
RESULT:
	postgres: [('-2147483648',)]

-----------
QUERY:

SELECT ((-1::int4<<31)+1)::text;
RESULT:
	postgres: [('-2147483647',)]

-----------
QUERY:


-- check sane handling of INT_MIN overflow cases
SELECT (-2147483648)::int4 * (-1)::int4;
RESULT:
	postgres: integer out of range


-----------
QUERY:

SELECT (-2147483648)::int4 / (-1)::int4;
RESULT:
	postgres: integer out of range


-----------
QUERY:

SELECT (-2147483648)::int4 % (-1)::int4;
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT (-2147483648)::int4 * (-1)::int2;
RESULT:
	postgres: integer out of range


-----------
QUERY:

SELECT (-2147483648)::int4 / (-1)::int2;
RESULT:
	postgres: integer out of range


-----------
QUERY:

SELECT (-2147483648)::int4 % (-1)::int2;
RESULT:
	postgres: [(0,)]

-----------
QUERY:


-- check rounding when casting from float
SELECT x, x::int4 AS int4_value
FROM (VALUES (-2.5::float8),
             (-1.5::float8),
             (-0.5::float8),
             (0.0::float8),
             (0.5::float8),
             (1.5::float8),
             (2.5::float8)) t(x);
RESULT:
	postgres: [(-2.5, -2), (-1.5, -2), (-0.5, 0), (0.0, 0), (0.5, 0), (1.5, 2), (2.5, 2)]

-----------
QUERY:


-- check rounding when casting from numeric
SELECT x, x::int4 AS int4_value
FROM (VALUES (-2.5::numeric),
             (-1.5::numeric),
             (-0.5::numeric),
             (0.0::numeric),
             (0.5::numeric),
             (1.5::numeric),
             (2.5::numeric)) t(x);
RESULT:
	postgres: [(Decimal('-2.5'), -3), (Decimal('-1.5'), -2), (Decimal('-0.5'), -1), (Decimal('0.0'), 0), (Decimal('0.5'), 1), (Decimal('1.5'), 2), (Decimal('2.5'), 3)]

-----------
QUERY:


-- test gcd()
SELECT a, b, gcd(a, b), gcd(a, -b), gcd(b, a), gcd(-b, a)
FROM (VALUES (0::int4, 0::int4),
             (0::int4, 6410818::int4),
             (61866666::int4, 6410818::int4),
             (-61866666::int4, 6410818::int4),
             ((-2147483648)::int4, 1::int4),
             ((-2147483648)::int4, 2147483647::int4),
             ((-2147483648)::int4, 1073741824::int4)) AS v(a, b);
RESULT:
	postgres: [(0, 0, 0, 0, 0, 0), (0, 6410818, 6410818, 6410818, 6410818, 6410818), (61866666, 6410818, 1466, 1466, 1466, 1466), (-61866666, 6410818, 1466, 1466, 1466, 1466), (-2147483648, 1, 1, 1, 1, 1), (-2147483648, 2147483647, 1, 1, 1, 1), (-2147483648, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824)]

-----------
QUERY:


SELECT gcd((-2147483648)::int4, 0::int4);
RESULT:
	postgres: integer out of range


-----------
QUERY:
 -- overflow
SELECT gcd((-2147483648)::int4, (-2147483648)::int4);
RESULT:
	postgres: integer out of range


-----------
QUERY:
 -- overflow

-- test lcm()
SELECT a, b, lcm(a, b), lcm(a, -b), lcm(b, a), lcm(-b, a)
FROM (VALUES (0::int4, 0::int4),
             (0::int4, 42::int4),
             (42::int4, 42::int4),
             (330::int4, 462::int4),
             (-330::int4, 462::int4),
             ((-2147483648)::int4, 0::int4)) AS v(a, b);
RESULT:
	postgres: [(0, 0, 0, 0, 0, 0), (0, 42, 0, 0, 0, 0), (42, 42, 42, 42, 42, 42), (330, 462, 2310, 2310, 2310, 2310), (-330, 462, 2310, 2310, 2310, 2310), (-2147483648, 0, 0, 0, 0, 0)]

-----------
QUERY:


SELECT lcm((-2147483648)::int4, 1::int4);
RESULT:
	postgres: integer out of range


-----------
QUERY:
 -- overflow
SELECT lcm(2147483647::int4, 2147483646::int4);
RESULT:
	postgres: integer out of range


-----------
QUERY:
 -- overflow


-- non-decimal literals

SELECT int4 '0b100101';
RESULT:
	postgres: [(37,)]

-----------
QUERY:

SELECT int4 '0o273';
RESULT:
	postgres: [(187,)]

-----------
QUERY:

SELECT int4 '0x42F';
RESULT:
	postgres: [(1071,)]

-----------
QUERY:


SELECT int4 '0b';
RESULT:
	postgres: invalid input syntax for type integer: "0b"
LINE 3: SELECT int4 '0b';
                    ^


-----------
QUERY:

SELECT int4 '0o';
RESULT:
	postgres: invalid input syntax for type integer: "0o"
LINE 2: SELECT int4 '0o';
                    ^


-----------
QUERY:

SELECT int4 '0x';
RESULT:
	postgres: invalid input syntax for type integer: "0x"
LINE 2: SELECT int4 '0x';
                    ^


-----------
QUERY:


-- cases near overflow
SELECT int4 '0b1111111111111111111111111111111';
RESULT:
	postgres: [(2147483647,)]

-----------
QUERY:

SELECT int4 '0b10000000000000000000000000000000';
RESULT:
	postgres: value "0b10000000000000000000000000000000" is out of range for type integer
LINE 2: SELECT int4 '0b10000000000000000000000000000000';
                    ^


-----------
QUERY:

SELECT int4 '0o17777777777';
RESULT:
	postgres: [(2147483647,)]

-----------
QUERY:

SELECT int4 '0o20000000000';
RESULT:
	postgres: value "0o20000000000" is out of range for type integer
LINE 2: SELECT int4 '0o20000000000';
                    ^


-----------
QUERY:

SELECT int4 '0x7FFFFFFF';
RESULT:
	postgres: [(2147483647,)]

-----------
QUERY:

SELECT int4 '0x80000000';
RESULT:
	postgres: value "0x80000000" is out of range for type integer
LINE 2: SELECT int4 '0x80000000';
                    ^


-----------
QUERY:


SELECT int4 '-0b10000000000000000000000000000000';
RESULT:
	postgres: [(-2147483648,)]

-----------
QUERY:

SELECT int4 '-0b10000000000000000000000000000001';
RESULT:
	postgres: value "-0b10000000000000000000000000000001" is out of range for type integer
LINE 2: SELECT int4 '-0b10000000000000000000000000000001';
                    ^


-----------
QUERY:

SELECT int4 '-0o20000000000';
RESULT:
	postgres: [(-2147483648,)]

-----------
QUERY:

SELECT int4 '-0o20000000001';
RESULT:
	postgres: value "-0o20000000001" is out of range for type integer
LINE 2: SELECT int4 '-0o20000000001';
                    ^


-----------
QUERY:

SELECT int4 '-0x80000000';
RESULT:
	postgres: [(-2147483648,)]

-----------
QUERY:

SELECT int4 '-0x80000001';
RESULT:
	postgres: value "-0x80000001" is out of range for type integer
LINE 2: SELECT int4 '-0x80000001';
                    ^


-----------
QUERY:



-- underscores

SELECT int4 '1_000_000';
RESULT:
	postgres: [(1000000,)]

-----------
QUERY:

SELECT int4 '1_2_3';
RESULT:
	postgres: [(123,)]

-----------
QUERY:

SELECT int4 '0x1EEE_FFFF';
RESULT:
	postgres: [(518979583,)]

-----------
QUERY:

SELECT int4 '0o2_73';
RESULT:
	postgres: [(187,)]

-----------
QUERY:

SELECT int4 '0b_10_0101';
RESULT:
	postgres: [(37,)]

-----------
QUERY:


-- error cases
SELECT int4 '_100';
RESULT:
	postgres: invalid input syntax for type integer: "_100"
LINE 4: SELECT int4 '_100';
                    ^


-----------
QUERY:

SELECT int4 '100_';
RESULT:
	postgres: invalid input syntax for type integer: "100_"
LINE 2: SELECT int4 '100_';
                    ^


-----------
QUERY:

SELECT int4 '100__000';
RESULT:
	postgres: invalid input syntax for type integer: "100__000"
LINE 2: SELECT int4 '100__000';
                    ^

