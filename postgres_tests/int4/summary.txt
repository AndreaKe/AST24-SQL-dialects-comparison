Guest DBMS identified: postgres
-----------
QUERY:
--
-- INT4
--

-- int4_tbl was already created and filled in test_setup.sql.
-- Here we just try to insert bad values.

INSERT INTO INT4_TBL(f1) VALUES ('34.5')
RESULT: []

-----------
QUERY:
INSERT INTO INT4_TBL(f1) VALUES ('1000000000000')
RESULT: []

-----------
QUERY:
INSERT INTO INT4_TBL(f1) VALUES ('asdf')
RESULT: []

-----------
QUERY:
INSERT INTO INT4_TBL(f1) VALUES ('     ')
RESULT: []

-----------
QUERY:
INSERT INTO INT4_TBL(f1) VALUES ('   asdf   ')
RESULT: []

-----------
QUERY:
INSERT INTO INT4_TBL(f1) VALUES ('- 1234')
RESULT: []

-----------
QUERY:
INSERT INTO INT4_TBL(f1) VALUES ('123       5')
RESULT: []

-----------
QUERY:
INSERT INTO INT4_TBL(f1) VALUES ('')
RESULT: []

-----------
QUERY:
SELECT * FROM INT4_TBL
RESULT: []

-----------
QUERY:
-- Also try it with non-error-throwing API
SELECT pg_input_is_valid('34', 'int4')
RESULT: []

-----------
QUERY:
SELECT pg_input_is_valid('asdf', 'int4')
RESULT: []

-----------
QUERY:
SELECT pg_input_is_valid('1000000000000', 'int4')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('1000000000000', 'int4')
RESULT: []

-----------
QUERY:
SELECT i.* FROM INT4_TBL i WHERE i.f1 <> int2 '0'
RESULT: []

-----------
QUERY:
SELECT i.* FROM INT4_TBL i WHERE i.f1 <> int4 '0'
RESULT: []

-----------
QUERY:
SELECT i.* FROM INT4_TBL i WHERE i.f1 = int2 '0'
RESULT: []

-----------
QUERY:
SELECT i.* FROM INT4_TBL i WHERE i.f1 = int4 '0'
RESULT: []

-----------
QUERY:
SELECT i.* FROM INT4_TBL i WHERE i.f1 < int2 '0'
RESULT: []

-----------
QUERY:
SELECT i.* FROM INT4_TBL i WHERE i.f1 < int4 '0'
RESULT: []

-----------
QUERY:
SELECT i.* FROM INT4_TBL i WHERE i.f1 <= int2 '0'
RESULT: []

-----------
QUERY:
SELECT i.* FROM INT4_TBL i WHERE i.f1 <= int4 '0'
RESULT: []

-----------
QUERY:
SELECT i.* FROM INT4_TBL i WHERE i.f1 > int2 '0'
RESULT: []

-----------
QUERY:
SELECT i.* FROM INT4_TBL i WHERE i.f1 > int4 '0'
RESULT: []

-----------
QUERY:
SELECT i.* FROM INT4_TBL i WHERE i.f1 >= int2 '0'
RESULT: []

-----------
QUERY:
SELECT i.* FROM INT4_TBL i WHERE i.f1 >= int4 '0'
RESULT: []

-----------
QUERY:
-- positive odds
SELECT i.* FROM INT4_TBL i WHERE (i.f1 % int2 '2') = int2 '1'
RESULT: []

-----------
QUERY:
-- any evens
SELECT i.* FROM INT4_TBL i WHERE (i.f1 % int4 '2') = int2 '0'
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 * int2 '2' AS x FROM INT4_TBL i
WHERE abs(f1) < 1073741824
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 * int4 '2' AS x FROM INT4_TBL i
WHERE abs(f1) < 1073741824
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 + int2 '2' AS x FROM INT4_TBL i
WHERE f1 < 2147483646
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 + int4 '2' AS x FROM INT4_TBL i
WHERE f1 < 2147483646
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 - int2 '2' AS x FROM INT4_TBL i
WHERE f1 > -2147483647
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 - int4 '2' AS x FROM INT4_TBL i
WHERE f1 > -2147483647
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 / int2 '2' AS x FROM INT4_TBL i
RESULT: []

-----------
QUERY:
SELECT i.f1, i.f1 / int4 '2' AS x FROM INT4_TBL i
RESULT: []

-----------
QUERY:
--
-- more complex expressions
--

-- variations on unary minus parsing
SELECT -2+3 AS one
RESULT: []

-----------
QUERY:
SELECT 4-2 AS two
RESULT: []

-----------
QUERY:
SELECT 2- -1 AS three
RESULT: []

-----------
QUERY:
SELECT 2 - -2 AS four
RESULT: []

-----------
QUERY:
SELECT int2 '2' * int2 '2' = int2 '16' / int2 '4' AS true
RESULT: []

-----------
QUERY:
SELECT int4 '2' * int2 '2' = int2 '16' / int4 '4' AS true
RESULT: []

-----------
QUERY:
SELECT int2 '2' * int4 '2' = int4 '16' / int2 '4' AS true
RESULT: []

-----------
QUERY:
SELECT int4 '1000' < int4 '999' AS false
RESULT: []

-----------
QUERY:
SELECT 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 AS ten
RESULT: []

-----------
QUERY:
SELECT 2 + 2 / 2 AS three
RESULT: []

-----------
QUERY:
SELECT (2 + 2) / 2 AS two
RESULT: []

-----------
QUERY:
-- corner case
SELECT (-1::int4<<31)::text
RESULT: []

-----------
QUERY:
SELECT ((-1::int4<<31)+1)::text
RESULT: []

-----------
QUERY:
-- check sane handling of INT_MIN overflow cases
SELECT (-2147483648)::int4 * (-1)::int4
RESULT: []

-----------
QUERY:
SELECT (-2147483648)::int4 / (-1)::int4
RESULT: []

-----------
QUERY:
SELECT (-2147483648)::int4 % (-1)::int4
RESULT: []

-----------
QUERY:
SELECT (-2147483648)::int4 * (-1)::int2
RESULT: []

-----------
QUERY:
SELECT (-2147483648)::int4 / (-1)::int2
RESULT: []

-----------
QUERY:
SELECT (-2147483648)::int4 % (-1)::int2
RESULT: []

-----------
QUERY:
-- check rounding when casting from float
SELECT x, x::int4 AS int4_value
FROM (VALUES (-2.5::float8),
             (-1.5::float8),
             (-0.5::float8),
             (0.0::float8),
             (0.5::float8),
             (1.5::float8),
             (2.5::float8)) t(x)
RESULT: []

-----------
QUERY:
-- check rounding when casting from numeric
SELECT x, x::int4 AS int4_value
FROM (VALUES (-2.5::numeric),
             (-1.5::numeric),
             (-0.5::numeric),
             (0.0::numeric),
             (0.5::numeric),
             (1.5::numeric),
             (2.5::numeric)) t(x)
RESULT: []

-----------
QUERY:
-- test gcd()
SELECT a, b, gcd(a, b), gcd(a, -b), gcd(b, a), gcd(-b, a)
FROM (VALUES (0::int4, 0::int4),
             (0::int4, 6410818::int4),
             (61866666::int4, 6410818::int4),
             (-61866666::int4, 6410818::int4),
             ((-2147483648)::int4, 1::int4),
             ((-2147483648)::int4, 2147483647::int4),
             ((-2147483648)::int4, 1073741824::int4)) AS v(a, b)
RESULT: []

-----------
QUERY:
SELECT gcd((-2147483648)::int4, 0::int4)
RESULT: []

-----------
QUERY:
-- overflow
SELECT gcd((-2147483648)::int4, (-2147483648)::int4)
RESULT: []

-----------
QUERY:
-- overflow

-- test lcm()
SELECT a, b, lcm(a, b), lcm(a, -b), lcm(b, a), lcm(-b, a)
FROM (VALUES (0::int4, 0::int4),
             (0::int4, 42::int4),
             (42::int4, 42::int4),
             (330::int4, 462::int4),
             (-330::int4, 462::int4),
             ((-2147483648)::int4, 0::int4)) AS v(a, b)
RESULT: []

-----------
QUERY:
SELECT lcm((-2147483648)::int4, 1::int4)
RESULT: []

-----------
QUERY:
-- overflow
SELECT lcm(2147483647::int4, 2147483646::int4)
RESULT: []

-----------
QUERY:
-- overflow


-- non-decimal literals

SELECT int4 '0b100101'
RESULT: []

-----------
QUERY:
SELECT int4 '0o273'
RESULT: []

-----------
QUERY:
SELECT int4 '0x42F'
RESULT: []

-----------
QUERY:
SELECT int4 '0b'
RESULT: []

-----------
QUERY:
SELECT int4 '0o'
RESULT: []

-----------
QUERY:
SELECT int4 '0x'
RESULT: []

-----------
QUERY:
-- cases near overflow
SELECT int4 '0b1111111111111111111111111111111'
RESULT: []

-----------
QUERY:
SELECT int4 '0b10000000000000000000000000000000'
RESULT: []

-----------
QUERY:
SELECT int4 '0o17777777777'
RESULT: []

-----------
QUERY:
SELECT int4 '0o20000000000'
RESULT: []

-----------
QUERY:
SELECT int4 '0x7FFFFFFF'
RESULT: []

-----------
QUERY:
SELECT int4 '0x80000000'
RESULT: []

-----------
QUERY:
SELECT int4 '-0b10000000000000000000000000000000'
RESULT: []

-----------
QUERY:
SELECT int4 '-0b10000000000000000000000000000001'
RESULT: []

-----------
QUERY:
SELECT int4 '-0o20000000000'
RESULT: []

-----------
QUERY:
SELECT int4 '-0o20000000001'
RESULT: []

-----------
QUERY:
SELECT int4 '-0x80000000'
RESULT: []

-----------
QUERY:
SELECT int4 '-0x80000001'
RESULT: []

-----------
QUERY:
-- underscores

SELECT int4 '1_000_000'
RESULT: []

-----------
QUERY:
SELECT int4 '1_2_3'
RESULT: []

-----------
QUERY:
SELECT int4 '0x1EEE_FFFF'
RESULT: []

-----------
QUERY:
SELECT int4 '0o2_73'
RESULT: []

-----------
QUERY:
SELECT int4 '0b_10_0101'
RESULT: []

-----------
QUERY:
-- error cases
SELECT int4 '_100'
RESULT: []

-----------
QUERY:
SELECT int4 '100_'
RESULT: []

-----------
QUERY:
SELECT int4 '100__000'
RESULT: []
=========================================
Summary for test case int4/test.sql of postgres
=========================================
