Guest DBMS identified: postgres
-----------
QUERY:
--
-- INTERVAL
--

SET DATESTYLE = 'ISO'
RESULT: []

-----------
QUERY:
SET IntervalStyle to postgres
RESULT: []

-----------
QUERY:
-- check acceptance of /* REPLACED */''time zone style/* REPLACED */''
SELECT INTERVAL '01:00' AS "One hour"
RESULT: []

-----------
QUERY:
SELECT INTERVAL '+02:00' AS "Two hours"
RESULT: []

-----------
QUERY:
SELECT INTERVAL '-08:00' AS "Eight hours"
RESULT: []

-----------
QUERY:
SELECT INTERVAL '-1 +02:03' AS "22 hours ago..."
RESULT: []

-----------
QUERY:
SELECT INTERVAL '-1 days +02:03' AS "22 hours ago..."
RESULT: []

-----------
QUERY:
SELECT INTERVAL '1.5 weeks' AS "Ten days twelve hours"
RESULT: []

-----------
QUERY:
SELECT INTERVAL '1.5 months' AS "One month 15 days"
RESULT: []

-----------
QUERY:
SELECT INTERVAL '10 years -11 month -12 days +13:14' AS "9 years..."
RESULT: []

-----------
QUERY:
SELECT INTERVAL 'infinity' AS "eternity"
RESULT: []

-----------
QUERY:
SELECT INTERVAL '-infinity' AS "beginning of time"
RESULT: []

-----------
QUERY:
CREATE TABLE INTERVAL_TBL (f1 interval)
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 1 minute')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 5 hour')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 10 day')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 34 year')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 3 months')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 14 seconds ago')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL (f1) VALUES ('1 day 2 hours 3 minutes 4 seconds')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL (f1) VALUES ('6 years')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL (f1) VALUES ('5 months')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL (f1) VALUES ('5 months 12 hours')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL (f1) VALUES ('infinity')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL (f1) VALUES ('-infinity')
RESULT: []

-----------
QUERY:
-- badly formatted interval
INSERT INTO INTERVAL_TBL (f1) VALUES ('badly formatted interval')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL (f1) VALUES ('@ 30 eons ago')
RESULT: []

-----------
QUERY:
-- Test non-error-throwing API
SELECT pg_input_is_valid('1.5 weeks', 'interval')
RESULT: []

-----------
QUERY:
SELECT pg_input_is_valid('garbage', 'interval')
RESULT: []

-----------
QUERY:
SELECT pg_input_is_valid('@ 30 eons ago', 'interval')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('garbage', 'interval')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('@ 30 eons ago', 'interval')
RESULT: []

-----------
QUERY:
-- test interval operators

SELECT * FROM INTERVAL_TBL
RESULT: []

-----------
QUERY:
SELECT * FROM INTERVAL_TBL
   WHERE INTERVAL_TBL.f1 <> interval '@ 10 days'
RESULT: []

-----------
QUERY:
SELECT * FROM INTERVAL_TBL
   WHERE INTERVAL_TBL.f1 <= interval '@ 5 hours'
RESULT: []

-----------
QUERY:
SELECT * FROM INTERVAL_TBL
   WHERE INTERVAL_TBL.f1 < interval '@ 1 day'
RESULT: []

-----------
QUERY:
SELECT * FROM INTERVAL_TBL
   WHERE INTERVAL_TBL.f1 = interval '@ 34 years'
RESULT: []

-----------
QUERY:
SELECT * FROM INTERVAL_TBL
   WHERE INTERVAL_TBL.f1 >= interval '@ 1 month'
RESULT: []

-----------
QUERY:
SELECT * FROM INTERVAL_TBL
   WHERE INTERVAL_TBL.f1 > interval '@ 3 seconds ago'
RESULT: []

-----------
QUERY:
SELECT r1.*, r2.*
   FROM INTERVAL_TBL r1, INTERVAL_TBL r2
   WHERE r1.f1 > r2.f1
   ORDER BY r1.f1, r2.f1
RESULT: []

-----------
QUERY:
-- test unary minus

SELECT f1, -f1 FROM INTERVAL_TBL
RESULT: []

-----------
QUERY:
SELECT -('-2147483648 months'::interval)
RESULT: []

-----------
QUERY:
-- should fail
SELECT -('-2147483647 months'::interval)
RESULT: []

-----------
QUERY:
-- ok
SELECT -('-2147483648 days'::interval)
RESULT: []

-----------
QUERY:
-- should fail
SELECT -('-2147483647 days'::interval)
RESULT: []

-----------
QUERY:
-- ok
SELECT -('-9223372036854775808 us'::interval)
RESULT: []

-----------
QUERY:
-- should fail
SELECT -('-9223372036854775807 us'::interval)
RESULT: []

-----------
QUERY:
-- ok
SELECT -('-2147483647 months -2147483647 days -9223372036854775807 us'::interval)
RESULT: []

-----------
QUERY:
-- should fail

-- Test intervals that are large enough to overflow 64 bits in comparisons
CREATE TEMP TABLE INTERVAL_TBL_OF (f1 interval)
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL_OF (f1) VALUES
  ('2147483647 days 2147483647 months'),
  ('2147483647 days -2147483648 months'),
  ('1 year'),
  ('-2147483648 days 2147483647 months'),
  ('-2147483648 days -2147483648 months')
RESULT: []

-----------
QUERY:
-- these should fail as out-of-range
INSERT INTO INTERVAL_TBL_OF (f1) VALUES ('2147483648 days')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL_OF (f1) VALUES ('-2147483649 days')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL_OF (f1) VALUES ('2147483647 years')
RESULT: []

-----------
QUERY:
INSERT INTO INTERVAL_TBL_OF (f1) VALUES ('-2147483648 years')
RESULT: []

-----------
QUERY:
-- Test edge-case overflow detection in interval multiplication
select extract(epoch from '256 microseconds'::interval * (2^55)::float8)
RESULT: []

-----------
QUERY:
SELECT r1.*, r2.*
   FROM INTERVAL_TBL_OF r1, INTERVAL_TBL_OF r2
   WHERE r1.f1 > r2.f1
   ORDER BY r1.f1, r2.f1
RESULT: []

-----------
QUERY:
CREATE INDEX ON INTERVAL_TBL_OF USING btree (f1)
RESULT: []

-----------
QUERY:
SET enable_seqscan TO false
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF)
SELECT f1 FROM INTERVAL_TBL_OF r1 ORDER BY f1
RESULT: []

-----------
QUERY:
SELECT f1 FROM INTERVAL_TBL_OF r1 ORDER BY f1
RESULT: []

-----------
QUERY:
RESET enable_seqscan
RESULT: []

-----------
QUERY:
-- subtracting about-to-overflow values should result in 0
SELECT f1 - f1 FROM INTERVAL_TBL_OF
RESULT: []

-----------
QUERY:
DROP TABLE INTERVAL_TBL_OF
RESULT: []

-----------
QUERY:
-- Test multiplication and division with intervals.
-- Floating point arithmetic rounding errors can lead to unexpected results,
-- though the code attempts to do the right thing and round up to days and
-- minutes to avoid results such as /* REPLACED */''3 days 24:00 hours/* REPLACED */'' or /* REPLACED */''14:20:60/* REPLACED */''.
-- Note that it is expected for some day components to be greater than 29 and
-- some time components be greater than 23:59:59 due to how intervals are
-- stored internally.

CREATE TABLE INTERVAL_MULDIV_TBL (span interval)
RESULT: []

-----------
QUERY:
COPY INTERVAL_MULDIV_TBL FROM STDIN
RESULT: []

-----------
QUERY:
41 mon 12 days 360:00
-41 mon -12 days +360:00
-12 days
9 mon -27 days 12:34:56
-3 years 482 days 76:54:32.189
4 mon
14 mon
999 mon 999 days
\.

SELECT span * 0.3 AS product
FROM INTERVAL_MULDIV_TBL
RESULT: []

-----------
QUERY:
SELECT span * 8.2 AS product
FROM INTERVAL_MULDIV_TBL
RESULT: []

-----------
QUERY:
SELECT span / 10 AS quotient
FROM INTERVAL_MULDIV_TBL
RESULT: []

-----------
QUERY:
SELECT span / 100 AS quotient
FROM INTERVAL_MULDIV_TBL
RESULT: []

-----------
QUERY:
DROP TABLE INTERVAL_MULDIV_TBL
RESULT: []

-----------
QUERY:
SET DATESTYLE = 'postgres'
RESULT: []

-----------
QUERY:
SET IntervalStyle to postgres_verbose
RESULT: []

-----------
QUERY:
SELECT * FROM INTERVAL_TBL
RESULT: []

-----------
QUERY:
-- multiplication and division overflow test cases
SELECT '3000000 months'::interval * 1000
RESULT: []

-----------
QUERY:
SELECT '3000000 months'::interval / 0.001
RESULT: []

-----------
QUERY:
SELECT '3000000 days'::interval * 1000
RESULT: []

-----------
QUERY:
SELECT '3000000 days'::interval / 0.001
RESULT: []

-----------
QUERY:
SELECT '1 month 2146410 days'::interval * 1000.5002
RESULT: []

-----------
QUERY:
SELECT '4611686018427387904 usec'::interval / 0.1
RESULT: []

-----------
QUERY:
-- test avg(interval), which is somewhat fragile since people have been
-- known to change the allowed input syntax for type interval without
-- updating pg_aggregate.agginitval

select avg(f1) from interval_tbl where isfinite(f1)
RESULT: []

-----------
QUERY:
-- test long interval input
select '4 millenniums 5 centuries 4 decades 1 year 4 months 4 days 17 minutes 31 seconds'::interval
RESULT: []

-----------
QUERY:
-- test long interval output
-- Note: the actual maximum length of the interval output is longer,
-- but we need the test to work for both integer and floating-point
-- timestamps.
select '100000000y 10mon -1000000000d -100000h -10min -10.000001s ago'::interval
RESULT: []

-----------
QUERY:
-- test justify_hours() and justify_days()

SELECT justify_hours(interval '6 months 3 days 52 hours 3 minutes 2 seconds') as "6 mons 5 days 4 hours 3 mins 2 seconds"
RESULT: []

-----------
QUERY:
SELECT justify_days(interval '6 months 36 days 5 hours 4 minutes 3 seconds') as "7 mons 6 days 5 hours 4 mins 3 seconds"
RESULT: []

-----------
QUERY:
SELECT justify_hours(interval '2147483647 days 24 hrs')
RESULT: []

-----------
QUERY:
SELECT justify_days(interval '2147483647 months 30 days')
RESULT: []

-----------
QUERY:
-- test justify_interval()

SELECT justify_interval(interval '1 month -1 hour') as "1 month -1 hour"
RESULT: []

-----------
QUERY:
SELECT justify_interval(interval '2147483647 days 24 hrs')
RESULT: []

-----------
QUERY:
SELECT justify_interval(interval '-2147483648 days -24 hrs')
RESULT: []

-----------
QUERY:
SELECT justify_interval(interval '2147483647 months 30 days')
RESULT: []

-----------
QUERY:
SELECT justify_interval(interval '-2147483648 months -30 days')
RESULT: []

-----------
QUERY:
SELECT justify_interval(interval '2147483647 months 30 days -24 hrs')
RESULT: []

-----------
QUERY:
SELECT justify_interval(interval '-2147483648 months -30 days 24 hrs')
RESULT: []

-----------
QUERY:
SELECT justify_interval(interval '2147483647 months -30 days 1440 hrs')
RESULT: []

-----------
QUERY:
SELECT justify_interval(interval '-2147483648 months 30 days -1440 hrs')
RESULT: []

-----------
QUERY:
-- test fractional second input, and detection of duplicate units
SET DATESTYLE = 'ISO'
RESULT: []

-----------
QUERY:
SET IntervalStyle TO postgres
RESULT: []

-----------
QUERY:
SELECT '1 millisecond'::interval, '1 microsecond'::interval,
       '500 seconds 99 milliseconds 51 microseconds'::interval
RESULT: []

-----------
QUERY:
SELECT '3 days 5 milliseconds'::interval
RESULT: []

-----------
QUERY:
SELECT '1 second 2 seconds'::interval
RESULT: []

-----------
QUERY:
-- error
SELECT '10 milliseconds 20 milliseconds'::interval
RESULT: []

-----------
QUERY:
-- error
SELECT '5.5 seconds 3 milliseconds'::interval
RESULT: []

-----------
QUERY:
-- error
SELECT '1:20:05 5 microseconds'::interval
RESULT: []

-----------
QUERY:
-- error
SELECT '1 day 1 day'::interval
RESULT: []

-----------
QUERY:
-- error
SELECT interval '1-2'
RESULT: []

-----------
QUERY:
-- SQL year-month literal
SELECT interval '999' second
RESULT: []

-----------
QUERY:
-- oversize leading field is ok
SELECT interval '999' minute
RESULT: []

-----------
QUERY:
SELECT interval '999' hour
RESULT: []

-----------
QUERY:
SELECT interval '999' day
RESULT: []

-----------
QUERY:
SELECT interval '999' month
RESULT: []

-----------
QUERY:
-- test SQL-spec syntaxes for restricted field sets
SELECT interval '1' year
RESULT: []

-----------
QUERY:
SELECT interval '2' month
RESULT: []

-----------
QUERY:
SELECT interval '3' day
RESULT: []

-----------
QUERY:
SELECT interval '4' hour
RESULT: []

-----------
QUERY:
SELECT interval '5' minute
RESULT: []

-----------
QUERY:
SELECT interval '6' second
RESULT: []

-----------
QUERY:
SELECT interval '1' year to month
RESULT: []

-----------
QUERY:
SELECT interval '1-2' year to month
RESULT: []

-----------
QUERY:
SELECT interval '1 2' day to hour
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03' day to hour
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03:04' day to hour
RESULT: []

-----------
QUERY:
SELECT interval '1 2' day to minute
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03' day to minute
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03:04' day to minute
RESULT: []

-----------
QUERY:
SELECT interval '1 2' day to second
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03' day to second
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03:04' day to second
RESULT: []

-----------
QUERY:
SELECT interval '1 2' hour to minute
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03' hour to minute
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03:04' hour to minute
RESULT: []

-----------
QUERY:
SELECT interval '1 2' hour to second
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03' hour to second
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03:04' hour to second
RESULT: []

-----------
QUERY:
SELECT interval '1 2' minute to second
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03' minute to second
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03:04' minute to second
RESULT: []

-----------
QUERY:
SELECT interval '1 +2:03' minute to second
RESULT: []

-----------
QUERY:
SELECT interval '1 +2:03:04' minute to second
RESULT: []

-----------
QUERY:
SELECT interval '1 -2:03' minute to second
RESULT: []

-----------
QUERY:
SELECT interval '1 -2:03:04' minute to second
RESULT: []

-----------
QUERY:
SELECT interval '123 11' day to hour
RESULT: []

-----------
QUERY:
-- ok
SELECT interval '123 11' day
RESULT: []

-----------
QUERY:
-- not ok
SELECT interval '123 11'
RESULT: []

-----------
QUERY:
-- not ok, too ambiguous
SELECT interval '123 2:03 -2:04'
RESULT: []

-----------
QUERY:
-- not ok, redundant hh:mm fields

-- test syntaxes for restricted precision
SELECT interval(0) '1 day 01:23:45.6789'
RESULT: []

-----------
QUERY:
SELECT interval(2) '1 day 01:23:45.6789'
RESULT: []

-----------
QUERY:
SELECT interval '12:34.5678' minute to second(2)
RESULT: []

-----------
QUERY:
-- per SQL spec
SELECT interval '1.234' second
RESULT: []

-----------
QUERY:
SELECT interval '1.234' second(2)
RESULT: []

-----------
QUERY:
SELECT interval '1 2.345' day to second(2)
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03' day to second(2)
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03.4567' day to second(2)
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03:04.5678' day to second(2)
RESULT: []

-----------
QUERY:
SELECT interval '1 2.345' hour to second(2)
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03.45678' hour to second(2)
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03:04.5678' hour to second(2)
RESULT: []

-----------
QUERY:
SELECT interval '1 2.3456' minute to second(2)
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03.5678' minute to second(2)
RESULT: []

-----------
QUERY:
SELECT interval '1 2:03:04.5678' minute to second(2)
RESULT: []

-----------
QUERY:
SELECT interval '2562047788:00:54.775807' second(2)
RESULT: []

-----------
QUERY:
-- out of range
SELECT interval '-2562047788:00:54.775807' second(2)
RESULT: []

-----------
QUERY:
-- out of range

-- test casting to restricted precision (bug #14479)
SELECT f1, f1::INTERVAL DAY TO MINUTE AS "minutes",
  (f1 + INTERVAL '1 month')::INTERVAL MONTH::INTERVAL YEAR AS "years"
  FROM interval_tbl
RESULT: []

-----------
QUERY:
-- test inputting and outputting SQL standard interval literals
SET IntervalStyle TO sql_standard
RESULT: []

-----------
QUERY:
SELECT  interval '0'                       AS "zero",
        interval '1-2' year to month       AS "year-month",
        interval '1 2:03:04' day to second AS "day-time",
        - interval '1-2'                   AS "negative year-month",
        - interval '1 2:03:04'             AS "negative day-time"
RESULT: []

-----------
QUERY:
-- test input of some not-quite-standard interval values in the sql style
SET IntervalStyle TO postgres
RESULT: []

-----------
QUERY:
SELECT  interval '+1 -1:00:00',
        interval '-1 +1:00:00',
        interval '+1-2 -3 +4:05:06.789',
        interval '-1-2 +3 -4:05:06.789'
RESULT: []

-----------
QUERY:
-- cases that trigger sign-matching rules in the sql style
SELECT  interval '-23 hours 45 min 12.34 sec',
        interval '-1 day 23 hours 45 min 12.34 sec',
        interval '-1 year 2 months 1 day 23 hours 45 min 12.34 sec',
        interval '-1 year 2 months 1 day 23 hours 45 min +12.34 sec'
RESULT: []

-----------
QUERY:
-- test output of couple non-standard interval values in the sql style
SET IntervalStyle TO sql_standard
RESULT: []

-----------
QUERY:
SELECT  interval '1 day -1 hours',
        interval '-1 days +1 hours',
        interval '1 years 2 months -3 days 4 hours 5 minutes 6.789 seconds',
        - interval '1 years 2 months -3 days 4 hours 5 minutes 6.789 seconds'
RESULT: []

-----------
QUERY:
-- cases that trigger sign-matching rules in the sql style
SELECT  interval '-23 hours 45 min 12.34 sec',
        interval '-1 day 23 hours 45 min 12.34 sec',
        interval '-1 year 2 months 1 day 23 hours 45 min 12.34 sec',
        interval '-1 year 2 months 1 day 23 hours 45 min +12.34 sec'
RESULT: []

-----------
QUERY:
-- edge case for sign-matching rules
SELECT  interval ''
RESULT: []

-----------
QUERY:
-- error

-- test outputting iso8601 intervals
SET IntervalStyle to iso_8601
RESULT: []

-----------
QUERY:
select  interval '0'                                AS "zero",
        interval '1-2'                              AS "a year 2 months",
        interval '1 2:03:04'                        AS "a bit over a day",
        interval '2:03:04.45679'                    AS "a bit over 2 hours",
        (interval '1-2' + interval '3 4:05:06.7')   AS "all fields",
        (interval '1-2' - interval '3 4:05:06.7')   AS "mixed sign",
        (- interval '1-2' + interval '3 4:05:06.7') AS "negative"
RESULT: []

-----------
QUERY:
-- test inputting ISO 8601 4.4.2.1 /* REPLACED */''Format With Time Unit Designators/* REPLACED */''
SET IntervalStyle to sql_standard
RESULT: []

-----------
QUERY:
select  interval 'P0Y'                    AS "zero",
        interval 'P1Y2M'                  AS "a year 2 months",
        interval 'P1W'                    AS "a week",
        interval 'P1DT2H3M4S'             AS "a bit over a day",
        interval 'P1Y2M3DT4H5M6.7S'       AS "all fields",
        interval 'P-1Y-2M-3DT-4H-5M-6.7S' AS "negative",
        interval 'PT-0.1S'                AS "fractional second"
RESULT: []

-----------
QUERY:
-- test inputting ISO 8601 4.4.2.2 /* REPLACED */''Alternative Format/* REPLACED */''
SET IntervalStyle to postgres
RESULT: []

-----------
QUERY:
select  interval 'P00021015T103020'       AS "ISO8601 Basic Format",
        interval 'P0002-10-15T10:30:20'   AS "ISO8601 Extended Format"
RESULT: []

-----------
QUERY:
-- Make sure optional ISO8601 alternative format fields are optional.
select  interval 'P0002'                  AS "year only",
        interval 'P0002-10'               AS "year month",
        interval 'P0002-10-15'            AS "year month day",
        interval 'P0002T1S'               AS "year only plus time",
        interval 'P0002-10T1S'            AS "year month plus time",
        interval 'P0002-10-15T1S'         AS "year month day plus time",
        interval 'PT10'                   AS "hour only",
        interval 'PT10:30'                AS "hour minute"
RESULT: []

-----------
QUERY:
-- Check handling of fractional fields in ISO8601 format.
select interval 'P1Y0M3DT4H5M6S'
RESULT: []

-----------
QUERY:
select interval 'P1.0Y0M3DT4H5M6S'
RESULT: []

-----------
QUERY:
select interval 'P1.1Y0M3DT4H5M6S'
RESULT: []

-----------
QUERY:
select interval 'P1.Y0M3DT4H5M6S'
RESULT: []

-----------
QUERY:
select interval 'P.1Y0M3DT4H5M6S'
RESULT: []

-----------
QUERY:
select interval 'P10.5e4Y'
RESULT: []

-----------
QUERY:
-- not per spec, but we/* REPLACED */''ve historically taken it
select interval 'P.Y0M3DT4H5M6S'
RESULT: []

-----------
QUERY:
-- error

-- test a couple rounding cases that changed since 8.3 w/ HAVE_INT64_TIMESTAMP.
SET IntervalStyle to postgres_verbose
RESULT: []

-----------
QUERY:
select interval '-10 mons -3 days +03:55:06.70'
RESULT: []

-----------
QUERY:
select interval '1 year 2 mons 3 days 04:05:06.699999'
RESULT: []

-----------
QUERY:
select interval '0:0:0.7', interval '@ 0.70 secs', interval '0.7 seconds'
RESULT: []

-----------
QUERY:
-- test time fields using entire 64 bit microseconds range
select interval '2562047788.01521550194 hours'
RESULT: []

-----------
QUERY:
select interval '-2562047788.01521550222 hours'
RESULT: []

-----------
QUERY:
select interval '153722867280.912930117 minutes'
RESULT: []

-----------
QUERY:
select interval '-153722867280.912930133 minutes'
RESULT: []

-----------
QUERY:
select interval '9223372036854.775807 seconds'
RESULT: []

-----------
QUERY:
select interval '-9223372036854.775808 seconds'
RESULT: []

-----------
QUERY:
select interval '9223372036854775.807 milliseconds'
RESULT: []

-----------
QUERY:
select interval '-9223372036854775.808 milliseconds'
RESULT: []

-----------
QUERY:
select interval '9223372036854775807 microseconds'
RESULT: []

-----------
QUERY:
select interval '-9223372036854775808 microseconds'
RESULT: []

-----------
QUERY:
select interval 'PT2562047788H54.775807S'
RESULT: []

-----------
QUERY:
select interval 'PT-2562047788H-54.775808S'
RESULT: []

-----------
QUERY:
select interval 'PT2562047788:00:54.775807'
RESULT: []

-----------
QUERY:
select interval 'PT2562047788.0152155019444'
RESULT: []

-----------
QUERY:
select interval 'PT-2562047788.0152155022222'
RESULT: []

-----------
QUERY:
-- overflow each date/time field
select interval '2147483648 years'
RESULT: []

-----------
QUERY:
select interval '-2147483649 years'
RESULT: []

-----------
QUERY:
select interval '2147483648 months'
RESULT: []

-----------
QUERY:
select interval '-2147483649 months'
RESULT: []

-----------
QUERY:
select interval '2147483648 days'
RESULT: []

-----------
QUERY:
select interval '-2147483649 days'
RESULT: []

-----------
QUERY:
select interval '2562047789 hours'
RESULT: []

-----------
QUERY:
select interval '-2562047789 hours'
RESULT: []

-----------
QUERY:
select interval '153722867281 minutes'
RESULT: []

-----------
QUERY:
select interval '-153722867281 minutes'
RESULT: []

-----------
QUERY:
select interval '9223372036855 seconds'
RESULT: []

-----------
QUERY:
select interval '-9223372036855 seconds'
RESULT: []

-----------
QUERY:
select interval '9223372036854777 millisecond'
RESULT: []

-----------
QUERY:
select interval '-9223372036854777 millisecond'
RESULT: []

-----------
QUERY:
select interval '9223372036854775808 microsecond'
RESULT: []

-----------
QUERY:
select interval '-9223372036854775809 microsecond'
RESULT: []

-----------
QUERY:
select interval 'P2147483648'
RESULT: []

-----------
QUERY:
select interval 'P-2147483649'
RESULT: []

-----------
QUERY:
select interval 'P1-2147483647-2147483647'
RESULT: []

-----------
QUERY:
select interval 'PT2562047789'
RESULT: []

-----------
QUERY:
select interval 'PT-2562047789'
RESULT: []

-----------
QUERY:
-- overflow with date/time unit aliases
select interval '2147483647 weeks'
RESULT: []

-----------
QUERY:
select interval '-2147483648 weeks'
RESULT: []

-----------
QUERY:
select interval '2147483647 decades'
RESULT: []

-----------
QUERY:
select interval '-2147483648 decades'
RESULT: []

-----------
QUERY:
select interval '2147483647 centuries'
RESULT: []

-----------
QUERY:
select interval '-2147483648 centuries'
RESULT: []

-----------
QUERY:
select interval '2147483647 millennium'
RESULT: []

-----------
QUERY:
select interval '-2147483648 millennium'
RESULT: []

-----------
QUERY:
select interval '1 week 2147483647 days'
RESULT: []

-----------
QUERY:
select interval '-1 week -2147483648 days'
RESULT: []

-----------
QUERY:
select interval '2147483647 days 1 week'
RESULT: []

-----------
QUERY:
select interval '-2147483648 days -1 week'
RESULT: []

-----------
QUERY:
select interval 'P1W2147483647D'
RESULT: []

-----------
QUERY:
select interval 'P-1W-2147483648D'
RESULT: []

-----------
QUERY:
select interval 'P2147483647D1W'
RESULT: []

-----------
QUERY:
select interval 'P-2147483648D-1W'
RESULT: []

-----------
QUERY:
select interval '1 decade 2147483647 years'
RESULT: []

-----------
QUERY:
select interval '1 century 2147483647 years'
RESULT: []

-----------
QUERY:
select interval '1 millennium 2147483647 years'
RESULT: []

-----------
QUERY:
select interval '-1 decade -2147483648 years'
RESULT: []

-----------
QUERY:
select interval '-1 century -2147483648 years'
RESULT: []

-----------
QUERY:
select interval '-1 millennium -2147483648 years'
RESULT: []

-----------
QUERY:
select interval '2147483647 years 1 decade'
RESULT: []

-----------
QUERY:
select interval '2147483647 years 1 century'
RESULT: []

-----------
QUERY:
select interval '2147483647 years 1 millennium'
RESULT: []

-----------
QUERY:
select interval '-2147483648 years -1 decade'
RESULT: []

-----------
QUERY:
select interval '-2147483648 years -1 century'
RESULT: []

-----------
QUERY:
select interval '-2147483648 years -1 millennium'
RESULT: []

-----------
QUERY:
-- overflowing with fractional fields - postgres format
select interval '0.1 millennium 2147483647 months'
RESULT: []

-----------
QUERY:
select interval '0.1 centuries 2147483647 months'
RESULT: []

-----------
QUERY:
select interval '0.1 decades 2147483647 months'
RESULT: []

-----------
QUERY:
select interval '0.1 yrs 2147483647 months'
RESULT: []

-----------
QUERY:
select interval '-0.1 millennium -2147483648 months'
RESULT: []

-----------
QUERY:
select interval '-0.1 centuries -2147483648 months'
RESULT: []

-----------
QUERY:
select interval '-0.1 decades -2147483648 months'
RESULT: []

-----------
QUERY:
select interval '-0.1 yrs -2147483648 months'
RESULT: []

-----------
QUERY:
select interval '2147483647 months 0.1 millennium'
RESULT: []

-----------
QUERY:
select interval '2147483647 months 0.1 centuries'
RESULT: []

-----------
QUERY:
select interval '2147483647 months 0.1 decades'
RESULT: []

-----------
QUERY:
select interval '2147483647 months 0.1 yrs'
RESULT: []

-----------
QUERY:
select interval '-2147483648 months -0.1 millennium'
RESULT: []

-----------
QUERY:
select interval '-2147483648 months -0.1 centuries'
RESULT: []

-----------
QUERY:
select interval '-2147483648 months -0.1 decades'
RESULT: []

-----------
QUERY:
select interval '-2147483648 months -0.1 yrs'
RESULT: []

-----------
QUERY:
select interval '0.1 months 2147483647 days'
RESULT: []

-----------
QUERY:
select interval '-0.1 months -2147483648 days'
RESULT: []

-----------
QUERY:
select interval '2147483647 days 0.1 months'
RESULT: []

-----------
QUERY:
select interval '-2147483648 days -0.1 months'
RESULT: []

-----------
QUERY:
select interval '0.5 weeks 2147483647 days'
RESULT: []

-----------
QUERY:
select interval '-0.5 weeks -2147483648 days'
RESULT: []

-----------
QUERY:
select interval '2147483647 days 0.5 weeks'
RESULT: []

-----------
QUERY:
select interval '-2147483648 days -0.5 weeks'
RESULT: []

-----------
QUERY:
select interval '0.01 months 9223372036854775807 microseconds'
RESULT: []

-----------
QUERY:
select interval '-0.01 months -9223372036854775808 microseconds'
RESULT: []

-----------
QUERY:
select interval '9223372036854775807 microseconds 0.01 months'
RESULT: []

-----------
QUERY:
select interval '-9223372036854775808 microseconds -0.01 months'
RESULT: []

-----------
QUERY:
select interval '0.1 weeks 9223372036854775807 microseconds'
RESULT: []

-----------
QUERY:
select interval '-0.1 weeks -9223372036854775808 microseconds'
RESULT: []

-----------
QUERY:
select interval '9223372036854775807 microseconds 0.1 weeks'
RESULT: []

-----------
QUERY:
select interval '-9223372036854775808 microseconds -0.1 weeks'
RESULT: []

-----------
QUERY:
select interval '0.1 days 9223372036854775807 microseconds'
RESULT: []

-----------
QUERY:
select interval '-0.1 days -9223372036854775808 microseconds'
RESULT: []

-----------
QUERY:
select interval '9223372036854775807 microseconds 0.1 days'
RESULT: []

-----------
QUERY:
select interval '-9223372036854775808 microseconds -0.1 days'
RESULT: []

-----------
QUERY:
-- overflowing with fractional fields - ISO8601 format
select interval 'P0.1Y2147483647M'
RESULT: []

-----------
QUERY:
select interval 'P-0.1Y-2147483648M'
RESULT: []

-----------
QUERY:
select interval 'P2147483647M0.1Y'
RESULT: []

-----------
QUERY:
select interval 'P-2147483648M-0.1Y'
RESULT: []

-----------
QUERY:
select interval 'P0.1M2147483647D'
RESULT: []

-----------
QUERY:
select interval 'P-0.1M-2147483648D'
RESULT: []

-----------
QUERY:
select interval 'P2147483647D0.1M'
RESULT: []

-----------
QUERY:
select interval 'P-2147483648D-0.1M'
RESULT: []

-----------
QUERY:
select interval 'P0.5W2147483647D'
RESULT: []

-----------
QUERY:
select interval 'P-0.5W-2147483648D'
RESULT: []

-----------
QUERY:
select interval 'P2147483647D0.5W'
RESULT: []

-----------
QUERY:
select interval 'P-2147483648D-0.5W'
RESULT: []

-----------
QUERY:
select interval 'P0.01MT2562047788H54.775807S'
RESULT: []

-----------
QUERY:
select interval 'P-0.01MT-2562047788H-54.775808S'
RESULT: []

-----------
QUERY:
select interval 'P0.1DT2562047788H54.775807S'
RESULT: []

-----------
QUERY:
select interval 'P-0.1DT-2562047788H-54.775808S'
RESULT: []

-----------
QUERY:
select interval 'PT2562047788.1H54.775807S'
RESULT: []

-----------
QUERY:
select interval 'PT-2562047788.1H-54.775808S'
RESULT: []

-----------
QUERY:
select interval 'PT2562047788H0.1M54.775807S'
RESULT: []

-----------
QUERY:
select interval 'PT-2562047788H-0.1M-54.775808S'
RESULT: []

-----------
QUERY:
-- overflowing with fractional fields - ISO8601 alternative format
select interval 'P0.1-2147483647-00'
RESULT: []

-----------
QUERY:
select interval 'P00-0.1-2147483647'
RESULT: []

-----------
QUERY:
select interval 'P00-0.01-00T2562047788:00:54.775807'
RESULT: []

-----------
QUERY:
select interval 'P00-00-0.1T2562047788:00:54.775807'
RESULT: []

-----------
QUERY:
select interval 'PT2562047788.1:00:54.775807'
RESULT: []

-----------
QUERY:
select interval 'PT2562047788:01.:54.775807'
RESULT: []

-----------
QUERY:
-- overflowing with fractional fields - SQL standard format
select interval '0.1 2562047788:0:54.775807'
RESULT: []

-----------
QUERY:
select interval '0.1 2562047788:0:54.775808 ago'
RESULT: []

-----------
QUERY:
select interval '2562047788.1:0:54.775807'
RESULT: []

-----------
QUERY:
select interval '2562047788.1:0:54.775808 ago'
RESULT: []

-----------
QUERY:
select interval '2562047788:0.1:54.775807'
RESULT: []

-----------
QUERY:
select interval '2562047788:0.1:54.775808 ago'
RESULT: []

-----------
QUERY:
-- overflowing using AGO with INT_MIN
select interval '-2147483648 months ago'
RESULT: []

-----------
QUERY:
select interval '-2147483648 days ago'
RESULT: []

-----------
QUERY:
select interval '-9223372036854775808 microseconds ago'
RESULT: []

-----------
QUERY:
select interval '-2147483648 months -2147483648 days -9223372036854775808 microseconds ago'
RESULT: []

-----------
QUERY:
-- overflowing using make_interval
select make_interval(years := 178956971)
RESULT: []

-----------
QUERY:
select make_interval(years := -178956971)
RESULT: []

-----------
QUERY:
select make_interval(years := 1, months := 2147483647)
RESULT: []

-----------
QUERY:
select make_interval(years := -1, months := -2147483648)
RESULT: []

-----------
QUERY:
select make_interval(weeks := 306783379)
RESULT: []

-----------
QUERY:
select make_interval(weeks := -306783379)
RESULT: []

-----------
QUERY:
select make_interval(weeks := 1, days := 2147483647)
RESULT: []

-----------
QUERY:
select make_interval(weeks := -1, days := -2147483648)
RESULT: []

-----------
QUERY:
select make_interval(secs := 1e308)
RESULT: []

-----------
QUERY:
select make_interval(secs := 1e18)
RESULT: []

-----------
QUERY:
select make_interval(secs := -1e18)
RESULT: []

-----------
QUERY:
select make_interval(mins := 1, secs := 9223372036800.0)
RESULT: []

-----------
QUERY:
select make_interval(mins := -1, secs := -9223372036800.0)
RESULT: []

-----------
QUERY:
-- test that INT_MIN number is formatted properly
SET IntervalStyle to postgres
RESULT: []

-----------
QUERY:
select interval '-2147483647 months -2147483648 days -9223372036854775808 us'
RESULT: []

-----------
QUERY:
SET IntervalStyle to sql_standard
RESULT: []

-----------
QUERY:
select interval '-2147483647 months -2147483648 days -9223372036854775808 us'
RESULT: []

-----------
QUERY:
SET IntervalStyle to iso_8601
RESULT: []

-----------
QUERY:
select interval '-2147483647 months -2147483648 days -9223372036854775808 us'
RESULT: []

-----------
QUERY:
SET IntervalStyle to postgres_verbose
RESULT: []

-----------
QUERY:
select interval '-2147483647 months -2147483648 days -9223372036854775808 us'
RESULT: []

-----------
QUERY:
-- check that /* REPLACED */''30 days/* REPLACED */'' equals /* REPLACED */''1 month/* REPLACED */'' according to the hash function
select '30 days'::interval = '1 month'::interval as t
RESULT: []

-----------
QUERY:
select interval_hash('30 days'::interval) = interval_hash('1 month'::interval) as t
RESULT: []

-----------
QUERY:
-- numeric constructor
select make_interval(years := 2)
RESULT: []

-----------
QUERY:
select make_interval(years := 1, months := 6)
RESULT: []

-----------
QUERY:
select make_interval(years := 1, months := -1, weeks := 5, days := -7, hours := 25, mins := -180)
RESULT: []

-----------
QUERY:
select make_interval() = make_interval(years := 0, months := 0, weeks := 0, days := 0, mins := 0, secs := 0.0)
RESULT: []

-----------
QUERY:
select make_interval(hours := -2, mins := -10, secs := -25.3)
RESULT: []

-----------
QUERY:
select make_interval(years := 'inf'::float::int)
RESULT: []

-----------
QUERY:
select make_interval(months := 'NaN'::float::int)
RESULT: []

-----------
QUERY:
select make_interval(secs := 'inf')
RESULT: []

-----------
QUERY:
select make_interval(secs := 'NaN')
RESULT: []

-----------
QUERY:
select make_interval(secs := 7e12)
RESULT: []

-----------
QUERY:
--
-- test EXTRACT
--
SELECT f1,
    EXTRACT(MICROSECOND FROM f1) AS MICROSECOND,
    EXTRACT(MILLISECOND FROM f1) AS MILLISECOND,
    EXTRACT(SECOND FROM f1) AS SECOND,
    EXTRACT(MINUTE FROM f1) AS MINUTE,
    EXTRACT(HOUR FROM f1) AS HOUR,
    EXTRACT(DAY FROM f1) AS DAY,
    EXTRACT(MONTH FROM f1) AS MONTH,
    EXTRACT(QUARTER FROM f1) AS QUARTER,
    EXTRACT(YEAR FROM f1) AS YEAR,
    EXTRACT(DECADE FROM f1) AS DECADE,
    EXTRACT(CENTURY FROM f1) AS CENTURY,
    EXTRACT(MILLENNIUM FROM f1) AS MILLENNIUM,
    EXTRACT(EPOCH FROM f1) AS EPOCH
    FROM INTERVAL_TBL
RESULT: []

-----------
QUERY:
SELECT EXTRACT(FORTNIGHT FROM INTERVAL '2 days')
RESULT: []

-----------
QUERY:
-- error
SELECT EXTRACT(TIMEZONE FROM INTERVAL '2 days')
RESULT: []

-----------
QUERY:
-- error

SELECT EXTRACT(DECADE FROM INTERVAL '100 y')
RESULT: []

-----------
QUERY:
SELECT EXTRACT(DECADE FROM INTERVAL '99 y')
RESULT: []

-----------
QUERY:
SELECT EXTRACT(DECADE FROM INTERVAL '-99 y')
RESULT: []

-----------
QUERY:
SELECT EXTRACT(DECADE FROM INTERVAL '-100 y')
RESULT: []

-----------
QUERY:
SELECT EXTRACT(CENTURY FROM INTERVAL '100 y')
RESULT: []

-----------
QUERY:
SELECT EXTRACT(CENTURY FROM INTERVAL '99 y')
RESULT: []

-----------
QUERY:
SELECT EXTRACT(CENTURY FROM INTERVAL '-99 y')
RESULT: []

-----------
QUERY:
SELECT EXTRACT(CENTURY FROM INTERVAL '-100 y')
RESULT: []

-----------
QUERY:
-- date_part implementation is mostly the same as extract, so only
-- test a few cases for additional coverage.
SELECT f1,
    date_part('microsecond', f1) AS microsecond,
    date_part('millisecond', f1) AS millisecond,
    date_part('second', f1) AS second,
    date_part('epoch', f1) AS epoch
    FROM INTERVAL_TBL
RESULT: []

-----------
QUERY:
-- internal overflow test case
SELECT extract(epoch from interval '1000000000 days')
RESULT: []

-----------
QUERY:
--
-- test infinite intervals
--

-- largest finite intervals
SELECT interval '-2147483648 months -2147483648 days -9223372036854775807 us'
RESULT: []

-----------
QUERY:
SELECT interval '2147483647 months 2147483647 days 9223372036854775806 us'
RESULT: []

-----------
QUERY:
-- infinite intervals
SELECT interval '-2147483648 months -2147483648 days -9223372036854775808 us'
RESULT: []

-----------
QUERY:
SELECT interval '2147483647 months 2147483647 days 9223372036854775807 us'
RESULT: []

-----------
QUERY:
CREATE TABLE INFINITE_INTERVAL_TBL (i interval)
RESULT: []

-----------
QUERY:
INSERT INTO INFINITE_INTERVAL_TBL VALUES ('infinity'), ('-infinity'), ('1 year 2 days 3 hours')
RESULT: []

-----------
QUERY:
SELECT i, isfinite(i) FROM INFINITE_INTERVAL_TBL
RESULT: []

-----------
QUERY:
-- test basic arithmetic
CREATE FUNCTION eval(expr text)
RETURNS text AS
$$
DECLARE
  result text;
BEGIN
  EXECUTE 'select '||expr INTO result;
  RETURN result;
EXCEPTION WHEN OTHERS THEN
  RETURN SQLERRM;
END
$$
LANGUAGE plpgsql
RESULT: []

-----------
QUERY:
SELECT d AS date, i AS interval,
       eval(format('date %L + interval %L', d, i)) AS plus,
       eval(format('date %L - interval %L', d, i)) AS minus
FROM (VALUES (date '-infinity'),
             (date '1995-08-06'),
             (date 'infinity')) AS t1(d),
     (VALUES (interval '-infinity'),
             (interval 'infinity')) AS t2(i)
RESULT: []

-----------
QUERY:
SELECT i1 AS interval1, i2 AS interval2,
       eval(format('interval %L + interval %L', i1, i2)) AS plus,
       eval(format('interval %L - interval %L', i1, i2)) AS minus
FROM (VALUES (interval '-infinity'),
             (interval '2 months'),
             (interval 'infinity')) AS t1(i1),
     (VALUES (interval '-infinity'),
             (interval '10 days'),
             (interval 'infinity')) AS t2(i2)
RESULT: []

-----------
QUERY:
SELECT interval '2147483646 months 2147483646 days 9223372036854775806 us' + interval '1 month 1 day 1 us'
RESULT: []

-----------
QUERY:
SELECT interval '-2147483647 months -2147483647 days -9223372036854775807 us' + interval '-1 month -1 day -1 us'
RESULT: []

-----------
QUERY:
SELECT interval '2147483646 months 2147483646 days 9223372036854775806 us' - interval '-1 month -1 day -1 us'
RESULT: []

-----------
QUERY:
SELECT interval '-2147483647 months -2147483647 days -9223372036854775807 us' - interval '1 month 1 day 1 us'
RESULT: []

-----------
QUERY:
SELECT t AS timestamp, i AS interval,
       eval(format('timestamp %L + interval %L', t, i)) AS plus,
       eval(format('timestamp %L - interval %L', t, i)) AS minus
FROM (VALUES (timestamp '-infinity'),
             (timestamp '1995-08-06 12:30:15'),
             (timestamp 'infinity')) AS t1(t),
     (VALUES (interval '-infinity'),
             (interval 'infinity')) AS t2(i)
RESULT: []

-----------
QUERY:
SELECT t AT TIME ZONE 'GMT' AS timestamptz, i AS interval,
       eval(format('timestamptz %L + interval %L', t, i)) AS plus,
       eval(format('timestamptz %L - interval %L', t, i)) AS minus
FROM (VALUES (timestamptz '-infinity'),
             (timestamptz '1995-08-06 12:30:15 GMT'),
             (timestamptz 'infinity')) AS t1(t),
     (VALUES (interval '-infinity'),
             (interval 'infinity')) AS t2(i)
RESULT: []

-----------
QUERY:
-- time +/- infinite interval not supported
SELECT time '11:27:42' + interval 'infinity'
RESULT: []

-----------
QUERY:
SELECT time '11:27:42' + interval '-infinity'
RESULT: []

-----------
QUERY:
SELECT time '11:27:42' - interval 'infinity'
RESULT: []

-----------
QUERY:
SELECT time '11:27:42' - interval '-infinity'
RESULT: []

-----------
QUERY:
SELECT timetz '11:27:42' + interval 'infinity'
RESULT: []

-----------
QUERY:
SELECT timetz '11:27:42' + interval '-infinity'
RESULT: []

-----------
QUERY:
SELECT timetz '11:27:42' - interval 'infinity'
RESULT: []

-----------
QUERY:
SELECT timetz '11:27:42' - interval '-infinity'
RESULT: []

-----------
QUERY:
SELECT lhst.i lhs,
    rhst.i rhs,
    lhst.i < rhst.i AS lt,
    lhst.i <= rhst.i AS le,
    lhst.i = rhst.i AS eq,
    lhst.i > rhst.i AS gt,
    lhst.i >= rhst.i AS ge,
    lhst.i <> rhst.i AS ne
    FROM INFINITE_INTERVAL_TBL lhst CROSS JOIN INFINITE_INTERVAL_TBL rhst
    WHERE NOT isfinite(lhst.i)
RESULT: []

-----------
QUERY:
SELECT i AS interval,
    -i AS um,
    i * 2.0 AS mul,
    i * -2.0 AS mul_neg,
    i * 'infinity' AS mul_inf,
    i * '-infinity' AS mul_inf_neg,
    i / 3.0 AS div,
    i / -3.0 AS div_neg
    FROM INFINITE_INTERVAL_TBL
    WHERE NOT isfinite(i)
RESULT: []

-----------
QUERY:
SELECT -interval '-2147483647 months -2147483647 days -9223372036854775807 us'
RESULT: []

-----------
QUERY:
SELECT interval 'infinity' * 'nan'
RESULT: []

-----------
QUERY:
SELECT interval '-infinity' * 'nan'
RESULT: []

-----------
QUERY:
SELECT interval '-1073741824 months -1073741824 days -4611686018427387904 us' * 2
RESULT: []

-----------
QUERY:
SELECT interval 'infinity' * 0
RESULT: []

-----------
QUERY:
SELECT interval '-infinity' * 0
RESULT: []

-----------
QUERY:
SELECT interval '0 days' * 'infinity'::float
RESULT: []

-----------
QUERY:
SELECT interval '0 days' * '-infinity'::float
RESULT: []

-----------
QUERY:
SELECT interval '5 days' * 'infinity'::float
RESULT: []

-----------
QUERY:
SELECT interval '5 days' * '-infinity'::float
RESULT: []

-----------
QUERY:
SELECT interval 'infinity' / 'infinity'
RESULT: []

-----------
QUERY:
SELECT interval 'infinity' / '-infinity'
RESULT: []

-----------
QUERY:
SELECT interval 'infinity' / 'nan'
RESULT: []

-----------
QUERY:
SELECT interval '-infinity' / 'infinity'
RESULT: []

-----------
QUERY:
SELECT interval '-infinity' / '-infinity'
RESULT: []

-----------
QUERY:
SELECT interval '-infinity' / 'nan'
RESULT: []

-----------
QUERY:
SELECT interval '-1073741824 months -1073741824 days -4611686018427387904 us' / 0.5
RESULT: []

-----------
QUERY:
SELECT date_bin('infinity', timestamp '2001-02-16 20:38:40', timestamp '2001-02-16 20:05:00')
RESULT: []

-----------
QUERY:
SELECT date_bin('-infinity', timestamp '2001-02-16 20:38:40', timestamp '2001-02-16 20:05:00')
RESULT: []

-----------
QUERY:
SELECT i AS interval, date_trunc('hour', i)
    FROM INFINITE_INTERVAL_TBL
    WHERE NOT isfinite(i)
RESULT: []

-----------
QUERY:
SELECT i AS interval, justify_days(i), justify_hours(i), justify_interval(i)
    FROM INFINITE_INTERVAL_TBL
    WHERE NOT isfinite(i)
RESULT: []

-----------
QUERY:
SELECT timezone('infinity'::interval, '1995-08-06 12:12:12'::timestamp)
RESULT: []

-----------
QUERY:
SELECT timezone('-infinity'::interval, '1995-08-06 12:12:12'::timestamp)
RESULT: []

-----------
QUERY:
SELECT timezone('infinity'::interval, '1995-08-06 12:12:12'::timestamptz)
RESULT: []

-----------
QUERY:
SELECT timezone('-infinity'::interval, '1995-08-06 12:12:12'::timestamptz)
RESULT: []

-----------
QUERY:
SELECT timezone('infinity'::interval, '12:12:12'::time)
RESULT: []

-----------
QUERY:
SELECT timezone('-infinity'::interval, '12:12:12'::time)
RESULT: []

-----------
QUERY:
SELECT timezone('infinity'::interval, '12:12:12'::timetz)
RESULT: []

-----------
QUERY:
SELECT timezone('-infinity'::interval, '12:12:12'::timetz)
RESULT: []

-----------
QUERY:
SELECT 'infinity'::interval::time
RESULT: []

-----------
QUERY:
SELECT '-infinity'::interval::time
RESULT: []

-----------
QUERY:
SELECT to_char('infinity'::interval, 'YYYY')
RESULT: []

-----------
QUERY:
SELECT to_char('-infinity'::interval, 'YYYY')
RESULT: []

-----------
QUERY:
-- /* REPLACED */''ago/* REPLACED */'' can only appear once at the end of an interval.
SELECT INTERVAL '42 days 2 seconds ago ago'
RESULT: []

-----------
QUERY:
SELECT INTERVAL '2 minutes ago 5 days'
RESULT: []

-----------
QUERY:
-- consecutive and dangling units are not allowed.
SELECT INTERVAL 'hour 5 months'
RESULT: []

-----------
QUERY:
SELECT INTERVAL '1 year months days 5 hours'
RESULT: []

-----------
QUERY:
-- unacceptable reserved words in interval. Only /* REPLACED */''infinity/* REPLACED */'', /* REPLACED */''+infinity/* REPLACED */'' and
-- /* REPLACED */''-infinity/* REPLACED */'' are allowed.
SELECT INTERVAL 'now'
RESULT: []

-----------
QUERY:
SELECT INTERVAL 'today'
RESULT: []

-----------
QUERY:
SELECT INTERVAL 'tomorrow'
RESULT: []

-----------
QUERY:
SELECT INTERVAL 'allballs'
RESULT: []

-----------
QUERY:
SELECT INTERVAL 'epoch'
RESULT: []

-----------
QUERY:
SELECT INTERVAL 'yesterday'
RESULT: []

-----------
QUERY:
-- infinity specification should be the only thing
SELECT INTERVAL 'infinity years'
RESULT: []

-----------
QUERY:
SELECT INTERVAL 'infinity ago'
RESULT: []

-----------
QUERY:
SELECT INTERVAL '+infinity -infinity'
RESULT: []
=========================================
Summary for test case interval/test.sql of postgres
=========================================
