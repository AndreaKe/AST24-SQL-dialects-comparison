
-----------
QUERY:
--jsonpath io

select ''::jsonpath;
RESULT:
	postgres: invalid input syntax for type jsonpath: ""
LINE 3: select ''::jsonpath;
               ^


-----------
QUERY:

select '$'::jsonpath;
RESULT:
	postgres: [('$',)]

-----------
QUERY:

select 'strict $'::jsonpath;
RESULT:
	postgres: [('strict $',)]

-----------
QUERY:

select 'lax $'::jsonpath;
RESULT:
	postgres: [('$',)]

-----------
QUERY:

select '$.a'::jsonpath;
RESULT:
	postgres: [('$."a"',)]

-----------
QUERY:

select '$.a.v'::jsonpath;
RESULT:
	postgres: [('$."a"."v"',)]

-----------
QUERY:

select '$.a.*'::jsonpath;
RESULT:
	postgres: [('$."a".*',)]

-----------
QUERY:

select '$.*[*]'::jsonpath;
RESULT:
	postgres: [('$.*[*]',)]

-----------
QUERY:

select '$.a[*]'::jsonpath;
RESULT:
	postgres: [('$."a"[*]',)]

-----------
QUERY:

select '$.a[*][*]'::jsonpath;
RESULT:
	postgres: [('$."a"[*][*]',)]

-----------
QUERY:

select '$[*]'::jsonpath;
RESULT:
	postgres: [('$[*]',)]

-----------
QUERY:

select '$[0]'::jsonpath;
RESULT:
	postgres: [('$[0]',)]

-----------
QUERY:

select '$[*][0]'::jsonpath;
RESULT:
	postgres: [('$[*][0]',)]

-----------
QUERY:

select '$[*].a'::jsonpath;
RESULT:
	postgres: [('$[*]."a"',)]

-----------
QUERY:

select '$[*][0].a.b'::jsonpath;
RESULT:
	postgres: [('$[*][0]."a"."b"',)]

-----------
QUERY:

select '$.a.**.b'::jsonpath;
RESULT:
	postgres: [('$."a".**."b"',)]

-----------
QUERY:

select '$.a.**{2}.b'::jsonpath;
RESULT:
	postgres: [('$."a".**{2}."b"',)]

-----------
QUERY:

select '$.a.**{2 to 2}.b'::jsonpath;
RESULT:
	postgres: [('$."a".**{2}."b"',)]

-----------
QUERY:

select '$.a.**{2 to 5}.b'::jsonpath;
RESULT:
	postgres: [('$."a".**{2 to 5}."b"',)]

-----------
QUERY:

select '$.a.**{0 to 5}.b'::jsonpath;
RESULT:
	postgres: [('$."a".**{0 to 5}."b"',)]

-----------
QUERY:

select '$.a.**{5 to last}.b'::jsonpath;
RESULT:
	postgres: [('$."a".**{5 to last}."b"',)]

-----------
QUERY:

select '$.a.**{last}.b'::jsonpath;
RESULT:
	postgres: [('$."a".**{last}."b"',)]

-----------
QUERY:

select '$.a.**{last to 5}.b'::jsonpath;
RESULT:
	postgres: [('$."a".**{last to 5}."b"',)]

-----------
QUERY:

select '$+1'::jsonpath;
RESULT:
	postgres: [('($ + 1)',)]

-----------
QUERY:

select '$-1'::jsonpath;
RESULT:
	postgres: [('($ - 1)',)]

-----------
QUERY:

select '$--+1'::jsonpath;
RESULT:
	postgres: [('($ - -1)',)]

-----------
QUERY:

select '$.a/+-1'::jsonpath;
RESULT:
	postgres: [('($."a" / -1)',)]

-----------
QUERY:

select '1 * 2 + 4 % -3 != false'::jsonpath;
RESULT:
	postgres: [('(1 * 2 + 4 % -3 != false)',)]

-----------
QUERY:


select '"\b\f\r\n\t\v\"\''\\"'::jsonpath;
RESULT:
	postgres: [('"\\b\\f\\r\\n\\t\\u000b\\"\'\\\\"',)]

-----------
QUERY:

select '"\x50\u0067\u{53}\u{051}\u{00004C}"'::jsonpath;
RESULT:
	postgres: [('"PgSQL"',)]

-----------
QUERY:

select '$.foo\x50\u0067\u{53}\u{051}\u{00004C}\t\"bar'::jsonpath;
RESULT:
	postgres: [('$."fooPgSQL\\t\\"bar"',)]

-----------
QUERY:

select '"\z"'::jsonpath;
RESULT:
	postgres: [('"z"',)]

-----------
QUERY:
  -- unrecognized escape is just the literal char

select '$.g ? ($.a == 1)'::jsonpath;
RESULT:
	postgres: [('$."g"?($."a" == 1)',)]

-----------
QUERY:

select '$.g ? (@ == 1)'::jsonpath;
RESULT:
	postgres: [('$."g"?(@ == 1)',)]

-----------
QUERY:

select '$.g ? (@.a == 1)'::jsonpath;
RESULT:
	postgres: [('$."g"?(@."a" == 1)',)]

-----------
QUERY:

select '$.g ? (@.a == 1 || @.a == 4)'::jsonpath;
RESULT:
	postgres: [('$."g"?(@."a" == 1 || @."a" == 4)',)]

-----------
QUERY:

select '$.g ? (@.a == 1 && @.a == 4)'::jsonpath;
RESULT:
	postgres: [('$."g"?(@."a" == 1 && @."a" == 4)',)]

-----------
QUERY:

select '$.g ? (@.a == 1 || @.a == 4 && @.b == 7)'::jsonpath;
RESULT:
	postgres: [('$."g"?(@."a" == 1 || @."a" == 4 && @."b" == 7)',)]

-----------
QUERY:

select '$.g ? (@.a == 1 || !(@.a == 4) && @.b == 7)'::jsonpath;
RESULT:
	postgres: [('$."g"?(@."a" == 1 || !(@."a" == 4) && @."b" == 7)',)]

-----------
QUERY:

select '$.g ? (@.a == 1 || !(@.x >= 123 || @.a == 4) && @.b == 7)'::jsonpath;
RESULT:
	postgres: [('$."g"?(@."a" == 1 || !(@."x" >= 123 || @."a" == 4) && @."b" == 7)',)]

-----------
QUERY:

select '$.g ? (@.x >= @[*]?(@.a > "abc"))'::jsonpath;
RESULT:
	postgres: [('$."g"?(@."x" >= @[*]?(@."a" > "abc"))',)]

-----------
QUERY:

select '$.g ? ((@.x >= 123 || @.a == 4) is unknown)'::jsonpath;
RESULT:
	postgres: [('$."g"?((@."x" >= 123 || @."a" == 4) is unknown)',)]

-----------
QUERY:

select '$.g ? (exists (@.x))'::jsonpath;
RESULT:
	postgres: [('$."g"?(exists (@."x"))',)]

-----------
QUERY:

select '$.g ? (exists (@.x ? (@ == 14)))'::jsonpath;
RESULT:
	postgres: [('$."g"?(exists (@."x"?(@ == 14)))',)]

-----------
QUERY:

select '$.g ? ((@.x >= 123 || @.a == 4) && exists (@.x ? (@ == 14)))'::jsonpath;
RESULT:
	postgres: [('$."g"?((@."x" >= 123 || @."a" == 4) && exists (@."x"?(@ == 14)))',)]

-----------
QUERY:

select '$.g ? (+@.x >= +-(+@.a + 2))'::jsonpath;
RESULT:
	postgres: [('$."g"?(+@."x" >= +(-(+@."a" + 2)))',)]

-----------
QUERY:


select '$a'::jsonpath;
RESULT:
	postgres: [('$"a"',)]

-----------
QUERY:

select '$a.b'::jsonpath;
RESULT:
	postgres: [('$"a"."b"',)]

-----------
QUERY:

select '$a[*]'::jsonpath;
RESULT:
	postgres: [('$"a"[*]',)]

-----------
QUERY:

select '$.g ? (@.zip == $zip)'::jsonpath;
RESULT:
	postgres: [('$."g"?(@."zip" == $"zip")',)]

-----------
QUERY:

select '$.a[1,2, 3 to 16]'::jsonpath;
RESULT:
	postgres: [('$."a"[1,2,3 to 16]',)]

-----------
QUERY:

select '$.a[$a + 1, ($b[*]) to -($[0] * 2)]'::jsonpath;
RESULT:
	postgres: [('$."a"[$"a" + 1,$"b"[*] to -($[0] * 2)]',)]

-----------
QUERY:

select '$.a[$.a.size() - 3]'::jsonpath;
RESULT:
	postgres: [('$."a"[$."a".size() - 3]',)]

-----------
QUERY:

select 'last'::jsonpath;
RESULT:
	postgres: LAST is allowed only in array subscripts
LINE 2: select 'last'::jsonpath;
               ^


-----------
QUERY:

select '"last"'::jsonpath;
RESULT:
	postgres: [('"last"',)]

-----------
QUERY:

select '$.last'::jsonpath;
RESULT:
	postgres: [('$."last"',)]

-----------
QUERY:

select '$ ? (last > 0)'::jsonpath;
RESULT:
	postgres: LAST is allowed only in array subscripts
LINE 2: select '$ ? (last > 0)'::jsonpath;
               ^


-----------
QUERY:

select '$[last]'::jsonpath;
RESULT:
	postgres: [('$[last]',)]

-----------
QUERY:

select '$[$[0] ? (last > 0)]'::jsonpath;
RESULT:
	postgres: [('$[$[0]?(last > 0)]',)]

-----------
QUERY:


select 'null.type()'::jsonpath;
RESULT:
	postgres: [('null.type()',)]

-----------
QUERY:

select '1.type()'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1.t" of jsonpath input
LINE 2: select '1.type()'::jsonpath;
               ^


-----------
QUERY:

select '(1).type()'::jsonpath;
RESULT:
	postgres: [('(1).type()',)]

-----------
QUERY:

select '1.2.type()'::jsonpath;
RESULT:
	postgres: [('(1.2).type()',)]

-----------
QUERY:

select '"aaa".type()'::jsonpath;
RESULT:
	postgres: [('"aaa".type()',)]

-----------
QUERY:

select 'true.type()'::jsonpath;
RESULT:
	postgres: [('true.type()',)]

-----------
QUERY:

select '$.double().floor().ceiling().abs()'::jsonpath;
RESULT:
	postgres: [('$.double().floor().ceiling().abs()',)]

-----------
QUERY:

select '$.keyvalue().key'::jsonpath;
RESULT:
	postgres: [('$.keyvalue()."key"',)]

-----------
QUERY:

select '$.datetime()'::jsonpath;
RESULT:
	postgres: [('$.datetime()',)]

-----------
QUERY:

select '$.datetime("datetime template")'::jsonpath;
RESULT:
	postgres: [('$.datetime("datetime template")',)]

-----------
QUERY:

select '$.bigint().integer().number().decimal()'::jsonpath;
RESULT:
	postgres: [('$.bigint().integer().number().decimal()',)]

-----------
QUERY:

select '$.boolean()'::jsonpath;
RESULT:
	postgres: [('$.boolean()',)]

-----------
QUERY:

select '$.date()'::jsonpath;
RESULT:
	postgres: [('$.date()',)]

-----------
QUERY:

select '$.decimal(4,2)'::jsonpath;
RESULT:
	postgres: [('$.decimal(4,2)',)]

-----------
QUERY:

select '$.string()'::jsonpath;
RESULT:
	postgres: [('$.string()',)]

-----------
QUERY:

select '$.time()'::jsonpath;
RESULT:
	postgres: [('$.time()',)]

-----------
QUERY:

select '$.time(6)'::jsonpath;
RESULT:
	postgres: [('$.time(6)',)]

-----------
QUERY:

select '$.time_tz()'::jsonpath;
RESULT:
	postgres: [('$.time_tz()',)]

-----------
QUERY:

select '$.time_tz(4)'::jsonpath;
RESULT:
	postgres: [('$.time_tz(4)',)]

-----------
QUERY:

select '$.timestamp()'::jsonpath;
RESULT:
	postgres: [('$.timestamp()',)]

-----------
QUERY:

select '$.timestamp(2)'::jsonpath;
RESULT:
	postgres: [('$.timestamp(2)',)]

-----------
QUERY:

select '$.timestamp_tz()'::jsonpath;
RESULT:
	postgres: [('$.timestamp_tz()',)]

-----------
QUERY:

select '$.timestamp_tz(0)'::jsonpath;
RESULT:
	postgres: [('$.timestamp_tz(0)',)]

-----------
QUERY:


select '$ ? (@ starts with "abc")'::jsonpath;
RESULT:
	postgres: [('$?(@ starts with "abc")',)]

-----------
QUERY:

select '$ ? (@ starts with $var)'::jsonpath;
RESULT:
	postgres: [('$?(@ starts with $"var")',)]

-----------
QUERY:


select '$ ? (@ like_regex "(invalid pattern")'::jsonpath;
RESULT:
	postgres: invalid regular expression: parentheses () not balanced
LINE 3: select '$ ? (@ like_regex "(invalid pattern")'::jsonpath;
               ^


-----------
QUERY:

select '$ ? (@ like_regex "pattern")'::jsonpath;
RESULT:
	postgres: [('$?(@ like_regex "pattern")',)]

-----------
QUERY:

select '$ ? (@ like_regex "pattern" flag "")'::jsonpath;
RESULT:
	postgres: [('$?(@ like_regex "pattern")',)]

-----------
QUERY:

select '$ ? (@ like_regex "pattern" flag "i")'::jsonpath;
RESULT:
	postgres: [('$?(@ like_regex "pattern" flag "i")',)]

-----------
QUERY:

select '$ ? (@ like_regex "pattern" flag "is")'::jsonpath;
RESULT:
	postgres: [('$?(@ like_regex "pattern" flag "is")',)]

-----------
QUERY:

select '$ ? (@ like_regex "pattern" flag "isim")'::jsonpath;
RESULT:
	postgres: [('$?(@ like_regex "pattern" flag "ism")',)]

-----------
QUERY:

select '$ ? (@ like_regex "pattern" flag "xsms")'::jsonpath;
RESULT:
	postgres: XQuery "x" flag (expanded regular expressions) is not implemented
LINE 2: select '$ ? (@ like_regex "pattern" flag "xsms")'::jsonpath;
               ^


-----------
QUERY:

select '$ ? (@ like_regex "pattern" flag "q")'::jsonpath;
RESULT:
	postgres: [('$?(@ like_regex "pattern" flag "q")',)]

-----------
QUERY:

select '$ ? (@ like_regex "pattern" flag "iq")'::jsonpath;
RESULT:
	postgres: [('$?(@ like_regex "pattern" flag "iq")',)]

-----------
QUERY:

select '$ ? (@ like_regex "pattern" flag "smixq")'::jsonpath;
RESULT:
	postgres: [('$?(@ like_regex "pattern" flag "ismxq")',)]

-----------
QUERY:

select '$ ? (@ like_regex "pattern" flag "a")'::jsonpath;
RESULT:
	postgres: invalid input syntax for type jsonpath
LINE 2: select '$ ? (@ like_regex "pattern" flag "a")'::jsonpath;
               ^
DETAIL:  Unrecognized flag character "a" in LIKE_REGEX predicate.


-----------
QUERY:


select '$ < 1'::jsonpath;
RESULT:
	postgres: [('($ < 1)',)]

-----------
QUERY:

select '($ < 1) || $.a.b <= $x'::jsonpath;
RESULT:
	postgres: [('($ < 1 || $."a"."b" <= $"x")',)]

-----------
QUERY:

select '@ + 1'::jsonpath;
RESULT:
	postgres: @ is not allowed in root expressions
LINE 2: select '@ + 1'::jsonpath;
               ^


-----------
QUERY:


select '($).a.b'::jsonpath;
RESULT:
	postgres: [('$."a"."b"',)]

-----------
QUERY:

select '($.a.b).c.d'::jsonpath;
RESULT:
	postgres: [('$."a"."b"."c"."d"',)]

-----------
QUERY:

select '($.a.b + -$.x.y).c.d'::jsonpath;
RESULT:
	postgres: [('($."a"."b" + -$."x"."y")."c"."d"',)]

-----------
QUERY:

select '(-+$.a.b).c.d'::jsonpath;
RESULT:
	postgres: [('(-(+$."a"."b"))."c"."d"',)]

-----------
QUERY:

select '1 + ($.a.b + 2).c.d'::jsonpath;
RESULT:
	postgres: [('(1 + ($."a"."b" + 2)."c"."d")',)]

-----------
QUERY:

select '1 + ($.a.b > 2).c.d'::jsonpath;
RESULT:
	postgres: [('(1 + ($."a"."b" > 2)."c"."d")',)]

-----------
QUERY:

select '($)'::jsonpath;
RESULT:
	postgres: [('$',)]

-----------
QUERY:

select '(($))'::jsonpath;
RESULT:
	postgres: [('$',)]

-----------
QUERY:

select '((($ + 1)).a + ((2)).b ? ((((@ > 1)) || (exists(@.c)))))'::jsonpath;
RESULT:
	postgres: [('(($ + 1)."a" + (2)."b"?(@ > 1 || exists (@."c")))',)]

-----------
QUERY:


select '$ ? (@.a < 1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 1)',)]

-----------
QUERY:

select '$ ? (@.a < -1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -1)',)]

-----------
QUERY:

select '$ ? (@.a < +1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 1)',)]

-----------
QUERY:

select '$ ? (@.a < .1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 0.1)',)]

-----------
QUERY:

select '$ ? (@.a < -.1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -0.1)',)]

-----------
QUERY:

select '$ ? (@.a < +.1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 0.1)',)]

-----------
QUERY:

select '$ ? (@.a < 0.1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 0.1)',)]

-----------
QUERY:

select '$ ? (@.a < -0.1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -0.1)',)]

-----------
QUERY:

select '$ ? (@.a < +0.1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 0.1)',)]

-----------
QUERY:

select '$ ? (@.a < 10.1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 10.1)',)]

-----------
QUERY:

select '$ ? (@.a < -10.1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -10.1)',)]

-----------
QUERY:

select '$ ? (@.a < +10.1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 10.1)',)]

-----------
QUERY:

select '$ ? (@.a < 1e1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 10)',)]

-----------
QUERY:

select '$ ? (@.a < -1e1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -10)',)]

-----------
QUERY:

select '$ ? (@.a < +1e1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 10)',)]

-----------
QUERY:

select '$ ? (@.a < .1e1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 1)',)]

-----------
QUERY:

select '$ ? (@.a < -.1e1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -1)',)]

-----------
QUERY:

select '$ ? (@.a < +.1e1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 1)',)]

-----------
QUERY:

select '$ ? (@.a < 0.1e1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 1)',)]

-----------
QUERY:

select '$ ? (@.a < -0.1e1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -1)',)]

-----------
QUERY:

select '$ ? (@.a < +0.1e1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 1)',)]

-----------
QUERY:

select '$ ? (@.a < 10.1e1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 101)',)]

-----------
QUERY:

select '$ ? (@.a < -10.1e1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -101)',)]

-----------
QUERY:

select '$ ? (@.a < +10.1e1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 101)',)]

-----------
QUERY:

select '$ ? (@.a < 1e-1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 0.1)',)]

-----------
QUERY:

select '$ ? (@.a < -1e-1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -0.1)',)]

-----------
QUERY:

select '$ ? (@.a < +1e-1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 0.1)',)]

-----------
QUERY:

select '$ ? (@.a < .1e-1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 0.01)',)]

-----------
QUERY:

select '$ ? (@.a < -.1e-1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -0.01)',)]

-----------
QUERY:

select '$ ? (@.a < +.1e-1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 0.01)',)]

-----------
QUERY:

select '$ ? (@.a < 0.1e-1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 0.01)',)]

-----------
QUERY:

select '$ ? (@.a < -0.1e-1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -0.01)',)]

-----------
QUERY:

select '$ ? (@.a < +0.1e-1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 0.01)',)]

-----------
QUERY:

select '$ ? (@.a < 10.1e-1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 1.01)',)]

-----------
QUERY:

select '$ ? (@.a < -10.1e-1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -1.01)',)]

-----------
QUERY:

select '$ ? (@.a < +10.1e-1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 1.01)',)]

-----------
QUERY:

select '$ ? (@.a < 1e+1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 10)',)]

-----------
QUERY:

select '$ ? (@.a < -1e+1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -10)',)]

-----------
QUERY:

select '$ ? (@.a < +1e+1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 10)',)]

-----------
QUERY:

select '$ ? (@.a < .1e+1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 1)',)]

-----------
QUERY:

select '$ ? (@.a < -.1e+1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -1)',)]

-----------
QUERY:

select '$ ? (@.a < +.1e+1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 1)',)]

-----------
QUERY:

select '$ ? (@.a < 0.1e+1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 1)',)]

-----------
QUERY:

select '$ ? (@.a < -0.1e+1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -1)',)]

-----------
QUERY:

select '$ ? (@.a < +0.1e+1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 1)',)]

-----------
QUERY:

select '$ ? (@.a < 10.1e+1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 101)',)]

-----------
QUERY:

select '$ ? (@.a < -10.1e+1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < -101)',)]

-----------
QUERY:

select '$ ? (@.a < +10.1e+1)'::jsonpath;
RESULT:
	postgres: [('$?(@."a" < 101)',)]

-----------
QUERY:


-- numeric literals

select '0'::jsonpath;
RESULT:
	postgres: [('0',)]

-----------
QUERY:

select '00'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "00" of jsonpath input
LINE 2: select '00'::jsonpath;
               ^


-----------
QUERY:

select '0755'::jsonpath;
RESULT:
	postgres: syntax error at end of jsonpath input
LINE 2: select '0755'::jsonpath;
               ^


-----------
QUERY:

select '0.0'::jsonpath;
RESULT:
	postgres: [('0.0',)]

-----------
QUERY:

select '0.000'::jsonpath;
RESULT:
	postgres: [('0.000',)]

-----------
QUERY:

select '0.000e1'::jsonpath;
RESULT:
	postgres: [('0.00',)]

-----------
QUERY:

select '0.000e2'::jsonpath;
RESULT:
	postgres: [('0.0',)]

-----------
QUERY:

select '0.000e3'::jsonpath;
RESULT:
	postgres: [('0',)]

-----------
QUERY:

select '0.0010'::jsonpath;
RESULT:
	postgres: [('0.0010',)]

-----------
QUERY:

select '0.0010e-1'::jsonpath;
RESULT:
	postgres: [('0.00010',)]

-----------
QUERY:

select '0.0010e+1'::jsonpath;
RESULT:
	postgres: [('0.010',)]

-----------
QUERY:

select '0.0010e+2'::jsonpath;
RESULT:
	postgres: [('0.10',)]

-----------
QUERY:

select '.001'::jsonpath;
RESULT:
	postgres: [('0.001',)]

-----------
QUERY:

select '.001e1'::jsonpath;
RESULT:
	postgres: [('0.01',)]

-----------
QUERY:

select '1.'::jsonpath;
RESULT:
	postgres: [('1',)]

-----------
QUERY:

select '1.e1'::jsonpath;
RESULT:
	postgres: [('10',)]

-----------
QUERY:

select '1a'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1a" of jsonpath input
LINE 2: select '1a'::jsonpath;
               ^


-----------
QUERY:

select '1e'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1e" of jsonpath input
LINE 2: select '1e'::jsonpath;
               ^


-----------
QUERY:

select '1.e'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1.e" of jsonpath input
LINE 2: select '1.e'::jsonpath;
               ^


-----------
QUERY:

select '1.2a'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1.2a" of jsonpath input
LINE 2: select '1.2a'::jsonpath;
               ^


-----------
QUERY:

select '1.2e'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1.2e" of jsonpath input
LINE 2: select '1.2e'::jsonpath;
               ^


-----------
QUERY:

select '1.2.e'::jsonpath;
RESULT:
	postgres: [('(1.2)."e"',)]

-----------
QUERY:

select '(1.2).e'::jsonpath;
RESULT:
	postgres: [('(1.2)."e"',)]

-----------
QUERY:

select '1e3'::jsonpath;
RESULT:
	postgres: [('1000',)]

-----------
QUERY:

select '1.e3'::jsonpath;
RESULT:
	postgres: [('1000',)]

-----------
QUERY:

select '1.e3.e'::jsonpath;
RESULT:
	postgres: [('(1000)."e"',)]

-----------
QUERY:

select '1.e3.e4'::jsonpath;
RESULT:
	postgres: [('(1000)."e4"',)]

-----------
QUERY:

select '1.2e3'::jsonpath;
RESULT:
	postgres: [('1200',)]

-----------
QUERY:

select '1.2e3a'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1.2e3a" of jsonpath input
LINE 2: select '1.2e3a'::jsonpath;
               ^


-----------
QUERY:

select '1.2.e3'::jsonpath;
RESULT:
	postgres: [('(1.2)."e3"',)]

-----------
QUERY:

select '(1.2).e3'::jsonpath;
RESULT:
	postgres: [('(1.2)."e3"',)]

-----------
QUERY:

select '1..e'::jsonpath;
RESULT:
	postgres: [('(1)."e"',)]

-----------
QUERY:

select '1..e3'::jsonpath;
RESULT:
	postgres: [('(1)."e3"',)]

-----------
QUERY:

select '(1.).e'::jsonpath;
RESULT:
	postgres: [('(1)."e"',)]

-----------
QUERY:

select '(1.).e3'::jsonpath;
RESULT:
	postgres: [('(1)."e3"',)]

-----------
QUERY:

select '1?(2>3)'::jsonpath;
RESULT:
	postgres: [('(1)?(2 > 3)',)]

-----------
QUERY:


-- nondecimal
select '0b100101'::jsonpath;
RESULT:
	postgres: [('37',)]

-----------
QUERY:

select '0o273'::jsonpath;
RESULT:
	postgres: [('187',)]

-----------
QUERY:

select '0x42F'::jsonpath;
RESULT:
	postgres: [('1071',)]

-----------
QUERY:


-- error cases
select '0b'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "0b" of jsonpath input
LINE 4: select '0b'::jsonpath;
               ^


-----------
QUERY:

select '1b'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1b" of jsonpath input
LINE 2: select '1b'::jsonpath;
               ^


-----------
QUERY:

select '0b0x'::jsonpath;
RESULT:
	postgres: syntax error at end of jsonpath input
LINE 2: select '0b0x'::jsonpath;
               ^


-----------
QUERY:


select '0o'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "0o" of jsonpath input
LINE 3: select '0o'::jsonpath;
               ^


-----------
QUERY:

select '1o'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1o" of jsonpath input
LINE 2: select '1o'::jsonpath;
               ^


-----------
QUERY:

select '0o0x'::jsonpath;
RESULT:
	postgres: syntax error at end of jsonpath input
LINE 2: select '0o0x'::jsonpath;
               ^


-----------
QUERY:


select '0x'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "0x" of jsonpath input
LINE 3: select '0x'::jsonpath;
               ^


-----------
QUERY:

select '1x'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1x" of jsonpath input
LINE 2: select '1x'::jsonpath;
               ^


-----------
QUERY:

select '0x0y'::jsonpath;
RESULT:
	postgres: syntax error at end of jsonpath input
LINE 2: select '0x0y'::jsonpath;
               ^


-----------
QUERY:


-- underscores
select '1_000_000'::jsonpath;
RESULT:
	postgres: [('1000000',)]

-----------
QUERY:

select '1_2_3'::jsonpath;
RESULT:
	postgres: [('123',)]

-----------
QUERY:

select '0x1EEE_FFFF'::jsonpath;
RESULT:
	postgres: [('518979583',)]

-----------
QUERY:

select '0o2_73'::jsonpath;
RESULT:
	postgres: [('187',)]

-----------
QUERY:

select '0b10_0101'::jsonpath;
RESULT:
	postgres: [('37',)]

-----------
QUERY:


select '1_000.000_005'::jsonpath;
RESULT:
	postgres: [('1000.000005',)]

-----------
QUERY:

select '1_000.'::jsonpath;
RESULT:
	postgres: [('1000',)]

-----------
QUERY:

select '.000_005'::jsonpath;
RESULT:
	postgres: [('0.000005',)]

-----------
QUERY:

select '1_000.5e0_1'::jsonpath;
RESULT:
	postgres: [('10005',)]

-----------
QUERY:


-- error cases
select '_100'::jsonpath;
RESULT:
	postgres: syntax error at end of jsonpath input
LINE 4: select '_100'::jsonpath;
               ^


-----------
QUERY:

select '100_'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "100_" of jsonpath input
LINE 2: select '100_'::jsonpath;
               ^


-----------
QUERY:

select '100__000'::jsonpath;
RESULT:
	postgres: syntax error at end of jsonpath input
LINE 2: select '100__000'::jsonpath;
               ^


-----------
QUERY:


select '_1_000.5'::jsonpath;
RESULT:
	postgres: syntax error at end of jsonpath input
LINE 3: select '_1_000.5'::jsonpath;
               ^


-----------
QUERY:

select '1_000_.5'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1_000_" of jsonpath input
LINE 2: select '1_000_.5'::jsonpath;
               ^


-----------
QUERY:

select '1_000._5'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1_000._" of jsonpath input
LINE 2: select '1_000._5'::jsonpath;
               ^


-----------
QUERY:

select '1_000.5_'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1_000.5_" of jsonpath input
LINE 2: select '1_000.5_'::jsonpath;
               ^


-----------
QUERY:

select '1_000.5e_1'::jsonpath;
RESULT:
	postgres: trailing junk after numeric literal at or near "1_000.5e" of jsonpath input
LINE 2: select '1_000.5e_1'::jsonpath;
               ^


-----------
QUERY:


-- underscore after prefix not allowed in JavaScript (but allowed in SQL)
select '0b_10_0101'::jsonpath;
RESULT:
	postgres: syntax error at end of jsonpath input
LINE 4: select '0b_10_0101'::jsonpath;
               ^


-----------
QUERY:

select '0o_273'::jsonpath;
RESULT:
	postgres: syntax error at end of jsonpath input
LINE 2: select '0o_273'::jsonpath;
               ^


-----------
QUERY:

select '0x_42F'::jsonpath;
RESULT:
	postgres: syntax error at end of jsonpath input
LINE 2: select '0x_42F'::jsonpath;
               ^


-----------
QUERY:



-- test non-error-throwing API

SELECT str as jsonpath,
       pg_input_is_valid(str,'jsonpath') as ok,
       errinfo.sql_error_code,
       errinfo.message,
       errinfo.detail,
       errinfo.hint
FROM unnest(ARRAY['$ ? (@ like_regex "pattern" flag "smixq")'::text,
                  '$ ? (@ like_regex "pattern" flag "a")',
                  '@ + 1',
                  '00',
                  '1a']) str,
     LATERAL pg_input_error_info(str, 'jsonpath') as errinfo;
RESULT:
	postgres: [('$ ? (@ like_regex "pattern" flag "smixq")', True, None, None, None, None), ('$ ? (@ like_regex "pattern" flag "a")', False, '42601', 'invalid input syntax for type jsonpath', 'Unrecognized flag character "a" in LIKE_REGEX predicate.', None), ('@ + 1', False, '42601', '@ is not allowed in root expressions', None, None), ('00', False, '42601', 'trailing junk after numeric literal at or near "00" of jsonpath input', None, None), ('1a', False, '42601', 'trailing junk after numeric literal at or near "1a" of jsonpath input', None, None)]
