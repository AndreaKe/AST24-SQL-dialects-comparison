
-----------
QUERY:
--
-- LINE
-- Infinite lines
--

--DROP TABLE LINE_TBL /* REPLACED */,
CREATE TABLE LINE_TBL (s line);
RESULT:
	postgres: None

-----------
QUERY:


INSERT INTO LINE_TBL VALUES ('{0,-1,5}');
RESULT:
	postgres: None

-----------
QUERY:
	-- A == 0
INSERT INTO LINE_TBL VALUES ('{1,0,5}');
RESULT:
	postgres: None

-----------
QUERY:
	-- B == 0
INSERT INTO LINE_TBL VALUES ('{0,3,0}');
RESULT:
	postgres: None

-----------
QUERY:
	-- A == C == 0
INSERT INTO LINE_TBL VALUES (' (0,0), (6,6)');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('10,-10 ,-5,-4');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('[-1e6,2e2,3e5, -4e1]');
RESULT:
	postgres: None

-----------
QUERY:


INSERT INTO LINE_TBL VALUES ('{3,NaN,5}');
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('{NaN,NaN,NaN}');
RESULT:
	postgres: None

-----------
QUERY:


-- horizontal
INSERT INTO LINE_TBL VALUES ('[(1,3),(2,3)]');
RESULT:
	postgres: None

-----------
QUERY:

-- vertical
INSERT INTO LINE_TBL VALUES (line(point '(3,1)', point '(3,2)'));
RESULT:
	postgres: None

-----------
QUERY:


-- bad values for parser testing
INSERT INTO LINE_TBL VALUES ('{}');
RESULT:
	postgres: ERROR - invalid input syntax for type line: "{}"
LINE 4: INSERT INTO LINE_TBL VALUES ('{}');
                                     ^


-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('{0');
RESULT:
	postgres: ERROR - invalid input syntax for type line: "{0"
LINE 2: INSERT INTO LINE_TBL VALUES ('{0');
                                     ^


-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('{0,0}');
RESULT:
	postgres: ERROR - invalid input syntax for type line: "{0,0}"
LINE 2: INSERT INTO LINE_TBL VALUES ('{0,0}');
                                     ^


-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('{0,0,1');
RESULT:
	postgres: ERROR - invalid input syntax for type line: "{0,0,1"
LINE 2: INSERT INTO LINE_TBL VALUES ('{0,0,1');
                                     ^


-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('{0,0,1}');
RESULT:
	postgres: ERROR - invalid line specification: A and B cannot both be zero
LINE 2: INSERT INTO LINE_TBL VALUES ('{0,0,1}');
                                     ^


-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('{0,0,1} x');
RESULT:
	postgres: ERROR - invalid input syntax for type line: "{0,0,1} x"
LINE 2: INSERT INTO LINE_TBL VALUES ('{0,0,1} x');
                                     ^


-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('(3asdf,2 ,3,4r2)');
RESULT:
	postgres: ERROR - invalid input syntax for type line: "(3asdf,2 ,3,4r2)"
LINE 2: INSERT INTO LINE_TBL VALUES ('(3asdf,2 ,3,4r2)');
                                     ^


-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('[1,2,3, 4');
RESULT:
	postgres: ERROR - invalid input syntax for type line: "[1,2,3, 4"
LINE 2: INSERT INTO LINE_TBL VALUES ('[1,2,3, 4');
                                     ^


-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('[(,2),(3,4)]');
RESULT:
	postgres: ERROR - invalid input syntax for type line: "[(,2),(3,4)]"
LINE 2: INSERT INTO LINE_TBL VALUES ('[(,2),(3,4)]');
                                     ^


-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('[(1,2),(3,4)');
RESULT:
	postgres: ERROR - invalid input syntax for type line: "[(1,2),(3,4)"
LINE 2: INSERT INTO LINE_TBL VALUES ('[(1,2),(3,4)');
                                     ^


-----------
QUERY:

INSERT INTO LINE_TBL VALUES ('[(1,2),(1,2)]');
RESULT:
	postgres: ERROR - invalid line specification: must be two distinct points
LINE 2: INSERT INTO LINE_TBL VALUES ('[(1,2),(1,2)]');
                                     ^


-----------
QUERY:


INSERT INTO LINE_TBL VALUES (line(point '(1,0)', point '(1,0)'));
RESULT:
	postgres: ERROR - invalid line specification: must be two distinct points


-----------
QUERY:


select * from LINE_TBL;
RESULT:
	postgres: [('{0,-1,5}',), ('{1,0,5}',), ('{0,3,0}',), ('{1,-1,0}',), ('{-0.4,-1,-6}',), ('{-0.0001846153846153846,-1,15.384615384615387}',), ('{3,NaN,5}',), ('{NaN,NaN,NaN}',), ('{0,-1,3}',), ('{-1,0,3}',)]

-----------
QUERY:


select '{nan, 1, nan}'::line = '{nan, 1, nan}'::line as true,
	   '{nan, 1, nan}'::line = '{nan, 2, nan}'::line as false;
RESULT:
	postgres: [(True, False)]

-----------
QUERY:


-- test non-error-throwing API for some core types
SELECT pg_input_is_valid('{1, 1}', 'line');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('{1, 1}', 'line');
RESULT:
	postgres: [('invalid input syntax for type line: "{1, 1}"', None, None, '22P02')]

-----------
QUERY:

SELECT pg_input_is_valid('{0, 0, 0}', 'line');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('{0, 0, 0}', 'line');
RESULT:
	postgres: [('invalid line specification: A and B cannot both be zero', None, None, '22P02')]

-----------
QUERY:

SELECT pg_input_is_valid('{1, 1, a}', 'line');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('{1, 1, a}', 'line');
RESULT:
	postgres: [('invalid input syntax for type line: "{1, 1, a}"', None, None, '22P02')]

-----------
QUERY:

SELECT pg_input_is_valid('{1, 1, 1e400}', 'line');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('{1, 1, 1e400}', 'line');
RESULT:
	postgres: [('"1e400" is out of range for type double precision', None, None, '22003')]

-----------
QUERY:

SELECT pg_input_is_valid('(1, 1), (1, 1e400)', 'line');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('(1, 1), (1, 1e400)', 'line');
RESULT:
	postgres: [('"1e400" is out of range for type double precision', None, None, '22003')]
