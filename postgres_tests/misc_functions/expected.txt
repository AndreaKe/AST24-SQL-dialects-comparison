
-----------
QUERY:
-- directory paths and dlsuffix are passed to us in environment variables
-- \getenv libdir '/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress'
-- \getenv dlsuffix '.so'

-- \set regresslib /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress' '/regress' /* REPLACED */'.so'

--
-- num_nulls()
--

SELECT num_nonnulls(NULL);
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT num_nonnulls('1');
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT num_nonnulls(NULL::text);
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT num_nonnulls(NULL::text, NULL::int);
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT num_nonnulls(1, 2, NULL::text, NULL::point, '', int8 '9', 1.0 / NULL);
RESULT:
	postgres: [(4,)]

-----------
QUERY:

SELECT num_nonnulls(VARIADIC '{1,2,NULL,3}'::int[]);
RESULT:
	postgres: [(3,)]

-----------
QUERY:

SELECT num_nonnulls(VARIADIC '{"1","2","3","4"}'::text[]);
RESULT:
	postgres: [(4,)]

-----------
QUERY:

SELECT num_nonnulls(VARIADIC ARRAY(SELECT CASE WHEN i <> 40 THEN i END FROM generate_series(1, 100) i));
RESULT:
	postgres: [(99,)]

-----------
QUERY:


SELECT num_nulls(NULL);
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT num_nulls('1');
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT num_nulls(NULL::text);
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT num_nulls(NULL::text, NULL::int);
RESULT:
	postgres: [(2,)]

-----------
QUERY:

SELECT num_nulls(1, 2, NULL::text, NULL::point, '', int8 '9', 1.0 / NULL);
RESULT:
	postgres: [(3,)]

-----------
QUERY:

SELECT num_nulls(VARIADIC '{1,2,NULL,3}'::int[]);
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT num_nulls(VARIADIC '{"1","2","3","4"}'::text[]);
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT num_nulls(VARIADIC ARRAY(SELECT CASE WHEN i <> 40 THEN i END FROM generate_series(1, 100) i));
RESULT:
	postgres: [(1,)]

-----------
QUERY:


-- special cases
SELECT num_nonnulls(VARIADIC NULL::text[]);
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT num_nonnulls(VARIADIC '{}'::int[]);
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT num_nulls(VARIADIC NULL::text[]);
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT num_nulls(VARIADIC '{}'::int[]);
RESULT:
	postgres: [(0,)]

-----------
QUERY:


-- should fail, one or more arguments is required
SELECT num_nonnulls();
RESULT:
	postgres: function num_nonnulls() does not exist
LINE 4: SELECT num_nonnulls();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:

SELECT num_nulls();
RESULT:
	postgres: function num_nulls() does not exist
LINE 2: SELECT num_nulls();
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


--
-- canonicalize_path()
--

CREATE FUNCTION test_canonicalize_path(text)
   RETURNS text
   AS /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress/regress.so'
   LANGUAGE C STRICT IMMUTABLE;
RESULT:
	postgres: None

-----------
QUERY:


SELECT test_canonicalize_path('/');
RESULT:
	postgres: [('/',)]

-----------
QUERY:

SELECT test_canonicalize_path('/./abc/def/');
RESULT:
	postgres: [('/abc/def',)]

-----------
QUERY:

SELECT test_canonicalize_path('/./../abc/def');
RESULT:
	postgres: [('/abc/def',)]

-----------
QUERY:

SELECT test_canonicalize_path('/./../../abc/def/');
RESULT:
	postgres: [('/abc/def',)]

-----------
QUERY:

SELECT test_canonicalize_path('/abc/.././def/ghi');
RESULT:
	postgres: [('/def/ghi',)]

-----------
QUERY:

SELECT test_canonicalize_path('/abc/./../def/ghi//');
RESULT:
	postgres: [('/def/ghi',)]

-----------
QUERY:

SELECT test_canonicalize_path('/abc/def/../..');
RESULT:
	postgres: [('/',)]

-----------
QUERY:

SELECT test_canonicalize_path('/abc/def/../../..');
RESULT:
	postgres: [('/',)]

-----------
QUERY:

SELECT test_canonicalize_path('/abc/def/../../../../ghi/jkl');
RESULT:
	postgres: [('/ghi/jkl',)]

-----------
QUERY:

SELECT test_canonicalize_path('.');
RESULT:
	postgres: [('.',)]

-----------
QUERY:

SELECT test_canonicalize_path('./');
RESULT:
	postgres: [('.',)]

-----------
QUERY:

SELECT test_canonicalize_path('./abc/..');
RESULT:
	postgres: [('.',)]

-----------
QUERY:

SELECT test_canonicalize_path('abc/../');
RESULT:
	postgres: [('.',)]

-----------
QUERY:

SELECT test_canonicalize_path('abc/../def');
RESULT:
	postgres: [('def',)]

-----------
QUERY:

SELECT test_canonicalize_path('..');
RESULT:
	postgres: [('..',)]

-----------
QUERY:

SELECT test_canonicalize_path('../abc/def');
RESULT:
	postgres: [('../abc/def',)]

-----------
QUERY:

SELECT test_canonicalize_path('../abc/..');
RESULT:
	postgres: [('..',)]

-----------
QUERY:

SELECT test_canonicalize_path('../abc/../def');
RESULT:
	postgres: [('../def',)]

-----------
QUERY:

SELECT test_canonicalize_path('../abc/../../def/ghi');
RESULT:
	postgres: [('../../def/ghi',)]

-----------
QUERY:

SELECT test_canonicalize_path('./abc/./def/.');
RESULT:
	postgres: [('abc/def',)]

-----------
QUERY:

SELECT test_canonicalize_path('./abc/././def/.');
RESULT:
	postgres: [('abc/def',)]

-----------
QUERY:

SELECT test_canonicalize_path('./abc/./def/.././ghi/../../../jkl/mno');
RESULT:
	postgres: [('../jkl/mno',)]

-----------
QUERY:


--
-- pg_log_backend_memory_contexts()
--
-- Memory contexts are logged and they are not returned to the function.
-- Furthermore, their contents can vary depending on the timing. However,
-- we can at least verify that the code doesn/* REPLACED */''t fail, and that the
-- permissions are set properly.
--

SELECT pg_log_backend_memory_contexts(pg_backend_pid());
RESULT:
	postgres: [(True,)]

-----------
QUERY:


SELECT pg_log_backend_memory_contexts(pid) FROM pg_stat_activity
  WHERE backend_type = 'checkpointer';
RESULT:
	postgres: [(True,)]

-----------
QUERY:


CREATE ROLE regress_log_memory;
RESULT:
	postgres: None

-----------
QUERY:


SELECT has_function_privilege('regress_log_memory',
  'pg_log_backend_memory_contexts(integer)', 'EXECUTE');
RESULT:
	postgres: [(False,)]

-----------
QUERY:
 -- no

GRANT EXECUTE ON FUNCTION pg_log_backend_memory_contexts(integer)
  TO regress_log_memory;
RESULT:
	postgres: None

-----------
QUERY:


SELECT has_function_privilege('regress_log_memory',
  'pg_log_backend_memory_contexts(integer)', 'EXECUTE');
RESULT:
	postgres: [(True,)]

-----------
QUERY:
 -- yes

SET ROLE regress_log_memory;
RESULT:
	postgres: None

-----------
QUERY:

SELECT pg_log_backend_memory_contexts(pg_backend_pid());
RESULT:
	postgres: [(True,)]

-----------
QUERY:

RESET ROLE;
RESULT:
	postgres: None

-----------
QUERY:


REVOKE EXECUTE ON FUNCTION pg_log_backend_memory_contexts(integer)
  FROM regress_log_memory;
RESULT:
	postgres: None

-----------
QUERY:


DROP ROLE regress_log_memory;
RESULT:
	postgres: None

-----------
QUERY:


--
-- Test some built-in SRFs
--
-- The outputs of these are variable, so we can/* REPLACED */''t just print their results
-- directly, but we can at least verify that the code doesn/* REPLACED */''t fail.
--
select setting as segsize
from pg_settings where name = 'wal_segment_size'
\gset

select count(*) > 0 as ok from pg_ls_waldir();
RESULT:
	postgres: syntax error at or near "\"
LINE 11: \gset
         ^


-----------
QUERY:

-- Test ProjectSet as well as FunctionScan
select count(*) > 0 as ok from (select pg_ls_waldir()) ss;
RESULT:
	postgres: [(True,)]

-----------
QUERY:

-- Test not-run-to-completion cases.
select * from pg_ls_waldir() limit 0;
RESULT:
	postgres: []

-----------
QUERY:

select count(*) > 0 as ok from (select * from pg_ls_waldir() limit 1) ss;
RESULT:
	postgres: [(True,)]

-----------
QUERY:

select (w).size = :segsize as ok
from (select pg_ls_waldir() w) ss where length((w).name) = 24 limit 1;
RESULT:
	postgres: syntax error at or near ":"
LINE 2: select (w).size = :segsize as ok
                          ^


-----------
QUERY:


select count(*) >= 0 as ok from pg_ls_archive_statusdir();
RESULT:
	postgres: [(True,)]

-----------
QUERY:


-- pg_read_file()
select length(pg_read_file('postmaster.pid')) > 20;
RESULT:
	postgres: [(True,)]

-----------
QUERY:

select length(pg_read_file('postmaster.pid', 1, 20));
RESULT:
	postgres: [(20,)]

-----------
QUERY:

-- Test missing_ok
select pg_read_file('does not exist');
RESULT:
	postgres: could not open file "does not exist" for reading: Datei oder Verzeichnis nicht gefunden


-----------
QUERY:
 -- error
select pg_read_file('does not exist', true) IS NULL;
RESULT:
	postgres: [(True,)]

-----------
QUERY:
 -- ok
-- Test invalid argument
select pg_read_file('does not exist', 0, -1);
RESULT:
	postgres: requested length cannot be negative


-----------
QUERY:
 -- error
select pg_read_file('does not exist', 0, -1, true);
RESULT:
	postgres: requested length cannot be negative


-----------
QUERY:
 -- error

-- pg_read_binary_file()
select length(pg_read_binary_file('postmaster.pid')) > 20;
RESULT:
	postgres: [(True,)]

-----------
QUERY:

select length(pg_read_binary_file('postmaster.pid', 1, 20));
RESULT:
	postgres: [(20,)]

-----------
QUERY:

-- Test missing_ok
select pg_read_binary_file('does not exist');
RESULT:
	postgres: could not open file "does not exist" for reading: Datei oder Verzeichnis nicht gefunden


-----------
QUERY:
 -- error
select pg_read_binary_file('does not exist', true) IS NULL;
RESULT:
	postgres: [(True,)]

-----------
QUERY:
 -- ok
-- Test invalid argument
select pg_read_binary_file('does not exist', 0, -1);
RESULT:
	postgres: requested length cannot be negative


-----------
QUERY:
 -- error
select pg_read_binary_file('does not exist', 0, -1, true);
RESULT:
	postgres: requested length cannot be negative


-----------
QUERY:
 -- error

-- pg_stat_file()
select size > 20, isdir from pg_stat_file('postmaster.pid');
RESULT:
	postgres: [(True, False)]

-----------
QUERY:


-- pg_ls_dir()
select * from (select pg_ls_dir('.') a) a where a = 'base' limit 1;
RESULT:
	postgres: [('base',)]

-----------
QUERY:

-- Test missing_ok (second argument)
select pg_ls_dir('does not exist', false, false);
RESULT:
	postgres: could not open directory "does not exist": Datei oder Verzeichnis nicht gefunden


-----------
QUERY:
 -- error
select pg_ls_dir('does not exist', true, false);
RESULT:
	postgres: []

-----------
QUERY:
 -- ok
-- Test include_dot_dirs (third argument)
select count(*) = 1 as dot_found
  from pg_ls_dir('.', false, true) as ls where ls = '.';
RESULT:
	postgres: [(True,)]

-----------
QUERY:

select count(*) = 1 as dot_found
  from pg_ls_dir('.', false, false) as ls where ls = '.';
RESULT:
	postgres: [(False,)]

-----------
QUERY:


-- pg_timezone_names()
select * from (select (pg_timezone_names()).name) ptn where name='UTC' limit 1;
RESULT:
	postgres: [('UTC',)]

-----------
QUERY:


-- pg_tablespace_databases()
select count(*) > 0 from
  (select pg_tablespace_databases(oid) as pts from pg_tablespace
   where spcname = 'pg_default') pts
  join pg_database db on pts.pts = db.oid;
RESULT:
	postgres: [(True,)]

-----------
QUERY:


--
-- Test replication slot directory functions
--
CREATE ROLE regress_slot_dir_funcs;
RESULT:
	postgres: None

-----------
QUERY:

-- Not available by default.
SELECT has_function_privilege('regress_slot_dir_funcs',
  'pg_ls_logicalsnapdir()', 'EXECUTE');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT has_function_privilege('regress_slot_dir_funcs',
  'pg_ls_logicalmapdir()', 'EXECUTE');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT has_function_privilege('regress_slot_dir_funcs',
  'pg_ls_replslotdir(text)', 'EXECUTE');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

GRANT pg_monitor TO regress_slot_dir_funcs;
RESULT:
	postgres: None

-----------
QUERY:

-- Role is now part of pg_monitor, so these are available.
SELECT has_function_privilege('regress_slot_dir_funcs',
  'pg_ls_logicalsnapdir()', 'EXECUTE');
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT has_function_privilege('regress_slot_dir_funcs',
  'pg_ls_logicalmapdir()', 'EXECUTE');
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT has_function_privilege('regress_slot_dir_funcs',
  'pg_ls_replslotdir(text)', 'EXECUTE');
RESULT:
	postgres: [(True,)]

-----------
QUERY:

DROP ROLE regress_slot_dir_funcs;
RESULT:
	postgres: None

-----------
QUERY:


--
-- Test adding a support function to a subject function
--

CREATE FUNCTION my_int_eq(int, int) RETURNS bool
  LANGUAGE internal STRICT IMMUTABLE PARALLEL SAFE
  AS $$int4eq$$;
RESULT:
	postgres: None

-----------
QUERY:


-- By default, planner does not think that/* REPLACED */''s selective
EXPLAIN (COSTS OFF)
SELECT * FROM tenk1 a JOIN tenk1 b ON a.unique1 = b.unique1
WHERE my_int_eq(a.unique2, 42);
RESULT:
	postgres: [('Hash Join',), ('  Hash Cond: (b.unique1 = a.unique1)',), ('  ->  Seq Scan on tenk1 b',), ('  ->  Hash',), ('        ->  Seq Scan on tenk1 a',), ('              Filter: my_int_eq(unique2, 42)',)]

-----------
QUERY:


-- With support function that knows it/* REPLACED */''s int4eq, we get a different plan
CREATE FUNCTION test_support_func(internal)
    RETURNS internal
    AS /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/postgresql/src/test/regress/regress.so', 'test_support_func'
    LANGUAGE C STRICT;
RESULT:
	postgres: None

-----------
QUERY:


ALTER FUNCTION my_int_eq(int, int) SUPPORT test_support_func;
RESULT:
	postgres: None

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT * FROM tenk1 a JOIN tenk1 b ON a.unique1 = b.unique1
WHERE my_int_eq(a.unique2, 42);
RESULT:
	postgres: [('Nested Loop',), ('  ->  Seq Scan on tenk1 a',), ('        Filter: my_int_eq(unique2, 42)',), ('  ->  Index Scan using tenk1_unique1 on tenk1 b',), ('        Index Cond: (unique1 = a.unique1)',)]

-----------
QUERY:


-- Also test non-default rowcount estimate
CREATE FUNCTION my_gen_series(int, int) RETURNS SETOF integer
  LANGUAGE internal STRICT IMMUTABLE PARALLEL SAFE
  AS $$generate_series_int4$$
  SUPPORT test_support_func;
RESULT:
	postgres: None

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT * FROM tenk1 a JOIN my_gen_series(1,1000) g ON a.unique1 = g;
RESULT:
	postgres: [('Hash Join',), ('  Hash Cond: (g.g = a.unique1)',), ('  ->  Function Scan on my_gen_series g',), ('  ->  Hash',), ('        ->  Seq Scan on tenk1 a',)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT * FROM tenk1 a JOIN my_gen_series(1,10) g ON a.unique1 = g;
RESULT:
	postgres: [('Nested Loop',), ('  ->  Function Scan on my_gen_series g',), ('  ->  Index Scan using tenk1_unique1 on tenk1 a',), ('        Index Cond: (unique1 = g.g)',)]

-----------
QUERY:


-- Test functions for control data
SELECT count(*) > 0 AS ok FROM pg_control_checkpoint();
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT count(*) > 0 AS ok FROM pg_control_init();
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT count(*) > 0 AS ok FROM pg_control_recovery();
RESULT:
	postgres: [(True,)]

-----------
QUERY:

SELECT count(*) > 0 AS ok FROM pg_control_system();
RESULT:
	postgres: [(True,)]

-----------
QUERY:


-- pg_split_walfile_name, pg_walfile_name & pg_walfile_name_offset
SELECT * FROM pg_split_walfile_name(NULL);
RESULT:
	postgres: [(None, None)]

-----------
QUERY:

SELECT * FROM pg_split_walfile_name('invalid');
RESULT:
	postgres: invalid WAL file name "invalid"


-----------
QUERY:

SELECT segment_number > 0 AS ok_segment_number, timeline_id
  FROM pg_split_walfile_name('000000010000000100000000');
RESULT:
	postgres: [(True, 1)]

-----------
QUERY:

SELECT segment_number > 0 AS ok_segment_number, timeline_id
  FROM pg_split_walfile_name('ffffffFF00000001000000af');
RESULT:
	postgres: [(True, 4294967295)]

-----------
QUERY:

SELECT setting::int8 AS segment_size
FROM pg_settings
WHERE name = 'wal_segment_size'
\gset
SELECT segment_number, file_offset
FROM pg_walfile_name_offset('0/0'::pg_lsn + :segment_size),
     pg_split_walfile_name(file_name);
RESULT:
	postgres: syntax error at or near "\"
LINE 5: \gset
        ^


-----------
QUERY:

SELECT segment_number, file_offset
FROM pg_walfile_name_offset('0/0'::pg_lsn + :segment_size + 1),
     pg_split_walfile_name(file_name);
RESULT:
	postgres: syntax error at or near ":"
LINE 3: FROM pg_walfile_name_offset('0/0'::pg_lsn + :segment_size + ...
                                                    ^


-----------
QUERY:

SELECT segment_number, file_offset = :segment_size - 1
FROM pg_walfile_name_offset('0/0'::pg_lsn + :segment_size - 1),
     pg_split_walfile_name(file_name);
RESULT:
	postgres: syntax error at or near ":"
LINE 2: SELECT segment_number, file_offset = :segment_size - 1
                                             ^


-----------
QUERY:


-- test stratnum support functions
SELECT gist_stratnum_identity(3::smallint);
RESULT:
	postgres: [(3,)]

-----------
QUERY:

SELECT gist_stratnum_identity(18::smallint);
RESULT:
	postgres: [(18,)]

-----------
QUERY:


-- pg_current_logfile
CREATE ROLE regress_current_logfile;
RESULT:
	postgres: None

-----------
QUERY:

-- not available by default
SELECT has_function_privilege('regress_current_logfile',
  'pg_current_logfile()', 'EXECUTE');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

GRANT pg_monitor TO regress_current_logfile;
RESULT:
	postgres: None

-----------
QUERY:

-- role has privileges of pg_monitor and can execute the function
SELECT has_function_privilege('regress_current_logfile',
  'pg_current_logfile()', 'EXECUTE');
RESULT:
	postgres: [(True,)]

-----------
QUERY:

DROP ROLE regress_current_logfile;
RESULT:
	postgres: None

-----------
QUERY:


-- pg_column_toast_chunk_id
CREATE TABLE test_chunk_id (a TEXT, b TEXT STORAGE EXTERNAL);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO test_chunk_id VALUES ('x', repeat('x', 8192));
RESULT:
	postgres: None

-----------
QUERY:

SELECT t.relname AS toastrel FROM pg_class c
  LEFT JOIN pg_class t ON c.reltoastrelid = t.oid
  WHERE c.relname = 'test_chunk_id'
\gset
SELECT pg_column_toast_chunk_id(a) IS NULL,
  pg_column_toast_chunk_id(b) IN (SELECT chunk_id FROM pg_toast.:toastrel)
  FROM test_chunk_id;
RESULT:
	postgres: syntax error at or near "\"
LINE 5: \gset
        ^


-----------
QUERY:

DROP TABLE test_chunk_id;
RESULT:
	postgres: None
