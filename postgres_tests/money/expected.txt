
-----------
QUERY:
--
-- MONEY
--
-- Note that we assume lc_monetary has been set to C.
--

CREATE TABLE money_data (m money);
RESULT:
	postgres: None

-----------
QUERY:


INSERT INTO money_data VALUES ('123');
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM money_data;
RESULT:
	postgres: [('CHF 123.00',)]

-----------
QUERY:

SELECT m + '123' FROM money_data;
RESULT:
	postgres: [('CHF 246.00',)]

-----------
QUERY:

SELECT m + '123.45' FROM money_data;
RESULT:
	postgres: [('CHF 246.45',)]

-----------
QUERY:

SELECT m - '123.45' FROM money_data;
RESULT:
	postgres: [('CHF- 0.45',)]

-----------
QUERY:

SELECT m / '2'::money FROM money_data;
RESULT:
	postgres: [(61.5,)]

-----------
QUERY:

SELECT m * 2 FROM money_data;
RESULT:
	postgres: [('CHF 246.00',)]

-----------
QUERY:

SELECT 2 * m FROM money_data;
RESULT:
	postgres: [('CHF 246.00',)]

-----------
QUERY:

SELECT m / 2 FROM money_data;
RESULT:
	postgres: [('CHF 61.50',)]

-----------
QUERY:

SELECT m * 2::int2 FROM money_data;
RESULT:
	postgres: [('CHF 246.00',)]

-----------
QUERY:

SELECT 2::int2 * m FROM money_data;
RESULT:
	postgres: [('CHF 246.00',)]

-----------
QUERY:

SELECT m / 2::int2 FROM money_data;
RESULT:
	postgres: [('CHF 61.50',)]

-----------
QUERY:

SELECT m * 2::int8 FROM money_data;
RESULT:
	postgres: [('CHF 246.00',)]

-----------
QUERY:

SELECT 2::int8 * m FROM money_data;
RESULT:
	postgres: [('CHF 246.00',)]

-----------
QUERY:

SELECT m / 2::int8 FROM money_data;
RESULT:
	postgres: [('CHF 61.50',)]

-----------
QUERY:

SELECT m * 2::float8 FROM money_data;
RESULT:
	postgres: [('CHF 246.00',)]

-----------
QUERY:

SELECT 2::float8 * m FROM money_data;
RESULT:
	postgres: [('CHF 246.00',)]

-----------
QUERY:

SELECT m / 2::float8 FROM money_data;
RESULT:
	postgres: [('CHF 61.50',)]

-----------
QUERY:

SELECT m * 2::float4 FROM money_data;
RESULT:
	postgres: [('CHF 246.00',)]

-----------
QUERY:

SELECT 2::float4 * m FROM money_data;
RESULT:
	postgres: [('CHF 246.00',)]

-----------
QUERY:

SELECT m / 2::float4 FROM money_data;
RESULT:
	postgres: [('CHF 61.50',)]

-----------
QUERY:


-- All true
SELECT m = '$123.00' FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$123.00"
LINE 4: SELECT m = '$123.00' FROM money_data;
                   ^


-----------
QUERY:

SELECT m != '$124.00' FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$124.00"
LINE 2: SELECT m != '$124.00' FROM money_data;
                    ^


-----------
QUERY:

SELECT m <= '$123.00' FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$123.00"
LINE 2: SELECT m <= '$123.00' FROM money_data;
                    ^


-----------
QUERY:

SELECT m >= '$123.00' FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$123.00"
LINE 2: SELECT m >= '$123.00' FROM money_data;
                    ^


-----------
QUERY:

SELECT m < '$124.00' FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$124.00"
LINE 2: SELECT m < '$124.00' FROM money_data;
                   ^


-----------
QUERY:

SELECT m > '$122.00' FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$122.00"
LINE 2: SELECT m > '$122.00' FROM money_data;
                   ^


-----------
QUERY:


-- All false
SELECT m = '$123.01' FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$123.01"
LINE 4: SELECT m = '$123.01' FROM money_data;
                   ^


-----------
QUERY:

SELECT m != '$123.00' FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$123.00"
LINE 2: SELECT m != '$123.00' FROM money_data;
                    ^


-----------
QUERY:

SELECT m <= '$122.99' FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$122.99"
LINE 2: SELECT m <= '$122.99' FROM money_data;
                    ^


-----------
QUERY:

SELECT m >= '$123.01' FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$123.01"
LINE 2: SELECT m >= '$123.01' FROM money_data;
                    ^


-----------
QUERY:

SELECT m > '$124.00' FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$124.00"
LINE 2: SELECT m > '$124.00' FROM money_data;
                   ^


-----------
QUERY:

SELECT m < '$122.00' FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$122.00"
LINE 2: SELECT m < '$122.00' FROM money_data;
                   ^


-----------
QUERY:


SELECT cashlarger(m, '$124.00') FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$124.00"
LINE 3: SELECT cashlarger(m, '$124.00') FROM money_data;
                             ^


-----------
QUERY:

SELECT cashsmaller(m, '$124.00') FROM money_data;
RESULT:
	postgres: invalid input syntax for type money: "$124.00"
LINE 2: SELECT cashsmaller(m, '$124.00') FROM money_data;
                              ^


-----------
QUERY:

SELECT cash_words(m) FROM money_data;
RESULT:
	postgres: [('One hundred twenty three dollars and zero cents',)]

-----------
QUERY:

SELECT cash_words(m + '1.23') FROM money_data;
RESULT:
	postgres: [('One hundred twenty four dollars and twenty three cents',)]

-----------
QUERY:


DELETE FROM money_data;
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO money_data VALUES ('$123.45');
RESULT:
	postgres: invalid input syntax for type money: "$123.45"
LINE 2: INSERT INTO money_data VALUES ('$123.45');
                                       ^


-----------
QUERY:

SELECT * FROM money_data;
RESULT:
	postgres: []

-----------
QUERY:


DELETE FROM money_data;
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO money_data VALUES ('$123.451');
RESULT:
	postgres: invalid input syntax for type money: "$123.451"
LINE 2: INSERT INTO money_data VALUES ('$123.451');
                                       ^


-----------
QUERY:

SELECT * FROM money_data;
RESULT:
	postgres: []

-----------
QUERY:


DELETE FROM money_data;
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO money_data VALUES ('$123.454');
RESULT:
	postgres: invalid input syntax for type money: "$123.454"
LINE 2: INSERT INTO money_data VALUES ('$123.454');
                                       ^


-----------
QUERY:

SELECT * FROM money_data;
RESULT:
	postgres: []

-----------
QUERY:


DELETE FROM money_data;
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO money_data VALUES ('$123.455');
RESULT:
	postgres: invalid input syntax for type money: "$123.455"
LINE 2: INSERT INTO money_data VALUES ('$123.455');
                                       ^


-----------
QUERY:

SELECT * FROM money_data;
RESULT:
	postgres: []

-----------
QUERY:


DELETE FROM money_data;
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO money_data VALUES ('$123.456');
RESULT:
	postgres: invalid input syntax for type money: "$123.456"
LINE 2: INSERT INTO money_data VALUES ('$123.456');
                                       ^


-----------
QUERY:

SELECT * FROM money_data;
RESULT:
	postgres: []

-----------
QUERY:


DELETE FROM money_data;
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO money_data VALUES ('$123.459');
RESULT:
	postgres: invalid input syntax for type money: "$123.459"
LINE 2: INSERT INTO money_data VALUES ('$123.459');
                                       ^


-----------
QUERY:

SELECT * FROM money_data;
RESULT:
	postgres: []

-----------
QUERY:


-- input checks
SELECT '1234567890'::money;
RESULT:
	postgres: [('CHF 1’234’567’890.00',)]

-----------
QUERY:

SELECT '12345678901234567'::money;
RESULT:
	postgres: [('CHF 12’345’678’901’234’567.00',)]

-----------
QUERY:

SELECT '123456789012345678'::money;
RESULT:
	postgres: value "123456789012345678" is out of range for type money
LINE 2: SELECT '123456789012345678'::money;
               ^


-----------
QUERY:

SELECT '9223372036854775807'::money;
RESULT:
	postgres: value "9223372036854775807" is out of range for type money
LINE 2: SELECT '9223372036854775807'::money;
               ^


-----------
QUERY:

SELECT '-12345'::money;
RESULT:
	postgres: [('CHF- 12’345.00',)]

-----------
QUERY:

SELECT '-1234567890'::money;
RESULT:
	postgres: [('CHF- 1’234’567’890.00',)]

-----------
QUERY:

SELECT '-12345678901234567'::money;
RESULT:
	postgres: [('CHF- 12’345’678’901’234’567.00',)]

-----------
QUERY:

SELECT '-123456789012345678'::money;
RESULT:
	postgres: value "-123456789012345678" is out of range for type money
LINE 2: SELECT '-123456789012345678'::money;
               ^


-----------
QUERY:

SELECT '-9223372036854775808'::money;
RESULT:
	postgres: value "-9223372036854775808" is out of range for type money
LINE 2: SELECT '-9223372036854775808'::money;
               ^


-----------
QUERY:


-- special characters
SELECT '(1)'::money;
RESULT:
	postgres: [('CHF- 1.00',)]

-----------
QUERY:

SELECT '($123,456.78)'::money;
RESULT:
	postgres: invalid input syntax for type money: "($123,456.78)"
LINE 2: SELECT '($123,456.78)'::money;
               ^


-----------
QUERY:


-- test non-error-throwing API
SELECT pg_input_is_valid('\x0001', 'money');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('\x0001', 'money');
RESULT:
	postgres: [('invalid input syntax for type money: "\\x0001"', None, None, '22P02')]

-----------
QUERY:

SELECT pg_input_is_valid('192233720368547758.07', 'money');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('192233720368547758.07', 'money');
RESULT:
	postgres: [('value "192233720368547758.07" is out of range for type money', None, None, '22003')]

-----------
QUERY:


-- documented minimums and maximums
SELECT '-92233720368547758.08'::money;
RESULT:
	postgres: [('CHF- 92’233’720’368’547’758.08',)]

-----------
QUERY:

SELECT '92233720368547758.07'::money;
RESULT:
	postgres: [('CHF 92’233’720’368’547’758.07',)]

-----------
QUERY:


SELECT '-92233720368547758.09'::money;
RESULT:
	postgres: value "-92233720368547758.09" is out of range for type money
LINE 3: SELECT '-92233720368547758.09'::money;
               ^


-----------
QUERY:

SELECT '92233720368547758.08'::money;
RESULT:
	postgres: value "92233720368547758.08" is out of range for type money
LINE 2: SELECT '92233720368547758.08'::money;
               ^


-----------
QUERY:


-- rounding
SELECT '-92233720368547758.085'::money;
RESULT:
	postgres: value "-92233720368547758.085" is out of range for type money
LINE 4: SELECT '-92233720368547758.085'::money;
               ^


-----------
QUERY:

SELECT '92233720368547758.075'::money;
RESULT:
	postgres: value "92233720368547758.075" is out of range for type money
LINE 2: SELECT '92233720368547758.075'::money;
               ^


-----------
QUERY:


-- rounding vs. truncation in division
SELECT '878.08'::money / 11::float8;
RESULT:
	postgres: [('CHF 79.83',)]

-----------
QUERY:

SELECT '878.08'::money / 11::float4;
RESULT:
	postgres: [('CHF 79.83',)]

-----------
QUERY:

SELECT '878.08'::money / 11::bigint;
RESULT:
	postgres: [('CHF 79.82',)]

-----------
QUERY:

SELECT '878.08'::money / 11::int;
RESULT:
	postgres: [('CHF 79.82',)]

-----------
QUERY:

SELECT '878.08'::money / 11::smallint;
RESULT:
	postgres: [('CHF 79.82',)]

-----------
QUERY:


-- check for precision loss in division
SELECT '90000000000000099.00'::money / 10::bigint;
RESULT:
	postgres: [('CHF 9’000’000’000’000’009.90',)]

-----------
QUERY:

SELECT '90000000000000099.00'::money / 10::int;
RESULT:
	postgres: [('CHF 9’000’000’000’000’009.90',)]

-----------
QUERY:

SELECT '90000000000000099.00'::money / 10::smallint;
RESULT:
	postgres: [('CHF 9’000’000’000’000’009.90',)]

-----------
QUERY:


-- Cast int4/int8/numeric to money
SELECT 1234567890::money;
RESULT:
	postgres: [('CHF 1’234’567’890.00',)]

-----------
QUERY:

SELECT 12345678901234567::money;
RESULT:
	postgres: [('CHF 12’345’678’901’234’567.00',)]

-----------
QUERY:

SELECT (-12345)::money;
RESULT:
	postgres: [('CHF- 12’345.00',)]

-----------
QUERY:

SELECT (-1234567890)::money;
RESULT:
	postgres: [('CHF- 1’234’567’890.00',)]

-----------
QUERY:

SELECT (-12345678901234567)::money;
RESULT:
	postgres: [('CHF- 12’345’678’901’234’567.00',)]

-----------
QUERY:

SELECT 1234567890::int4::money;
RESULT:
	postgres: [('CHF 1’234’567’890.00',)]

-----------
QUERY:

SELECT 12345678901234567::int8::money;
RESULT:
	postgres: [('CHF 12’345’678’901’234’567.00',)]

-----------
QUERY:

SELECT 12345678901234567::numeric::money;
RESULT:
	postgres: [('CHF 12’345’678’901’234’567.00',)]

-----------
QUERY:

SELECT (-1234567890)::int4::money;
RESULT:
	postgres: [('CHF- 1’234’567’890.00',)]

-----------
QUERY:

SELECT (-12345678901234567)::int8::money;
RESULT:
	postgres: [('CHF- 12’345’678’901’234’567.00',)]

-----------
QUERY:

SELECT (-12345678901234567)::numeric::money;
RESULT:
	postgres: [('CHF- 12’345’678’901’234’567.00',)]

-----------
QUERY:


-- Cast from money to numeric
SELECT '12345678901234567'::money::numeric;
RESULT:
	postgres: [(Decimal('12345678901234567.00'),)]

-----------
QUERY:

SELECT '-12345678901234567'::money::numeric;
RESULT:
	postgres: [(Decimal('-12345678901234567.00'),)]

-----------
QUERY:

SELECT '92233720368547758.07'::money::numeric;
RESULT:
	postgres: [(Decimal('92233720368547758.07'),)]

-----------
QUERY:

SELECT '-92233720368547758.08'::money::numeric;
RESULT:
	postgres: [(Decimal('-92233720368547758.08'),)]
