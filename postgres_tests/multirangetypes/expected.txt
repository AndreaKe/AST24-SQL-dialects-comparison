
-----------
QUERY:
-- Tests for multirange data types.

--
-- test input parser
--

-- negative tests /* REPLACED */ , should fail
select ''::textmultirange;
RESULT:
	ERROR - malformed multirange literal: ""
LINE 8: select ''::textmultirange;
               ^
DETAIL:  Missing left brace.


-----------
QUERY:

select '{,}'::textmultirange;
RESULT:
	ERROR - malformed multirange literal: "{,}"
LINE 2: select '{,}'::textmultirange;
               ^
DETAIL:  Expected range start.


-----------
QUERY:

select '{(,)}.'::textmultirange;
RESULT:
	ERROR - malformed multirange literal: "{(,)}."
LINE 2: select '{(,)}.'::textmultirange;
               ^
DETAIL:  Junk after closing right brace.


-----------
QUERY:

select '{[a,c),}'::textmultirange;
RESULT:
	ERROR - malformed multirange literal: "{[a,c),}"
LINE 2: select '{[a,c),}'::textmultirange;
               ^
DETAIL:  Expected range start.


-----------
QUERY:

select '{,[a,c)}'::textmultirange;
RESULT:
	ERROR - malformed multirange literal: "{,[a,c)}"
LINE 2: select '{,[a,c)}'::textmultirange;
               ^
DETAIL:  Expected range start.


-----------
QUERY:

select '{-[a,z)}'::textmultirange;
RESULT:
	ERROR - malformed multirange literal: "{-[a,z)}"
LINE 2: select '{-[a,z)}'::textmultirange;
               ^
DETAIL:  Expected range start.


-----------
QUERY:

select '{[a,z) - }'::textmultirange;
RESULT:
	ERROR - malformed multirange literal: "{[a,z) - }"
LINE 2: select '{[a,z) - }'::textmultirange;
               ^
DETAIL:  Expected comma or end of multirange.


-----------
QUERY:

select '{(",a)}'::textmultirange;
RESULT:
	ERROR - malformed multirange literal: "{(",a)}"
LINE 2: select '{(",a)}'::textmultirange;
               ^
DETAIL:  Unexpected end of input.


-----------
QUERY:

select '{(,,a)}'::textmultirange;
RESULT:
	ERROR - malformed range literal: "(,,a)"
LINE 2: select '{(,,a)}'::textmultirange;
               ^
DETAIL:  Too many commas.


-----------
QUERY:

select '{(),a)}'::textmultirange;
RESULT:
	ERROR - malformed range literal: "()"
LINE 2: select '{(),a)}'::textmultirange;
               ^
DETAIL:  Missing comma after lower bound.


-----------
QUERY:

select '{(a,))}'::textmultirange;
RESULT:
	ERROR - malformed multirange literal: "{(a,))}"
LINE 2: select '{(a,))}'::textmultirange;
               ^
DETAIL:  Expected comma or end of multirange.


-----------
QUERY:

select '{(],a)}'::textmultirange;
RESULT:
	ERROR - malformed range literal: "(]"
LINE 2: select '{(],a)}'::textmultirange;
               ^
DETAIL:  Missing comma after lower bound.


-----------
QUERY:

select '{(a,])}'::textmultirange;
RESULT:
	ERROR - malformed multirange literal: "{(a,])}"
LINE 2: select '{(a,])}'::textmultirange;
               ^
DETAIL:  Expected comma or end of multirange.


-----------
QUERY:

select '{[z,a]}'::textmultirange;
RESULT:
	ERROR - range lower bound must be less than or equal to range upper bound
LINE 2: select '{[z,a]}'::textmultirange;
               ^


-----------
QUERY:


-- should succeed
select '{}'::textmultirange;
RESULT:
	[('{}',)]

-----------
QUERY:

select '  {}  '::textmultirange;
RESULT:
	[('{}',)]

-----------
QUERY:

select ' { empty, empty }  '::textmultirange;
RESULT:
	[('{}',)]

-----------
QUERY:

select ' {( " a " " a ", " z " " z " )  }'::textmultirange;
RESULT:
	[('{("  a   a ","  z   z  ")}',)]

-----------
QUERY:

select textrange('\\\\', repeat('a', 200))::textmultirange;
RESULT:
	[('{["\\\\\\\\\\\\\\\\",aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)}',)]

-----------
QUERY:

select '{(,z)}'::textmultirange;
RESULT:
	[('{(,z)}',)]

-----------
QUERY:

select '{(a,)}'::textmultirange;
RESULT:
	[('{(a,)}',)]

-----------
QUERY:

select '{[,z]}'::textmultirange;
RESULT:
	[('{(,z]}',)]

-----------
QUERY:

select '{[a,]}'::textmultirange;
RESULT:
	[('{[a,)}',)]

-----------
QUERY:

select '{(,)}'::textmultirange;
RESULT:
	[('{(,)}',)]

-----------
QUERY:

select '{[ , ]}'::textmultirange;
RESULT:
	[('{[" "," "]}',)]

-----------
QUERY:

select '{["",""]}'::textmultirange;
RESULT:
	[('{["",""]}',)]

-----------
QUERY:

select '{[",",","]}'::textmultirange;
RESULT:
	[('{[",",","]}',)]

-----------
QUERY:

select '{["\\","\\"]}'::textmultirange;
RESULT:
	[('{["\\\\","\\\\"]}',)]

-----------
QUERY:

select '{["""","\""]}'::textmultirange;
RESULT:
	[('{["""",""""]}',)]

-----------
QUERY:

select '{(\\,a)}'::textmultirange;
RESULT:
	[('{("\\\\",a)}',)]

-----------
QUERY:

select '{((,z)}'::textmultirange;
RESULT:
	[('{("(",z)}',)]

-----------
QUERY:

select '{([,z)}'::textmultirange;
RESULT:
	[('{("[",z)}',)]

-----------
QUERY:

select '{(!,()}'::textmultirange;
RESULT:
	[('{(!,"(")}',)]

-----------
QUERY:

select '{(!,[)}'::textmultirange;
RESULT:
	[('{(!,"[")}',)]

-----------
QUERY:

select '{[a,a]}'::textmultirange;
RESULT:
	[('{[a,a]}',)]

-----------
QUERY:

select '{[a,a],[a,b]}'::textmultirange;
RESULT:
	[('{[a,b]}',)]

-----------
QUERY:

select '{[a,b), [b,e]}'::textmultirange;
RESULT:
	[('{[a,e]}',)]

-----------
QUERY:

select '{[a,d), [b,f]}'::textmultirange;
RESULT:
	[('{[a,f]}',)]

-----------
QUERY:

select '{[a,a],[b,b]}'::textmultirange;
RESULT:
	[('{[a,a],[b,b]}',)]

-----------
QUERY:

-- without canonicalization, we can/* REPLACED */ ''t join these:
select '{[a,a], [b,b]}'::textmultirange;
RESULT:
	[('{[a,a],[b,b]}',)]

-----------
QUERY:

-- with canonicalization, we can join these:
select '{[1,2], [3,4]}'::int4multirange;
RESULT:
	[('{[1,5)}',)]

-----------
QUERY:

select '{[a,a], [b,b], [c,c]}'::textmultirange;
RESULT:
	[('{[a,a],[b,b],[c,c]}',)]

-----------
QUERY:

select '{[a,d], [b,e]}'::textmultirange;
RESULT:
	[('{[a,e]}',)]

-----------
QUERY:

select '{[a,d), [d,e)}'::textmultirange;
RESULT:
	[('{[a,e)}',)]

-----------
QUERY:

-- these are allowed but normalize to empty:
select '{[a,a)}'::textmultirange;
RESULT:
	[('{}',)]

-----------
QUERY:

select '{(a,a]}'::textmultirange;
RESULT:
	[('{}',)]

-----------
QUERY:

select '{(a,a)}'::textmultirange;
RESULT:
	[('{}',)]

-----------
QUERY:


-- Also try it with non-error-throwing API
select pg_input_is_valid('{[1,2], [4,5]}', 'int4multirange');
RESULT:
	[(True,)]

-----------
QUERY:

select pg_input_is_valid('{[1,2], [4,5]', 'int4multirange');
RESULT:
	[(False,)]

-----------
QUERY:

select * from pg_input_error_info('{[1,2], [4,5]', 'int4multirange');
RESULT:
	[('malformed multirange literal: "{[1,2], [4,5]"', 'Unexpected end of input.', None, '22P02')]

-----------
QUERY:

select pg_input_is_valid('{[1,2], [4,zed]}', 'int4multirange');
RESULT:
	[(False,)]

-----------
QUERY:

select * from pg_input_error_info('{[1,2], [4,zed]}', 'int4multirange');
RESULT:
	[('invalid input syntax for type integer: "zed"', None, None, '22P02')]

-----------
QUERY:


--
-- test the constructor
---
select textmultirange();
RESULT:
	[('{}',)]

-----------
QUERY:

select textmultirange(textrange('a', 'c'));
RESULT:
	[('{[a,c)}',)]

-----------
QUERY:

select textmultirange(textrange('a', 'c'), textrange('f', 'g'));
RESULT:
	[('{[a,c),[f,g)}',)]

-----------
QUERY:

select textmultirange(textrange('\\\\', repeat('a', 200)), textrange('c', 'd'));
RESULT:
	[('{["\\\\\\\\\\\\\\\\",aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa),[c,d)}',)]

-----------
QUERY:


--
-- test casts, both a built-in range type and a user-defined one:
--
select 'empty'::int4range::int4multirange;
RESULT:
	[('{}',)]

-----------
QUERY:

select int4range(1, 3)::int4multirange;
RESULT:
	[('{[1,3)}',)]

-----------
QUERY:

select int4range(1, null)::int4multirange;
RESULT:
	[('{[1,)}',)]

-----------
QUERY:

select int4range(null, null)::int4multirange;
RESULT:
	[('{(,)}',)]

-----------
QUERY:

select 'empty'::textrange::textmultirange;
RESULT:
	[('{}',)]

-----------
QUERY:

select textrange('a', 'c')::textmultirange;
RESULT:
	[('{[a,c)}',)]

-----------
QUERY:

select textrange('a', null)::textmultirange;
RESULT:
	[('{[a,)}',)]

-----------
QUERY:

select textrange(null, null)::textmultirange;
RESULT:
	[('{(,)}',)]

-----------
QUERY:


--
-- test unnest(multirange) function
--
select unnest(int4multirange(int4range('5', '6'), int4range('1', '2')));
RESULT:
	[(NumericRange(1, 2, '[)'),), (NumericRange(5, 6, '[)'),)]

-----------
QUERY:

select unnest(textmultirange(textrange('a', 'b'), textrange('d', 'e')));
RESULT:
	[('[a,b)',), ('[d,e)',)]

-----------
QUERY:

select unnest(textmultirange(textrange('\\\\', repeat('a', 200)), textrange('c', 'd')));
RESULT:
	[('["\\\\\\\\\\\\\\\\",aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa)',), ('[c,d)',)]

-----------
QUERY:


--
-- create some test data and test the operators
--

CREATE TABLE nummultirange_test (nmr NUMMULTIRANGE);
RESULT:
	[]

-----------
QUERY:

CREATE INDEX nummultirange_test_btree ON nummultirange_test(nmr);
RESULT:
	[]

-----------
QUERY:


INSERT INTO nummultirange_test VALUES('{}');
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test VALUES('{[,)}');
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test VALUES('{[3,]}');
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test VALUES('{[,), [3,]}');
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test VALUES('{[, 5)}');
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test VALUES(nummultirange());
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test VALUES(nummultirange(variadic '{}'::numrange[]));
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test VALUES(nummultirange(numrange(1.1, 2.2)));
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test VALUES('{empty}');
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test VALUES(nummultirange(numrange(1.7, 1.7, '[]'), numrange(1.7, 1.9)));
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test VALUES(nummultirange(numrange(1.7, 1.7, '[]'), numrange(1.9, 2.1)));
RESULT:
	[]

-----------
QUERY:


SELECT nmr, isempty(nmr), lower(nmr), upper(nmr) FROM nummultirange_test ORDER BY nmr;
RESULT:
	[('{}', True, None, None), ('{}', True, None, None), ('{}', True, None, None), ('{}', True, None, None), ('{(,5)}', False, None, Decimal('5')), ('{(,)}', False, None, None), ('{(,)}', False, None, None), ('{[1.1,2.2)}', False, Decimal('1.1'), Decimal('2.2')), ('{[1.7,1.7],[1.9,2.1)}', False, Decimal('1.7'), Decimal('2.1')), ('{[1.7,1.9)}', False, Decimal('1.7'), Decimal('1.9')), ('{[3,)}', False, Decimal('3'), None)]

-----------
QUERY:

SELECT nmr, lower_inc(nmr), lower_inf(nmr), upper_inc(nmr), upper_inf(nmr) FROM nummultirange_test ORDER BY nmr;
RESULT:
	[('{}', False, False, False, False), ('{}', False, False, False, False), ('{}', False, False, False, False), ('{}', False, False, False, False), ('{(,5)}', False, True, False, False), ('{(,)}', False, True, False, True), ('{(,)}', False, True, False, True), ('{[1.1,2.2)}', True, False, False, False), ('{[1.7,1.7],[1.9,2.1)}', True, False, False, False), ('{[1.7,1.9)}', True, False, False, False), ('{[3,)}', True, False, False, True)]

-----------
QUERY:


SELECT * FROM nummultirange_test WHERE nmr = '{}';
RESULT:
	[('{}',), ('{}',), ('{}',), ('{}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr = '{(,5)}';
RESULT:
	[('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr = '{[3,)}';
RESULT:
	[('{[3,)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr = '{[1.7,1.7]}';
RESULT:
	[]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr = '{[1.7,1.7],[1.9,2.1)}';
RESULT:
	[('{[1.7,1.7],[1.9,2.1)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr < '{}';
RESULT:
	[]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr < '{[-1000.0, -1000.0]}';
RESULT:
	[('{}',), ('{(,)}',), ('{(,)}',), ('{(,5)}',), ('{}',), ('{}',), ('{}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr < '{[0.0, 1.0]}';
RESULT:
	[('{}',), ('{(,)}',), ('{(,)}',), ('{(,5)}',), ('{}',), ('{}',), ('{}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr < '{[1000.0, 1001.0]}';
RESULT:
	[('{}',), ('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',), ('{}',), ('{}',), ('{[1.1,2.2)}',), ('{}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr <= '{}';
RESULT:
	[('{}',), ('{}',), ('{}',), ('{}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr <= '{[3,)}';
RESULT:
	[('{}',), ('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',), ('{}',), ('{}',), ('{[1.1,2.2)}',), ('{}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr >= '{}';
RESULT:
	[('{}',), ('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',), ('{}',), ('{}',), ('{[1.1,2.2)}',), ('{}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr >= '{[3,)}';
RESULT:
	[('{[3,)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr > '{}';
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',), ('{[1.1,2.2)}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr > '{[-1000.0, -1000.0]}';
RESULT:
	[('{[3,)}',), ('{[1.1,2.2)}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr > '{[0.0, 1.0]}';
RESULT:
	[('{[3,)}',), ('{[1.1,2.2)}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr > '{[1000.0, 1001.0]}';
RESULT:
	[]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr <> '{}';
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',), ('{[1.1,2.2)}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr <> '{(,5)}';
RESULT:
	[('{}',), ('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{}',), ('{}',), ('{[1.1,2.2)}',), ('{}',), ('{[1.7,1.9)}',), ('{[1.7,1.7],[1.9,2.1)}',)]

-----------
QUERY:


select nummultirange(numrange(2.0, 1.0));
RESULT:
	ERROR - range lower bound must be less than or equal to range upper bound


-----------
QUERY:

select nummultirange(numrange(5.0, 6.0), numrange(1.0, 2.0));
RESULT:
	[('{[1.0,2.0),[5.0,6.0)}',)]

-----------
QUERY:


analyze nummultirange_test;
RESULT:
	[]

-----------
QUERY:


-- overlaps
SELECT * FROM nummultirange_test WHERE range_overlaps_multirange(numrange(4.0, 4.2), nmr);
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE numrange(4.0, 4.2) && nmr;
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE multirange_overlaps_range(nmr, numrange(4.0, 4.2));
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr && numrange(4.0, 4.2);
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE multirange_overlaps_multirange(nmr, nummultirange(numrange(4.0, 4.2), numrange(6.0, 7.0)));
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr && nummultirange(numrange(4.0, 4.2), numrange(6.0, 7.0));
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr && nummultirange(numrange(6.0, 7.0));
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr && nummultirange(numrange(6.0, 7.0), numrange(8.0, 9.0));
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',)]

-----------
QUERY:


-- mr contains x
SELECT * FROM nummultirange_test WHERE multirange_contains_elem(nmr, 4.0);
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr @> 4.0;
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE multirange_contains_range(nmr, numrange(4.0, 4.2));
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr @> numrange(4.0, 4.2);
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE multirange_contains_multirange(nmr, '{[4.0,4.2), [6.0, 8.0)}');
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE nmr @> '{[4.0,4.2), [6.0, 8.0)}'::nummultirange;
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',)]

-----------
QUERY:


-- x is contained by mr
SELECT * FROM nummultirange_test WHERE elem_contained_by_multirange(4.0, nmr);
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE 4.0 <@ nmr;
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE range_contained_by_multirange(numrange(4.0, 4.2), nmr);
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE numrange(4.0, 4.2) <@ nmr;
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',), ('{(,5)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE multirange_contained_by_multirange('{[4.0,4.2), [6.0, 8.0)}', nmr);
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',)]

-----------
QUERY:

SELECT * FROM nummultirange_test WHERE '{[4.0,4.2), [6.0, 8.0)}'::nummultirange <@ nmr;
RESULT:
	[('{(,)}',), ('{[3,)}',), ('{(,)}',)]

-----------
QUERY:


-- overlaps
SELECT 'empty'::numrange && nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

SELECT 'empty'::numrange && nummultirange(numrange(1,2));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange() && 'empty'::numrange;
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) && 'empty'::numrange;
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange() && nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange() && nummultirange(numrange(1,2));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) && nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,4)) && nummultirange(numrange(1,2), numrange(7,8));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(7,8)) && nummultirange(numrange(3,4));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,4)) && nummultirange(numrange(1,2), numrange(3.5,8));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(3.5,8)) && numrange(3,4);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(3.5,8)) && nummultirange(numrange(3,4));
RESULT:
	[(True,)]

-----------
QUERY:

select '{(10,20),(30,40),(50,60)}'::nummultirange && '(42,92)'::numrange;
RESULT:
	[(True,)]

-----------
QUERY:


-- contains
SELECT nummultirange() @> nummultirange();
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange() @> 'empty'::numrange;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(null,null)) @> numrange(1,2);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(null,null)) @> numrange(null,2);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(null,null)) @> numrange(2,null);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(null,5)) @> numrange(null,3);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(null,5)) @> numrange(null,8);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(5,null)) @> numrange(8,null);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(5,null)) @> numrange(3,null);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,5)) @> numrange(8,9);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,5)) @> numrange(3,9);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,5)) @> numrange(1,4);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,5)) @> numrange(1,5);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(-4,-2), numrange(1,5)) @> numrange(1,5);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,5), numrange(8,9)) @> numrange(1,5);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,5), numrange(8,9)) @> numrange(6,7);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,5), numrange(6,9)) @> numrange(6,7);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[1,5)}'::nummultirange @> '{[1,5)}';
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[-4,-2), [1,5)}'::nummultirange @> '{[1,5)}';
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[1,5), [8,9)}'::nummultirange @> '{[1,5)}';
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[1,5), [8,9)}'::nummultirange @> '{[6,7)}';
RESULT:
	[(False,)]

-----------
QUERY:

SELECT '{[1,5), [6,9)}'::nummultirange @> '{[6,7)}';
RESULT:
	[(True,)]

-----------
QUERY:

select '{(10,20),(30,40),(50,60)}'::nummultirange @> '(52,56)'::numrange;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(null,null) @> nummultirange(numrange(1,2));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(null,null) @> nummultirange(numrange(null,2));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(null,null) @> nummultirange(numrange(2,null));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(null,5) @> nummultirange(numrange(null,3));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(null,5) @> nummultirange(numrange(null,8));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(5,null) @> nummultirange(numrange(8,null));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(5,null) @> nummultirange(numrange(3,null));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(1,5) @> nummultirange(numrange(8,9));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(1,5) @> nummultirange(numrange(3,9));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(1,5) @> nummultirange(numrange(1,4));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(1,5) @> nummultirange(numrange(1,5));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(1,9) @> nummultirange(numrange(-4,-2), numrange(1,5));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(1,9) @> nummultirange(numrange(1,5), numrange(8,9));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(1,9) @> nummultirange(numrange(1,5), numrange(6,9));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(1,9) @> nummultirange(numrange(1,5), numrange(6,10));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT '{[1,9)}' @> '{[1,5)}'::nummultirange;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[1,9)}' @> '{[-4,-2), [1,5)}'::nummultirange;
RESULT:
	[(False,)]

-----------
QUERY:

SELECT '{[1,9)}' @> '{[1,5), [8,9)}'::nummultirange;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[1,9)}' @> '{[1,5), [6,9)}'::nummultirange;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[1,9)}' @> '{[1,5), [6,10)}'::nummultirange;
RESULT:
	[(False,)]

-----------
QUERY:


-- is contained by
SELECT nummultirange() <@ nummultirange();
RESULT:
	[(True,)]

-----------
QUERY:

SELECT 'empty'::numrange <@ nummultirange();
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(1,2) <@ nummultirange(numrange(null,null));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(null,2) <@ nummultirange(numrange(null,null));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(2,null) <@ nummultirange(numrange(null,null));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(null,3) <@ nummultirange(numrange(null,5));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(null,8) <@ nummultirange(numrange(null,5));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(8,null) <@ nummultirange(numrange(5,null));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(3,null) <@ nummultirange(numrange(5,null));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(8,9) <@ nummultirange(numrange(1,5));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(3,9) <@ nummultirange(numrange(1,5));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(1,4) <@ nummultirange(numrange(1,5));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(1,5) <@ nummultirange(numrange(1,5));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(1,5) <@ nummultirange(numrange(-4,-2), numrange(1,5));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(1,5) <@ nummultirange(numrange(1,5), numrange(8,9));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(6,7) <@ nummultirange(numrange(1,5), numrange(8,9));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(6,7) <@ nummultirange(numrange(1,5), numrange(6,9));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[1,5)}' <@ '{[1,5)}'::nummultirange;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[1,5)}' <@ '{[-4,-2), [1,5)}'::nummultirange;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[1,5)}' <@ '{[1,5), [8,9)}'::nummultirange;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[6,7)}' <@ '{[1,5), [8,9)}'::nummultirange;
RESULT:
	[(False,)]

-----------
QUERY:

SELECT '{[6,7)}' <@ '{[1,5), [6,9)}'::nummultirange;
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) <@ numrange(null,null);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(null,2)) <@ numrange(null,null);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(2,null)) <@ numrange(null,null);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(null,3)) <@ numrange(null,5);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(null,8)) <@ numrange(null,5);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(8,null)) <@ numrange(5,null);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,null)) <@ numrange(5,null);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(8,9)) <@ numrange(1,5);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,9)) <@ numrange(1,5);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,4)) <@ numrange(1,5);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,5)) <@ numrange(1,5);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(-4,-2), numrange(1,5)) <@ numrange(1,9);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,5), numrange(8,9)) <@ numrange(1,9);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,5), numrange(6,9)) <@ numrange(1,9);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,5), numrange(6,10)) <@ numrange(1,9);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT '{[1,5)}'::nummultirange <@ '{[1,9)}';
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[-4,-2), [1,5)}'::nummultirange <@ '{[1,9)}';
RESULT:
	[(False,)]

-----------
QUERY:

SELECT '{[1,5), [8,9)}'::nummultirange <@ '{[1,9)}';
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[1,5), [6,9)}'::nummultirange <@ '{[1,9)}';
RESULT:
	[(True,)]

-----------
QUERY:

SELECT '{[1,5), [6,10)}'::nummultirange <@ '{[1,9)}';
RESULT:
	[(False,)]

-----------
QUERY:


-- overleft
SELECT 'empty'::numrange &< nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

SELECT 'empty'::numrange &< nummultirange(numrange(1,2));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange() &< 'empty'::numrange;
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) &< 'empty'::numrange;
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange() &< nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) &< nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange() &< nummultirange(numrange(1,2));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(6,7) &< nummultirange(numrange(3,4));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(1,2) &< nummultirange(numrange(3,4));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(1,4) &< nummultirange(numrange(3,4));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(1,6) &< nummultirange(numrange(3,4));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(3.5,6) &< nummultirange(numrange(3,4));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(6,7)) &< numrange(3,4);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) &< numrange(3,4);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,4)) &< numrange(3,4);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,6)) &< numrange(3,4);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(3.5,6)) &< numrange(3,4);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(6,7)) &< nummultirange(numrange(3,4));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) &< nummultirange(numrange(3,4));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,4)) &< nummultirange(numrange(3,4));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,6)) &< nummultirange(numrange(3,4));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(3.5,6)) &< nummultirange(numrange(3,4));
RESULT:
	[(False,)]

-----------
QUERY:


-- overright
SELECT nummultirange() &> 'empty'::numrange;
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) &> 'empty'::numrange;
RESULT:
	[(False,)]

-----------
QUERY:

SELECT 'empty'::numrange &> nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

SELECT 'empty'::numrange &> nummultirange(numrange(1,2));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange() &> nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange() &> nummultirange(numrange(1,2));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) &> nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,4)) &> numrange(6,7);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,4)) &> numrange(1,2);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,4)) &> numrange(1,4);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,4)) &> numrange(1,6);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,4)) &> numrange(3.5,6);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(3,4) &> nummultirange(numrange(6,7));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(3,4) &> nummultirange(numrange(1,2));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(3,4) &> nummultirange(numrange(1,4));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(3,4) &> nummultirange(numrange(1,6));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(3,4) &> nummultirange(numrange(3.5,6));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,4)) &> nummultirange(numrange(6,7));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,4)) &> nummultirange(numrange(1,2));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,4)) &> nummultirange(numrange(1,4));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,4)) &> nummultirange(numrange(1,6));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(3,4)) &> nummultirange(numrange(3.5,6));
RESULT:
	[(False,)]

-----------
QUERY:


-- meets
SELECT 'empty'::numrange -|- nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

SELECT 'empty'::numrange -|- nummultirange(numrange(1,2));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange() -|- 'empty'::numrange;
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) -|- 'empty'::numrange;
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange() -|- nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) -|- nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange() -|- nummultirange(numrange(1,2));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT numrange(1,2) -|- nummultirange(numrange(2,4));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT numrange(1,2) -|- nummultirange(numrange(3,4));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) -|- numrange(2,4);
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) -|- numrange(3,4);
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) -|- nummultirange(numrange(2,4));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) -|- nummultirange(numrange(3,4));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(5,6)) -|- nummultirange(numrange(3,4));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(5,6)) -|- nummultirange(numrange(6,7));
RESULT:
	[(True,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(5,6)) -|- nummultirange(numrange(8,9));
RESULT:
	[(False,)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) -|- nummultirange(numrange(2,4), numrange(6,7));
RESULT:
	[(True,)]

-----------
QUERY:


-- strictly left
select 'empty'::numrange << nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

select numrange(1,2) << nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

select numrange(1,2) << nummultirange(numrange(3,4));
RESULT:
	[(True,)]

-----------
QUERY:

select numrange(1,2) << nummultirange(numrange(0,4));
RESULT:
	[(False,)]

-----------
QUERY:

select numrange(1,2) << nummultirange(numrange(0,4), numrange(7,8));
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange() << 'empty'::numrange;
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange() << numrange(1,2);
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange(numrange(3,4)) << numrange(3,6);
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange(numrange(0,2)) << numrange(3,6);
RESULT:
	[(True,)]

-----------
QUERY:

select nummultirange(numrange(0,2), numrange(7,8)) << numrange(3,6);
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange(numrange(-4,-2), numrange(0,2)) << numrange(3,6);
RESULT:
	[(True,)]

-----------
QUERY:

select nummultirange() << nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange() << nummultirange(numrange(1,2));
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange(numrange(1,2)) << nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange(numrange(1,2)) << nummultirange(numrange(1,2));
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange(numrange(1,2)) << nummultirange(numrange(3,4));
RESULT:
	[(True,)]

-----------
QUERY:

select nummultirange(numrange(1,2)) << nummultirange(numrange(3,4), numrange(7,8));
RESULT:
	[(True,)]

-----------
QUERY:

select nummultirange(numrange(1,2), numrange(4,5)) << nummultirange(numrange(3,4), numrange(7,8));
RESULT:
	[(False,)]

-----------
QUERY:


-- strictly right
select nummultirange() >> 'empty'::numrange;
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange() >> numrange(1,2);
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange(numrange(3,4)) >> numrange(1,2);
RESULT:
	[(True,)]

-----------
QUERY:

select nummultirange(numrange(0,4)) >> numrange(1,2);
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange(numrange(0,4), numrange(7,8)) >> numrange(1,2);
RESULT:
	[(False,)]

-----------
QUERY:

select 'empty'::numrange >> nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

select numrange(1,2) >> nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

select numrange(3,6) >> nummultirange(numrange(3,4));
RESULT:
	[(False,)]

-----------
QUERY:

select numrange(3,6) >> nummultirange(numrange(0,2));
RESULT:
	[(True,)]

-----------
QUERY:

select numrange(3,6) >> nummultirange(numrange(0,2), numrange(7,8));
RESULT:
	[(False,)]

-----------
QUERY:

select numrange(3,6) >> nummultirange(numrange(-4,-2), numrange(0,2));
RESULT:
	[(True,)]

-----------
QUERY:

select nummultirange() >> nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange(numrange(1,2)) >> nummultirange();
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange() >> nummultirange(numrange(1,2));
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange(numrange(1,2)) >> nummultirange(numrange(1,2));
RESULT:
	[(False,)]

-----------
QUERY:

select nummultirange(numrange(3,4)) >> nummultirange(numrange(1,2));
RESULT:
	[(True,)]

-----------
QUERY:

select nummultirange(numrange(3,4), numrange(7,8)) >> nummultirange(numrange(1,2));
RESULT:
	[(True,)]

-----------
QUERY:

select nummultirange(numrange(3,4), numrange(7,8)) >> nummultirange(numrange(1,2), numrange(4,5));
RESULT:
	[(False,)]

-----------
QUERY:


-- union
SELECT nummultirange() + nummultirange();
RESULT:
	[('{}',)]

-----------
QUERY:

SELECT nummultirange() + nummultirange(numrange(1,2));
RESULT:
	[('{[1,2)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) + nummultirange();
RESULT:
	[('{[1,2)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) + nummultirange(numrange(1,2));
RESULT:
	[('{[1,2)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) + nummultirange(numrange(2,4));
RESULT:
	[('{[1,4)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) + nummultirange(numrange(3,4));
RESULT:
	[('{[1,2),[3,4)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(4,5)) + nummultirange(numrange(2,4));
RESULT:
	[('{[1,5)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(4,5)) + nummultirange(numrange(3,4));
RESULT:
	[('{[1,2),[3,5)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(4,5)) + nummultirange(numrange(0,9));
RESULT:
	[('{[0,9)}',)]

-----------
QUERY:


-- merge
SELECT range_merge(nummultirange());
RESULT:
	[(NumericRange(empty=True),)]

-----------
QUERY:

SELECT range_merge(nummultirange(numrange(1,2)));
RESULT:
	[(NumericRange(Decimal('1'), Decimal('2'), '[)'),)]

-----------
QUERY:

SELECT range_merge(nummultirange(numrange(1,2), numrange(7,8)));
RESULT:
	[(NumericRange(Decimal('1'), Decimal('8'), '[)'),)]

-----------
QUERY:


-- minus
SELECT nummultirange() - nummultirange();
RESULT:
	[('{}',)]

-----------
QUERY:

SELECT nummultirange() - nummultirange(numrange(1,2));
RESULT:
	[('{}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) - nummultirange();
RESULT:
	[('{[1,2)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(3,4)) - nummultirange();
RESULT:
	[('{[1,2),[3,4)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) - nummultirange(numrange(1,2));
RESULT:
	[('{}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) - nummultirange(numrange(2,4));
RESULT:
	[('{[1,2)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) - nummultirange(numrange(3,4));
RESULT:
	[('{[1,2)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,4)) - nummultirange(numrange(1,2));
RESULT:
	[('{[2,4)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,4)) - nummultirange(numrange(2,3));
RESULT:
	[('{[1,2),[3,4)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,4)) - nummultirange(numrange(0,8));
RESULT:
	[('{}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,4)) - nummultirange(numrange(0,2));
RESULT:
	[('{[2,4)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,8)) - nummultirange(numrange(0,2), numrange(3,4));
RESULT:
	[('{[2,3),[4,8)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,8)) - nummultirange(numrange(2,3), numrange(5,null));
RESULT:
	[('{[1,2),[3,5)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(-2,0));
RESULT:
	[('{[1,2),[4,5)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(2,4));
RESULT:
	[('{[1,2),[4,5)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(3,5));
RESULT:
	[('{[1,2)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(0,9));
RESULT:
	[('{}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,3), numrange(4,5)) - nummultirange(numrange(2,9));
RESULT:
	[('{[1,2)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(8,9));
RESULT:
	[('{[1,2),[4,5)}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2), numrange(4,5)) - nummultirange(numrange(-2,0), numrange(8,9));
RESULT:
	[('{[1,2),[4,5)}',)]

-----------
QUERY:


-- intersection
SELECT nummultirange() * nummultirange();
RESULT:
	[('{}',)]

-----------
QUERY:

SELECT nummultirange() * nummultirange(numrange(1,2));
RESULT:
	[('{}',)]

-----------
QUERY:

SELECT nummultirange(numrange(1,2)) * nummultirange();
RESULT:
	[('{}',)]

-----------
QUERY:

SELECT '{[1,3)}'::nummultirange * '{[1,5)}'::nummultirange;
RESULT:
	[('{[1,3)}',)]

-----------
QUERY:

SELECT '{[1,3)}'::nummultirange * '{[0,5)}'::nummultirange;
RESULT:
	[('{[1,3)}',)]

-----------
QUERY:

SELECT '{[1,3)}'::nummultirange * '{[0,2)}'::nummultirange;
RESULT:
	[('{[1,2)}',)]

-----------
QUERY:

SELECT '{[1,3)}'::nummultirange * '{[2,5)}'::nummultirange;
RESULT:
	[('{[2,3)}',)]

-----------
QUERY:

SELECT '{[1,4)}'::nummultirange * '{[2,3)}'::nummultirange;
RESULT:
	[('{[2,3)}',)]

-----------
QUERY:

SELECT '{[1,4)}'::nummultirange * '{[0,2), [3,5)}'::nummultirange;
RESULT:
	[('{[1,2),[3,4)}',)]

-----------
QUERY:

SELECT '{[1,4), [7,10)}'::nummultirange * '{[0,8), [9,12)}'::nummultirange;
RESULT:
	[('{[1,4),[7,8),[9,10)}',)]

-----------
QUERY:

SELECT '{[1,4), [7,10)}'::nummultirange * '{[9,12)}'::nummultirange;
RESULT:
	[('{[9,10)}',)]

-----------
QUERY:

SELECT '{[1,4), [7,10)}'::nummultirange * '{[-5,-4), [5,6), [9,12)}'::nummultirange;
RESULT:
	[('{[9,10)}',)]

-----------
QUERY:

SELECT '{[1,4), [7,10)}'::nummultirange * '{[0,2), [3,8), [9,12)}'::nummultirange;
RESULT:
	[('{[1,2),[3,4),[7,8),[9,10)}',)]

-----------
QUERY:

SELECT '{[1,4), [7,10)}'::nummultirange * '{[0,2), [3,8), [9,12)}'::nummultirange;
RESULT:
	[('{[1,2),[3,4),[7,8),[9,10)}',)]

-----------
QUERY:


-- test GiST index
create table test_multirange_gist(mr int4multirange);
RESULT:
	[]

-----------
QUERY:

insert into test_multirange_gist select int4multirange(int4range(g, g+10),int4range(g+20, g+30),int4range(g+40, g+50)) from generate_series(1,2000) g;
RESULT:
	[]

-----------
QUERY:

insert into test_multirange_gist select '{}'::int4multirange from generate_series(1,500) g;
RESULT:
	[]

-----------
QUERY:

insert into test_multirange_gist select int4multirange(int4range(g, g+10000)) from generate_series(1,1000) g;
RESULT:
	[]

-----------
QUERY:

insert into test_multirange_gist select int4multirange(int4range(NULL, g*10, '(]'), int4range(g*10, g*20, '(]')) from generate_series(1,100) g;
RESULT:
	[]

-----------
QUERY:

insert into test_multirange_gist select int4multirange(int4range(g*10, g*20, '(]'), int4range(g*20, NULL, '(]')) from generate_series(1,100) g;
RESULT:
	[]

-----------
QUERY:

create index test_mulrirange_gist_idx on test_multirange_gist using gist (mr);
RESULT:
	[]

-----------
QUERY:


-- test statistics and selectivity estimation as well
--
-- We don/* REPLACED */ ''t check the accuracy of selectivity estimation, but at least check
-- it doesn/* REPLACED */ ''t fall.
analyze test_multirange_gist;
RESULT:
	[]

-----------
QUERY:


-- first, verify non-indexed results
SET enable_seqscan    = t;
RESULT:
	[]

-----------
QUERY:

SET enable_indexscan  = f;
RESULT:
	[]

-----------
QUERY:

SET enable_bitmapscan = f;
RESULT:
	[]

-----------
QUERY:


select count(*) from test_multirange_gist where mr = '{}'::int4multirange;
RESULT:
	[(500,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> 'empty'::int4range;
RESULT:
	[(3700,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr && 'empty'::int4range;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr <@ 'empty'::int4range;
RESULT:
	[(500,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr << 'empty'::int4range;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr >> 'empty'::int4range;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &< 'empty'::int4range;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &> 'empty'::int4range;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr -|- 'empty'::int4range;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> '{}'::int4multirange;
RESULT:
	[(3700,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> '{}'::int4multirange;
RESULT:
	[(3700,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr && '{}'::int4multirange;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr <@ '{}'::int4multirange;
RESULT:
	[(500,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr << '{}'::int4multirange;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr >> '{}'::int4multirange;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &< '{}'::int4multirange;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &> '{}'::int4multirange;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr -|- '{}'::int4multirange;
RESULT:
	[(0,)]

-----------
QUERY:


select count(*) from test_multirange_gist where mr = int4multirange(int4range(10,20), int4range(30,40), int4range(50,60));
RESULT:
	[(1,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> 10;
RESULT:
	[(120,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> int4range(10,20);
RESULT:
	[(111,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr && int4range(10,20);
RESULT:
	[(139,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr <@ int4range(10,50);
RESULT:
	[(500,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr << int4range(100,500);
RESULT:
	[(54,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr >> int4range(100,500);
RESULT:
	[(2053,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &< int4range(100,500);
RESULT:
	[(474,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &> int4range(100,500);
RESULT:
	[(2893,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr -|- int4range(100,500);
RESULT:
	[(3,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> '{}'::int4multirange;
RESULT:
	[(3700,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> int4multirange(int4range(10,20), int4range(30,40));
RESULT:
	[(110,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr && '{(10,20),(30,40),(50,60)}'::int4multirange;
RESULT:
	[(218,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr <@ '{(10,30),(40,60),(70,90)}'::int4multirange;
RESULT:
	[(500,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr << int4multirange(int4range(100,200), int4range(400,500));
RESULT:
	[(54,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr >> int4multirange(int4range(100,200), int4range(400,500));
RESULT:
	[(2053,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &< int4multirange(int4range(100,200), int4range(400,500));
RESULT:
	[(474,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &> int4multirange(int4range(100,200), int4range(400,500));
RESULT:
	[(2893,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr -|- int4multirange(int4range(100,200), int4range(400,500));
RESULT:
	[(3,)]

-----------
QUERY:


-- now check same queries using index
SET enable_seqscan    = f;
RESULT:
	[]

-----------
QUERY:

SET enable_indexscan  = t;
RESULT:
	[]

-----------
QUERY:

SET enable_bitmapscan = f;
RESULT:
	[]

-----------
QUERY:


select count(*) from test_multirange_gist where mr = '{}'::int4multirange;
RESULT:
	[(500,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> 'empty'::int4range;
RESULT:
	[(3700,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr && 'empty'::int4range;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr <@ 'empty'::int4range;
RESULT:
	[(500,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr << 'empty'::int4range;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr >> 'empty'::int4range;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &< 'empty'::int4range;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &> 'empty'::int4range;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr -|- 'empty'::int4range;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> '{}'::int4multirange;
RESULT:
	[(3700,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> '{}'::int4multirange;
RESULT:
	[(3700,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr && '{}'::int4multirange;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr <@ '{}'::int4multirange;
RESULT:
	[(500,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr << '{}'::int4multirange;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr >> '{}'::int4multirange;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &< '{}'::int4multirange;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &> '{}'::int4multirange;
RESULT:
	[(0,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr -|- '{}'::int4multirange;
RESULT:
	[(0,)]

-----------
QUERY:


select count(*) from test_multirange_gist where mr @> 'empty'::int4range;
RESULT:
	[(3700,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr = int4multirange(int4range(10,20), int4range(30,40), int4range(50,60));
RESULT:
	[(1,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> 10;
RESULT:
	[(120,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> int4range(10,20);
RESULT:
	[(111,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr && int4range(10,20);
RESULT:
	[(139,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr <@ int4range(10,50);
RESULT:
	[(500,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr << int4range(100,500);
RESULT:
	[(54,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr >> int4range(100,500);
RESULT:
	[(2053,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &< int4range(100,500);
RESULT:
	[(474,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &> int4range(100,500);
RESULT:
	[(2893,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr -|- int4range(100,500);
RESULT:
	[(3,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> '{}'::int4multirange;
RESULT:
	[(3700,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr @> int4multirange(int4range(10,20), int4range(30,40));
RESULT:
	[(110,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr && '{(10,20),(30,40),(50,60)}'::int4multirange;
RESULT:
	[(218,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr <@ '{(10,30),(40,60),(70,90)}'::int4multirange;
RESULT:
	[(500,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr << int4multirange(int4range(100,200), int4range(400,500));
RESULT:
	[(54,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr >> int4multirange(int4range(100,200), int4range(400,500));
RESULT:
	[(2053,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &< int4multirange(int4range(100,200), int4range(400,500));
RESULT:
	[(474,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr &> int4multirange(int4range(100,200), int4range(400,500));
RESULT:
	[(2893,)]

-----------
QUERY:

select count(*) from test_multirange_gist where mr -|- int4multirange(int4range(100,200), int4range(400,500));
RESULT:
	[(3,)]

-----------
QUERY:


drop table test_multirange_gist;
RESULT:
	[]

-----------
QUERY:


--
-- range_agg function
--
create table reservations ( room_id integer not null, booked_during daterange );
RESULT:
	[]

-----------
QUERY:

insert into reservations values
-- 1: has a meets and a gap
(1, daterange('2018-07-01', '2018-07-07')),
(1, daterange('2018-07-07', '2018-07-14')),
(1, daterange('2018-07-20', '2018-07-22')),
-- 2: just a single row
(2, daterange('2018-07-01', '2018-07-03')),
-- 3: one null range
(3, NULL),
-- 4: two null ranges
(4, NULL),
(4, NULL),
-- 5: a null range and a non-null range
(5, NULL),
(5, daterange('2018-07-01', '2018-07-03')),
-- 6: has overlap
(6, daterange('2018-07-01', '2018-07-07')),
(6, daterange('2018-07-05', '2018-07-10')),
-- 7: two ranges that meet: no gap or overlap
(7, daterange('2018-07-01', '2018-07-07')),
(7, daterange('2018-07-07', '2018-07-14')),
-- 8: an empty range
(8, 'empty'::daterange)
;
RESULT:
	[]

-----------
QUERY:

SELECT   room_id, range_agg(booked_during)
FROM     reservations
GROUP BY room_id
ORDER BY room_id;
RESULT:
	[(1, '{[2018-07-01,2018-07-14),[2018-07-20,2018-07-22)}'), (2, '{[2018-07-01,2018-07-03)}'), (3, None), (4, None), (5, '{[2018-07-01,2018-07-03)}'), (6, '{[2018-07-01,2018-07-10)}'), (7, '{[2018-07-01,2018-07-14)}'), (8, '{}')]

-----------
QUERY:


-- range_agg on a custom range type too
SELECT  range_agg(r)
FROM    (VALUES
          ('[a,c]'::textrange),
          ('[b,b]'::textrange),
          ('[c,f]'::textrange),
          ('[g,h)'::textrange),
          ('[h,j)'::textrange)
        ) t(r);
RESULT:
	[('{[a,f],[g,j)}',)]

-----------
QUERY:


-- range_agg with multirange inputs
select range_agg(nmr) from nummultirange_test;
RESULT:
	[('{(,)}',)]

-----------
QUERY:

select range_agg(nmr) from nummultirange_test where false;
RESULT:
	[(None,)]

-----------
QUERY:

select range_agg(null::nummultirange) from nummultirange_test;
RESULT:
	[(None,)]

-----------
QUERY:

select range_agg(nmr) from (values ('{}'::nummultirange)) t(nmr);
RESULT:
	[('{}',)]

-----------
QUERY:

select range_agg(nmr) from (values ('{}'::nummultirange), ('{}'::nummultirange)) t(nmr);
RESULT:
	[('{}',)]

-----------
QUERY:

select range_agg(nmr) from (values ('{[1,2]}'::nummultirange)) t(nmr);
RESULT:
	[('{[1,2]}',)]

-----------
QUERY:

select range_agg(nmr) from (values ('{[1,2], [5,6]}'::nummultirange)) t(nmr);
RESULT:
	[('{[1,2],[5,6]}',)]

-----------
QUERY:

select range_agg(nmr) from (values ('{[1,2], [2,3]}'::nummultirange)) t(nmr);
RESULT:
	[('{[1,3]}',)]

-----------
QUERY:

select range_agg(nmr) from (values ('{[1,2]}'::nummultirange), ('{[5,6]}'::nummultirange)) t(nmr);
RESULT:
	[('{[1,2],[5,6]}',)]

-----------
QUERY:

select range_agg(nmr) from (values ('{[1,2]}'::nummultirange), ('{[2,3]}'::nummultirange)) t(nmr);
RESULT:
	[('{[1,3]}',)]

-----------
QUERY:


--
-- range_intersect_agg function
--
select range_intersect_agg(nmr) from nummultirange_test;
RESULT:
	[('{}',)]

-----------
QUERY:

select range_intersect_agg(nmr) from nummultirange_test where false;
RESULT:
	[(None,)]

-----------
QUERY:

select range_intersect_agg(null::nummultirange) from nummultirange_test;
RESULT:
	[(None,)]

-----------
QUERY:

select range_intersect_agg(nmr) from (values ('{[1,3]}'::nummultirange), ('{[6,12]}'::nummultirange)) t(nmr);
RESULT:
	[('{}',)]

-----------
QUERY:

select range_intersect_agg(nmr) from (values ('{[1,6]}'::nummultirange), ('{[3,12]}'::nummultirange)) t(nmr);
RESULT:
	[('{[3,6]}',)]

-----------
QUERY:

select range_intersect_agg(nmr) from (values ('{[1,6], [10,12]}'::nummultirange), ('{[4,14]}'::nummultirange)) t(nmr);
RESULT:
	[('{[4,6],[10,12]}',)]

-----------
QUERY:

-- test with just one input:
select range_intersect_agg(nmr) from (values ('{}'::nummultirange)) t(nmr);
RESULT:
	[('{}',)]

-----------
QUERY:

select range_intersect_agg(nmr) from (values ('{[1,2]}'::nummultirange)) t(nmr);
RESULT:
	[('{[1,2]}',)]

-----------
QUERY:

select range_intersect_agg(nmr) from (values ('{[1,6], [10,12]}'::nummultirange)) t(nmr);
RESULT:
	[('{[1,6],[10,12]}',)]

-----------
QUERY:

select range_intersect_agg(nmr) from nummultirange_test where nmr @> 4.0;
RESULT:
	[('{[3,5)}',)]

-----------
QUERY:


create table nummultirange_test2(nmr nummultirange);
RESULT:
	[]

-----------
QUERY:

create index nummultirange_test2_hash_idx on nummultirange_test2 using hash (nmr);
RESULT:
	[]

-----------
QUERY:


INSERT INTO nummultirange_test2 VALUES('{[, 5)}');
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test2 VALUES(nummultirange(numrange(1.1, 2.2)));
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test2 VALUES(nummultirange(numrange(1.1, 2.2)));
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test2 VALUES(nummultirange(numrange(1.1, 2.2,'()')));
RESULT:
	[]

-----------
QUERY:

INSERT INTO nummultirange_test2 VALUES('{}');
RESULT:
	[]

-----------
QUERY:


select * from nummultirange_test2 where nmr = '{}';
RESULT:
	[('{}',)]

-----------
QUERY:

select * from nummultirange_test2 where nmr = nummultirange(numrange(1.1, 2.2));
RESULT:
	[('{[1.1,2.2)}',), ('{[1.1,2.2)}',)]

-----------
QUERY:

select * from nummultirange_test2 where nmr = nummultirange(numrange(1.1, 2.3));
RESULT:
	[]

-----------
QUERY:


set enable_nestloop=t;
RESULT:
	[]

-----------
QUERY:

set enable_hashjoin=f;
RESULT:
	[]

-----------
QUERY:

set enable_mergejoin=f;
RESULT:
	[]

-----------
QUERY:

select * from nummultirange_test natural join nummultirange_test2 order by nmr;
RESULT:
	[('{}',), ('{}',), ('{}',), ('{}',), ('{(,5)}',), ('{[1.1,2.2)}',), ('{[1.1,2.2)}',)]

-----------
QUERY:

set enable_nestloop=f;
RESULT:
	[]

-----------
QUERY:

set enable_hashjoin=t;
RESULT:
	[]

-----------
QUERY:

set enable_mergejoin=f;
RESULT:
	[]

-----------
QUERY:

select * from nummultirange_test natural join nummultirange_test2 order by nmr;
RESULT:
	[('{}',), ('{}',), ('{}',), ('{}',), ('{(,5)}',), ('{[1.1,2.2)}',), ('{[1.1,2.2)}',)]

-----------
QUERY:

set enable_nestloop=f;
RESULT:
	[]

-----------
QUERY:

set enable_hashjoin=f;
RESULT:
	[]

-----------
QUERY:

set enable_mergejoin=t;
RESULT:
	[]

-----------
QUERY:

select * from nummultirange_test natural join nummultirange_test2 order by nmr;
RESULT:
	[('{}',), ('{}',), ('{}',), ('{}',), ('{(,5)}',), ('{[1.1,2.2)}',), ('{[1.1,2.2)}',)]

-----------
QUERY:


set enable_nestloop to default;
RESULT:
	[]

-----------
QUERY:

set enable_hashjoin to default;
RESULT:
	[]

-----------
QUERY:

set enable_mergejoin to default;
RESULT:
	[]

-----------
QUERY:


DROP TABLE nummultirange_test2;
RESULT:
	[]

-----------
QUERY:


--
-- Test user-defined multirange of floats
--

select '{[123.001, 5.e9)}'::float8multirange @> 888.882::float8;
RESULT:
	[(True,)]

-----------
QUERY:

create table float8multirange_test(f8mr float8multirange, i int);
RESULT:
	[]

-----------
QUERY:

insert into float8multirange_test values(float8multirange(float8range(-100.00007, '1.111113e9')), 42);
RESULT:
	[]

-----------
QUERY:

select * from float8multirange_test;
RESULT:
	[('{[-100.00007,1111113000)}', 42)]

-----------
QUERY:

drop table float8multirange_test;
RESULT:
	[]

-----------
QUERY:


--
-- Test multirange types over domains
--

create domain mydomain as int4;
RESULT:
	[]

-----------
QUERY:

create type mydomainrange as range(subtype=mydomain);
RESULT:
	[]

-----------
QUERY:

select '{[4,50)}'::mydomainmultirange @> 7::mydomain;
RESULT:
	[(True,)]

-----------
QUERY:

drop domain mydomain cascade;
RESULT:
	[]

-----------
QUERY:


--
-- Test domains over multirange types
--

create domain restrictedmultirange as int4multirange check (upper(value) < 10);
RESULT:
	[]

-----------
QUERY:

select '{[4,5)}'::restrictedmultirange @> 7;
RESULT:
	[(False,)]

-----------
QUERY:

select '{[4,50)}'::restrictedmultirange @> 7;
RESULT:
	ERROR - value for domain restrictedmultirange violates check constraint "restrictedmultirange_check"


-----------
QUERY:
 -- should fail
drop domain restrictedmultirange;
RESULT:
	[]

-----------
QUERY:


---
-- Check automatic naming of multiranges
---

create type intr as range(subtype=int);
RESULT:
	[]

-----------
QUERY:

select intr_multirange(intr(1,10));
RESULT:
	[('{[1,10)}',)]

-----------
QUERY:

drop type intr;
RESULT:
	[]

-----------
QUERY:

create type intmultirange as (x int, y int);
RESULT:
	[]

-----------
QUERY:

create type intrange as range(subtype=int);
RESULT:
	ERROR - type "intmultirange" already exists
DETAIL:  Failed while creating a multirange type for type "intrange".
HINT:  You can manually specify a multirange type name using the "multirange_type_name" attribute.


-----------
QUERY:
 -- should fail
drop type intmultirange;
RESULT:
	[]

-----------
QUERY:

create type intr_multirange as (x int, y int);
RESULT:
	[]

-----------
QUERY:

create type intr as range(subtype=int);
RESULT:
	ERROR - type "intr_multirange" already exists
DETAIL:  Failed while creating a multirange type for type "intr".
HINT:  You can manually specify a multirange type name using the "multirange_type_name" attribute.


-----------
QUERY:
 -- should fail
drop type intr_multirange;
RESULT:
	[]

-----------
QUERY:


--
-- Test multiple multirange types over the same subtype and manual naming of
-- the multirange type.
--

-- should fail
create type textrange1 as range(subtype=text, multirange_type_name=int, collation="C");
RESULT:
	ERROR - type "int4" already exists


-----------
QUERY:

-- should pass
create type textrange1 as range(subtype=text, multirange_type_name=multirange_of_text, collation="C");
RESULT:
	[]

-----------
QUERY:

-- should pass, because existing _textrange1 is automatically renamed
create type textrange2 as range(subtype=text, multirange_type_name=_textrange1, collation="C");
RESULT:
	[]

-----------
QUERY:


select multirange_of_text(textrange2('a','Z'));
RESULT:
	ERROR - function multirange_of_text(textrange2) does not exist
LINE 3: select multirange_of_text(textrange2('a','Z'));
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:
  -- should fail
select multirange_of_text(textrange1('a','Z')) @> 'b'::text;
RESULT:
	ERROR - range lower bound must be less than or equal to range upper bound


-----------
QUERY:

select unnest(multirange_of_text(textrange1('a','b'), textrange1('d','e')));
RESULT:
	[('[a,b)',), ('[d,e)',)]

-----------
QUERY:

select _textrange1(textrange2('a','z')) @> 'b'::text;
RESULT:
	[(True,)]

-----------
QUERY:


drop type textrange1;
RESULT:
	[]

-----------
QUERY:

drop type textrange2;
RESULT:
	[]

-----------
QUERY:


--
-- Multiranges don/* REPLACED */ ''t have their own ownership or permissions.
--
create type textrange1 as range(subtype=text, multirange_type_name=multitextrange1, collation="C");
RESULT:
	[]

-----------
QUERY:

create role regress_multirange_owner;
RESULT:
	[]

-----------
QUERY:


alter type multitextrange1 owner to regress_multirange_owner;
RESULT:
	ERROR - cannot alter multirange type multitextrange1
HINT:  You can alter type textrange1, which will alter the multirange type as well.


-----------
QUERY:
  -- fail
alter type textrange1 owner to regress_multirange_owner;
RESULT:
	[]

-----------
QUERY:

set role regress_multirange_owner;
RESULT:
	[]

-----------
QUERY:

revoke usage on type multitextrange1 from public;
RESULT:
	ERROR - cannot set privileges of multirange types
HINT:  Set the privileges of the range type instead.


-----------
QUERY:
  -- fail
revoke usage on type textrange1 from public;
RESULT:
	[]

-----------
QUERY:

-- \dT+ *textrange1*
create temp table test1(f1 multitextrange1[]);
RESULT:
	[]

-----------
QUERY:

revoke usage on type textrange1 from regress_multirange_owner;
RESULT:
	[]

-----------
QUERY:

create temp table test2(f1 multitextrange1[]);
RESULT:
	ERROR - permission denied for type multitextrange1


-----------
QUERY:
  -- fail

drop table test1;
RESULT:
	[]

-----------
QUERY:

drop type textrange1;
RESULT:
	[]

-----------
QUERY:

reset role;
RESULT:
	[]

-----------
QUERY:

drop role regress_multirange_owner;
RESULT:
	[]

-----------
QUERY:


--
-- Test polymorphic type system
--

create function anyarray_anymultirange_func(a anyarray, r anymultirange)
  returns anyelement as 'select $1[1] + lower($2);
RESULT:
	ERROR - unterminated quoted string at or near "'select $1[1] + lower($2);"
LINE 8:   returns anyelement as 'select $1[1] + lower($2);
                                ^


-----------
QUERY:
' language sql;
RESULT:
	ERROR - unterminated quoted string at or near "' language sql;"
LINE 1: ' language sql;
        ^


-----------
QUERY:


select anyarray_anymultirange_func(ARRAY[1,2], int4multirange(int4range(10,20)));
RESULT:
	ERROR - function anyarray_anymultirange_func(integer[], int4multirange) does not exist
LINE 3: select anyarray_anymultirange_func(ARRAY[1,2], int4multirang...
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


-- should fail
select anyarray_anymultirange_func(ARRAY[1,2], nummultirange(numrange(10,20)));
RESULT:
	ERROR - function anyarray_anymultirange_func(integer[], nummultirange) does not exist
LINE 4: select anyarray_anymultirange_func(ARRAY[1,2], nummultirange...
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


drop function anyarray_anymultirange_func(anyarray, anymultirange);
RESULT:
	ERROR - function anyarray_anymultirange_func(anyarray, anymultirange) does not exist


-----------
QUERY:


-- should fail
create function bogus_func(anyelement)
  returns anymultirange as 'select int4multirange(int4range(1,10))' language sql;
RESULT:
	ERROR - cannot determine result data type
DETAIL:  A result of type anymultirange requires at least one input of type anyrange or anymultirange.


-----------
QUERY:


-- should fail
create function bogus_func(int)
  returns anymultirange as 'select int4multirange(int4range(1,10))' language sql;
RESULT:
	ERROR - cannot determine result data type
DETAIL:  A result of type anymultirange requires at least one input of type anyrange or anymultirange.


-----------
QUERY:


create function range_add_bounds(anymultirange)
  returns anyelement as 'select lower($1) + upper($1)' language sql;
RESULT:
	[]

-----------
QUERY:


select range_add_bounds(int4multirange(int4range(1, 17)));
RESULT:
	[(18,)]

-----------
QUERY:

select range_add_bounds(nummultirange(numrange(1.0001, 123.123)));
RESULT:
	[(Decimal('124.1231'),)]

-----------
QUERY:


create function multirangetypes_sql(q anymultirange, b anyarray, out c anyelement)
  as $$ select upper($1) + $2[1] $$
  language sql;
RESULT:
	[]

-----------
QUERY:


select multirangetypes_sql(int4multirange(int4range(1,10)), ARRAY[2,20]);
RESULT:
	[(12,)]

-----------
QUERY:

select multirangetypes_sql(nummultirange(numrange(1,10)), ARRAY[2,20]);
RESULT:
	ERROR - function multirangetypes_sql(nummultirange, integer[]) does not exist
LINE 2: select multirangetypes_sql(nummultirange(numrange(1,10)), AR...
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:
  -- match failure

create function anycompatiblearray_anycompatiblemultirange_func(a anycompatiblearray, mr anycompatiblemultirange)
  returns anycompatible as 'select $1[1] + lower($2);
RESULT:
	ERROR - unterminated quoted string at or near "'select $1[1] + lower($2);"
LINE 4:   returns anycompatible as 'select $1[1] + lower($2);
                                   ^


-----------
QUERY:
' language sql;
RESULT:
	ERROR - unterminated quoted string at or near "' language sql;"
LINE 1: ' language sql;
        ^


-----------
QUERY:


select anycompatiblearray_anycompatiblemultirange_func(ARRAY[1,2], multirange(int4range(10,20)));
RESULT:
	ERROR - function anycompatiblearray_anycompatiblemultirange_func(integer[], int4multirange) does not exist
LINE 3: select anycompatiblearray_anycompatiblemultirange_func(ARRAY...
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


select anycompatiblearray_anycompatiblemultirange_func(ARRAY[1,2], multirange(numrange(10,20)));
RESULT:
	ERROR - function anycompatiblearray_anycompatiblemultirange_func(integer[], nummultirange) does not exist
LINE 3: select anycompatiblearray_anycompatiblemultirange_func(ARRAY...
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


-- should fail
select anycompatiblearray_anycompatiblemultirange_func(ARRAY[1.1,2], multirange(int4range(10,20)));
RESULT:
	ERROR - function anycompatiblearray_anycompatiblemultirange_func(numeric[], int4multirange) does not exist
LINE 4: select anycompatiblearray_anycompatiblemultirange_func(ARRAY...
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


drop function anycompatiblearray_anycompatiblemultirange_func(anycompatiblearray, anycompatiblemultirange);
RESULT:
	ERROR - function anycompatiblearray_anycompatiblemultirange_func(anycompatiblearray, anycompatiblemultirange) does not exist


-----------
QUERY:


create function anycompatiblerange_anycompatiblemultirange_func(r anycompatiblerange, mr anycompatiblemultirange)
  returns anycompatible as 'select lower($1) + lower($2);
RESULT:
	ERROR - unterminated quoted string at or near "'select lower($1) + lower($2);"
LINE 4:   returns anycompatible as 'select lower($1) + lower($2);
                                   ^


-----------
QUERY:
' language sql;
RESULT:
	ERROR - unterminated quoted string at or near "' language sql;"
LINE 1: ' language sql;
        ^


-----------
QUERY:


select anycompatiblerange_anycompatiblemultirange_func(int4range(1,2), multirange(int4range(10,20)));
RESULT:
	ERROR - function anycompatiblerange_anycompatiblemultirange_func(int4range, int4multirange) does not exist
LINE 3: select anycompatiblerange_anycompatiblemultirange_func(int4r...
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


-- should fail
select anycompatiblerange_anycompatiblemultirange_func(numrange(1,2), multirange(int4range(10,20)));
RESULT:
	ERROR - function anycompatiblerange_anycompatiblemultirange_func(numrange, int4multirange) does not exist
LINE 4: select anycompatiblerange_anycompatiblemultirange_func(numra...
               ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.


-----------
QUERY:


drop function anycompatiblerange_anycompatiblemultirange_func(anycompatiblerange, anycompatiblemultirange);
RESULT:
	ERROR - function anycompatiblerange_anycompatiblemultirange_func(anycompatiblerange, anycompatiblemultirange) does not exist


-----------
QUERY:


-- should fail
create function bogus_func(anycompatible)
  returns anycompatiblerange as 'select int4range(1,10)' language sql;
RESULT:
	ERROR - cannot determine result data type
DETAIL:  A result of type anycompatiblerange requires at least one input of type anycompatiblerange or anycompatiblemultirange.


-----------
QUERY:


--
-- Arrays of multiranges
--

select ARRAY[nummultirange(numrange(1.1, 1.2)), nummultirange(numrange(12.3, 155.5))];
RESULT:
	[('{"{[1.1,1.2)}","{[12.3,155.5)}"}',)]

-----------
QUERY:


create table i8mr_array (f1 int, f2 int8multirange[]);
RESULT:
	[]

-----------
QUERY:

insert into i8mr_array values (42, array[int8multirange(int8range(1,10)), int8multirange(int8range(2,20))]);
RESULT:
	[]

-----------
QUERY:

select * from i8mr_array;
RESULT:
	[(42, '{"{[1,10)}","{[2,20)}"}')]

-----------
QUERY:

drop table i8mr_array;
RESULT:
	[]

-----------
QUERY:


--
-- Multiranges of arrays
--

select arraymultirange(arrayrange(ARRAY[1,2], ARRAY[2,1]));
RESULT:
	[('{["{1,2}","{2,1}")}',)]

-----------
QUERY:

select arraymultirange(arrayrange(ARRAY[2,1], ARRAY[1,2]));
RESULT:
	ERROR - range lower bound must be less than or equal to range upper bound


-----------
QUERY:
  -- fail

select array[1,1] <@ arraymultirange(arrayrange(array[1,2], array[2,1]));
RESULT:
	[(False,)]

-----------
QUERY:

select array[1,3] <@ arraymultirange(arrayrange(array[1,2], array[2,1]));
RESULT:
	[(True,)]

-----------
QUERY:


--
-- Ranges of composites
--

create type two_ints as (a int, b int);
RESULT:
	[]

-----------
QUERY:

create type two_ints_range as range (subtype = two_ints);
RESULT:
	[]

-----------
QUERY:


-- with debug_parallel_query on, this exercises tqueue.c/* REPLACED */ ''s range remapping
select *, row_to_json(upper(t)) as u from
  (values (two_ints_multirange(two_ints_range(row(1,2), row(3,4)))),
          (two_ints_multirange(two_ints_range(row(5,6), row(7,8))))) v(t);
RESULT:
	[('{["(1,2)","(3,4)")}', {'a': 3, 'b': 4}), ('{["(5,6)","(7,8)")}', {'a': 7, 'b': 8})]

-----------
QUERY:


drop type two_ints cascade;
RESULT:
	[]

-----------
QUERY:


--
-- Check behavior when subtype lacks a hash function
--

set enable_sort = off;
RESULT:
	[]

-----------
QUERY:
  -- try to make it pick a hash setop implementation

select '{(01,10)}'::varbitmultirange except select '{(10,11)}'::varbitmultirange;
RESULT:
	[('{(01,10)}',)]

-----------
QUERY:


reset enable_sort;
RESULT:
	[]

-----------
QUERY:


--
-- OUT/INOUT/TABLE functions
--

-- infer anymultirange from anymultirange
create function mr_outparam_succeed(i anymultirange, out r anymultirange, out t text)
  as $$ select $1, 'foo'::text $$ language sql;
RESULT:
	[]

-----------
QUERY:


select * from mr_outparam_succeed(int4multirange(int4range(1,2)));
RESULT:
	[('{[1,2)}', 'foo')]

-----------
QUERY:


-- infer anyarray from anymultirange
create function mr_outparam_succeed2(i anymultirange, out r anyarray, out t text)
  as $$ select ARRAY[upper($1)], 'foo'::text $$ language sql;
RESULT:
	[]

-----------
QUERY:


select * from mr_outparam_succeed2(int4multirange(int4range(1,2)));
RESULT:
	[([2], 'foo')]

-----------
QUERY:


-- infer anyrange from anymultirange
create function mr_outparam_succeed3(i anymultirange, out r anyrange, out t text)
  as $$ select range_merge($1), 'foo'::text $$ language sql;
RESULT:
	[]

-----------
QUERY:

select * from mr_outparam_succeed3(int4multirange(int4range(1,2)));
RESULT:
	[(NumericRange(1, 2, '[)'), 'foo')]

-----------
QUERY:


-- infer anymultirange from anyrange
create function mr_outparam_succeed4(i anyrange, out r anymultirange, out t text)
  as $$ select multirange($1), 'foo'::text $$ language sql;
RESULT:
	[]

-----------
QUERY:


select * from mr_outparam_succeed4(int4range(1,2));
RESULT:
	[('{[1,2)}', 'foo')]

-----------
QUERY:


-- infer anyelement from anymultirange
create function mr_inoutparam_succeed(out i anyelement, inout r anymultirange)
  as $$ select upper($1), $1 $$ language sql;
RESULT:
	[]

-----------
QUERY:


select * from mr_inoutparam_succeed(int4multirange(int4range(1,2)));
RESULT:
	[(2, '{[1,2)}')]

-----------
QUERY:


-- infer anyelement+anymultirange from anyelement+anymultirange
create function mr_table_succeed(i anyelement, r anymultirange) returns table(i anyelement, r anymultirange)
  as $$ select $1, $2 $$ language sql;
RESULT:
	[]

-----------
QUERY:


select * from mr_table_succeed(123, int4multirange(int4range(1,11)));
RESULT:
	[(123, '{[1,11)}')]

-----------
QUERY:


-- use anymultirange in plpgsql
create function mr_polymorphic(i anyrange) returns anymultirange
  as $$ begin return multirange($1); end; $$ language plpgsql;
RESULT:
	[]

-----------
QUERY:

select mr_polymorphic(int4range(1, 4));
RESULT:
	[('{[1,4)}',)]

-----------
QUERY:


-- should fail
create function mr_outparam_fail(i anyelement, out r anymultirange, out t text)
  as $$ select '[1,10]', 'foo' $$ language sql;
RESULT:
	ERROR - cannot determine result data type
DETAIL:  A result of type anymultirange requires at least one input of type anyrange or anymultirange.


-----------
QUERY:


--should fail
create function mr_inoutparam_fail(inout i anyelement, out r anymultirange)
  as $$ select $1, '[1,10]' $$ language sql;
RESULT:
	ERROR - cannot determine result data type
DETAIL:  A result of type anymultirange requires at least one input of type anyrange or anymultirange.


-----------
QUERY:


--should fail
create function mr_table_fail(i anyelement) returns table(i anyelement, r anymultirange)
  as $$ select $1, '[1,10]' $$ language sql;
RESULT:
	ERROR - cannot determine result data type
DETAIL:  A result of type anymultirange requires at least one input of type anyrange or anymultirange.

