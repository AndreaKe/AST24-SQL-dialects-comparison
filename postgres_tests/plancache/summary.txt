Guest DBMS identified: postgres
-----------
QUERY:
--
-- Tests to exercise the plan caching/invalidation mechanism
--

CREATE TEMP TABLE pcachetest AS SELECT * FROM int8_tbl
RESULT: []

-----------
QUERY:
-- create and use a cached plan
PREPARE prepstmt AS SELECT * FROM pcachetest
RESULT: []

-----------
QUERY:
EXECUTE prepstmt
RESULT: []

-----------
QUERY:
-- and one with parameters
PREPARE prepstmt2(bigint) AS SELECT * FROM pcachetest WHERE q1 = $1
RESULT: []

-----------
QUERY:
EXECUTE prepstmt2(123)
RESULT: []

-----------
QUERY:
-- invalidate the plans and see what happens
DROP TABLE pcachetest
RESULT: []

-----------
QUERY:
EXECUTE prepstmt
RESULT: []

-----------
QUERY:
EXECUTE prepstmt2(123)
RESULT: []

-----------
QUERY:
-- recreate the temp table (this demonstrates that the raw plan is
-- purely textual and doesn/* REPLACED */''t depend on OIDs, for instance)
CREATE TEMP TABLE pcachetest AS SELECT * FROM int8_tbl ORDER BY 2
RESULT: []

-----------
QUERY:
EXECUTE prepstmt
RESULT: []

-----------
QUERY:
EXECUTE prepstmt2(123)
RESULT: []

-----------
QUERY:
-- prepared statements should prevent change in output tupdesc,
-- since clients probably aren/* REPLACED */''t expecting that to change on the fly
ALTER TABLE pcachetest ADD COLUMN q3 bigint
RESULT: []

-----------
QUERY:
EXECUTE prepstmt
RESULT: []

-----------
QUERY:
EXECUTE prepstmt2(123)
RESULT: []

-----------
QUERY:
-- but we/* REPLACED */''re nice guys and will let you undo your mistake
ALTER TABLE pcachetest DROP COLUMN q3
RESULT: []

-----------
QUERY:
EXECUTE prepstmt
RESULT: []

-----------
QUERY:
EXECUTE prepstmt2(123)
RESULT: []

-----------
QUERY:
-- Try it with a view, which isn/* REPLACED */''t directly used in the resulting plan
-- but should trigger invalidation anyway
CREATE TEMP VIEW pcacheview AS
  SELECT * FROM pcachetest
RESULT: []

-----------
QUERY:
PREPARE vprep AS SELECT * FROM pcacheview
RESULT: []

-----------
QUERY:
EXECUTE vprep
RESULT: []

-----------
QUERY:
CREATE OR REPLACE TEMP VIEW pcacheview AS
  SELECT q1, q2/2 AS q2 FROM pcachetest
RESULT: []

-----------
QUERY:
EXECUTE vprep
RESULT: []

-----------
QUERY:
-- Check basic SPI plan invalidation

create function cache_test(int) returns int as $$
declare total int;
begin
	create temp table t1(f1 int);
	insert into t1 values($1);
	insert into t1 values(11);
	insert into t1 values(12);
	insert into t1 values(13);
	select sum(f1) into total from t1;
	drop table t1;
	return total;
end
$$ language plpgsql
RESULT: []

-----------
QUERY:
select cache_test(1)
RESULT: []

-----------
QUERY:
select cache_test(2)
RESULT: []

-----------
QUERY:
select cache_test(3)
RESULT: []

-----------
QUERY:
-- Check invalidation of plpgsql /* REPLACED */''simple expression/* REPLACED */''

create temp view v1 as
  select 2+2 as f1
RESULT: []

-----------
QUERY:
create function cache_test_2() returns int as $$
begin
	return f1 from v1;
end$$ language plpgsql
RESULT: []

-----------
QUERY:
select cache_test_2()
RESULT: []

-----------
QUERY:
create or replace temp view v1 as
  select 2+2+4 as f1
RESULT: []

-----------
QUERY:
select cache_test_2()
RESULT: []

-----------
QUERY:
create or replace temp view v1 as
  select 2+2+4+(select max(unique1) from tenk1) as f1
RESULT: []

-----------
QUERY:
select cache_test_2()
RESULT: []

-----------
QUERY:
--- Check that change of search_path is honored when re-using cached plan

create schema s1
  create table abc (f1 int)
RESULT: []

-----------
QUERY:
create schema s2
  create table abc (f1 int)
RESULT: []

-----------
QUERY:
insert into s1.abc values(123)
RESULT: []

-----------
QUERY:
insert into s2.abc values(456)
RESULT: []

-----------
QUERY:
set search_path = s1
RESULT: []

-----------
QUERY:
prepare p1 as select f1 from abc
RESULT: []

-----------
QUERY:
execute p1
RESULT: []

-----------
QUERY:
set search_path = s2
RESULT: []

-----------
QUERY:
select f1 from abc
RESULT: []

-----------
QUERY:
execute p1
RESULT: []

-----------
QUERY:
alter table s1.abc add column f2 float8
RESULT: []

-----------
QUERY:
-- force replan

execute p1
RESULT: []

-----------
QUERY:
drop schema s1 cascade
RESULT: []

-----------
QUERY:
drop schema s2 cascade
RESULT: []

-----------
QUERY:
reset search_path
RESULT: []

-----------
QUERY:
-- Check that invalidation deals with regclass constants

create temp sequence seq
RESULT: []

-----------
QUERY:
prepare p2 as select nextval('seq')
RESULT: []

-----------
QUERY:
execute p2
RESULT: []

-----------
QUERY:
drop sequence seq
RESULT: []

-----------
QUERY:
create temp sequence seq
RESULT: []

-----------
QUERY:
execute p2
RESULT: []

-----------
QUERY:
-- Check DDL via SPI, immediately followed by SPI plan re-use
-- (bug in original coding)

create function cachebug() returns void as $$
declare r int;
begin
  drop table if exists temptable cascade;
  create temp table temptable as select * from generate_series(1,3) as f1;
  create temp view vv as select * from temptable;
  for r in select * from vv loop
    raise notice '%', r;
  end loop;
end$$ language plpgsql
RESULT: []

-----------
QUERY:
select cachebug()
RESULT: []

-----------
QUERY:
select cachebug()
RESULT: []

-----------
QUERY:
-- Check that addition or removal of any partition is correctly dealt with by
-- default partition table when it is being used in prepared statement.
create table pc_list_parted (a int) partition by list(a)
RESULT: []

-----------
QUERY:
create table pc_list_part_null partition of pc_list_parted for values in (null)
RESULT: []

-----------
QUERY:
create table pc_list_part_1 partition of pc_list_parted for values in (1)
RESULT: []

-----------
QUERY:
create table pc_list_part_def partition of pc_list_parted default
RESULT: []

-----------
QUERY:
prepare pstmt_def_insert (int) as insert into pc_list_part_def values($1)
RESULT: []

-----------
QUERY:
-- should fail
execute pstmt_def_insert(null)
RESULT: []

-----------
QUERY:
execute pstmt_def_insert(1)
RESULT: []

-----------
QUERY:
create table pc_list_part_2 partition of pc_list_parted for values in (2)
RESULT: []

-----------
QUERY:
execute pstmt_def_insert(2)
RESULT: []

-----------
QUERY:
alter table pc_list_parted detach partition pc_list_part_null
RESULT: []

-----------
QUERY:
-- should be ok
execute pstmt_def_insert(null)
RESULT: []

-----------
QUERY:
drop table pc_list_part_1
RESULT: []

-----------
QUERY:
-- should be ok
execute pstmt_def_insert(1)
RESULT: []

-----------
QUERY:
drop table pc_list_parted, pc_list_part_null
RESULT: []

-----------
QUERY:
deallocate pstmt_def_insert
RESULT: []

-----------
QUERY:
-- Test plan_cache_mode

create table test_mode (a int)
RESULT: []

-----------
QUERY:
insert into test_mode select 1 from generate_series(1,1000) union all select 2
RESULT: []

-----------
QUERY:
create index on test_mode (a)
RESULT: []

-----------
QUERY:
analyze test_mode
RESULT: []

-----------
QUERY:
prepare test_mode_pp (int) as select count(*) from test_mode where a = $1
RESULT: []

-----------
QUERY:
select name, generic_plans, custom_plans from pg_prepared_statements
  where  name = 'test_mode_pp'
RESULT: []

-----------
QUERY:
-- up to 5 executions, custom plan is used
set plan_cache_mode to auto
RESULT: []

-----------
QUERY:
explain (costs off) execute test_mode_pp(2)
RESULT: []

-----------
QUERY:
select name, generic_plans, custom_plans from pg_prepared_statements
  where  name = 'test_mode_pp'
RESULT: []

-----------
QUERY:
-- force generic plan
set plan_cache_mode to force_generic_plan
RESULT: []

-----------
QUERY:
explain (costs off) execute test_mode_pp(2)
RESULT: []

-----------
QUERY:
select name, generic_plans, custom_plans from pg_prepared_statements
  where  name = 'test_mode_pp'
RESULT: []

-----------
QUERY:
-- get to generic plan by 5 executions
set plan_cache_mode to auto
RESULT: []

-----------
QUERY:
execute test_mode_pp(1)
RESULT: []

-----------
QUERY:
-- 1x
execute test_mode_pp(1)
RESULT: []

-----------
QUERY:
-- 2x
execute test_mode_pp(1)
RESULT: []

-----------
QUERY:
-- 3x
execute test_mode_pp(1)
RESULT: []

-----------
QUERY:
-- 4x
select name, generic_plans, custom_plans from pg_prepared_statements
  where  name = 'test_mode_pp'
RESULT: []

-----------
QUERY:
execute test_mode_pp(1)
RESULT: []

-----------
QUERY:
-- 5x
select name, generic_plans, custom_plans from pg_prepared_statements
  where  name = 'test_mode_pp'
RESULT: []

-----------
QUERY:
-- we should now get a really bad plan
explain (costs off) execute test_mode_pp(2)
RESULT: []

-----------
QUERY:
-- but we can force a custom plan
set plan_cache_mode to force_custom_plan
RESULT: []

-----------
QUERY:
explain (costs off) execute test_mode_pp(2)
RESULT: []

-----------
QUERY:
select name, generic_plans, custom_plans from pg_prepared_statements
  where  name = 'test_mode_pp'
RESULT: []

-----------
QUERY:
drop table test_mode
RESULT: []
=========================================
Summary for test case plancache/test.sql of postgres
=========================================
