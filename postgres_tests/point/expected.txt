
-----------
QUERY:
--
-- POINT
--

-- avoid bit-exact output here because operations may not be bit-exact.
SET extra_float_digits = 0;
RESULT:
	postgres: None

-----------
QUERY:


-- point_tbl was already created and filled in test_setup.sql.
-- Here we just try to insert bad values.

INSERT INTO POINT_TBL(f1) VALUES ('asdfasdf');
RESULT:
	postgres: invalid input syntax for type point: "asdfasdf"
LINE 6: INSERT INTO POINT_TBL(f1) VALUES ('asdfasdf');
                                          ^


-----------
QUERY:


INSERT INTO POINT_TBL(f1) VALUES ('(10.0 10.0)');
RESULT:
	postgres: invalid input syntax for type point: "(10.0 10.0)"
LINE 3: INSERT INTO POINT_TBL(f1) VALUES ('(10.0 10.0)');
                                          ^


-----------
QUERY:


INSERT INTO POINT_TBL(f1) VALUES ('(10.0, 10.0) x');
RESULT:
	postgres: invalid input syntax for type point: "(10.0, 10.0) x"
LINE 3: INSERT INTO POINT_TBL(f1) VALUES ('(10.0, 10.0) x');
                                          ^


-----------
QUERY:


INSERT INTO POINT_TBL(f1) VALUES ('(10.0,10.0');
RESULT:
	postgres: invalid input syntax for type point: "(10.0,10.0"
LINE 3: INSERT INTO POINT_TBL(f1) VALUES ('(10.0,10.0');
                                          ^


-----------
QUERY:


INSERT INTO POINT_TBL(f1) VALUES ('(10.0, 1e+500)');
RESULT:
	postgres: "1e+500" is out of range for type double precision
LINE 3: INSERT INTO POINT_TBL(f1) VALUES ('(10.0, 1e+500)');
                                          ^


-----------
QUERY:
	-- Out of range


SELECT * FROM POINT_TBL;
RESULT:
	postgres: [('(0,0)',), ('(-10,0)',), ('(-3,4)',), ('(5.1,34.5)',), ('(-5,-12)',), ('(1e-300,-1e-300)',), ('(1e+300,Infinity)',), ('(Infinity,1e+300)',), ('(NaN,NaN)',), ('(10,10)',), (None,)]

-----------
QUERY:


-- left of
SELECT p.* FROM POINT_TBL p WHERE p.f1 << '(0.0, 0.0)';
RESULT:
	postgres: [('(-10,0)',), ('(-3,4)',), ('(-5,-12)',)]

-----------
QUERY:


-- right of
SELECT p.* FROM POINT_TBL p WHERE '(0.0,0.0)' >> p.f1;
RESULT:
	postgres: [('(-10,0)',), ('(-3,4)',), ('(-5,-12)',)]

-----------
QUERY:


-- above
SELECT p.* FROM POINT_TBL p WHERE '(0.0,0.0)' |>> p.f1;
RESULT:
	postgres: [('(-5,-12)',)]

-----------
QUERY:


-- below
SELECT p.* FROM POINT_TBL p WHERE p.f1 <<| '(0.0, 0.0)';
RESULT:
	postgres: [('(-5,-12)',)]

-----------
QUERY:


-- equal
SELECT p.* FROM POINT_TBL p WHERE p.f1 ~= '(5.1, 34.5)';
RESULT:
	postgres: [('(5.1,34.5)',)]

-----------
QUERY:


-- point in box
SELECT p.* FROM POINT_TBL p
   WHERE p.f1 <@ box '(0,0,100,100)';
RESULT:
	postgres: [('(0,0)',), ('(5.1,34.5)',), ('(10,10)',)]

-----------
QUERY:


SELECT p.* FROM POINT_TBL p
   WHERE box '(0,0,100,100)' @> p.f1;
RESULT:
	postgres: [('(0,0)',), ('(5.1,34.5)',), ('(10,10)',)]

-----------
QUERY:


SELECT p.* FROM POINT_TBL p
   WHERE not p.f1 <@ box '(0,0,100,100)';
RESULT:
	postgres: [('(-10,0)',), ('(-3,4)',), ('(-5,-12)',), ('(1e-300,-1e-300)',), ('(1e+300,Infinity)',), ('(Infinity,1e+300)',), ('(NaN,NaN)',)]

-----------
QUERY:


SELECT p.* FROM POINT_TBL p
   WHERE p.f1 <@ path '[(0,0),(-10,0),(-10,10)]';
RESULT:
	postgres: [('(0,0)',), ('(-10,0)',), ('(1e-300,-1e-300)',)]

-----------
QUERY:


SELECT p.* FROM POINT_TBL p
   WHERE not box '(0,0,100,100)' @> p.f1;
RESULT:
	postgres: [('(-10,0)',), ('(-3,4)',), ('(-5,-12)',), ('(1e-300,-1e-300)',), ('(1e+300,Infinity)',), ('(Infinity,1e+300)',), ('(NaN,NaN)',)]

-----------
QUERY:


SELECT p.f1, p.f1 <-> point '(0,0)' AS dist
   FROM POINT_TBL p
   ORDER BY dist;
RESULT:
	postgres: [('(0,0)', 0.0), ('(1e-300,-1e-300)', 1.4142135623731e-300), ('(-3,4)', 5.0), ('(-10,0)', 10.0), ('(-5,-12)', 13.0), ('(10,10)', 14.142135623731), ('(5.1,34.5)', 34.8749193547455), ('(1e+300,Infinity)', inf), ('(Infinity,1e+300)', inf), ('(NaN,NaN)', nan), (None, None)]

-----------
QUERY:


SELECT p1.f1 AS point1, p2.f1 AS point2, p1.f1 <-> p2.f1 AS dist
   FROM POINT_TBL p1, POINT_TBL p2
   ORDER BY dist, p1.f1[0], p2.f1[0];
RESULT:
	postgres: [('(-10,0)', '(-10,0)', 0.0), ('(-5,-12)', '(-5,-12)', 0.0), ('(-3,4)', '(-3,4)', 0.0), ('(0,0)', '(0,0)', 0.0), ('(1e-300,-1e-300)', '(1e-300,-1e-300)', 0.0), ('(5.1,34.5)', '(5.1,34.5)', 0.0), ('(10,10)', '(10,10)', 0.0), ('(0,0)', '(1e-300,-1e-300)', 1.4142135623731e-300), ('(1e-300,-1e-300)', '(0,0)', 1.4142135623731e-300), ('(-3,4)', '(0,0)', 5.0), ('(-3,4)', '(1e-300,-1e-300)', 5.0), ('(0,0)', '(-3,4)', 5.0), ('(1e-300,-1e-300)', '(-3,4)', 5.0), ('(-10,0)', '(-3,4)', 8.06225774829855), ('(-3,4)', '(-10,0)', 8.06225774829855), ('(-10,0)', '(0,0)', 10.0), ('(-10,0)', '(1e-300,-1e-300)', 10.0), ('(0,0)', '(-10,0)', 10.0), ('(1e-300,-1e-300)', '(-10,0)', 10.0), ('(-10,0)', '(-5,-12)', 13.0), ('(-5,-12)', '(-10,0)', 13.0), ('(-5,-12)', '(0,0)', 13.0), ('(-5,-12)', '(1e-300,-1e-300)', 13.0), ('(0,0)', '(-5,-12)', 13.0), ('(1e-300,-1e-300)', '(-5,-12)', 13.0), ('(0,0)', '(10,10)', 14.142135623731), ('(1e-300,-1e-300)', '(10,10)', 14.142135623731), ('(10,10)', '(0,0)', 14.142135623731), ('(10,10)', '(1e-300,-1e-300)', 14.142135623731), ('(-3,4)', '(10,10)', 14.3178210632764), ('(10,10)', '(-3,4)', 14.3178210632764), ('(-5,-12)', '(-3,4)', 16.1245154965971), ('(-3,4)', '(-5,-12)', 16.1245154965971), ('(-10,0)', '(10,10)', 22.3606797749979), ('(10,10)', '(-10,0)', 22.3606797749979), ('(5.1,34.5)', '(10,10)', 24.9851956166046), ('(10,10)', '(5.1,34.5)', 24.9851956166046), ('(-5,-12)', '(10,10)', 26.6270539113887), ('(10,10)', '(-5,-12)', 26.6270539113887), ('(-3,4)', '(5.1,34.5)', 31.5572495632937), ('(5.1,34.5)', '(-3,4)', 31.5572495632937), ('(0,0)', '(5.1,34.5)', 34.8749193547455), ('(1e-300,-1e-300)', '(5.1,34.5)', 34.8749193547455), ('(5.1,34.5)', '(0,0)', 34.8749193547455), ('(5.1,34.5)', '(1e-300,-1e-300)', 34.8749193547455), ('(-10,0)', '(5.1,34.5)', 37.6597928831267), ('(5.1,34.5)', '(-10,0)', 37.6597928831267), ('(-5,-12)', '(5.1,34.5)', 47.5842410888311), ('(5.1,34.5)', '(-5,-12)', 47.5842410888311), ('(-10,0)', '(1e+300,Infinity)', inf), ('(-10,0)', '(Infinity,1e+300)', inf), ('(-5,-12)', '(1e+300,Infinity)', inf), ('(-5,-12)', '(Infinity,1e+300)', inf), ('(-3,4)', '(1e+300,Infinity)', inf), ('(-3,4)', '(Infinity,1e+300)', inf), ('(0,0)', '(1e+300,Infinity)', inf), ('(0,0)', '(Infinity,1e+300)', inf), ('(1e-300,-1e-300)', '(1e+300,Infinity)', inf), ('(1e-300,-1e-300)', '(Infinity,1e+300)', inf), ('(5.1,34.5)', '(1e+300,Infinity)', inf), ('(5.1,34.5)', '(Infinity,1e+300)', inf), ('(10,10)', '(1e+300,Infinity)', inf), ('(10,10)', '(Infinity,1e+300)', inf), ('(1e+300,Infinity)', '(-10,0)', inf), ('(1e+300,Infinity)', '(-5,-12)', inf), ('(1e+300,Infinity)', '(-3,4)', inf), ('(1e+300,Infinity)', '(0,0)', inf), ('(1e+300,Infinity)', '(1e-300,-1e-300)', inf), ('(1e+300,Infinity)', '(5.1,34.5)', inf), ('(1e+300,Infinity)', '(10,10)', inf), ('(1e+300,Infinity)', '(Infinity,1e+300)', inf), ('(Infinity,1e+300)', '(-10,0)', inf), ('(Infinity,1e+300)', '(-5,-12)', inf), ('(Infinity,1e+300)', '(-3,4)', inf), ('(Infinity,1e+300)', '(0,0)', inf), ('(Infinity,1e+300)', '(1e-300,-1e-300)', inf), ('(Infinity,1e+300)', '(5.1,34.5)', inf), ('(Infinity,1e+300)', '(10,10)', inf), ('(Infinity,1e+300)', '(1e+300,Infinity)', inf), ('(-10,0)', '(NaN,NaN)', nan), ('(-5,-12)', '(NaN,NaN)', nan), ('(-3,4)', '(NaN,NaN)', nan), ('(0,0)', '(NaN,NaN)', nan), ('(1e-300,-1e-300)', '(NaN,NaN)', nan), ('(5.1,34.5)', '(NaN,NaN)', nan), ('(10,10)', '(NaN,NaN)', nan), ('(1e+300,Infinity)', '(1e+300,Infinity)', nan), ('(1e+300,Infinity)', '(NaN,NaN)', nan), ('(Infinity,1e+300)', '(Infinity,1e+300)', nan), ('(Infinity,1e+300)', '(NaN,NaN)', nan), ('(NaN,NaN)', '(-10,0)', nan), ('(NaN,NaN)', '(-5,-12)', nan), ('(NaN,NaN)', '(-3,4)', nan), ('(NaN,NaN)', '(0,0)', nan), ('(NaN,NaN)', '(1e-300,-1e-300)', nan), ('(NaN,NaN)', '(5.1,34.5)', nan), ('(NaN,NaN)', '(10,10)', nan), ('(NaN,NaN)', '(1e+300,Infinity)', nan), ('(NaN,NaN)', '(Infinity,1e+300)', nan), ('(NaN,NaN)', '(NaN,NaN)', nan), ('(-10,0)', None, None), ('(-5,-12)', None, None), ('(-3,4)', None, None), ('(0,0)', None, None), ('(1e-300,-1e-300)', None, None), ('(5.1,34.5)', None, None), ('(10,10)', None, None), ('(1e+300,Infinity)', None, None), ('(Infinity,1e+300)', None, None), ('(NaN,NaN)', None, None), (None, '(-10,0)', None), (None, '(-5,-12)', None), (None, '(-3,4)', None), (None, '(0,0)', None), (None, '(1e-300,-1e-300)', None), (None, '(5.1,34.5)', None), (None, '(10,10)', None), (None, '(1e+300,Infinity)', None), (None, '(Infinity,1e+300)', None), (None, '(NaN,NaN)', None), (None, None, None)]

-----------
QUERY:


SELECT p1.f1 AS point1, p2.f1 AS point2
   FROM POINT_TBL p1, POINT_TBL p2
   WHERE (p1.f1 <-> p2.f1) > 3;
RESULT:
	postgres: [('(0,0)', '(-10,0)'), ('(0,0)', '(-3,4)'), ('(0,0)', '(5.1,34.5)'), ('(0,0)', '(-5,-12)'), ('(0,0)', '(1e+300,Infinity)'), ('(0,0)', '(Infinity,1e+300)'), ('(0,0)', '(NaN,NaN)'), ('(0,0)', '(10,10)'), ('(-10,0)', '(0,0)'), ('(-10,0)', '(-3,4)'), ('(-10,0)', '(5.1,34.5)'), ('(-10,0)', '(-5,-12)'), ('(-10,0)', '(1e-300,-1e-300)'), ('(-10,0)', '(1e+300,Infinity)'), ('(-10,0)', '(Infinity,1e+300)'), ('(-10,0)', '(NaN,NaN)'), ('(-10,0)', '(10,10)'), ('(-3,4)', '(0,0)'), ('(-3,4)', '(-10,0)'), ('(-3,4)', '(5.1,34.5)'), ('(-3,4)', '(-5,-12)'), ('(-3,4)', '(1e-300,-1e-300)'), ('(-3,4)', '(1e+300,Infinity)'), ('(-3,4)', '(Infinity,1e+300)'), ('(-3,4)', '(NaN,NaN)'), ('(-3,4)', '(10,10)'), ('(5.1,34.5)', '(0,0)'), ('(5.1,34.5)', '(-10,0)'), ('(5.1,34.5)', '(-3,4)'), ('(5.1,34.5)', '(-5,-12)'), ('(5.1,34.5)', '(1e-300,-1e-300)'), ('(5.1,34.5)', '(1e+300,Infinity)'), ('(5.1,34.5)', '(Infinity,1e+300)'), ('(5.1,34.5)', '(NaN,NaN)'), ('(5.1,34.5)', '(10,10)'), ('(-5,-12)', '(0,0)'), ('(-5,-12)', '(-10,0)'), ('(-5,-12)', '(-3,4)'), ('(-5,-12)', '(5.1,34.5)'), ('(-5,-12)', '(1e-300,-1e-300)'), ('(-5,-12)', '(1e+300,Infinity)'), ('(-5,-12)', '(Infinity,1e+300)'), ('(-5,-12)', '(NaN,NaN)'), ('(-5,-12)', '(10,10)'), ('(1e-300,-1e-300)', '(-10,0)'), ('(1e-300,-1e-300)', '(-3,4)'), ('(1e-300,-1e-300)', '(5.1,34.5)'), ('(1e-300,-1e-300)', '(-5,-12)'), ('(1e-300,-1e-300)', '(1e+300,Infinity)'), ('(1e-300,-1e-300)', '(Infinity,1e+300)'), ('(1e-300,-1e-300)', '(NaN,NaN)'), ('(1e-300,-1e-300)', '(10,10)'), ('(1e+300,Infinity)', '(0,0)'), ('(1e+300,Infinity)', '(-10,0)'), ('(1e+300,Infinity)', '(-3,4)'), ('(1e+300,Infinity)', '(5.1,34.5)'), ('(1e+300,Infinity)', '(-5,-12)'), ('(1e+300,Infinity)', '(1e-300,-1e-300)'), ('(1e+300,Infinity)', '(1e+300,Infinity)'), ('(1e+300,Infinity)', '(Infinity,1e+300)'), ('(1e+300,Infinity)', '(NaN,NaN)'), ('(1e+300,Infinity)', '(10,10)'), ('(Infinity,1e+300)', '(0,0)'), ('(Infinity,1e+300)', '(-10,0)'), ('(Infinity,1e+300)', '(-3,4)'), ('(Infinity,1e+300)', '(5.1,34.5)'), ('(Infinity,1e+300)', '(-5,-12)'), ('(Infinity,1e+300)', '(1e-300,-1e-300)'), ('(Infinity,1e+300)', '(1e+300,Infinity)'), ('(Infinity,1e+300)', '(Infinity,1e+300)'), ('(Infinity,1e+300)', '(NaN,NaN)'), ('(Infinity,1e+300)', '(10,10)'), ('(NaN,NaN)', '(0,0)'), ('(NaN,NaN)', '(-10,0)'), ('(NaN,NaN)', '(-3,4)'), ('(NaN,NaN)', '(5.1,34.5)'), ('(NaN,NaN)', '(-5,-12)'), ('(NaN,NaN)', '(1e-300,-1e-300)'), ('(NaN,NaN)', '(1e+300,Infinity)'), ('(NaN,NaN)', '(Infinity,1e+300)'), ('(NaN,NaN)', '(NaN,NaN)'), ('(NaN,NaN)', '(10,10)'), ('(10,10)', '(0,0)'), ('(10,10)', '(-10,0)'), ('(10,10)', '(-3,4)'), ('(10,10)', '(5.1,34.5)'), ('(10,10)', '(-5,-12)'), ('(10,10)', '(1e-300,-1e-300)'), ('(10,10)', '(1e+300,Infinity)'), ('(10,10)', '(Infinity,1e+300)'), ('(10,10)', '(NaN,NaN)')]

-----------
QUERY:


-- put distance result into output to allow sorting with GEQ optimizer - tgl 97/05/10
SELECT p1.f1 AS point1, p2.f1 AS point2, (p1.f1 <-> p2.f1) AS distance
   FROM POINT_TBL p1, POINT_TBL p2
   WHERE (p1.f1 <-> p2.f1) > 3 and p1.f1 << p2.f1
   ORDER BY distance, p1.f1[0], p2.f1[0];
RESULT:
	postgres: [('(-3,4)', '(0,0)', 5.0), ('(-3,4)', '(1e-300,-1e-300)', 5.0), ('(-10,0)', '(-3,4)', 8.06225774829855), ('(-10,0)', '(0,0)', 10.0), ('(-10,0)', '(1e-300,-1e-300)', 10.0), ('(-10,0)', '(-5,-12)', 13.0), ('(-5,-12)', '(0,0)', 13.0), ('(-5,-12)', '(1e-300,-1e-300)', 13.0), ('(0,0)', '(10,10)', 14.142135623731), ('(1e-300,-1e-300)', '(10,10)', 14.142135623731), ('(-3,4)', '(10,10)', 14.3178210632764), ('(-5,-12)', '(-3,4)', 16.1245154965971), ('(-10,0)', '(10,10)', 22.3606797749979), ('(5.1,34.5)', '(10,10)', 24.9851956166046), ('(-5,-12)', '(10,10)', 26.6270539113887), ('(-3,4)', '(5.1,34.5)', 31.5572495632937), ('(0,0)', '(5.1,34.5)', 34.8749193547455), ('(1e-300,-1e-300)', '(5.1,34.5)', 34.8749193547455), ('(-10,0)', '(5.1,34.5)', 37.6597928831267), ('(-5,-12)', '(5.1,34.5)', 47.5842410888311), ('(-10,0)', '(1e+300,Infinity)', inf), ('(-10,0)', '(Infinity,1e+300)', inf), ('(-5,-12)', '(1e+300,Infinity)', inf), ('(-5,-12)', '(Infinity,1e+300)', inf), ('(-3,4)', '(1e+300,Infinity)', inf), ('(-3,4)', '(Infinity,1e+300)', inf), ('(0,0)', '(1e+300,Infinity)', inf), ('(0,0)', '(Infinity,1e+300)', inf), ('(1e-300,-1e-300)', '(1e+300,Infinity)', inf), ('(1e-300,-1e-300)', '(Infinity,1e+300)', inf), ('(5.1,34.5)', '(1e+300,Infinity)', inf), ('(5.1,34.5)', '(Infinity,1e+300)', inf), ('(10,10)', '(1e+300,Infinity)', inf), ('(10,10)', '(Infinity,1e+300)', inf), ('(1e+300,Infinity)', '(Infinity,1e+300)', inf)]

-----------
QUERY:


-- put distance result into output to allow sorting with GEQ optimizer - tgl 97/05/10
SELECT p1.f1 AS point1, p2.f1 AS point2, (p1.f1 <-> p2.f1) AS distance
   FROM POINT_TBL p1, POINT_TBL p2
   WHERE (p1.f1 <-> p2.f1) > 3 and p1.f1 << p2.f1 and p1.f1 |>> p2.f1
   ORDER BY distance;
RESULT:
	postgres: [('(-3,4)', '(0,0)', 5.0), ('(-3,4)', '(1e-300,-1e-300)', 5.0), ('(-10,0)', '(-5,-12)', 13.0), ('(5.1,34.5)', '(10,10)', 24.9851956166046), ('(1e+300,Infinity)', '(Infinity,1e+300)', inf)]

-----------
QUERY:


-- Test that GiST indexes provide same behavior as sequential scan
CREATE TEMP TABLE point_gist_tbl(f1 point);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO point_gist_tbl SELECT '(0,0)' FROM generate_series(0,1000);
RESULT:
	postgres: None

-----------
QUERY:

CREATE INDEX point_gist_tbl_index ON point_gist_tbl USING gist (f1);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO point_gist_tbl VALUES ('(0.0000009,0.0000009)');
RESULT:
	postgres: None

-----------
QUERY:

SET enable_seqscan TO true;
RESULT:
	postgres: None

-----------
QUERY:

SET enable_indexscan TO false;
RESULT:
	postgres: None

-----------
QUERY:

SET enable_bitmapscan TO false;
RESULT:
	postgres: None

-----------
QUERY:

SELECT COUNT(*) FROM point_gist_tbl WHERE f1 ~= '(0.0000009,0.0000009)'::point;
RESULT:
	postgres: [(1002,)]

-----------
QUERY:

SELECT COUNT(*) FROM point_gist_tbl WHERE f1 <@ '(0.0000009,0.0000009),(0.0000009,0.0000009)'::box;
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT COUNT(*) FROM point_gist_tbl WHERE f1 ~= '(0.0000018,0.0000018)'::point;
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SET enable_seqscan TO false;
RESULT:
	postgres: None

-----------
QUERY:

SET enable_indexscan TO true;
RESULT:
	postgres: None

-----------
QUERY:

SET enable_bitmapscan TO true;
RESULT:
	postgres: None

-----------
QUERY:

SELECT COUNT(*) FROM point_gist_tbl WHERE f1 ~= '(0.0000009,0.0000009)'::point;
RESULT:
	postgres: [(1002,)]

-----------
QUERY:

SELECT COUNT(*) FROM point_gist_tbl WHERE f1 <@ '(0.0000009,0.0000009),(0.0000009,0.0000009)'::box;
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT COUNT(*) FROM point_gist_tbl WHERE f1 ~= '(0.0000018,0.0000018)'::point;
RESULT:
	postgres: [(1,)]

-----------
QUERY:

RESET enable_seqscan;
RESULT:
	postgres: None

-----------
QUERY:

RESET enable_indexscan;
RESULT:
	postgres: None

-----------
QUERY:

RESET enable_bitmapscan;
RESULT:
	postgres: None

-----------
QUERY:


-- test non-error-throwing API for some core types
SELECT pg_input_is_valid('1,y', 'point');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('1,y', 'point');
RESULT:
	postgres: [('invalid input syntax for type point: "1,y"', None, None, '22P02')]
