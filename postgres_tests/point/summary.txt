Guest DBMS identified: postgres
-----------
QUERY:
--
-- POINT
--

-- avoid bit-exact output here because operations may not be bit-exact.
SET extra_float_digits = 0
RESULT: []

-----------
QUERY:
-- point_tbl was already created and filled in test_setup.sql.
-- Here we just try to insert bad values.

INSERT INTO POINT_TBL(f1) VALUES ('asdfasdf')
RESULT: []

-----------
QUERY:
INSERT INTO POINT_TBL(f1) VALUES ('(10.0 10.0)')
RESULT: []

-----------
QUERY:
INSERT INTO POINT_TBL(f1) VALUES ('(10.0, 10.0) x')
RESULT: []

-----------
QUERY:
INSERT INTO POINT_TBL(f1) VALUES ('(10.0,10.0')
RESULT: []

-----------
QUERY:
INSERT INTO POINT_TBL(f1) VALUES ('(10.0, 1e+500)')
RESULT: []

-----------
QUERY:
-- Out of range


SELECT * FROM POINT_TBL
RESULT: []

-----------
QUERY:
-- left of
SELECT p.* FROM POINT_TBL p WHERE p.f1 << '(0.0, 0.0)'
RESULT: []

-----------
QUERY:
-- right of
SELECT p.* FROM POINT_TBL p WHERE '(0.0,0.0)' >> p.f1
RESULT: []

-----------
QUERY:
-- above
SELECT p.* FROM POINT_TBL p WHERE '(0.0,0.0)' |>> p.f1
RESULT: []

-----------
QUERY:
-- below
SELECT p.* FROM POINT_TBL p WHERE p.f1 <<| '(0.0, 0.0)'
RESULT: []

-----------
QUERY:
-- equal
SELECT p.* FROM POINT_TBL p WHERE p.f1 ~= '(5.1, 34.5)'
RESULT: []

-----------
QUERY:
-- point in box
SELECT p.* FROM POINT_TBL p
   WHERE p.f1 <@ box '(0,0,100,100)'
RESULT: []

-----------
QUERY:
SELECT p.* FROM POINT_TBL p
   WHERE box '(0,0,100,100)' @> p.f1
RESULT: []

-----------
QUERY:
SELECT p.* FROM POINT_TBL p
   WHERE not p.f1 <@ box '(0,0,100,100)'
RESULT: []

-----------
QUERY:
SELECT p.* FROM POINT_TBL p
   WHERE p.f1 <@ path '[(0,0),(-10,0),(-10,10)]'
RESULT: []

-----------
QUERY:
SELECT p.* FROM POINT_TBL p
   WHERE not box '(0,0,100,100)' @> p.f1
RESULT: []

-----------
QUERY:
SELECT p.f1, p.f1 <-> point '(0,0)' AS dist
   FROM POINT_TBL p
   ORDER BY dist
RESULT: []

-----------
QUERY:
SELECT p1.f1 AS point1, p2.f1 AS point2, p1.f1 <-> p2.f1 AS dist
   FROM POINT_TBL p1, POINT_TBL p2
   ORDER BY dist, p1.f1[0], p2.f1[0]
RESULT: []

-----------
QUERY:
SELECT p1.f1 AS point1, p2.f1 AS point2
   FROM POINT_TBL p1, POINT_TBL p2
   WHERE (p1.f1 <-> p2.f1) > 3
RESULT: []

-----------
QUERY:
-- put distance result into output to allow sorting with GEQ optimizer - tgl 97/05/10
SELECT p1.f1 AS point1, p2.f1 AS point2, (p1.f1 <-> p2.f1) AS distance
   FROM POINT_TBL p1, POINT_TBL p2
   WHERE (p1.f1 <-> p2.f1) > 3 and p1.f1 << p2.f1
   ORDER BY distance, p1.f1[0], p2.f1[0]
RESULT: []

-----------
QUERY:
-- put distance result into output to allow sorting with GEQ optimizer - tgl 97/05/10
SELECT p1.f1 AS point1, p2.f1 AS point2, (p1.f1 <-> p2.f1) AS distance
   FROM POINT_TBL p1, POINT_TBL p2
   WHERE (p1.f1 <-> p2.f1) > 3 and p1.f1 << p2.f1 and p1.f1 |>> p2.f1
   ORDER BY distance
RESULT: []

-----------
QUERY:
-- Test that GiST indexes provide same behavior as sequential scan
CREATE TEMP TABLE point_gist_tbl(f1 point)
RESULT: []

-----------
QUERY:
INSERT INTO point_gist_tbl SELECT '(0,0)' FROM generate_series(0,1000)
RESULT: []

-----------
QUERY:
CREATE INDEX point_gist_tbl_index ON point_gist_tbl USING gist (f1)
RESULT: []

-----------
QUERY:
INSERT INTO point_gist_tbl VALUES ('(0.0000009,0.0000009)')
RESULT: []

-----------
QUERY:
SET enable_seqscan TO true
RESULT: []

-----------
QUERY:
SET enable_indexscan TO false
RESULT: []

-----------
QUERY:
SET enable_bitmapscan TO false
RESULT: []

-----------
QUERY:
SELECT COUNT(*) FROM point_gist_tbl WHERE f1 ~= '(0.0000009,0.0000009)'::point
RESULT: []

-----------
QUERY:
SELECT COUNT(*) FROM point_gist_tbl WHERE f1 <@ '(0.0000009,0.0000009),(0.0000009,0.0000009)'::box
RESULT: []

-----------
QUERY:
SELECT COUNT(*) FROM point_gist_tbl WHERE f1 ~= '(0.0000018,0.0000018)'::point
RESULT: []

-----------
QUERY:
SET enable_seqscan TO false
RESULT: []

-----------
QUERY:
SET enable_indexscan TO true
RESULT: []

-----------
QUERY:
SET enable_bitmapscan TO true
RESULT: []

-----------
QUERY:
SELECT COUNT(*) FROM point_gist_tbl WHERE f1 ~= '(0.0000009,0.0000009)'::point
RESULT: []

-----------
QUERY:
SELECT COUNT(*) FROM point_gist_tbl WHERE f1 <@ '(0.0000009,0.0000009),(0.0000009,0.0000009)'::box
RESULT: []

-----------
QUERY:
SELECT COUNT(*) FROM point_gist_tbl WHERE f1 ~= '(0.0000018,0.0000018)'::point
RESULT: []

-----------
QUERY:
RESET enable_seqscan
RESULT: []

-----------
QUERY:
RESET enable_indexscan
RESULT: []

-----------
QUERY:
RESET enable_bitmapscan
RESULT: []

-----------
QUERY:
-- test non-error-throwing API for some core types
SELECT pg_input_is_valid('1,y', 'point')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('1,y', 'point')
RESULT: []
=========================================
Summary for test case point/test.sql of postgres
=========================================
