
-----------
QUERY:
--
-- POLYGON
--
-- polygon logic
--

CREATE TABLE POLYGON_TBL(f1 polygon);
RESULT:
	[]

-----------
QUERY:



INSERT INTO POLYGON_TBL(f1) VALUES ('(2.0,0.0),(2.0,4.0),(0.0,0.0)');
RESULT:
	[]

-----------
QUERY:


INSERT INTO POLYGON_TBL(f1) VALUES ('(3.0,1.0),(3.0,3.0),(1.0,0.0)');
RESULT:
	[]

-----------
QUERY:


INSERT INTO POLYGON_TBL(f1) VALUES ('(1,2),(3,4),(5,6),(7,8)');
RESULT:
	[]

-----------
QUERY:

INSERT INTO POLYGON_TBL(f1) VALUES ('(7,8),(5,6),(3,4),(1,2)');
RESULT:
	[]

-----------
QUERY:
 -- Reverse
INSERT INTO POLYGON_TBL(f1) VALUES ('(1,2),(7,8),(5,6),(3,-4)');
RESULT:
	[]

-----------
QUERY:


-- degenerate polygons
INSERT INTO POLYGON_TBL(f1) VALUES ('(0.0,0.0)');
RESULT:
	[]

-----------
QUERY:


INSERT INTO POLYGON_TBL(f1) VALUES ('(0.0,1.0),(0.0,1.0)');
RESULT:
	[]

-----------
QUERY:


-- bad polygon input strings
INSERT INTO POLYGON_TBL(f1) VALUES ('0.0');
RESULT:
	ERROR - invalid input syntax for type polygon: "0.0"
LINE 4: INSERT INTO POLYGON_TBL(f1) VALUES ('0.0');
                                            ^


-----------
QUERY:


INSERT INTO POLYGON_TBL(f1) VALUES ('(0.0 0.0');
RESULT:
	ERROR - invalid input syntax for type polygon: "(0.0 0.0"
LINE 3: INSERT INTO POLYGON_TBL(f1) VALUES ('(0.0 0.0');
                                            ^


-----------
QUERY:


INSERT INTO POLYGON_TBL(f1) VALUES ('(0,1,2)');
RESULT:
	ERROR - invalid input syntax for type polygon: "(0,1,2)"
LINE 3: INSERT INTO POLYGON_TBL(f1) VALUES ('(0,1,2)');
                                            ^


-----------
QUERY:


INSERT INTO POLYGON_TBL(f1) VALUES ('(0,1,2,3');
RESULT:
	ERROR - invalid input syntax for type polygon: "(0,1,2,3"
LINE 3: INSERT INTO POLYGON_TBL(f1) VALUES ('(0,1,2,3');
                                            ^


-----------
QUERY:


INSERT INTO POLYGON_TBL(f1) VALUES ('asdf');
RESULT:
	ERROR - invalid input syntax for type polygon: "asdf"
LINE 3: INSERT INTO POLYGON_TBL(f1) VALUES ('asdf');
                                            ^


-----------
QUERY:



SELECT * FROM POLYGON_TBL;
RESULT:
	[('((2,0),(2,4),(0,0))',), ('((3,1),(3,3),(1,0))',), ('((1,2),(3,4),(5,6),(7,8))',), ('((7,8),(5,6),(3,4),(1,2))',), ('((1,2),(7,8),(5,6),(3,-4))',), ('((0,0))',), ('((0,1),(0,1))',)]

-----------
QUERY:


--
-- Test the SP-GiST index
--

CREATE TABLE quad_poly_tbl (id int, p polygon);
RESULT:
	[]

-----------
QUERY:


INSERT INTO quad_poly_tbl
	SELECT (x - 1) * 100 + y, polygon(circle(point(x * 10, y * 10), 1 + (x + y) % 10))
	FROM generate_series(1, 100) x,
		 generate_series(1, 100) y;
RESULT:
	[]

-----------
QUERY:


INSERT INTO quad_poly_tbl
	SELECT i, polygon '((200, 300),(210, 310),(230, 290))'
	FROM generate_series(10001, 11000) AS i;
RESULT:
	[]

-----------
QUERY:


INSERT INTO quad_poly_tbl
	VALUES
		(11001, NULL),
		(11002, NULL),
		(11003, NULL);
RESULT:
	[]

-----------
QUERY:


CREATE INDEX quad_poly_tbl_idx ON quad_poly_tbl USING spgist(p);
RESULT:
	[]

-----------
QUERY:


-- get reference results for ORDER BY distance from seq scan
SET enable_seqscan = ON;
RESULT:
	[]

-----------
QUERY:

SET enable_indexscan = OFF;
RESULT:
	[]

-----------
QUERY:

SET enable_bitmapscan = OFF;
RESULT:
	[]

-----------
QUERY:


CREATE TEMP TABLE quad_poly_tbl_ord_seq2 AS
SELECT rank() OVER (ORDER BY p <-> point '123,456') n, p <-> point '123,456' dist, id
FROM quad_poly_tbl WHERE p <@ polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[]

-----------
QUERY:


-- check results from index scan
SET enable_seqscan = OFF;
RESULT:
	[]

-----------
QUERY:

SET enable_indexscan = OFF;
RESULT:
	[]

-----------
QUERY:

SET enable_bitmapscan = ON;
RESULT:
	[]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM quad_poly_tbl WHERE p << polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), ("        Recheck Cond: (p << '((300,300),(400,600),(600,500),(700,200))'::polygon)",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), ("              Index Cond: (p << '((300,300),(400,600),(600,500),(700,200))'::polygon)",)]

-----------
QUERY:

SELECT count(*) FROM quad_poly_tbl WHERE p << polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[(3890,)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM quad_poly_tbl WHERE p &< polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), ("        Recheck Cond: (p &< '((300,300),(400,600),(600,500),(700,200))'::polygon)",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), ("              Index Cond: (p &< '((300,300),(400,600),(600,500),(700,200))'::polygon)",)]

-----------
QUERY:

SELECT count(*) FROM quad_poly_tbl WHERE p &< polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[(7900,)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM quad_poly_tbl WHERE p && polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), ("        Recheck Cond: (p && '((300,300),(400,600),(600,500),(700,200))'::polygon)",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), ("              Index Cond: (p && '((300,300),(400,600),(600,500),(700,200))'::polygon)",)]

-----------
QUERY:

SELECT count(*) FROM quad_poly_tbl WHERE p && polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[(977,)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM quad_poly_tbl WHERE p &> polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), ("        Recheck Cond: (p &> '((300,300),(400,600),(600,500),(700,200))'::polygon)",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), ("              Index Cond: (p &> '((300,300),(400,600),(600,500),(700,200))'::polygon)",)]

-----------
QUERY:

SELECT count(*) FROM quad_poly_tbl WHERE p &> polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[(7000,)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM quad_poly_tbl WHERE p >> polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), ("        Recheck Cond: (p >> '((300,300),(400,600),(600,500),(700,200))'::polygon)",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), ("              Index Cond: (p >> '((300,300),(400,600),(600,500),(700,200))'::polygon)",)]

-----------
QUERY:

SELECT count(*) FROM quad_poly_tbl WHERE p >> polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[(2990,)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM quad_poly_tbl WHERE p <<| polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), ("        Recheck Cond: (p <<| '((300,300),(400,600),(600,500),(700,200))'::polygon)",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), ("              Index Cond: (p <<| '((300,300),(400,600),(600,500),(700,200))'::polygon)",)]

-----------
QUERY:

SELECT count(*) FROM quad_poly_tbl WHERE p <<| polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[(1890,)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM quad_poly_tbl WHERE p &<| polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), ("        Recheck Cond: (p &<| '((300,300),(400,600),(600,500),(700,200))'::polygon)",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), ("              Index Cond: (p &<| '((300,300),(400,600),(600,500),(700,200))'::polygon)",)]

-----------
QUERY:

SELECT count(*) FROM quad_poly_tbl WHERE p &<| polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[(6900,)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM quad_poly_tbl WHERE p |&> polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), ("        Recheck Cond: (p |&> '((300,300),(400,600),(600,500),(700,200))'::polygon)",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), ("              Index Cond: (p |&> '((300,300),(400,600),(600,500),(700,200))'::polygon)",)]

-----------
QUERY:

SELECT count(*) FROM quad_poly_tbl WHERE p |&> polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[(9000,)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM quad_poly_tbl WHERE p |>> polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), ("        Recheck Cond: (p |>> '((300,300),(400,600),(600,500),(700,200))'::polygon)",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), ("              Index Cond: (p |>> '((300,300),(400,600),(600,500),(700,200))'::polygon)",)]

-----------
QUERY:

SELECT count(*) FROM quad_poly_tbl WHERE p |>> polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[(3990,)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM quad_poly_tbl WHERE p <@ polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), ("        Recheck Cond: (p <@ '((300,300),(400,600),(600,500),(700,200))'::polygon)",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), ("              Index Cond: (p <@ '((300,300),(400,600),(600,500),(700,200))'::polygon)",)]

-----------
QUERY:

SELECT count(*) FROM quad_poly_tbl WHERE p <@ polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[(831,)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM quad_poly_tbl WHERE p @> polygon '((340,550),(343,552),(341,553))';
RESULT:
	[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), ("        Recheck Cond: (p @> '((340,550),(343,552),(341,553))'::polygon)",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), ("              Index Cond: (p @> '((340,550),(343,552),(341,553))'::polygon)",)]

-----------
QUERY:

SELECT count(*) FROM quad_poly_tbl WHERE p @> polygon '((340,550),(343,552),(341,553))';
RESULT:
	[(1,)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM quad_poly_tbl WHERE p ~= polygon '((200, 300),(210, 310),(230, 290))';
RESULT:
	[('Aggregate',), ('  ->  Bitmap Heap Scan on quad_poly_tbl',), ("        Recheck Cond: (p ~= '((200,300),(210,310),(230,290))'::polygon)",), ('        ->  Bitmap Index Scan on quad_poly_tbl_idx',), ("              Index Cond: (p ~= '((200,300),(210,310),(230,290))'::polygon)",)]

-----------
QUERY:

SELECT count(*) FROM quad_poly_tbl WHERE p ~= polygon '((200, 300),(210, 310),(230, 290))';
RESULT:
	[(1000,)]

-----------
QUERY:


-- test ORDER BY distance
SET enable_indexscan = ON;
RESULT:
	[]

-----------
QUERY:

SET enable_bitmapscan = OFF;
RESULT:
	[]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT rank() OVER (ORDER BY p <-> point '123,456') n, p <-> point '123,456' dist, id
FROM quad_poly_tbl WHERE p <@ polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[('WindowAgg',), ('  ->  Index Scan using quad_poly_tbl_idx on quad_poly_tbl',), ("        Index Cond: (p <@ '((300,300),(400,600),(600,500),(700,200))'::polygon)",), ("        Order By: (p <-> '(123,456)'::point)",)]

-----------
QUERY:


CREATE TEMP TABLE quad_poly_tbl_ord_idx2 AS
SELECT rank() OVER (ORDER BY p <-> point '123,456') n, p <-> point '123,456' dist, id
FROM quad_poly_tbl WHERE p <@ polygon '((300,300),(400,600),(600,500),(700,200))';
RESULT:
	[]

-----------
QUERY:


SELECT *
FROM quad_poly_tbl_ord_seq2 seq FULL JOIN quad_poly_tbl_ord_idx2 idx
	ON seq.n = idx.n AND seq.id = idx.id AND
		(seq.dist = idx.dist OR seq.dist IS NULL AND idx.dist IS NULL)
WHERE seq.id IS NULL OR idx.id IS NULL;
RESULT:
	[]

-----------
QUERY:


RESET enable_seqscan;
RESULT:
	[]

-----------
QUERY:

RESET enable_indexscan;
RESULT:
	[]

-----------
QUERY:

RESET enable_bitmapscan;
RESULT:
	[]

-----------
QUERY:


-- test non-error-throwing API for some core types
SELECT pg_input_is_valid('(2.0,0.8,0.1)', 'polygon');
RESULT:
	[(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('(2.0,0.8,0.1)', 'polygon');
RESULT:
	[('invalid input syntax for type polygon: "(2.0,0.8,0.1)"', None, None, '22P02')]

-----------
QUERY:

SELECT pg_input_is_valid('(2.0,xyz)', 'polygon');
RESULT:
	[(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('(2.0,xyz)', 'polygon');
RESULT:
	[('invalid input syntax for type polygon: "(2.0,xyz)"', None, None, '22P02')]
