
-----------
QUERY:
--
-- PREPARED TRANSACTIONS (two-phase commit)
--
-- We can/* REPLACED */ ''t readily test persistence of prepared xacts within the
-- regression script framework, unfortunately.  Note that a crash
-- isn/* REPLACED */ ''t really needed ... stopping and starting the postmaster would
-- be enough, but we can/* REPLACED */ ''t even do that here.


-- create a simple table that we/* REPLACED */ ''ll use in the tests
CREATE TABLE pxtest1 (foobar VARCHAR(10));
RESULT:
	[]

-----------
QUERY:


INSERT INTO pxtest1 VALUES ('aaa');
RESULT:
	[]

-----------
QUERY:



-- Test PREPARE TRANSACTION
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
RESULT:
	[]

-----------
QUERY:

UPDATE pxtest1 SET foobar = 'bbb' WHERE foobar = 'aaa';
RESULT:
	[]

-----------
QUERY:

SELECT * FROM pxtest1;
RESULT:
	[('bbb',)]

-----------
QUERY:

PREPARE TRANSACTION 'foo1';
RESULT:
	ERROR - prepared transactions are disabled
HINT:  Set max_prepared_transactions to a nonzero value.


-----------
QUERY:


SELECT * FROM pxtest1;
RESULT:
	[('aaa',)]

-----------
QUERY:


-- Test pg_prepared_xacts system view
SELECT gid FROM pg_prepared_xacts;
RESULT:
	[]

-----------
QUERY:


-- Test ROLLBACK PREPARED
ROLLBACK PREPARED 'foo1';
RESULT:
	ERROR - prepared transaction with identifier "foo1" does not exist


-----------
QUERY:


SELECT * FROM pxtest1;
RESULT:
	[('aaa',)]

-----------
QUERY:


SELECT gid FROM pg_prepared_xacts;
RESULT:
	[]

-----------
QUERY:



-- Test COMMIT PREPARED
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
RESULT:
	[]

-----------
QUERY:

INSERT INTO pxtest1 VALUES ('ddd');
RESULT:
	[]

-----------
QUERY:

SELECT * FROM pxtest1;
RESULT:
	[('aaa',), ('ddd',)]

-----------
QUERY:

PREPARE TRANSACTION 'foo2';
RESULT:
	ERROR - prepared transactions are disabled
HINT:  Set max_prepared_transactions to a nonzero value.


-----------
QUERY:


SELECT * FROM pxtest1;
RESULT:
	[('aaa',)]

-----------
QUERY:


COMMIT PREPARED 'foo2';
RESULT:
	ERROR - prepared transaction with identifier "foo2" does not exist


-----------
QUERY:


SELECT * FROM pxtest1;
RESULT:
	[('aaa',)]

-----------
QUERY:


-- Test duplicate gids
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
RESULT:
	[]

-----------
QUERY:

UPDATE pxtest1 SET foobar = 'eee' WHERE foobar = 'ddd';
RESULT:
	[]

-----------
QUERY:

SELECT * FROM pxtest1;
RESULT:
	[('aaa',)]

-----------
QUERY:

PREPARE TRANSACTION 'foo3';
RESULT:
	ERROR - prepared transactions are disabled
HINT:  Set max_prepared_transactions to a nonzero value.


-----------
QUERY:


SELECT gid FROM pg_prepared_xacts;
RESULT:
	[]

-----------
QUERY:


BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
RESULT:
	[]

-----------
QUERY:

INSERT INTO pxtest1 VALUES ('fff');
RESULT:
	[]

-----------
QUERY:


-- This should fail, because the gid foo3 is already in use
PREPARE TRANSACTION 'foo3';
RESULT:
	ERROR - prepared transactions are disabled
HINT:  Set max_prepared_transactions to a nonzero value.


-----------
QUERY:


SELECT * FROM pxtest1;
RESULT:
	[('aaa',)]

-----------
QUERY:


ROLLBACK PREPARED 'foo3';
RESULT:
	ERROR - prepared transaction with identifier "foo3" does not exist


-----------
QUERY:


SELECT * FROM pxtest1;
RESULT:
	[('aaa',)]

-----------
QUERY:


-- Test serialization failure (SSI)
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
RESULT:
	[]

-----------
QUERY:

UPDATE pxtest1 SET foobar = 'eee' WHERE foobar = 'ddd';
RESULT:
	[]

-----------
QUERY:

SELECT * FROM pxtest1;
RESULT:
	[('aaa',)]

-----------
QUERY:

PREPARE TRANSACTION 'foo4';
RESULT:
	ERROR - prepared transactions are disabled
HINT:  Set max_prepared_transactions to a nonzero value.


-----------
QUERY:


SELECT gid FROM pg_prepared_xacts;
RESULT:
	[]

-----------
QUERY:


BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
RESULT:
	[]

-----------
QUERY:

SELECT * FROM pxtest1;
RESULT:
	[('aaa',)]

-----------
QUERY:


-- This should fail, because the two transactions have a write-skew anomaly
INSERT INTO pxtest1 VALUES ('fff');
RESULT:
	[]

-----------
QUERY:

PREPARE TRANSACTION 'foo5';
RESULT:
	ERROR - prepared transactions are disabled
HINT:  Set max_prepared_transactions to a nonzero value.


-----------
QUERY:


SELECT gid FROM pg_prepared_xacts;
RESULT:
	[]

-----------
QUERY:


ROLLBACK PREPARED 'foo4';
RESULT:
	ERROR - prepared transaction with identifier "foo4" does not exist


-----------
QUERY:


SELECT gid FROM pg_prepared_xacts;
RESULT:
	[]

-----------
QUERY:


-- Clean up
DROP TABLE pxtest1;
RESULT:
	[]

-----------
QUERY:


-- Test detection of session-level and xact-level locks on same object
BEGIN;
RESULT:
	[]

-----------
QUERY:

SELECT pg_advisory_lock(1);
RESULT:
	[('',)]

-----------
QUERY:

SELECT pg_advisory_xact_lock_shared(1);
RESULT:
	[('',)]

-----------
QUERY:

PREPARE TRANSACTION 'foo6';
RESULT:
	ERROR - prepared transactions are disabled
HINT:  Set max_prepared_transactions to a nonzero value.


-----------
QUERY:
  -- fails

-- Test subtransactions
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
RESULT:
	[]

-----------
QUERY:

  CREATE TABLE pxtest2 (a int);
RESULT:
	[]

-----------
QUERY:

  INSERT INTO pxtest2 VALUES (1);
RESULT:
	[]

-----------
QUERY:

  SAVEPOINT a;
RESULT:
	[]

-----------
QUERY:

    INSERT INTO pxtest2 VALUES (2);
RESULT:
	[]

-----------
QUERY:

  ROLLBACK TO a;
RESULT:
	[]

-----------
QUERY:

  SAVEPOINT b;
RESULT:
	[]

-----------
QUERY:

  INSERT INTO pxtest2 VALUES (3);
RESULT:
	[]

-----------
QUERY:

PREPARE TRANSACTION 'regress-one';
RESULT:
	ERROR - prepared transactions are disabled
HINT:  Set max_prepared_transactions to a nonzero value.


-----------
QUERY:


CREATE TABLE pxtest3(fff int);
RESULT:
	[]

-----------
QUERY:


-- Test shared invalidation
BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
RESULT:
	[]

-----------
QUERY:

  DROP TABLE pxtest3;
RESULT:
	[]

-----------
QUERY:

  CREATE TABLE pxtest4 (a int);
RESULT:
	[]

-----------
QUERY:

  INSERT INTO pxtest4 VALUES (1);
RESULT:
	[]

-----------
QUERY:

  INSERT INTO pxtest4 VALUES (2);
RESULT:
	[]

-----------
QUERY:

  DECLARE foo CURSOR FOR SELECT * FROM pxtest4;
RESULT:
	[]

-----------
QUERY:

  -- Fetch 1 tuple, keeping the cursor open
  FETCH 1 FROM foo;
RESULT:
	[(1,)]

-----------
QUERY:

PREPARE TRANSACTION 'regress-two';
RESULT:
	ERROR - prepared transactions are disabled
HINT:  Set max_prepared_transactions to a nonzero value.


-----------
QUERY:


-- No such cursor
FETCH 1 FROM foo;
RESULT:
	ERROR - cursor "foo" does not exist


-----------
QUERY:


-- Table doesn/* REPLACED */ ''t exist, the creation hasn/* REPLACED */ ''t been committed yet
SELECT * FROM pxtest2;
RESULT:
	ERROR - relation "pxtest2" does not exist
LINE 4: SELECT * FROM pxtest2;
                      ^


-----------
QUERY:


-- There should be two prepared transactions
SELECT gid FROM pg_prepared_xacts;
RESULT:
	[]

-----------
QUERY:


-- pxtest3 should be locked because of the pending DROP
begin;
RESULT:
	[]

-----------
QUERY:

lock table pxtest3 in access share mode nowait;
RESULT:
	[]

-----------
QUERY:

rollback;
RESULT:
	[]

-----------
QUERY:


-- Disconnect, we will continue testing in a different backend
-- \c -

-- There should still be two prepared transactions
SELECT gid FROM pg_prepared_xacts;
RESULT:
	[]

-----------
QUERY:


-- pxtest3 should still be locked because of the pending DROP
begin;
RESULT:
	[]

-----------
QUERY:

lock table pxtest3 in access share mode nowait;
RESULT:
	[]

-----------
QUERY:

rollback;
RESULT:
	[]

-----------
QUERY:


-- Commit table creation
COMMIT PREPARED 'regress-one';
RESULT:
	ERROR - prepared transaction with identifier "regress-one" does not exist


-----------
QUERY:

-- \d pxtest2
SELECT * FROM pxtest2;
RESULT:
	ERROR - relation "pxtest2" does not exist
LINE 3: SELECT * FROM pxtest2;
                      ^


-----------
QUERY:


-- There should be one prepared transaction
SELECT gid FROM pg_prepared_xacts;
RESULT:
	[]

-----------
QUERY:


-- Commit table drop
COMMIT PREPARED 'regress-two';
RESULT:
	ERROR - prepared transaction with identifier "regress-two" does not exist


-----------
QUERY:

SELECT * FROM pxtest3;
RESULT:
	[]

-----------
QUERY:


-- There should be no prepared transactions
SELECT gid FROM pg_prepared_xacts;
RESULT:
	[]

-----------
QUERY:


-- Clean up
DROP TABLE pxtest2;
RESULT:
	ERROR - table "pxtest2" does not exist


-----------
QUERY:

DROP TABLE pxtest3;
RESULT:
	[]

-----------
QUERY:
  -- will still be there if prepared xacts are disabled
DROP TABLE pxtest4;
RESULT:
	ERROR - table "pxtest4" does not exist

