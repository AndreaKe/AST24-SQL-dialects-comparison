Guest DBMS identified: postgres
-----------
QUERY:
-- Tests for range data types.

--
-- test input parser
-- (type textrange was already made in test_setup.sql)
--

-- negative tests /* REPLACED */, should fail
select ''::textrange
RESULT: []

-----------
QUERY:
select '-[a,z)'::textrange
RESULT: []

-----------
QUERY:
select '[a,z) - '::textrange
RESULT: []

-----------
QUERY:
select '(",a)'::textrange
RESULT: []

-----------
QUERY:
select '(,,a)'::textrange
RESULT: []

-----------
QUERY:
select '(),a)'::textrange
RESULT: []

-----------
QUERY:
select '(a,))'::textrange
RESULT: []

-----------
QUERY:
select '(],a)'::textrange
RESULT: []

-----------
QUERY:
select '(a,])'::textrange
RESULT: []

-----------
QUERY:
select '[z,a]'::textrange
RESULT: []

-----------
QUERY:
-- should succeed
select '  empty  '::textrange
RESULT: []

-----------
QUERY:
select ' ( empty, empty )  '::textrange
RESULT: []

-----------
QUERY:
select ' ( " a " " a ", " z " " z " )  '::textrange
RESULT: []

-----------
QUERY:
select '(a,)'::textrange
RESULT: []

-----------
QUERY:
select '[,z]'::textrange
RESULT: []

-----------
QUERY:
select '[a,]'::textrange
RESULT: []

-----------
QUERY:
select '(,)'::textrange
RESULT: []

-----------
QUERY:
select '[ , ]'::textrange
RESULT: []

-----------
QUERY:
select '["",""]'::textrange
RESULT: []

-----------
QUERY:
select '[",",","]'::textrange
RESULT: []

-----------
QUERY:
select '["\\","\\"]'::textrange
RESULT: []

-----------
QUERY:
select '(\\,a)'::textrange
RESULT: []

-----------
QUERY:
select '((,z)'::textrange
RESULT: []

-----------
QUERY:
select '([,z)'::textrange
RESULT: []

-----------
QUERY:
select '(!,()'::textrange
RESULT: []

-----------
QUERY:
select '(!,[)'::textrange
RESULT: []

-----------
QUERY:
select '[a,a]'::textrange
RESULT: []

-----------
QUERY:
-- these are allowed but normalize to empty:
select '[a,a)'::textrange
RESULT: []

-----------
QUERY:
select '(a,a]'::textrange
RESULT: []

-----------
QUERY:
select '(a,a)'::textrange
RESULT: []

-----------
QUERY:
-- Also try it with non-error-throwing API
select pg_input_is_valid('(1,4)', 'int4range')
RESULT: []

-----------
QUERY:
select pg_input_is_valid('(1,4', 'int4range')
RESULT: []

-----------
QUERY:
select * from pg_input_error_info('(1,4', 'int4range')
RESULT: []

-----------
QUERY:
select pg_input_is_valid('(4,1)', 'int4range')
RESULT: []

-----------
QUERY:
select * from pg_input_error_info('(4,1)', 'int4range')
RESULT: []

-----------
QUERY:
select pg_input_is_valid('(4,zed)', 'int4range')
RESULT: []

-----------
QUERY:
select * from pg_input_error_info('(4,zed)', 'int4range')
RESULT: []

-----------
QUERY:
select pg_input_is_valid('[1,2147483647]', 'int4range')
RESULT: []

-----------
QUERY:
select * from pg_input_error_info('[1,2147483647]', 'int4range')
RESULT: []

-----------
QUERY:
select pg_input_is_valid('[2000-01-01,5874897-12-31]', 'daterange')
RESULT: []

-----------
QUERY:
select * from pg_input_error_info('[2000-01-01,5874897-12-31]', 'daterange')
RESULT: []

-----------
QUERY:
--
-- create some test data and test the operators
--

CREATE TABLE numrange_test (nr NUMRANGE)
RESULT: []

-----------
QUERY:
create index numrange_test_btree on numrange_test(nr)
RESULT: []

-----------
QUERY:
INSERT INTO numrange_test VALUES('[,)')
RESULT: []

-----------
QUERY:
INSERT INTO numrange_test VALUES('[3,]')
RESULT: []

-----------
QUERY:
INSERT INTO numrange_test VALUES('[, 5)')
RESULT: []

-----------
QUERY:
INSERT INTO numrange_test VALUES(numrange(1.1, 2.2))
RESULT: []

-----------
QUERY:
INSERT INTO numrange_test VALUES('empty')
RESULT: []

-----------
QUERY:
INSERT INTO numrange_test VALUES(numrange(1.7, 1.7, '[]'))
RESULT: []

-----------
QUERY:
SELECT nr, isempty(nr), lower(nr), upper(nr) FROM numrange_test
RESULT: []

-----------
QUERY:
SELECT nr, lower_inc(nr), lower_inf(nr), upper_inc(nr), upper_inf(nr) FROM numrange_test
RESULT: []

-----------
QUERY:
SELECT * FROM numrange_test WHERE range_contains(nr, numrange(1.9,1.91))
RESULT: []

-----------
QUERY:
SELECT * FROM numrange_test WHERE nr @> numrange(1.0,10000.1)
RESULT: []

-----------
QUERY:
SELECT * FROM numrange_test WHERE range_contained_by(numrange(-1e7,-10000.1), nr)
RESULT: []

-----------
QUERY:
SELECT * FROM numrange_test WHERE 1.9 <@ nr
RESULT: []

-----------
QUERY:
select * from numrange_test where nr = 'empty'
RESULT: []

-----------
QUERY:
select * from numrange_test where nr = '(1.1, 2.2)'
RESULT: []

-----------
QUERY:
select * from numrange_test where nr = '[1.1, 2.2)'
RESULT: []

-----------
QUERY:
select * from numrange_test where nr < 'empty'
RESULT: []

-----------
QUERY:
select * from numrange_test where nr < numrange(-1000.0, -1000.0,'[]')
RESULT: []

-----------
QUERY:
select * from numrange_test where nr < numrange(0.0, 1.0,'[]')
RESULT: []

-----------
QUERY:
select * from numrange_test where nr < numrange(1000.0, 1001.0,'[]')
RESULT: []

-----------
QUERY:
select * from numrange_test where nr <= 'empty'
RESULT: []

-----------
QUERY:
select * from numrange_test where nr >= 'empty'
RESULT: []

-----------
QUERY:
select * from numrange_test where nr > 'empty'
RESULT: []

-----------
QUERY:
select * from numrange_test where nr > numrange(-1001.0, -1000.0,'[]')
RESULT: []

-----------
QUERY:
select * from numrange_test where nr > numrange(0.0, 1.0,'[]')
RESULT: []

-----------
QUERY:
select * from numrange_test where nr > numrange(1000.0, 1000.0,'[]')
RESULT: []

-----------
QUERY:
select numrange(2.0, 1.0)
RESULT: []

-----------
QUERY:
select numrange(2.0, 3.0) -|- numrange(3.0, 4.0)
RESULT: []

-----------
QUERY:
select range_adjacent(numrange(2.0, 3.0), numrange(3.1, 4.0))
RESULT: []

-----------
QUERY:
select range_adjacent(numrange(2.0, 3.0), numrange(3.1, null))
RESULT: []

-----------
QUERY:
select numrange(2.0, 3.0, '[]') -|- numrange(3.0, 4.0, '()')
RESULT: []

-----------
QUERY:
select numrange(1.0, 2.0) -|- numrange(2.0, 3.0,'[]')
RESULT: []

-----------
QUERY:
select range_adjacent(numrange(2.0, 3.0, '(]'), numrange(1.0, 2.0, '(]'))
RESULT: []

-----------
QUERY:
select numrange(1.1, 3.3) <@ numrange(0.1,10.1)
RESULT: []

-----------
QUERY:
select numrange(0.1, 10.1) <@ numrange(1.1,3.3)
RESULT: []

-----------
QUERY:
select numrange(1.1, 2.2) - numrange(2.0, 3.0)
RESULT: []

-----------
QUERY:
select numrange(1.1, 2.2) - numrange(2.2, 3.0)
RESULT: []

-----------
QUERY:
select numrange(1.1, 2.2,'[]') - numrange(2.0, 3.0)
RESULT: []

-----------
QUERY:
select range_minus(numrange(10.1,12.2,'[]'), numrange(110.0,120.2,'(]'))
RESULT: []

-----------
QUERY:
select range_minus(numrange(10.1,12.2,'[]'), numrange(0.0,120.2,'(]'))
RESULT: []

-----------
QUERY:
select numrange(4.5, 5.5, '[]') && numrange(5.5, 6.5)
RESULT: []

-----------
QUERY:
select numrange(1.0, 2.0) << numrange(3.0, 4.0)
RESULT: []

-----------
QUERY:
select numrange(1.0, 3.0,'[]') << numrange(3.0, 4.0,'[]')
RESULT: []

-----------
QUERY:
select numrange(1.0, 3.0,'()') << numrange(3.0, 4.0,'()')
RESULT: []

-----------
QUERY:
select numrange(1.0, 2.0) >> numrange(3.0, 4.0)
RESULT: []

-----------
QUERY:
select numrange(3.0, 70.0) &< numrange(6.6, 100.0)
RESULT: []

-----------
QUERY:
select numrange(1.1, 2.2) < numrange(1.0, 200.2)
RESULT: []

-----------
QUERY:
select numrange(1.1, 2.2) < numrange(1.1, 1.2)
RESULT: []

-----------
QUERY:
select numrange(1.0, 2.0) + numrange(2.0, 3.0)
RESULT: []

-----------
QUERY:
select numrange(1.0, 2.0) + numrange(1.5, 3.0)
RESULT: []

-----------
QUERY:
select numrange(1.0, 2.0) + numrange(2.5, 3.0)
RESULT: []

-----------
QUERY:
-- should fail

select range_merge(numrange(1.0, 2.0), numrange(2.0, 3.0))
RESULT: []

-----------
QUERY:
select range_merge(numrange(1.0, 2.0), numrange(1.5, 3.0))
RESULT: []

-----------
QUERY:
select range_merge(numrange(1.0, 2.0), numrange(2.5, 3.0))
RESULT: []

-----------
QUERY:
-- shouldn/* REPLACED */''t fail

select numrange(1.0, 2.0) * numrange(2.0, 3.0)
RESULT: []

-----------
QUERY:
select numrange(1.0, 2.0) * numrange(1.5, 3.0)
RESULT: []

-----------
QUERY:
select numrange(1.0, 2.0) * numrange(2.5, 3.0)
RESULT: []

-----------
QUERY:
select range_intersect_agg(nr) from numrange_test
RESULT: []

-----------
QUERY:
select range_intersect_agg(nr) from numrange_test where false
RESULT: []

-----------
QUERY:
select range_intersect_agg(nr) from numrange_test where nr @> 4.0
RESULT: []

-----------
QUERY:
analyze numrange_test
RESULT: []

-----------
QUERY:
create table numrange_test2(nr numrange)
RESULT: []

-----------
QUERY:
create index numrange_test2_hash_idx on numrange_test2 using hash (nr)
RESULT: []

-----------
QUERY:
INSERT INTO numrange_test2 VALUES('[, 5)')
RESULT: []

-----------
QUERY:
INSERT INTO numrange_test2 VALUES(numrange(1.1, 2.2))
RESULT: []

-----------
QUERY:
INSERT INTO numrange_test2 VALUES(numrange(1.1, 2.2))
RESULT: []

-----------
QUERY:
INSERT INTO numrange_test2 VALUES(numrange(1.1, 2.2,'()'))
RESULT: []

-----------
QUERY:
INSERT INTO numrange_test2 VALUES('empty')
RESULT: []

-----------
QUERY:
select * from numrange_test2 where nr = 'empty'::numrange
RESULT: []

-----------
QUERY:
select * from numrange_test2 where nr = numrange(1.1, 2.2)
RESULT: []

-----------
QUERY:
select * from numrange_test2 where nr = numrange(1.1, 2.3)
RESULT: []

-----------
QUERY:
set enable_nestloop=t
RESULT: []

-----------
QUERY:
set enable_hashjoin=f
RESULT: []

-----------
QUERY:
set enable_mergejoin=f
RESULT: []

-----------
QUERY:
select * from numrange_test natural join numrange_test2 order by nr
RESULT: []

-----------
QUERY:
set enable_nestloop=f
RESULT: []

-----------
QUERY:
set enable_hashjoin=t
RESULT: []

-----------
QUERY:
set enable_mergejoin=f
RESULT: []

-----------
QUERY:
select * from numrange_test natural join numrange_test2 order by nr
RESULT: []

-----------
QUERY:
set enable_nestloop=f
RESULT: []

-----------
QUERY:
set enable_hashjoin=f
RESULT: []

-----------
QUERY:
set enable_mergejoin=t
RESULT: []

-----------
QUERY:
select * from numrange_test natural join numrange_test2 order by nr
RESULT: []

-----------
QUERY:
set enable_nestloop to default
RESULT: []

-----------
QUERY:
set enable_hashjoin to default
RESULT: []

-----------
QUERY:
set enable_mergejoin to default
RESULT: []

-----------
QUERY:
-- keep numrange_test around to help exercise dump/reload
DROP TABLE numrange_test2
RESULT: []

-----------
QUERY:
--
-- Apply a subset of the above tests on a collatable type, too
--

CREATE TABLE textrange_test (tr textrange)
RESULT: []

-----------
QUERY:
create index textrange_test_btree on textrange_test(tr)
RESULT: []

-----------
QUERY:
INSERT INTO textrange_test VALUES('[,)')
RESULT: []

-----------
QUERY:
INSERT INTO textrange_test VALUES('["a",]')
RESULT: []

-----------
QUERY:
INSERT INTO textrange_test VALUES('[,"q")')
RESULT: []

-----------
QUERY:
INSERT INTO textrange_test VALUES(textrange('b', 'g'))
RESULT: []

-----------
QUERY:
INSERT INTO textrange_test VALUES('empty')
RESULT: []

-----------
QUERY:
INSERT INTO textrange_test VALUES(textrange('d', 'd', '[]'))
RESULT: []

-----------
QUERY:
SELECT tr, isempty(tr), lower(tr), upper(tr) FROM textrange_test
RESULT: []

-----------
QUERY:
SELECT tr, lower_inc(tr), lower_inf(tr), upper_inc(tr), upper_inf(tr) FROM textrange_test
RESULT: []

-----------
QUERY:
SELECT * FROM textrange_test WHERE range_contains(tr, textrange('f', 'fx'))
RESULT: []

-----------
QUERY:
SELECT * FROM textrange_test WHERE tr @> textrange('a', 'z')
RESULT: []

-----------
QUERY:
SELECT * FROM textrange_test WHERE range_contained_by(textrange('0','9'), tr)
RESULT: []

-----------
QUERY:
SELECT * FROM textrange_test WHERE 'e'::text <@ tr
RESULT: []

-----------
QUERY:
select * from textrange_test where tr = 'empty'
RESULT: []

-----------
QUERY:
select * from textrange_test where tr = '("b","g")'
RESULT: []

-----------
QUERY:
select * from textrange_test where tr = '["b","g")'
RESULT: []

-----------
QUERY:
select * from textrange_test where tr < 'empty'
RESULT: []

-----------
QUERY:
-- test canonical form for int4range
select int4range(1, 10, '[]')
RESULT: []

-----------
QUERY:
select int4range(1, 10, '[)')
RESULT: []

-----------
QUERY:
select int4range(1, 10, '(]')
RESULT: []

-----------
QUERY:
select int4range(1, 10, '()')
RESULT: []

-----------
QUERY:
select int4range(1, 2, '()')
RESULT: []

-----------
QUERY:
-- test canonical form for daterange
select daterange('2000-01-10'::date, '2000-01-20'::date, '[]')
RESULT: []

-----------
QUERY:
select daterange('2000-01-10'::date, '2000-01-20'::date, '[)')
RESULT: []

-----------
QUERY:
select daterange('2000-01-10'::date, '2000-01-20'::date, '(]')
RESULT: []

-----------
QUERY:
select daterange('2000-01-10'::date, '2000-01-20'::date, '()')
RESULT: []

-----------
QUERY:
select daterange('2000-01-10'::date, '2000-01-11'::date, '()')
RESULT: []

-----------
QUERY:
select daterange('2000-01-10'::date, '2000-01-11'::date, '(]')
RESULT: []

-----------
QUERY:
select daterange('-infinity'::date, '2000-01-01'::date, '()')
RESULT: []

-----------
QUERY:
select daterange('-infinity'::date, '2000-01-01'::date, '[)')
RESULT: []

-----------
QUERY:
select daterange('2000-01-01'::date, 'infinity'::date, '[)')
RESULT: []

-----------
QUERY:
select daterange('2000-01-01'::date, 'infinity'::date, '[]')
RESULT: []

-----------
QUERY:
-- test GiST index that/* REPLACED */''s been built incrementally
create table test_range_gist(ir int4range)
RESULT: []

-----------
QUERY:
create index test_range_gist_idx on test_range_gist using gist (ir)
RESULT: []

-----------
QUERY:
insert into test_range_gist select int4range(g, g+10) from generate_series(1,2000) g
RESULT: []

-----------
QUERY:
insert into test_range_gist select 'empty'::int4range from generate_series(1,500) g
RESULT: []

-----------
QUERY:
insert into test_range_gist select int4range(g, g+10000) from generate_series(1,1000) g
RESULT: []

-----------
QUERY:
insert into test_range_gist select 'empty'::int4range from generate_series(1,500) g
RESULT: []

-----------
QUERY:
insert into test_range_gist select int4range(NULL,g*10,'(]') from generate_series(1,100) g
RESULT: []

-----------
QUERY:
insert into test_range_gist select int4range(g*10,NULL,'(]') from generate_series(1,100) g
RESULT: []

-----------
QUERY:
insert into test_range_gist select int4range(g, g+10) from generate_series(1,2000) g
RESULT: []

-----------
QUERY:
-- test statistics and selectivity estimation as well
--
-- We don/* REPLACED */''t check the accuracy of selectivity estimation, but at least check
-- it doesn/* REPLACED */''t fall.
analyze test_range_gist
RESULT: []

-----------
QUERY:
-- first, verify non-indexed results
SET enable_seqscan    = t
RESULT: []

-----------
QUERY:
SET enable_indexscan  = f
RESULT: []

-----------
QUERY:
SET enable_bitmapscan = f
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> 'empty'::int4range
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir = int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> 10
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir && int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir <@ int4range(10,50)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir << int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir >> int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir &< int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir &> int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir -|- int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> '{}'::int4multirange
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> int4multirange(int4range(10,20), int4range(30,40))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir && '{(10,20),(30,40),(50,60)}'::int4multirange
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir <@ '{(10,30),(40,60),(70,90)}'::int4multirange
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir << int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir >> int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir &< int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir &> int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir -|- int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
-- now check same queries using index
SET enable_seqscan    = f
RESULT: []

-----------
QUERY:
SET enable_indexscan  = t
RESULT: []

-----------
QUERY:
SET enable_bitmapscan = f
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> 'empty'::int4range
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir = int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> 10
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir && int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir <@ int4range(10,50)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir << int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir >> int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir &< int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir &> int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir -|- int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> '{}'::int4multirange
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> int4multirange(int4range(10,20), int4range(30,40))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir && '{(10,20),(30,40),(50,60)}'::int4multirange
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir <@ '{(10,30),(40,60),(70,90)}'::int4multirange
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir << int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir >> int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir &< int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir &> int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir -|- int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
-- now check same queries using a bulk-loaded index
drop index test_range_gist_idx
RESULT: []

-----------
QUERY:
create index test_range_gist_idx on test_range_gist using gist (ir)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> 'empty'::int4range
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir = int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> 10
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir && int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir <@ int4range(10,50)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir << int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir >> int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir &< int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir &> int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir -|- int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> '{}'::int4multirange
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir @> int4multirange(int4range(10,20), int4range(30,40))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir && '{(10,20),(30,40),(50,60)}'::int4multirange
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir <@ '{(10,30),(40,60),(70,90)}'::int4multirange
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir << int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir >> int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir &< int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir &> int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
select count(*) from test_range_gist where ir -|- int4multirange(int4range(100,200), int4range(400,500))
RESULT: []

-----------
QUERY:
-- test SP-GiST index that/* REPLACED */''s been built incrementally
create table test_range_spgist(ir int4range)
RESULT: []

-----------
QUERY:
create index test_range_spgist_idx on test_range_spgist using spgist (ir)
RESULT: []

-----------
QUERY:
insert into test_range_spgist select int4range(g, g+10) from generate_series(1,2000) g
RESULT: []

-----------
QUERY:
insert into test_range_spgist select 'empty'::int4range from generate_series(1,500) g
RESULT: []

-----------
QUERY:
insert into test_range_spgist select int4range(g, g+10000) from generate_series(1,1000) g
RESULT: []

-----------
QUERY:
insert into test_range_spgist select 'empty'::int4range from generate_series(1,500) g
RESULT: []

-----------
QUERY:
insert into test_range_spgist select int4range(NULL,g*10,'(]') from generate_series(1,100) g
RESULT: []

-----------
QUERY:
insert into test_range_spgist select int4range(g*10,NULL,'(]') from generate_series(1,100) g
RESULT: []

-----------
QUERY:
insert into test_range_spgist select int4range(g, g+10) from generate_series(1,2000) g
RESULT: []

-----------
QUERY:
-- first, verify non-indexed results
SET enable_seqscan    = t
RESULT: []

-----------
QUERY:
SET enable_indexscan  = f
RESULT: []

-----------
QUERY:
SET enable_bitmapscan = f
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir @> 'empty'::int4range
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir = int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir @> 10
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir @> int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir && int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir <@ int4range(10,50)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir << int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir >> int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir &< int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir &> int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir -|- int4range(100,500)
RESULT: []

-----------
QUERY:
-- now check same queries using index
SET enable_seqscan    = f
RESULT: []

-----------
QUERY:
SET enable_indexscan  = t
RESULT: []

-----------
QUERY:
SET enable_bitmapscan = f
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir @> 'empty'::int4range
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir = int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir @> 10
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir @> int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir && int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir <@ int4range(10,50)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir << int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir >> int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir &< int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir &> int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir -|- int4range(100,500)
RESULT: []

-----------
QUERY:
-- now check same queries using a bulk-loaded index
drop index test_range_spgist_idx
RESULT: []

-----------
QUERY:
create index test_range_spgist_idx on test_range_spgist using spgist (ir)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir @> 'empty'::int4range
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir = int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir @> 10
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir @> int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir && int4range(10,20)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir <@ int4range(10,50)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir << int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir >> int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir &< int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir &> int4range(100,500)
RESULT: []

-----------
QUERY:
select count(*) from test_range_spgist where ir -|- int4range(100,500)
RESULT: []

-----------
QUERY:
-- test index-only scans
explain (costs off)
select ir from test_range_spgist where ir -|- int4range(10,20) order by ir
RESULT: []

-----------
QUERY:
select ir from test_range_spgist where ir -|- int4range(10,20) order by ir
RESULT: []

-----------
QUERY:
RESET enable_seqscan
RESULT: []

-----------
QUERY:
RESET enable_indexscan
RESULT: []

-----------
QUERY:
RESET enable_bitmapscan
RESULT: []

-----------
QUERY:
-- test elem <@ range operator
create table test_range_elem(i int4)
RESULT: []

-----------
QUERY:
create index test_range_elem_idx on test_range_elem (i)
RESULT: []

-----------
QUERY:
insert into test_range_elem select i from generate_series(1,100) i
RESULT: []

-----------
QUERY:
SET enable_seqscan    = f
RESULT: []

-----------
QUERY:
select count(*) from test_range_elem where i <@ int4range(10,50)
RESULT: []

-----------
QUERY:
-- also test spgist index on anyrange expression
create index on test_range_elem using spgist(int4range(i,i+10))
RESULT: []

-----------
QUERY:
explain (costs off)
select count(*) from test_range_elem where int4range(i,i+10) <@ int4range(10,30)
RESULT: []

-----------
QUERY:
select count(*) from test_range_elem where int4range(i,i+10) <@ int4range(10,30)
RESULT: []

-----------
QUERY:
RESET enable_seqscan
RESULT: []

-----------
QUERY:
drop table test_range_elem
RESULT: []

-----------
QUERY:
--
-- Btree_gist is not included by default, so to test exclusion
-- constraints with range types, use singleton int ranges for the /* REPLACED */''=/* REPLACED */''
-- portion of the constraint.
--

create table test_range_excl(
  room int4range,
  speaker int4range,
  during tsrange,
  exclude using gist (room with =, during with &&),
  exclude using gist (speaker with =, during with &&)
)
RESULT: []

-----------
QUERY:
insert into test_range_excl
  values(int4range(123, 123, '[]'), int4range(1, 1, '[]'), '[2010-01-02 10:00, 2010-01-02 11:00)')
RESULT: []

-----------
QUERY:
insert into test_range_excl
  values(int4range(123, 123, '[]'), int4range(2, 2, '[]'), '[2010-01-02 11:00, 2010-01-02 12:00)')
RESULT: []

-----------
QUERY:
insert into test_range_excl
  values(int4range(123, 123, '[]'), int4range(3, 3, '[]'), '[2010-01-02 10:10, 2010-01-02 11:00)')
RESULT: []

-----------
QUERY:
insert into test_range_excl
  values(int4range(124, 124, '[]'), int4range(3, 3, '[]'), '[2010-01-02 10:10, 2010-01-02 11:10)')
RESULT: []

-----------
QUERY:
insert into test_range_excl
  values(int4range(125, 125, '[]'), int4range(1, 1, '[]'), '[2010-01-02 10:10, 2010-01-02 11:00)')
RESULT: []

-----------
QUERY:
-- test bigint ranges
select int8range(10000000000::int8, 20000000000::int8,'(]')
RESULT: []

-----------
QUERY:
-- test tstz ranges
set timezone to '-08'
RESULT: []

-----------
QUERY:
select '[2010-01-01 01:00:00 -05, 2010-01-01 02:00:00 -08)'::tstzrange
RESULT: []

-----------
QUERY:
-- should fail
select '[2010-01-01 01:00:00 -08, 2010-01-01 02:00:00 -05)'::tstzrange
RESULT: []

-----------
QUERY:
set timezone to default
RESULT: []

-----------
QUERY:
--
-- Test user-defined range of floats
-- (type float8range was already made in test_setup.sql)
--

--should fail
create type bogus_float8range as range (subtype=float8, subtype_diff=float4mi)
RESULT: []

-----------
QUERY:
select '[123.001, 5.e9)'::float8range @> 888.882::float8
RESULT: []

-----------
QUERY:
create table float8range_test(f8r float8range, i int)
RESULT: []

-----------
QUERY:
insert into float8range_test values(float8range(-100.00007, '1.111113e9'), 42)
RESULT: []

-----------
QUERY:
select * from float8range_test
RESULT: []

-----------
QUERY:
drop table float8range_test
RESULT: []

-----------
QUERY:
--
-- Test range types over domains
--

create domain mydomain as int4
RESULT: []

-----------
QUERY:
create type mydomainrange as range(subtype=mydomain)
RESULT: []

-----------
QUERY:
select '[4,50)'::mydomainrange @> 7::mydomain
RESULT: []

-----------
QUERY:
drop domain mydomain
RESULT: []

-----------
QUERY:
-- fail
drop domain mydomain cascade
RESULT: []

-----------
QUERY:
--
-- Test domains over range types
--

create domain restrictedrange as int4range check (upper(value) < 10)
RESULT: []

-----------
QUERY:
select '[4,5)'::restrictedrange @> 7
RESULT: []

-----------
QUERY:
select '[4,50)'::restrictedrange @> 7
RESULT: []

-----------
QUERY:
-- should fail
drop domain restrictedrange
RESULT: []

-----------
QUERY:
--
-- Test multiple range types over the same subtype
--

create type textrange1 as range(subtype=text, collation="C")
RESULT: []

-----------
QUERY:
create type textrange2 as range(subtype=text, collation="C")
RESULT: []

-----------
QUERY:
select textrange1('a','Z') @> 'b'::text
RESULT: []

-----------
QUERY:
select textrange2('a','z') @> 'b'::text
RESULT: []

-----------
QUERY:
drop type textrange1
RESULT: []

-----------
QUERY:
drop type textrange2
RESULT: []

-----------
QUERY:
--
-- Test polymorphic type system
--

create function anyarray_anyrange_func(a anyarray, r anyrange)
  returns anyelement as 'select $1[1] + lower($2)
RESULT: []

-----------
QUERY:
' language sql
RESULT: []

-----------
QUERY:
select anyarray_anyrange_func(ARRAY[1,2], int4range(10,20))
RESULT: []

-----------
QUERY:
-- should fail
select anyarray_anyrange_func(ARRAY[1,2], numrange(10,20))
RESULT: []

-----------
QUERY:
drop function anyarray_anyrange_func(anyarray, anyrange)
RESULT: []

-----------
QUERY:
-- should fail
create function bogus_func(anyelement)
  returns anyrange as 'select int4range(1,10)' language sql
RESULT: []

-----------
QUERY:
-- should fail
create function bogus_func(int)
  returns anyrange as 'select int4range(1,10)' language sql
RESULT: []

-----------
QUERY:
create function range_add_bounds(anyrange)
  returns anyelement as 'select lower($1) + upper($1)' language sql
RESULT: []

-----------
QUERY:
select range_add_bounds(int4range(1, 17))
RESULT: []

-----------
QUERY:
select range_add_bounds(numrange(1.0001, 123.123))
RESULT: []

-----------
QUERY:
create function rangetypes_sql(q anyrange, b anyarray, out c anyelement)
  as $$ select upper($1) + $2[1] $$
  language sql
RESULT: []

-----------
QUERY:
select rangetypes_sql(int4range(1,10), ARRAY[2,20])
RESULT: []

-----------
QUERY:
select rangetypes_sql(numrange(1,10), ARRAY[2,20])
RESULT: []

-----------
QUERY:
-- match failure

create function anycompatiblearray_anycompatiblerange_func(a anycompatiblearray, r anycompatiblerange)
  returns anycompatible as 'select $1[1] + lower($2)
RESULT: []

-----------
QUERY:
' language sql
RESULT: []

-----------
QUERY:
select anycompatiblearray_anycompatiblerange_func(ARRAY[1,2], int4range(10,20))
RESULT: []

-----------
QUERY:
select anycompatiblearray_anycompatiblerange_func(ARRAY[1,2], numrange(10,20))
RESULT: []

-----------
QUERY:
-- should fail
select anycompatiblearray_anycompatiblerange_func(ARRAY[1.1,2], int4range(10,20))
RESULT: []

-----------
QUERY:
drop function anycompatiblearray_anycompatiblerange_func(anycompatiblearray, anycompatiblerange)
RESULT: []

-----------
QUERY:
-- should fail
create function bogus_func(anycompatible)
  returns anycompatiblerange as 'select int4range(1,10)' language sql
RESULT: []

-----------
QUERY:
--
-- Arrays of ranges
--

select ARRAY[numrange(1.1, 1.2), numrange(12.3, 155.5)]
RESULT: []

-----------
QUERY:
create table i8r_array (f1 int, f2 int8range[])
RESULT: []

-----------
QUERY:
insert into i8r_array values (42, array[int8range(1,10), int8range(2,20)])
RESULT: []

-----------
QUERY:
select * from i8r_array
RESULT: []

-----------
QUERY:
drop table i8r_array
RESULT: []

-----------
QUERY:
--
-- Ranges of arrays
--

create type arrayrange as range (subtype=int4[])
RESULT: []

-----------
QUERY:
select arrayrange(ARRAY[1,2], ARRAY[2,1])
RESULT: []

-----------
QUERY:
select arrayrange(ARRAY[2,1], ARRAY[1,2])
RESULT: []

-----------
QUERY:
-- fail

select array[1,1] <@ arrayrange(array[1,2], array[2,1])
RESULT: []

-----------
QUERY:
select array[1,3] <@ arrayrange(array[1,2], array[2,1])
RESULT: []

-----------
QUERY:
--
-- Ranges of composites
--

create type two_ints as (a int, b int)
RESULT: []

-----------
QUERY:
create type two_ints_range as range (subtype = two_ints)
RESULT: []

-----------
QUERY:
-- with debug_parallel_query on, this exercises tqueue.c/* REPLACED */''s range remapping
select *, row_to_json(upper(t)) as u from
  (values (two_ints_range(row(1,2), row(3,4))),
          (two_ints_range(row(5,6), row(7,8)))) v(t)
RESULT: []

-----------
QUERY:
-- this must be rejected to avoid self-inclusion issues:
alter type two_ints add attribute c two_ints_range
RESULT: []

-----------
QUERY:
drop type two_ints cascade
RESULT: []

-----------
QUERY:
--
-- Check behavior when subtype lacks a hash function
--

create type varbitrange as range (subtype = varbit)
RESULT: []

-----------
QUERY:
set enable_sort = off
RESULT: []

-----------
QUERY:
-- try to make it pick a hash setop implementation

select '(01,10)'::varbitrange except select '(10,11)'::varbitrange
RESULT: []

-----------
QUERY:
reset enable_sort
RESULT: []

-----------
QUERY:
--
-- OUT/INOUT/TABLE functions
--

-- infer anyrange from anyrange
create function outparam_succeed(i anyrange, out r anyrange, out t text)
  as $$ select $1, 'foo'::text $$ language sql
RESULT: []

-----------
QUERY:
select * from outparam_succeed(int4range(1,2))
RESULT: []

-----------
QUERY:
create function outparam2_succeed(r anyrange, out lu anyarray, out ul anyarray)
  as $$ select array[lower($1), upper($1)], array[upper($1), lower($1)] $$
  language sql
RESULT: []

-----------
QUERY:
select * from outparam2_succeed(int4range(1,11))
RESULT: []

-----------
QUERY:
-- infer anyarray from anyrange
create function outparam_succeed2(i anyrange, out r anyarray, out t text)
  as $$ select ARRAY[upper($1)], 'foo'::text $$ language sql
RESULT: []

-----------
QUERY:
select * from outparam_succeed2(int4range(int4range(1,2)))
RESULT: []

-----------
QUERY:
-- infer anyelement from anyrange
create function inoutparam_succeed(out i anyelement, inout r anyrange)
  as $$ select upper($1), $1 $$ language sql
RESULT: []

-----------
QUERY:
select * from inoutparam_succeed(int4range(1,2))
RESULT: []

-----------
QUERY:
create function table_succeed(r anyrange)
  returns table(l anyelement, u anyelement)
  as $$ select lower($1), upper($1) $$
  language sql
RESULT: []

-----------
QUERY:
select * from table_succeed(int4range(1,11))
RESULT: []

-----------
QUERY:
-- should fail
create function outparam_fail(i anyelement, out r anyrange, out t text)
  as $$ select '[1,10]', 'foo' $$ language sql
RESULT: []

-----------
QUERY:
--should fail
create function inoutparam_fail(inout i anyelement, out r anyrange)
  as $$ select $1, '[1,10]' $$ language sql
RESULT: []

-----------
QUERY:
--should fail
create function table_fail(i anyelement) returns table(i anyelement, r anyrange)
  as $$ select $1, '[1,10]' $$ language sql
RESULT: []

-----------
QUERY:
--
-- Test support functions
--

-- empty range
explain (verbose, costs off)
select current_date <@ daterange 'empty'
RESULT: []

-----------
QUERY:
-- unbounded range
explain (verbose, costs off)
select current_date <@ daterange(NULL, NULL)
RESULT: []

-----------
QUERY:
-- only lower bound present
explain (verbose, costs off)
select current_date <@ daterange('2000-01-01', NULL, '[)')
RESULT: []

-----------
QUERY:
-- only upper bound present
explain (verbose, costs off)
select current_date <@ daterange(NULL, '2000-01-01', '(]')
RESULT: []

-----------
QUERY:
-- lower range /* REPLACED */''-Infinity/* REPLACED */'' excluded
explain (verbose, costs off)
select current_date <@ daterange('-Infinity', '1997-04-10'::date, '()')
RESULT: []

-----------
QUERY:
-- lower range /* REPLACED */''-Infinity/* REPLACED */'' included
explain (verbose, costs off)
select current_date <@ daterange('-Infinity', '1997-04-10'::date, '[)')
RESULT: []

-----------
QUERY:
-- upper range /* REPLACED */''Infinity/* REPLACED */'' excluded
explain (verbose, costs off)
select current_date <@ daterange('2002-09-25'::date, 'Infinity', '[)')
RESULT: []

-----------
QUERY:
-- upper range /* REPLACED */''Infinity/* REPLACED */'' included
explain (verbose, costs off)
select current_date <@ daterange('2002-09-25'::date, 'Infinity', '[]')
RESULT: []

-----------
QUERY:
-- should also work if we use /* REPLACED */''@>/* REPLACED */''
explain (verbose, costs off)
select daterange('-Infinity', '1997-04-10'::date, '()') @> current_date
RESULT: []

-----------
QUERY:
explain (verbose, costs off)
select daterange('2002-09-25'::date, 'Infinity', '[]') @> current_date
RESULT: []

-----------
QUERY:
-- Check that volatile cases are not optimized
explain (verbose, costs off)
select now() <@ tstzrange('2024-01-20 00:00', '2024-01-21 00:00')
RESULT: []

-----------
QUERY:
explain (verbose, costs off)  -- unsafe!
select clock_timestamp() <@ tstzrange('2024-01-20 00:00', '2024-01-21 00:00')
RESULT: []

-----------
QUERY:
explain (verbose, costs off)
select clock_timestamp() <@ tstzrange('2024-01-20 00:00', NULL)
RESULT: []

-----------
QUERY:
-- test a custom range type with a non-default operator class
create type textrange_supp as range (
   subtype = text,
   subtype_opclass = text_pattern_ops
)
RESULT: []

-----------
QUERY:
create temp table text_support_test (t text collate "C")
RESULT: []

-----------
QUERY:
insert into text_support_test values ('a'), ('c'), ('d'), ('ch')
RESULT: []

-----------
QUERY:
explain (costs off)
select * from text_support_test where t <@ textrange_supp('a', 'd')
RESULT: []

-----------
QUERY:
select * from text_support_test where t <@ textrange_supp('a', 'd')
RESULT: []

-----------
QUERY:
drop table text_support_test
RESULT: []

-----------
QUERY:
drop type textrange_supp
RESULT: []
=========================================
Summary for test case rangetypes/test.sql of postgres
=========================================
