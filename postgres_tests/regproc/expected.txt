
-----------
QUERY:
--
-- regproc
--

/* If objects exist, return oids */

CREATE ROLE regress_regrole_test;
RESULT:
	postgres: None

-----------
QUERY:


-- without schemaname

SELECT regoper('||/');
RESULT:
	postgres: [('||/',)]

-----------
QUERY:

SELECT regoperator('+(int4,int4)');
RESULT:
	postgres: [('+(integer,integer)',)]

-----------
QUERY:

SELECT regproc('now');
RESULT:
	postgres: [('now',)]

-----------
QUERY:

SELECT regprocedure('abs(numeric)');
RESULT:
	postgres: [('abs(numeric)',)]

-----------
QUERY:

SELECT regclass('pg_class');
RESULT:
	postgres: [('pg_class',)]

-----------
QUERY:

SELECT regtype('int4');
RESULT:
	postgres: [('integer',)]

-----------
QUERY:

SELECT regcollation('"POSIX"');
RESULT:
	postgres: [('"POSIX"',)]

-----------
QUERY:


SELECT to_regoper('||/');
RESULT:
	postgres: [('||/',)]

-----------
QUERY:

SELECT to_regoperator('+(int4,int4)');
RESULT:
	postgres: [('+(integer,integer)',)]

-----------
QUERY:

SELECT to_regproc('now');
RESULT:
	postgres: [('now',)]

-----------
QUERY:

SELECT to_regprocedure('abs(numeric)');
RESULT:
	postgres: [('abs(numeric)',)]

-----------
QUERY:

SELECT to_regclass('pg_class');
RESULT:
	postgres: [('pg_class',)]

-----------
QUERY:

SELECT to_regtype('int4');
RESULT:
	postgres: [('integer',)]

-----------
QUERY:

SELECT to_regcollation('"POSIX"');
RESULT:
	postgres: [('"POSIX"',)]

-----------
QUERY:


-- with schemaname

SELECT regoper('pg_catalog.||/');
RESULT:
	postgres: [('||/',)]

-----------
QUERY:

SELECT regoperator('pg_catalog.+(int4,int4)');
RESULT:
	postgres: [('+(integer,integer)',)]

-----------
QUERY:

SELECT regproc('pg_catalog.now');
RESULT:
	postgres: [('now',)]

-----------
QUERY:

SELECT regprocedure('pg_catalog.abs(numeric)');
RESULT:
	postgres: [('abs(numeric)',)]

-----------
QUERY:

SELECT regclass('pg_catalog.pg_class');
RESULT:
	postgres: [('pg_class',)]

-----------
QUERY:

SELECT regtype('pg_catalog.int4');
RESULT:
	postgres: [('integer',)]

-----------
QUERY:

SELECT regcollation('pg_catalog."POSIX"');
RESULT:
	postgres: [('"POSIX"',)]

-----------
QUERY:


SELECT to_regoper('pg_catalog.||/');
RESULT:
	postgres: [('||/',)]

-----------
QUERY:

SELECT to_regproc('pg_catalog.now');
RESULT:
	postgres: [('now',)]

-----------
QUERY:

SELECT to_regprocedure('pg_catalog.abs(numeric)');
RESULT:
	postgres: [('abs(numeric)',)]

-----------
QUERY:

SELECT to_regclass('pg_catalog.pg_class');
RESULT:
	postgres: [('pg_class',)]

-----------
QUERY:

SELECT to_regtype('pg_catalog.int4');
RESULT:
	postgres: [('integer',)]

-----------
QUERY:

SELECT to_regcollation('pg_catalog."POSIX"');
RESULT:
	postgres: [('"POSIX"',)]

-----------
QUERY:


-- schemaname not applicable

SELECT regrole('regress_regrole_test');
RESULT:
	postgres: [('regress_regrole_test',)]

-----------
QUERY:

SELECT regrole('"regress_regrole_test"');
RESULT:
	postgres: [('regress_regrole_test',)]

-----------
QUERY:

SELECT regnamespace('pg_catalog');
RESULT:
	postgres: [('pg_catalog',)]

-----------
QUERY:

SELECT regnamespace('"pg_catalog"');
RESULT:
	postgres: [('pg_catalog',)]

-----------
QUERY:


SELECT to_regrole('regress_regrole_test');
RESULT:
	postgres: [('regress_regrole_test',)]

-----------
QUERY:

SELECT to_regrole('"regress_regrole_test"');
RESULT:
	postgres: [('regress_regrole_test',)]

-----------
QUERY:

SELECT to_regnamespace('pg_catalog');
RESULT:
	postgres: [('pg_catalog',)]

-----------
QUERY:

SELECT to_regnamespace('"pg_catalog"');
RESULT:
	postgres: [('pg_catalog',)]

-----------
QUERY:


/* If objects don't exist, raise errors. */

DROP ROLE regress_regrole_test;
RESULT:
	postgres: None

-----------
QUERY:


-- without schemaname

SELECT regoper('||//');
RESULT:
	postgres: operator does not exist: ||//
LINE 5: SELECT regoper('||//');
                       ^


-----------
QUERY:

SELECT regoperator('++(int4,int4)');
RESULT:
	postgres: operator does not exist: ++(int4,int4)
LINE 2: SELECT regoperator('++(int4,int4)');
                           ^


-----------
QUERY:

SELECT regproc('know');
RESULT:
	postgres: function "know" does not exist
LINE 2: SELECT regproc('know');
                       ^


-----------
QUERY:

SELECT regprocedure('absinthe(numeric)');
RESULT:
	postgres: function "absinthe(numeric)" does not exist
LINE 2: SELECT regprocedure('absinthe(numeric)');
                            ^


-----------
QUERY:

SELECT regclass('pg_classes');
RESULT:
	postgres: relation "pg_classes" does not exist
LINE 2: SELECT regclass('pg_classes');
                        ^


-----------
QUERY:

SELECT regtype('int3');
RESULT:
	postgres: type "int3" does not exist
LINE 2: SELECT regtype('int3');
                       ^


-----------
QUERY:


-- with schemaname

SELECT regoper('ng_catalog.||/');
RESULT:
	postgres: operator does not exist: ng_catalog.||/
LINE 5: SELECT regoper('ng_catalog.||/');
                       ^


-----------
QUERY:

SELECT regoperator('ng_catalog.+(int4,int4)');
RESULT:
	postgres: operator does not exist: ng_catalog.+(int4,int4)
LINE 2: SELECT regoperator('ng_catalog.+(int4,int4)');
                           ^


-----------
QUERY:

SELECT regproc('ng_catalog.now');
RESULT:
	postgres: function "ng_catalog.now" does not exist
LINE 2: SELECT regproc('ng_catalog.now');
                       ^


-----------
QUERY:

SELECT regprocedure('ng_catalog.abs(numeric)');
RESULT:
	postgres: function "ng_catalog.abs(numeric)" does not exist
LINE 2: SELECT regprocedure('ng_catalog.abs(numeric)');
                            ^


-----------
QUERY:

SELECT regclass('ng_catalog.pg_class');
RESULT:
	postgres: relation "ng_catalog.pg_class" does not exist
LINE 2: SELECT regclass('ng_catalog.pg_class');
                        ^


-----------
QUERY:

SELECT regtype('ng_catalog.int4');
RESULT:
	postgres: schema "ng_catalog" does not exist
LINE 2: SELECT regtype('ng_catalog.int4');
                       ^


-----------
QUERY:

-- \set VERBOSITY sqlstate \\ -- error message is encoding-dependent
SELECT regcollation('ng_catalog."POSIX"');
RESULT:
	postgres: collation "ng_catalog.POSIX" for encoding "UTF8" does not exist
LINE 3: SELECT regcollation('ng_catalog."POSIX"');
                            ^


-----------
QUERY:

-- \set VERBOSITY default

-- schemaname not applicable

SELECT regrole('regress_regrole_test');
RESULT:
	postgres: role "regress_regrole_test" does not exist
LINE 6: SELECT regrole('regress_regrole_test');
                       ^


-----------
QUERY:

SELECT regrole('"regress_regrole_test"');
RESULT:
	postgres: role "regress_regrole_test" does not exist
LINE 2: SELECT regrole('"regress_regrole_test"');
                       ^


-----------
QUERY:

SELECT regrole('Nonexistent');
RESULT:
	postgres: role "nonexistent" does not exist
LINE 2: SELECT regrole('Nonexistent');
                       ^


-----------
QUERY:

SELECT regrole('"Nonexistent"');
RESULT:
	postgres: role "Nonexistent" does not exist
LINE 2: SELECT regrole('"Nonexistent"');
                       ^


-----------
QUERY:

SELECT regrole('foo.bar');
RESULT:
	postgres: invalid name syntax
LINE 2: SELECT regrole('foo.bar');
                       ^


-----------
QUERY:

SELECT regnamespace('Nonexistent');
RESULT:
	postgres: schema "nonexistent" does not exist
LINE 2: SELECT regnamespace('Nonexistent');
                            ^


-----------
QUERY:

SELECT regnamespace('"Nonexistent"');
RESULT:
	postgres: schema "Nonexistent" does not exist
LINE 2: SELECT regnamespace('"Nonexistent"');
                            ^


-----------
QUERY:

SELECT regnamespace('foo.bar');
RESULT:
	postgres: invalid name syntax
LINE 2: SELECT regnamespace('foo.bar');
                            ^


-----------
QUERY:


/* If objects don't exist, return NULL with no error. */

-- without schemaname

SELECT to_regoper('||//');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regoperator('++(int4,int4)');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regproc('know');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regprocedure('absinthe(numeric)');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regclass('pg_classes');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regtype('int3');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regcollation('notacollation');
RESULT:
	postgres: [(None,)]

-----------
QUERY:


-- with schemaname

SELECT to_regoper('ng_catalog.||/');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regoperator('ng_catalog.+(int4,int4)');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regproc('ng_catalog.now');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regprocedure('ng_catalog.abs(numeric)');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regclass('ng_catalog.pg_class');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regtype('ng_catalog.int4');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regcollation('ng_catalog."POSIX"');
RESULT:
	postgres: [(None,)]

-----------
QUERY:


-- schemaname not applicable

SELECT to_regrole('regress_regrole_test');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regrole('"regress_regrole_test"');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regrole('foo.bar');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regrole('Nonexistent');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regrole('"Nonexistent"');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regrole('foo.bar');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regnamespace('Nonexistent');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regnamespace('"Nonexistent"');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT to_regnamespace('foo.bar');
RESULT:
	postgres: [(None,)]

-----------
QUERY:


-- Test to_regtypemod
SELECT to_regtypemod('text');
RESULT:
	postgres: [(-1,)]

-----------
QUERY:

SELECT to_regtypemod('timestamp(4)');
RESULT:
	postgres: [(4,)]

-----------
QUERY:

SELECT to_regtypemod('no_such_type(4)');
RESULT:
	postgres: [(None,)]

-----------
QUERY:

SELECT format_type(to_regtype('varchar(32)'), to_regtypemod('varchar(32)'));
RESULT:
	postgres: [('character varying(32)',)]

-----------
QUERY:

SELECT format_type(to_regtype('bit'), to_regtypemod('bit'));
RESULT:
	postgres: [('bit(1)',)]

-----------
QUERY:

SELECT format_type(to_regtype('"bit"'), to_regtypemod('"bit"'));
RESULT:
	postgres: [('"bit"',)]

-----------
QUERY:


-- Test soft-error API

SELECT * FROM pg_input_error_info('ng_catalog.pg_class', 'regclass');
RESULT:
	postgres: [('relation "ng_catalog.pg_class" does not exist', None, None, '42P01')]

-----------
QUERY:

SELECT pg_input_is_valid('ng_catalog."POSIX"', 'regcollation');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT * FROM pg_input_error_info('no_such_config', 'regconfig');
RESULT:
	postgres: [('text search configuration "no_such_config" does not exist', None, None, '42704')]

-----------
QUERY:

SELECT * FROM pg_input_error_info('no_such_dictionary', 'regdictionary');
RESULT:
	postgres: [('text search dictionary "no_such_dictionary" does not exist', None, None, '42704')]

-----------
QUERY:

SELECT * FROM pg_input_error_info('Nonexistent', 'regnamespace');
RESULT:
	postgres: [('schema "nonexistent" does not exist', None, None, '3F000')]

-----------
QUERY:

SELECT * FROM pg_input_error_info('ng_catalog.||/', 'regoper');
RESULT:
	postgres: [('operator does not exist: ng_catalog.||/', None, None, '42883')]

-----------
QUERY:

SELECT * FROM pg_input_error_info('-', 'regoper');
RESULT:
	postgres: [('more than one operator named -', None, None, '42725')]

-----------
QUERY:

SELECT * FROM pg_input_error_info('ng_catalog.+(int4,int4)', 'regoperator');
RESULT:
	postgres: [('operator does not exist: ng_catalog.+(int4,int4)', None, None, '42883')]

-----------
QUERY:

SELECT * FROM pg_input_error_info('-', 'regoperator');
RESULT:
	postgres: [('expected a left parenthesis', None, None, '22P02')]

-----------
QUERY:

SELECT * FROM pg_input_error_info('ng_catalog.now', 'regproc');
RESULT:
	postgres: [('function "ng_catalog.now" does not exist', None, None, '42883')]

-----------
QUERY:

SELECT * FROM pg_input_error_info('ng_catalog.abs(numeric)', 'regprocedure');
RESULT:
	postgres: [('function "ng_catalog.abs(numeric)" does not exist', None, None, '42883')]

-----------
QUERY:

SELECT * FROM pg_input_error_info('ng_catalog.abs(numeric', 'regprocedure');
RESULT:
	postgres: [('expected a right parenthesis', None, None, '22P02')]

-----------
QUERY:

SELECT * FROM pg_input_error_info('regress_regrole_test', 'regrole');
RESULT:
	postgres: [('role "regress_regrole_test" does not exist', None, None, '42704')]

-----------
QUERY:

SELECT * FROM pg_input_error_info('no_such_type', 'regtype');
RESULT:
	postgres: [('type "no_such_type" does not exist', None, None, '42704')]

-----------
QUERY:


-- Some cases that should be soft errors, but are not yet
SELECT * FROM pg_input_error_info('incorrect type name syntax', 'regtype');
RESULT:
	postgres: syntax error at or near "type"
LINE 3: -- Some cases that should be soft errors, but are not yet
                ^
CONTEXT:  invalid type name "incorrect type name syntax"


-----------
QUERY:

SELECT * FROM pg_input_error_info('numeric(1,2,3)', 'regtype');
RESULT:
	postgres: invalid NUMERIC type modifier


-----------
QUERY:
  -- bogus typmod
SELECT * FROM pg_input_error_info('way.too.many.names', 'regtype');
RESULT:
	postgres: improper qualified name (too many dotted names): way.too.many.names


-----------
QUERY:

SELECT * FROM pg_input_error_info('no_such_catalog.schema.name', 'regtype');
RESULT:
	postgres: cross-database references are not implemented: no_such_catalog.schema.name

