Guest DBMS identified: postgres
-----------
QUERY:
--
-- regproc
--

/* If objects exist, return oids */

CREATE ROLE regress_regrole_test
RESULT: []

-----------
QUERY:
-- without schemaname

SELECT regoper('||/')
RESULT: []

-----------
QUERY:
SELECT regoperator('+(int4,int4)')
RESULT: []

-----------
QUERY:
SELECT regproc('now')
RESULT: []

-----------
QUERY:
SELECT regprocedure('abs(numeric)')
RESULT: []

-----------
QUERY:
SELECT regclass('pg_class')
RESULT: []

-----------
QUERY:
SELECT regtype('int4')
RESULT: []

-----------
QUERY:
SELECT regcollation('"POSIX"')
RESULT: []

-----------
QUERY:
SELECT to_regoper('||/')
RESULT: []

-----------
QUERY:
SELECT to_regoperator('+(int4,int4)')
RESULT: []

-----------
QUERY:
SELECT to_regproc('now')
RESULT: []

-----------
QUERY:
SELECT to_regprocedure('abs(numeric)')
RESULT: []

-----------
QUERY:
SELECT to_regclass('pg_class')
RESULT: []

-----------
QUERY:
SELECT to_regtype('int4')
RESULT: []

-----------
QUERY:
SELECT to_regcollation('"POSIX"')
RESULT: []

-----------
QUERY:
-- with schemaname

SELECT regoper('pg_catalog.||/')
RESULT: []

-----------
QUERY:
SELECT regoperator('pg_catalog.+(int4,int4)')
RESULT: []

-----------
QUERY:
SELECT regproc('pg_catalog.now')
RESULT: []

-----------
QUERY:
SELECT regprocedure('pg_catalog.abs(numeric)')
RESULT: []

-----------
QUERY:
SELECT regclass('pg_catalog.pg_class')
RESULT: []

-----------
QUERY:
SELECT regtype('pg_catalog.int4')
RESULT: []

-----------
QUERY:
SELECT regcollation('pg_catalog."POSIX"')
RESULT: []

-----------
QUERY:
SELECT to_regoper('pg_catalog.||/')
RESULT: []

-----------
QUERY:
SELECT to_regproc('pg_catalog.now')
RESULT: []

-----------
QUERY:
SELECT to_regprocedure('pg_catalog.abs(numeric)')
RESULT: []

-----------
QUERY:
SELECT to_regclass('pg_catalog.pg_class')
RESULT: []

-----------
QUERY:
SELECT to_regtype('pg_catalog.int4')
RESULT: []

-----------
QUERY:
SELECT to_regcollation('pg_catalog."POSIX"')
RESULT: []

-----------
QUERY:
-- schemaname not applicable

SELECT regrole('regress_regrole_test')
RESULT: []

-----------
QUERY:
SELECT regrole('"regress_regrole_test"')
RESULT: []

-----------
QUERY:
SELECT regnamespace('pg_catalog')
RESULT: []

-----------
QUERY:
SELECT regnamespace('"pg_catalog"')
RESULT: []

-----------
QUERY:
SELECT to_regrole('regress_regrole_test')
RESULT: []

-----------
QUERY:
SELECT to_regrole('"regress_regrole_test"')
RESULT: []

-----------
QUERY:
SELECT to_regnamespace('pg_catalog')
RESULT: []

-----------
QUERY:
SELECT to_regnamespace('"pg_catalog"')
RESULT: []

-----------
QUERY:
/* If objects don't exist, raise errors. */

DROP ROLE regress_regrole_test
RESULT: []

-----------
QUERY:
-- without schemaname

SELECT regoper('||//')
RESULT: []

-----------
QUERY:
SELECT regoperator('++(int4,int4)')
RESULT: []

-----------
QUERY:
SELECT regproc('know')
RESULT: []

-----------
QUERY:
SELECT regprocedure('absinthe(numeric)')
RESULT: []

-----------
QUERY:
SELECT regclass('pg_classes')
RESULT: []

-----------
QUERY:
SELECT regtype('int3')
RESULT: []

-----------
QUERY:
-- with schemaname

SELECT regoper('ng_catalog.||/')
RESULT: []

-----------
QUERY:
SELECT regoperator('ng_catalog.+(int4,int4)')
RESULT: []

-----------
QUERY:
SELECT regproc('ng_catalog.now')
RESULT: []

-----------
QUERY:
SELECT regprocedure('ng_catalog.abs(numeric)')
RESULT: []

-----------
QUERY:
SELECT regclass('ng_catalog.pg_class')
RESULT: []

-----------
QUERY:
SELECT regtype('ng_catalog.int4')
RESULT: []

-----------
QUERY:
-- \set VERBOSITY sqlstate \\ -- error message is encoding-dependent
SELECT regcollation('ng_catalog."POSIX"')
RESULT: []

-----------
QUERY:
-- \set VERBOSITY default

-- schemaname not applicable

SELECT regrole('regress_regrole_test')
RESULT: []

-----------
QUERY:
SELECT regrole('"regress_regrole_test"')
RESULT: []

-----------
QUERY:
SELECT regrole('Nonexistent')
RESULT: []

-----------
QUERY:
SELECT regrole('"Nonexistent"')
RESULT: []

-----------
QUERY:
SELECT regrole('foo.bar')
RESULT: []

-----------
QUERY:
SELECT regnamespace('Nonexistent')
RESULT: []

-----------
QUERY:
SELECT regnamespace('"Nonexistent"')
RESULT: []

-----------
QUERY:
SELECT regnamespace('foo.bar')
RESULT: []

-----------
QUERY:
/* If objects don't exist, return NULL with no error. */

-- without schemaname

SELECT to_regoper('||//')
RESULT: []

-----------
QUERY:
SELECT to_regoperator('++(int4,int4)')
RESULT: []

-----------
QUERY:
SELECT to_regproc('know')
RESULT: []

-----------
QUERY:
SELECT to_regprocedure('absinthe(numeric)')
RESULT: []

-----------
QUERY:
SELECT to_regclass('pg_classes')
RESULT: []

-----------
QUERY:
SELECT to_regtype('int3')
RESULT: []

-----------
QUERY:
SELECT to_regcollation('notacollation')
RESULT: []

-----------
QUERY:
-- with schemaname

SELECT to_regoper('ng_catalog.||/')
RESULT: []

-----------
QUERY:
SELECT to_regoperator('ng_catalog.+(int4,int4)')
RESULT: []

-----------
QUERY:
SELECT to_regproc('ng_catalog.now')
RESULT: []

-----------
QUERY:
SELECT to_regprocedure('ng_catalog.abs(numeric)')
RESULT: []

-----------
QUERY:
SELECT to_regclass('ng_catalog.pg_class')
RESULT: []

-----------
QUERY:
SELECT to_regtype('ng_catalog.int4')
RESULT: []

-----------
QUERY:
SELECT to_regcollation('ng_catalog."POSIX"')
RESULT: []

-----------
QUERY:
-- schemaname not applicable

SELECT to_regrole('regress_regrole_test')
RESULT: []

-----------
QUERY:
SELECT to_regrole('"regress_regrole_test"')
RESULT: []

-----------
QUERY:
SELECT to_regrole('foo.bar')
RESULT: []

-----------
QUERY:
SELECT to_regrole('Nonexistent')
RESULT: []

-----------
QUERY:
SELECT to_regrole('"Nonexistent"')
RESULT: []

-----------
QUERY:
SELECT to_regrole('foo.bar')
RESULT: []

-----------
QUERY:
SELECT to_regnamespace('Nonexistent')
RESULT: []

-----------
QUERY:
SELECT to_regnamespace('"Nonexistent"')
RESULT: []

-----------
QUERY:
SELECT to_regnamespace('foo.bar')
RESULT: []

-----------
QUERY:
-- Test to_regtypemod
SELECT to_regtypemod('text')
RESULT: []

-----------
QUERY:
SELECT to_regtypemod('timestamp(4)')
RESULT: []

-----------
QUERY:
SELECT to_regtypemod('no_such_type(4)')
RESULT: []

-----------
QUERY:
SELECT format_type(to_regtype('varchar(32)'), to_regtypemod('varchar(32)'))
RESULT: []

-----------
QUERY:
SELECT format_type(to_regtype('bit'), to_regtypemod('bit'))
RESULT: []

-----------
QUERY:
SELECT format_type(to_regtype('"bit"'), to_regtypemod('"bit"'))
RESULT: []

-----------
QUERY:
-- Test soft-error API

SELECT * FROM pg_input_error_info('ng_catalog.pg_class', 'regclass')
RESULT: []

-----------
QUERY:
SELECT pg_input_is_valid('ng_catalog."POSIX"', 'regcollation')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('no_such_config', 'regconfig')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('no_such_dictionary', 'regdictionary')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('Nonexistent', 'regnamespace')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('ng_catalog.||/', 'regoper')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('-', 'regoper')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('ng_catalog.+(int4,int4)', 'regoperator')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('-', 'regoperator')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('ng_catalog.now', 'regproc')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('ng_catalog.abs(numeric)', 'regprocedure')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('ng_catalog.abs(numeric', 'regprocedure')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('regress_regrole_test', 'regrole')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('no_such_type', 'regtype')
RESULT: []

-----------
QUERY:
-- Some cases that should be soft errors, but are not yet
SELECT * FROM pg_input_error_info('incorrect type name syntax', 'regtype')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('numeric(1,2,3)', 'regtype')
RESULT: []

-----------
QUERY:
-- bogus typmod
SELECT * FROM pg_input_error_info('way.too.many.names', 'regtype')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('no_such_catalog.schema.name', 'regtype')
RESULT: []
=========================================
Summary for test case regproc/test.sql of postgres
=========================================
