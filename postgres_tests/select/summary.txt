Guest DBMS identified: postgres
-----------
QUERY:
--
-- SELECT
--

-- btree index
-- awk /* REPLACED */''{if($1<10){print /* REPLACED */,}else{next /* REPLACED */,}}/* REPLACED */'' onek.data | sort +0n -1
--
SELECT * FROM onek
   WHERE onek.unique1 < 10
   ORDER BY onek.unique1
RESULT: []

-----------
QUERY:
--
-- awk /* REPLACED */''{if($1<20){print $1,$14 /* REPLACED */,}else{next /* REPLACED */,}}/* REPLACED */'' onek.data | sort +0nr -1
--
SELECT onek.unique1, onek.stringu1 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 using >
RESULT: []

-----------
QUERY:
--
-- awk /* REPLACED */''{if($1>980){print $1,$14 /* REPLACED */,}else{next /* REPLACED */,}}/* REPLACED */'' onek.data | sort +1d -2
--
SELECT onek.unique1, onek.stringu1 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY stringu1 using <
RESULT: []

-----------
QUERY:
--
-- awk /* REPLACED */''{if($1>980){print $1,$16 /* REPLACED */,}else{next /* REPLACED */,}}/* REPLACED */'' onek.data |
-- sort +1d -2 +0nr -1
--
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY string4 using <, unique1 using >
RESULT: []

-----------
QUERY:
--
-- awk /* REPLACED */''{if($1>980){print $1,$16 /* REPLACED */,}else{next /* REPLACED */,}}/* REPLACED */'' onek.data |
-- sort +1dr -2 +0n -1
--
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 > 980
   ORDER BY string4 using >, unique1 using <
RESULT: []

-----------
QUERY:
--
-- awk /* REPLACED */''{if($1<20){print $1,$16 /* REPLACED */,}else{next /* REPLACED */,}}/* REPLACED */'' onek.data |
-- sort +0nr -1 +1d -2
--
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 using >, string4 using <
RESULT: []

-----------
QUERY:
--
-- awk /* REPLACED */''{if($1<20){print $1,$16 /* REPLACED */,}else{next /* REPLACED */,}}/* REPLACED */'' onek.data |
-- sort +0n -1 +1dr -2
--
SELECT onek.unique1, onek.string4 FROM onek
   WHERE onek.unique1 < 20
   ORDER BY unique1 using <, string4 using >
RESULT: []

-----------
QUERY:
--
-- test partial btree indexes
--
-- As of 7.2, planner probably won/* REPLACED */''t pick an indexscan without stats,
-- so ANALYZE first.  Also, we want to prevent it from picking a bitmapscan
-- followed by sort, because that could hide index ordering problems.
--
ANALYZE onek2
RESULT: []

-----------
QUERY:
SET enable_seqscan TO off
RESULT: []

-----------
QUERY:
SET enable_bitmapscan TO off
RESULT: []

-----------
QUERY:
SET enable_sort TO off
RESULT: []

-----------
QUERY:
--
-- awk /* REPLACED */''{if($1<10){print $0 /* REPLACED */,}else{next /* REPLACED */,}}/* REPLACED */'' onek.data | sort +0n -1
--
SELECT onek2.* FROM onek2 WHERE onek2.unique1 < 10
RESULT: []

-----------
QUERY:
--
-- awk /* REPLACED */''{if($1<20){print $1,$14 /* REPLACED */,}else{next /* REPLACED */,}}/* REPLACED */'' onek.data | sort +0nr -1
--
SELECT onek2.unique1, onek2.stringu1 FROM onek2
    WHERE onek2.unique1 < 20
    ORDER BY unique1 using >
RESULT: []

-----------
QUERY:
--
-- awk /* REPLACED */''{if($1>980){print $1,$14 /* REPLACED */,}else{next /* REPLACED */,}}/* REPLACED */'' onek.data | sort +1d -2
--
SELECT onek2.unique1, onek2.stringu1 FROM onek2
   WHERE onek2.unique1 > 980
RESULT: []

-----------
QUERY:
RESET enable_seqscan
RESULT: []

-----------
QUERY:
RESET enable_bitmapscan
RESULT: []

-----------
QUERY:
RESET enable_sort
RESULT: []

-----------
QUERY:
--
-- awk /* REPLACED */''{print $1,$2 /* REPLACED */,}/* REPLACED */'' person.data |
-- awk /* REPLACED */''{if(NF!=2){print $3,$2 /* REPLACED */,}else{print /* REPLACED */,}}/* REPLACED */'' - emp.data |
-- awk /* REPLACED */''{if(NF!=2){print $3,$2 /* REPLACED */,}else{print /* REPLACED */,}}/* REPLACED */'' - student.data |
-- awk /* REPLACED */''BEGIN{FS=/* REPLACED */''      /* REPLACED */'' /* REPLACED */,}{if(NF!=2){print $4,$5 /* REPLACED */,}else{print /* REPLACED */,}}/* REPLACED */'' - stud_emp.data
--
-- SELECT name, age FROM person* /* REPLACED */, ??? check if different
SELECT p.name, p.age FROM person* p
RESULT: []

-----------
QUERY:
--
-- awk /* REPLACED */''{print $1,$2 /* REPLACED */,}/* REPLACED */'' person.data |
-- awk /* REPLACED */''{if(NF!=2){print $3,$2 /* REPLACED */,}else{print /* REPLACED */,}}/* REPLACED */'' - emp.data |
-- awk /* REPLACED */''{if(NF!=2){print $3,$2 /* REPLACED */,}else{print /* REPLACED */,}}/* REPLACED */'' - student.data |
-- awk /* REPLACED */''BEGIN{FS=/* REPLACED */''      /* REPLACED */'' /* REPLACED */,}{if(NF!=1){print $4,$5 /* REPLACED */,}else{print /* REPLACED */,}}/* REPLACED */'' - stud_emp.data |
-- sort +1nr -2
--
SELECT p.name, p.age FROM person* p ORDER BY age using >, name
RESULT: []

-----------
QUERY:
--
-- Test some cases involving whole-row Var referencing a subquery
--
select foo from (select 1 offset 0) as foo
RESULT: []

-----------
QUERY:
select foo from (select null offset 0) as foo
RESULT: []

-----------
QUERY:
select foo from (select 'xyzzy',1,null offset 0) as foo
RESULT: []

-----------
QUERY:
--
-- Test VALUES lists
--
select * from onek, (values(147, 'RFAAAA'), (931, 'VJAAAA')) as v (i, j)
    WHERE onek.unique1 = v.i and onek.stringu1 = v.j
RESULT: []

-----------
QUERY:
-- a more complex case
-- looks like we/* REPLACED */''re coding lisp :-)
select * from onek,
  (values ((select i from
    (values(10000), (2), (389), (1000), (2000), ((select 10029))) as foo(i)
    order by i asc limit 1))) bar (i)
  where onek.unique1 = bar.i
RESULT: []

-----------
QUERY:
-- try VALUES in a subquery
select * from onek
    where (unique1,ten) in (values (1,1), (20,0), (99,9), (17,99))
    order by unique1
RESULT: []

-----------
QUERY:
-- VALUES is also legal as a standalone query or a set-operation member
VALUES (1,2), (3,4+4), (7,77.7)
RESULT: []

-----------
QUERY:
VALUES (1,2), (3,4+4), (7,77.7)
UNION ALL
SELECT 2+2, 57
UNION ALL
TABLE int8_tbl
RESULT: []

-----------
QUERY:
-- corner case: VALUES with no columns
CREATE TEMP TABLE nocols()
RESULT: []

-----------
QUERY:
INSERT INTO nocols DEFAULT VALUES
RESULT: []

-----------
QUERY:
SELECT * FROM nocols n, LATERAL (VALUES(n.*)) v
RESULT: []

-----------
QUERY:
--
-- Test ORDER BY options
--

CREATE TEMP TABLE foo (f1 int)
RESULT: []

-----------
QUERY:
INSERT INTO foo VALUES (42),(3),(10),(7),(null),(null),(1)
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1 ASC
RESULT: []

-----------
QUERY:
-- same thing
SELECT * FROM foo ORDER BY f1 NULLS FIRST
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1 DESC
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1 DESC NULLS LAST
RESULT: []

-----------
QUERY:
-- check if indexscans do the right things
CREATE INDEX fooi ON foo (f1)
RESULT: []

-----------
QUERY:
SET enable_sort = false
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1 NULLS FIRST
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1 DESC
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1 DESC NULLS LAST
RESULT: []

-----------
QUERY:
DROP INDEX fooi
RESULT: []

-----------
QUERY:
CREATE INDEX fooi ON foo (f1 DESC)
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1 NULLS FIRST
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1 DESC
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1 DESC NULLS LAST
RESULT: []

-----------
QUERY:
DROP INDEX fooi
RESULT: []

-----------
QUERY:
CREATE INDEX fooi ON foo (f1 DESC NULLS LAST)
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1 NULLS FIRST
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1 DESC
RESULT: []

-----------
QUERY:
SELECT * FROM foo ORDER BY f1 DESC NULLS LAST
RESULT: []

-----------
QUERY:
--
-- Test planning of some cases with partial indexes
--

-- partial index is usable
explain (costs off)
select * from onek2 where unique2 = 11 and stringu1 = 'ATAAAA'
RESULT: []

-----------
QUERY:
select * from onek2 where unique2 = 11 and stringu1 = 'ATAAAA'
RESULT: []

-----------
QUERY:
-- actually run the query with an analyze to use the partial index
explain (costs off, analyze on, timing off, summary off)
select * from onek2 where unique2 = 11 and stringu1 = 'ATAAAA'
RESULT: []

-----------
QUERY:
explain (costs off)
select unique2 from onek2 where unique2 = 11 and stringu1 = 'ATAAAA'
RESULT: []

-----------
QUERY:
select unique2 from onek2 where unique2 = 11 and stringu1 = 'ATAAAA'
RESULT: []

-----------
QUERY:
-- partial index predicate implies clause, so no need for retest
explain (costs off)
select * from onek2 where unique2 = 11 and stringu1 < 'B'
RESULT: []

-----------
QUERY:
select * from onek2 where unique2 = 11 and stringu1 < 'B'
RESULT: []

-----------
QUERY:
explain (costs off)
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B'
RESULT: []

-----------
QUERY:
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B'
RESULT: []

-----------
QUERY:
-- but if it/* REPLACED */''s an update target, must retest anyway
explain (costs off)
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B' for update
RESULT: []

-----------
QUERY:
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B' for update
RESULT: []

-----------
QUERY:
-- partial index is not applicable
explain (costs off)
select unique2 from onek2 where unique2 = 11 and stringu1 < 'C'
RESULT: []

-----------
QUERY:
select unique2 from onek2 where unique2 = 11 and stringu1 < 'C'
RESULT: []

-----------
QUERY:
-- partial index implies clause, but bitmap scan must recheck predicate anyway
SET enable_indexscan TO off
RESULT: []

-----------
QUERY:
explain (costs off)
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B'
RESULT: []

-----------
QUERY:
select unique2 from onek2 where unique2 = 11 and stringu1 < 'B'
RESULT: []

-----------
QUERY:
RESET enable_indexscan
RESULT: []

-----------
QUERY:
-- check multi-index cases too
explain (costs off)
select unique1, unique2 from onek2
  where (unique2 = 11 or unique1 = 0) and stringu1 < 'B'
RESULT: []

-----------
QUERY:
select unique1, unique2 from onek2
  where (unique2 = 11 or unique1 = 0) and stringu1 < 'B'
RESULT: []

-----------
QUERY:
explain (costs off)
select unique1, unique2 from onek2
  where (unique2 = 11 and stringu1 < 'B') or unique1 = 0
RESULT: []

-----------
QUERY:
select unique1, unique2 from onek2
  where (unique2 = 11 and stringu1 < 'B') or unique1 = 0
RESULT: []

-----------
QUERY:
--
-- Test some corner cases that have been known to confuse the planner
--

-- ORDER BY on a constant doesn/* REPLACED */''t really need any sorting
SELECT 1 AS x ORDER BY x
RESULT: []

-----------
QUERY:
-- But ORDER BY on a set-valued expression does
create function sillysrf(int) returns setof int as
  'values (1),(10),(2),($1)' language sql immutable
RESULT: []

-----------
QUERY:
select sillysrf(42)
RESULT: []

-----------
QUERY:
select sillysrf(-1) order by 1
RESULT: []

-----------
QUERY:
drop function sillysrf(int)
RESULT: []

-----------
QUERY:
-- X = X isn/* REPLACED */''t a no-op, it/* REPLACED */''s effectively X IS NOT NULL assuming = is strict
-- (see bug #5084)
select * from (values (2),(null),(1)) v(k) where k = k order by k
RESULT: []

-----------
QUERY:
select * from (values (2),(null),(1)) v(k) where k = k
RESULT: []

-----------
QUERY:
-- Test partitioned tables with no partitions, which should be handled the
-- same as the non-inheritance case when expanding its RTE.
create table list_parted_tbl (a int,b int) partition by list (a)
RESULT: []

-----------
QUERY:
create table list_parted_tbl1 partition of list_parted_tbl
  for values in (1) partition by list(b)
RESULT: []

-----------
QUERY:
explain (costs off) select * from list_parted_tbl
RESULT: []

-----------
QUERY:
drop table list_parted_tbl
RESULT: []
=========================================
Summary for test case select/test.sql of postgres
=========================================
