Guest DBMS identified: postgres
-----------
QUERY:
--
-- SUBSCRIPTION
--

CREATE ROLE regress_subscription_user LOGIN SUPERUSER
RESULT: []

-----------
QUERY:
CREATE ROLE regress_subscription_user2
RESULT: []

-----------
QUERY:
CREATE ROLE regress_subscription_user3 IN ROLE pg_create_subscription
RESULT: []

-----------
QUERY:
CREATE ROLE regress_subscription_user_dummy LOGIN NOSUPERUSER
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION 'regress_subscription_user'
RESULT: []

-----------
QUERY:
-- fail - no publications
CREATE SUBSCRIPTION regress_testsub CONNECTION 'foo'
RESULT: []

-----------
QUERY:
-- fail - no connection
CREATE SUBSCRIPTION regress_testsub PUBLICATION foo
RESULT: []

-----------
QUERY:
-- fail - cannot do CREATE SUBSCRIPTION CREATE SLOT inside transaction block
BEGIN
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub CONNECTION 'testconn' PUBLICATION testpub WITH (create_slot)
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
-- fail - invalid connection string
CREATE SUBSCRIPTION regress_testsub CONNECTION 'testconn' PUBLICATION testpub
RESULT: []

-----------
QUERY:
-- fail - duplicate publications
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION foo, testpub, foo WITH (connect = false)
RESULT: []

-----------
QUERY:
-- ok
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false)
RESULT: []

-----------
QUERY:
COMMENT ON SUBSCRIPTION regress_testsub IS 'test subscription'
RESULT: []

-----------
QUERY:
SELECT obj_description(s.oid, 'pg_subscription') FROM pg_subscription s
RESULT: []

-----------
QUERY:
-- Check if the subscription stats are created and stats_reset is updated
-- by pg_stat_reset_subscription_stats().
SELECT subname, stats_reset IS NULL stats_reset_is_null FROM pg_stat_subscription_stats WHERE subname = 'regress_testsub'
RESULT: []

-----------
QUERY:
SELECT pg_stat_reset_subscription_stats(oid) FROM pg_subscription WHERE subname = 'regress_testsub'
RESULT: []

-----------
QUERY:
SELECT subname, stats_reset IS NULL stats_reset_is_null FROM pg_stat_subscription_stats WHERE subname = 'regress_testsub'
RESULT: []

-----------
QUERY:
-- Reset the stats again and check if the new reset_stats is updated.
SELECT stats_reset as prev_stats_reset FROM pg_stat_subscription_stats WHERE subname = 'regress_testsub' \gset
SELECT pg_stat_reset_subscription_stats(oid) FROM pg_subscription WHERE subname = 'regress_testsub'
RESULT: []

-----------
QUERY:
SELECT :'prev_stats_reset' < stats_reset FROM pg_stat_subscription_stats WHERE subname = 'regress_testsub'
RESULT: []

-----------
QUERY:
-- fail - name already exists
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false)
RESULT: []

-----------
QUERY:
-- fail - must be superuser
SET SESSION AUTHORIZATION 'regress_subscription_user2'
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION foo WITH (connect = false)
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION 'regress_subscription_user'
RESULT: []

-----------
QUERY:
-- fail - invalid option combinations
CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, copy_data = true)
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, enabled = true)
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, create_slot = true)
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, failover = true)
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (slot_name = NONE, enabled = true)
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (slot_name = NONE, enabled = false, create_slot = true)
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (slot_name = NONE)
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (slot_name = NONE, enabled = false)
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub2 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (slot_name = NONE, create_slot = false)
RESULT: []

-----------
QUERY:
-- ok - with slot_name = NONE
CREATE SUBSCRIPTION regress_testsub3 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (slot_name = NONE, connect = false)
RESULT: []

-----------
QUERY:
-- fail
ALTER SUBSCRIPTION regress_testsub3 ENABLE
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub3 REFRESH PUBLICATION
RESULT: []

-----------
QUERY:
-- fail - origin must be either none or any
CREATE SUBSCRIPTION regress_testsub4 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (slot_name = NONE, connect = false, origin = foo)
RESULT: []

-----------
QUERY:
-- now it works
CREATE SUBSCRIPTION regress_testsub4 CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (slot_name = NONE, connect = false, origin = none)
RESULT: []

-----------
QUERY:
-- \dRs+ regress_testsub4
ALTER SUBSCRIPTION regress_testsub4 SET (origin = any)
RESULT: []

-----------
QUERY:
-- \dRs+ regress_testsub4

DROP SUBSCRIPTION regress_testsub3
RESULT: []

-----------
QUERY:
DROP SUBSCRIPTION regress_testsub4
RESULT: []

-----------
QUERY:
-- fail, connection string does not parse
CREATE SUBSCRIPTION regress_testsub5 CONNECTION 'i_dont_exist=param' PUBLICATION testpub
RESULT: []

-----------
QUERY:
-- fail, connection string parses, but doesn/* REPLACED */''t work (and does so without
-- connecting, so this is reliable and safe)
CREATE SUBSCRIPTION regress_testsub5 CONNECTION 'port=-1' PUBLICATION testpub
RESULT: []

-----------
QUERY:
-- fail - invalid connection string during ALTER
ALTER SUBSCRIPTION regress_testsub CONNECTION 'foobar'
RESULT: []

-----------
QUERY:
-- \dRs+

ALTER SUBSCRIPTION regress_testsub SET PUBLICATION testpub2, testpub3 WITH (refresh = false)
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist2'
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub SET (slot_name = 'newname')
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub SET (password_required = false)
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub SET (run_as_owner = true)
RESULT: []

-----------
QUERY:
-- \dRs+

ALTER SUBSCRIPTION regress_testsub SET (password_required = true)
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub SET (run_as_owner = false)
RESULT: []

-----------
QUERY:
-- fail
ALTER SUBSCRIPTION regress_testsub SET (slot_name = '')
RESULT: []

-----------
QUERY:
-- fail
ALTER SUBSCRIPTION regress_doesnotexist CONNECTION 'dbname=regress_doesnotexist2'
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub SET (create_slot = false)
RESULT: []

-----------
QUERY:
-- ok
ALTER SUBSCRIPTION regress_testsub SKIP (lsn = '0/12345')
RESULT: []

-----------
QUERY:
-- \dRs+

-- ok - with lsn = NONE
ALTER SUBSCRIPTION regress_testsub SKIP (lsn = NONE)
RESULT: []

-----------
QUERY:
-- fail
ALTER SUBSCRIPTION regress_testsub SKIP (lsn = '0/0')
RESULT: []

-----------
QUERY:
-- \dRs+

BEGIN
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub ENABLE
RESULT: []

-----------
QUERY:
-- \dRs

ALTER SUBSCRIPTION regress_testsub DISABLE
RESULT: []

-----------
QUERY:
-- \dRs

COMMIT
RESULT: []

-----------
QUERY:
-- fail - must be owner of subscription
SET ROLE regress_subscription_user_dummy
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub RENAME TO regress_testsub_dummy
RESULT: []

-----------
QUERY:
RESET ROLE
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub RENAME TO regress_testsub_foo
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub_foo SET (synchronous_commit = local)
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub_foo SET (synchronous_commit = foobar)
RESULT: []

-----------
QUERY:
-- \dRs+

-- rename back to keep the rest simple
ALTER SUBSCRIPTION regress_testsub_foo RENAME TO regress_testsub
RESULT: []

-----------
QUERY:
-- ok, we/* REPLACED */''re a superuser
ALTER SUBSCRIPTION regress_testsub OWNER TO regress_subscription_user2
RESULT: []

-----------
QUERY:
-- fail - cannot do DROP SUBSCRIPTION inside transaction block with slot name
BEGIN
RESULT: []

-----------
QUERY:
DROP SUBSCRIPTION regress_testsub
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub SET (slot_name = NONE)
RESULT: []

-----------
QUERY:
-- now it works
BEGIN
RESULT: []

-----------
QUERY:
DROP SUBSCRIPTION regress_testsub
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
DROP SUBSCRIPTION IF EXISTS regress_testsub
RESULT: []

-----------
QUERY:
DROP SUBSCRIPTION regress_testsub
RESULT: []

-----------
QUERY:
-- fail

-- fail - binary must be boolean
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, binary = foo)
RESULT: []

-----------
QUERY:
-- now it works
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, binary = true)
RESULT: []

-----------
QUERY:
-- \dRs+

ALTER SUBSCRIPTION regress_testsub SET (binary = false)
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub SET (slot_name = NONE)
RESULT: []

-----------
QUERY:
-- \dRs+

DROP SUBSCRIPTION regress_testsub
RESULT: []

-----------
QUERY:
-- fail - streaming must be boolean or /* REPLACED */''parallel/* REPLACED */''
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, streaming = foo)
RESULT: []

-----------
QUERY:
-- now it works
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, streaming = true)
RESULT: []

-----------
QUERY:
-- \dRs+

ALTER SUBSCRIPTION regress_testsub SET (streaming = parallel)
RESULT: []

-----------
QUERY:
-- \dRs+

ALTER SUBSCRIPTION regress_testsub SET (streaming = false)
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub SET (slot_name = NONE)
RESULT: []

-----------
QUERY:
-- \dRs+

-- fail - publication already exists
ALTER SUBSCRIPTION regress_testsub ADD PUBLICATION testpub WITH (refresh = false)
RESULT: []

-----------
QUERY:
-- fail - publication used more than once
ALTER SUBSCRIPTION regress_testsub ADD PUBLICATION testpub1, testpub1 WITH (refresh = false)
RESULT: []

-----------
QUERY:
-- ok - add two publications into subscription
ALTER SUBSCRIPTION regress_testsub ADD PUBLICATION testpub1, testpub2 WITH (refresh = false)
RESULT: []

-----------
QUERY:
-- fail - publications already exist
ALTER SUBSCRIPTION regress_testsub ADD PUBLICATION testpub1, testpub2 WITH (refresh = false)
RESULT: []

-----------
QUERY:
-- \dRs+

-- fail - publication used more than once
ALTER SUBSCRIPTION regress_testsub DROP PUBLICATION testpub1, testpub1 WITH (refresh = false)
RESULT: []

-----------
QUERY:
-- fail - all publications are deleted
ALTER SUBSCRIPTION regress_testsub DROP PUBLICATION testpub, testpub1, testpub2 WITH (refresh = false)
RESULT: []

-----------
QUERY:
-- fail - publication does not exist in subscription
ALTER SUBSCRIPTION regress_testsub DROP PUBLICATION testpub3 WITH (refresh = false)
RESULT: []

-----------
QUERY:
-- ok - delete publications
ALTER SUBSCRIPTION regress_testsub DROP PUBLICATION testpub1, testpub2 WITH (refresh = false)
RESULT: []

-----------
QUERY:
-- \dRs+

DROP SUBSCRIPTION regress_testsub
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION mypub
       WITH (connect = false, create_slot = false, copy_data = false)
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub ENABLE
RESULT: []

-----------
QUERY:
-- fail - ALTER SUBSCRIPTION with refresh is not allowed in a transaction
-- block or function
BEGIN
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub SET PUBLICATION mypub WITH (refresh = true)
RESULT: []

-----------
QUERY:
END
RESULT: []

-----------
QUERY:
BEGIN
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub REFRESH PUBLICATION
RESULT: []

-----------
QUERY:
END
RESULT: []

-----------
QUERY:
CREATE FUNCTION func() RETURNS VOID AS
$$ ALTER SUBSCRIPTION regress_testsub SET PUBLICATION mypub WITH (refresh = true) $$ LANGUAGE SQL
RESULT: []

-----------
QUERY:
SELECT func()
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub DISABLE
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub SET (slot_name = NONE)
RESULT: []

-----------
QUERY:
DROP SUBSCRIPTION regress_testsub
RESULT: []

-----------
QUERY:
DROP FUNCTION func
RESULT: []

-----------
QUERY:
-- fail - two_phase must be boolean
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, two_phase = foo)
RESULT: []

-----------
QUERY:
-- now it works
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, two_phase = true)
RESULT: []

-----------
QUERY:
-- \dRs+
--fail - alter of two_phase option not supported.
ALTER SUBSCRIPTION regress_testsub SET (two_phase = false)
RESULT: []

-----------
QUERY:
-- but can alter streaming when two_phase enabled
ALTER SUBSCRIPTION regress_testsub SET (streaming = true)
RESULT: []

-----------
QUERY:
-- \dRs+

ALTER SUBSCRIPTION regress_testsub SET (slot_name = NONE)
RESULT: []

-----------
QUERY:
DROP SUBSCRIPTION regress_testsub
RESULT: []

-----------
QUERY:
-- two_phase and streaming are compatible.
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, streaming = true, two_phase = true)
RESULT: []

-----------
QUERY:
-- \dRs+

ALTER SUBSCRIPTION regress_testsub SET (slot_name = NONE)
RESULT: []

-----------
QUERY:
DROP SUBSCRIPTION regress_testsub
RESULT: []

-----------
QUERY:
-- fail - disable_on_error must be boolean
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, disable_on_error = foo)
RESULT: []

-----------
QUERY:
-- now it works
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, disable_on_error = false)
RESULT: []

-----------
QUERY:
-- \dRs+

ALTER SUBSCRIPTION regress_testsub SET (disable_on_error = true)
RESULT: []

-----------
QUERY:
-- \dRs+

ALTER SUBSCRIPTION regress_testsub SET (slot_name = NONE)
RESULT: []

-----------
QUERY:
DROP SUBSCRIPTION regress_testsub
RESULT: []

-----------
QUERY:
-- let/* REPLACED */''s do some tests with pg_create_subscription rather than superuser
SET SESSION AUTHORIZATION regress_subscription_user3
RESULT: []

-----------
QUERY:
-- fail, not enough privileges
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false)
RESULT: []

-----------
QUERY:
-- fail, must specify password
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
GRANT CREATE ON DATABASE REGRESSION TO regress_subscription_user3
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION regress_subscription_user3
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false)
RESULT: []

-----------
QUERY:
-- fail, can/* REPLACED */''t set password_required=false
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
GRANT CREATE ON DATABASE REGRESSION TO regress_subscription_user3
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION regress_subscription_user3
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist' PUBLICATION testpub WITH (connect = false, password_required = false)
RESULT: []

-----------
QUERY:
-- ok
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
GRANT CREATE ON DATABASE REGRESSION TO regress_subscription_user3
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION regress_subscription_user3
RESULT: []

-----------
QUERY:
CREATE SUBSCRIPTION regress_testsub CONNECTION 'dbname=regress_doesnotexist password=regress_fakepassword' PUBLICATION testpub WITH (connect = false)
RESULT: []

-----------
QUERY:
-- we cannot give the subscription away to some random user
ALTER SUBSCRIPTION regress_testsub OWNER TO regress_subscription_user
RESULT: []

-----------
QUERY:
-- but we can rename the subscription we just created
ALTER SUBSCRIPTION regress_testsub RENAME TO regress_testsub2
RESULT: []

-----------
QUERY:
-- ok, even after losing pg_create_subscription we can still rename it
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
REVOKE pg_create_subscription FROM regress_subscription_user3
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION regress_subscription_user3
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub2 RENAME TO regress_testsub
RESULT: []

-----------
QUERY:
-- fail, after losing CREATE on the database we can/* REPLACED */''t rename it any more
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
REVOKE CREATE ON DATABASE REGRESSION FROM regress_subscription_user3
RESULT: []

-----------
QUERY:
SET SESSION AUTHORIZATION regress_subscription_user3
RESULT: []

-----------
QUERY:
ALTER SUBSCRIPTION regress_testsub RENAME TO regress_testsub2
RESULT: []

-----------
QUERY:
-- ok, owning it is enough for this stuff
ALTER SUBSCRIPTION regress_testsub SET (slot_name = NONE)
RESULT: []

-----------
QUERY:
DROP SUBSCRIPTION regress_testsub
RESULT: []

-----------
QUERY:
RESET SESSION AUTHORIZATION
RESULT: []

-----------
QUERY:
DROP ROLE regress_subscription_user
RESULT: []

-----------
QUERY:
DROP ROLE regress_subscription_user2
RESULT: []

-----------
QUERY:
DROP ROLE regress_subscription_user3
RESULT: []

-----------
QUERY:
DROP ROLE regress_subscription_user_dummy
RESULT: []
=========================================
Summary for test case subscription/test.sql of postgres
=========================================
