
-----------
QUERY:
CREATE TABLE test_tablesample (id int, name text) WITH (fillfactor=10);
RESULT:
	postgres: None

-----------
QUERY:

-- use fillfactor so we don/* REPLACED */''t have to load too much data to get multiple pages

INSERT INTO test_tablesample
  SELECT i, repeat(i::text, 200) FROM generate_series(0, 9) s(i);
RESULT:
	postgres: None

-----------
QUERY:


SELECT t.id FROM test_tablesample AS t TABLESAMPLE SYSTEM (50) REPEATABLE (0);
RESULT:
	postgres: [(3,), (4,), (5,), (6,), (7,), (8,)]

-----------
QUERY:

SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (100.0/11) REPEATABLE (0);
RESULT:
	postgres: []

-----------
QUERY:

SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (50) REPEATABLE (0);
RESULT:
	postgres: [(3,), (4,), (5,), (6,), (7,), (8,)]

-----------
QUERY:

SELECT id FROM test_tablesample TABLESAMPLE BERNOULLI (50) REPEATABLE (0);
RESULT:
	postgres: [(4,), (5,), (6,), (7,), (8,)]

-----------
QUERY:

SELECT id FROM test_tablesample TABLESAMPLE BERNOULLI (5.5) REPEATABLE (0);
RESULT:
	postgres: [(7,)]

-----------
QUERY:


-- 100% should give repeatable count results (ie, all rows) in any case
SELECT count(*) FROM test_tablesample TABLESAMPLE SYSTEM (100);
RESULT:
	postgres: [(10,)]

-----------
QUERY:

SELECT count(*) FROM test_tablesample TABLESAMPLE SYSTEM (100) REPEATABLE (1+2);
RESULT:
	postgres: [(10,)]

-----------
QUERY:

SELECT count(*) FROM test_tablesample TABLESAMPLE SYSTEM (100) REPEATABLE (0.4);
RESULT:
	postgres: [(10,)]

-----------
QUERY:


CREATE VIEW test_tablesample_v1 AS
  SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (10*2) REPEATABLE (2);
RESULT:
	postgres: None

-----------
QUERY:

CREATE VIEW test_tablesample_v2 AS
  SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (99);
RESULT:
	postgres: None

-----------
QUERY:

-- \d+ test_tablesample_v1
-- \d+ test_tablesample_v2

-- check a sampled query doesn/* REPLACED */''t affect cursor in progress
BEGIN;
RESULT:
	postgres: None

-----------
QUERY:

DECLARE tablesample_cur SCROLL CURSOR FOR
  SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (50) REPEATABLE (0);
RESULT:
	postgres: None

-----------
QUERY:


FETCH FIRST FROM tablesample_cur;
RESULT:
	postgres: [(3,)]

-----------
QUERY:

FETCH NEXT FROM tablesample_cur;
RESULT:
	postgres: [(4,)]

-----------
QUERY:

FETCH NEXT FROM tablesample_cur;
RESULT:
	postgres: [(5,)]

-----------
QUERY:


SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (50) REPEATABLE (0);
RESULT:
	postgres: [(3,), (4,), (5,), (6,), (7,), (8,)]

-----------
QUERY:


FETCH NEXT FROM tablesample_cur;
RESULT:
	postgres: [(6,)]

-----------
QUERY:

FETCH NEXT FROM tablesample_cur;
RESULT:
	postgres: [(7,)]

-----------
QUERY:

FETCH NEXT FROM tablesample_cur;
RESULT:
	postgres: [(8,)]

-----------
QUERY:


FETCH FIRST FROM tablesample_cur;
RESULT:
	postgres: [(3,)]

-----------
QUERY:

FETCH NEXT FROM tablesample_cur;
RESULT:
	postgres: [(4,)]

-----------
QUERY:

FETCH NEXT FROM tablesample_cur;
RESULT:
	postgres: [(5,)]

-----------
QUERY:

FETCH NEXT FROM tablesample_cur;
RESULT:
	postgres: [(6,)]

-----------
QUERY:

FETCH NEXT FROM tablesample_cur;
RESULT:
	postgres: [(7,)]

-----------
QUERY:

FETCH NEXT FROM tablesample_cur;
RESULT:
	postgres: [(8,)]

-----------
QUERY:


CLOSE tablesample_cur;
RESULT:
	postgres: None

-----------
QUERY:

END;
RESULT:
	postgres: None

-----------
QUERY:


EXPLAIN (COSTS OFF)
  SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (50) REPEATABLE (2);
RESULT:
	postgres: [('Sample Scan on test_tablesample',), ("  Sampling: system ('50'::real) REPEATABLE ('2'::double precision)",)]

-----------
QUERY:

EXPLAIN (COSTS OFF)
  SELECT * FROM test_tablesample_v1;
RESULT:
	postgres: [('Sample Scan on test_tablesample',), ("  Sampling: system ('20'::real) REPEATABLE ('2'::double precision)",)]

-----------
QUERY:


-- check inheritance behavior
explain (costs off)
  select count(*) from person tablesample bernoulli (100);
RESULT:
	postgres: [('Aggregate',), ('  ->  Append',), ('        ->  Sample Scan on person person_1',), ("              Sampling: bernoulli ('100'::real)",), ('        ->  Sample Scan on emp person_2',), ("              Sampling: bernoulli ('100'::real)",), ('        ->  Sample Scan on student person_3',), ("              Sampling: bernoulli ('100'::real)",), ('        ->  Sample Scan on stud_emp person_4',), ("              Sampling: bernoulli ('100'::real)",)]

-----------
QUERY:

select count(*) from person tablesample bernoulli (100);
RESULT:
	postgres: [(58,)]

-----------
QUERY:

select count(*) from person;
RESULT:
	postgres: [(58,)]

-----------
QUERY:


-- check that collations get assigned within the tablesample arguments
SELECT count(*) FROM test_tablesample TABLESAMPLE bernoulli (('1'::text < '0'::text)::int);
RESULT:
	postgres: [(0,)]

-----------
QUERY:


-- check behavior during rescans, as well as correct handling of min/max pct
select * from
  (values (0),(100)) v(pct),
  lateral (select count(*) from tenk1 tablesample bernoulli (pct)) ss;
RESULT:
	postgres: [(0, 0), (100, 10000)]

-----------
QUERY:

select * from
  (values (0),(100)) v(pct),
  lateral (select count(*) from tenk1 tablesample system (pct)) ss;
RESULT:
	postgres: [(0, 0), (100, 10000)]

-----------
QUERY:

explain (costs off)
select pct, count(unique1) from
  (values (0),(100)) v(pct),
  lateral (select * from tenk1 tablesample bernoulli (pct)) ss
  group by pct;
RESULT:
	postgres: [('HashAggregate',), ('  Group Key: "*VALUES*".column1',), ('  ->  Nested Loop',), ('        ->  Values Scan on "*VALUES*"',), ('        ->  Sample Scan on tenk1',), ('              Sampling: bernoulli ("*VALUES*".column1)',)]

-----------
QUERY:

select pct, count(unique1) from
  (values (0),(100)) v(pct),
  lateral (select * from tenk1 tablesample bernoulli (pct)) ss
  group by pct;
RESULT:
	postgres: [(100, 10000)]

-----------
QUERY:

select pct, count(unique1) from
  (values (0),(100)) v(pct),
  lateral (select * from tenk1 tablesample system (pct)) ss
  group by pct;
RESULT:
	postgres: [(100, 10000)]

-----------
QUERY:


-- errors
SELECT id FROM test_tablesample TABLESAMPLE FOOBAR (1);
RESULT:
	postgres: tablesample method foobar does not exist
LINE 4: SELECT id FROM test_tablesample TABLESAMPLE FOOBAR (1);
                                                    ^


-----------
QUERY:


SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (NULL);
RESULT:
	postgres: TABLESAMPLE parameter cannot be null


-----------
QUERY:

SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (50) REPEATABLE (NULL);
RESULT:
	postgres: TABLESAMPLE REPEATABLE parameter cannot be null


-----------
QUERY:


SELECT id FROM test_tablesample TABLESAMPLE BERNOULLI (-1);
RESULT:
	postgres: sample percentage must be between 0 and 100


-----------
QUERY:

SELECT id FROM test_tablesample TABLESAMPLE BERNOULLI (200);
RESULT:
	postgres: sample percentage must be between 0 and 100


-----------
QUERY:

SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (-1);
RESULT:
	postgres: sample percentage must be between 0 and 100


-----------
QUERY:

SELECT id FROM test_tablesample TABLESAMPLE SYSTEM (200);
RESULT:
	postgres: sample percentage must be between 0 and 100


-----------
QUERY:


SELECT id FROM test_tablesample_v1 TABLESAMPLE BERNOULLI (1);
RESULT:
	postgres: TABLESAMPLE clause can only be applied to tables and materialized views
LINE 3: SELECT id FROM test_tablesample_v1 TABLESAMPLE BERNOULLI (1)...
                       ^


-----------
QUERY:

INSERT INTO test_tablesample_v1 VALUES(1);
RESULT:
	postgres: cannot insert into view "test_tablesample_v1"
DETAIL:  Views containing TABLESAMPLE are not automatically updatable.
HINT:  To enable inserting into the view, provide an INSTEAD OF INSERT trigger or an unconditional ON INSERT DO INSTEAD rule.


-----------
QUERY:


WITH query_select AS (SELECT * FROM test_tablesample)
SELECT * FROM query_select TABLESAMPLE BERNOULLI (5.5) REPEATABLE (1);
RESULT:
	postgres: TABLESAMPLE clause can only be applied to tables and materialized views
LINE 4: SELECT * FROM query_select TABLESAMPLE BERNOULLI (5.5) REPEA...
                      ^


-----------
QUERY:


SELECT q.* FROM (SELECT * FROM test_tablesample) as q TABLESAMPLE BERNOULLI (5);
RESULT:
	postgres: syntax error at or near "TABLESAMPLE"
LINE 3: ...CT q.* FROM (SELECT * FROM test_tablesample) as q TABLESAMPL...
                                                             ^


-----------
QUERY:


-- check partitioned tables support tablesample
create table parted_sample (a int) partition by list (a);
RESULT:
	postgres: None

-----------
QUERY:

create table parted_sample_1 partition of parted_sample for values in (1);
RESULT:
	postgres: None

-----------
QUERY:

create table parted_sample_2 partition of parted_sample for values in (2);
RESULT:
	postgres: None

-----------
QUERY:

explain (costs off)
  select * from parted_sample tablesample bernoulli (100);
RESULT:
	postgres: [('Append',), ('  ->  Sample Scan on parted_sample_1',), ("        Sampling: bernoulli ('100'::real)",), ('  ->  Sample Scan on parted_sample_2',), ("        Sampling: bernoulli ('100'::real)",)]

-----------
QUERY:

drop table parted_sample, parted_sample_1, parted_sample_2;
RESULT:
	postgres: None
