
-----------
QUERY:
-- tests for tidrangescans

SET enable_seqscan TO off;
RESULT:
	[]

-----------
QUERY:

CREATE TABLE tidrangescan(id integer, data text);
RESULT:
	[]

-----------
QUERY:


-- empty table
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid < '(1, 0)';
RESULT:
	[('Tid Range Scan on tidrangescan',), ("  TID Cond: (ctid < '(1,0)'::tid)",)]

-----------
QUERY:

SELECT ctid FROM tidrangescan WHERE ctid < '(1, 0)';
RESULT:
	[]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid > '(9, 0)';
RESULT:
	[('Tid Range Scan on tidrangescan',), ("  TID Cond: (ctid > '(9,0)'::tid)",)]

-----------
QUERY:

SELECT ctid FROM tidrangescan WHERE ctid > '(9, 0)';
RESULT:
	[]

-----------
QUERY:


-- insert enough tuples to fill at least two pages
INSERT INTO tidrangescan SELECT i,repeat('x', 100) FROM generate_series(1,200) AS s(i);
RESULT:
	[]

-----------
QUERY:


-- remove all tuples after the 10th tuple on each page.  Trying to ensure
-- we get the same layout with all CPU architectures and smaller than standard
-- page sizes.
DELETE FROM tidrangescan
WHERE substring(ctid::text FROM ',(\d+)\)')::integer > 10 OR substring(ctid::text FROM '\((\d+),')::integer > 2;
RESULT:
	[]

-----------
QUERY:

VACUUM tidrangescan;
RESULT:
	[]

-----------
QUERY:


-- range scans with upper bound
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)';
RESULT:
	[('Tid Range Scan on tidrangescan',), ("  TID Cond: (ctid < '(1,0)'::tid)",)]

-----------
QUERY:

SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)';
RESULT:
	[('(0,1)',), ('(0,2)',), ('(0,3)',), ('(0,4)',), ('(0,5)',), ('(0,6)',), ('(0,7)',), ('(0,8)',), ('(0,9)',), ('(0,10)',)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid <= '(1,5)';
RESULT:
	[('Tid Range Scan on tidrangescan',), ("  TID Cond: (ctid <= '(1,5)'::tid)",)]

-----------
QUERY:

SELECT ctid FROM tidrangescan WHERE ctid <= '(1,5)';
RESULT:
	[('(0,1)',), ('(0,2)',), ('(0,3)',), ('(0,4)',), ('(0,5)',), ('(0,6)',), ('(0,7)',), ('(0,8)',), ('(0,9)',), ('(0,10)',), ('(1,1)',), ('(1,2)',), ('(1,3)',), ('(1,4)',), ('(1,5)',)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)';
RESULT:
	[('Tid Range Scan on tidrangescan',), ("  TID Cond: (ctid < '(0,0)'::tid)",)]

-----------
QUERY:

SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)';
RESULT:
	[]

-----------
QUERY:


-- range scans with lower bound
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid > '(2,8)';
RESULT:
	[('Tid Range Scan on tidrangescan',), ("  TID Cond: (ctid > '(2,8)'::tid)",)]

-----------
QUERY:

SELECT ctid FROM tidrangescan WHERE ctid > '(2,8)';
RESULT:
	[('(2,9)',), ('(2,10)',)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE '(2,8)' < ctid;
RESULT:
	[('Tid Range Scan on tidrangescan',), ("  TID Cond: ('(2,8)'::tid < ctid)",)]

-----------
QUERY:

SELECT ctid FROM tidrangescan WHERE '(2,8)' < ctid;
RESULT:
	[('(2,9)',), ('(2,10)',)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid >= '(2,8)';
RESULT:
	[('Tid Range Scan on tidrangescan',), ("  TID Cond: (ctid >= '(2,8)'::tid)",)]

-----------
QUERY:

SELECT ctid FROM tidrangescan WHERE ctid >= '(2,8)';
RESULT:
	[('(2,8)',), ('(2,9)',), ('(2,10)',)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid >= '(100,0)';
RESULT:
	[('Tid Range Scan on tidrangescan',), ("  TID Cond: (ctid >= '(100,0)'::tid)",)]

-----------
QUERY:

SELECT ctid FROM tidrangescan WHERE ctid >= '(100,0)';
RESULT:
	[]

-----------
QUERY:


-- range scans with both bounds
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid > '(1,4)' AND '(1,7)' >= ctid;
RESULT:
	[('Tid Range Scan on tidrangescan',), ("  TID Cond: ((ctid > '(1,4)'::tid) AND ('(1,7)'::tid >= ctid))",)]

-----------
QUERY:

SELECT ctid FROM tidrangescan WHERE ctid > '(1,4)' AND '(1,7)' >= ctid;
RESULT:
	[('(1,5)',), ('(1,6)',), ('(1,7)',)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE '(1,7)' >= ctid AND ctid > '(1,4)';
RESULT:
	[('Tid Range Scan on tidrangescan',), ("  TID Cond: (('(1,7)'::tid >= ctid) AND (ctid > '(1,4)'::tid))",)]

-----------
QUERY:

SELECT ctid FROM tidrangescan WHERE '(1,7)' >= ctid AND ctid > '(1,4)';
RESULT:
	[('(1,5)',), ('(1,6)',), ('(1,7)',)]

-----------
QUERY:


-- extreme offsets
SELECT ctid FROM tidrangescan WHERE ctid > '(0,65535)' AND ctid < '(1,0)' LIMIT 1;
RESULT:
	[]

-----------
QUERY:

SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)' LIMIT 1;
RESULT:
	[]

-----------
QUERY:


SELECT ctid FROM tidrangescan WHERE ctid > '(4294967295,65535)';
RESULT:
	[]

-----------
QUERY:

SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)';
RESULT:
	[]

-----------
QUERY:


-- NULLs in the range cannot return tuples
SELECT ctid FROM tidrangescan WHERE ctid >= (SELECT NULL::tid);
RESULT:
	[]

-----------
QUERY:


-- rescans
EXPLAIN (COSTS OFF)
SELECT t.ctid,t2.c FROM tidrangescan t,
LATERAL (SELECT count(*) c FROM tidrangescan t2 WHERE t2.ctid <= t.ctid) t2
WHERE t.ctid < '(1,0)';
RESULT:
	[('Nested Loop',), ('  ->  Tid Range Scan on tidrangescan t',), ("        TID Cond: (ctid < '(1,0)'::tid)",), ('  ->  Aggregate',), ('        ->  Tid Range Scan on tidrangescan t2',), ('              TID Cond: (ctid <= t.ctid)',)]

-----------
QUERY:


SELECT t.ctid,t2.c FROM tidrangescan t,
LATERAL (SELECT count(*) c FROM tidrangescan t2 WHERE t2.ctid <= t.ctid) t2
WHERE t.ctid < '(1,0)';
RESULT:
	[('(0,1)', 1), ('(0,2)', 2), ('(0,3)', 3), ('(0,4)', 4), ('(0,5)', 5), ('(0,6)', 6), ('(0,7)', 7), ('(0,8)', 8), ('(0,9)', 9), ('(0,10)', 10)]

-----------
QUERY:


-- cursors

-- Ensure we get a TID Range scan without a Materialize node.
EXPLAIN (COSTS OFF)
DECLARE c SCROLL CURSOR FOR SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)';
RESULT:
	[('Tid Range Scan on tidrangescan',), ("  TID Cond: (ctid < '(1,0)'::tid)",)]

-----------
QUERY:


BEGIN;
RESULT:
	[]

-----------
QUERY:

DECLARE c SCROLL CURSOR FOR SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)';
RESULT:
	[]

-----------
QUERY:

FETCH NEXT c;
RESULT:
	[('(0,1)',)]

-----------
QUERY:

FETCH NEXT c;
RESULT:
	[('(0,2)',)]

-----------
QUERY:

FETCH PRIOR c;
RESULT:
	[('(0,1)',)]

-----------
QUERY:

FETCH FIRST c;
RESULT:
	[('(0,1)',)]

-----------
QUERY:

FETCH LAST c;
RESULT:
	[('(0,10)',)]

-----------
QUERY:

COMMIT;
RESULT:
	[]

-----------
QUERY:


DROP TABLE tidrangescan;
RESULT:
	[]

-----------
QUERY:


RESET enable_seqscan;
RESULT:
	[]
