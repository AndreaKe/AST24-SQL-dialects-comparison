Guest DBMS identified: postgres
-----------
QUERY:
-- tests for tidrangescans

SET enable_seqscan TO off
RESULT: []

-----------
QUERY:
CREATE TABLE tidrangescan(id integer, data text)
RESULT: []

-----------
QUERY:
-- empty table
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid < '(1, 0)'
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE ctid < '(1, 0)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid > '(9, 0)'
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE ctid > '(9, 0)'
RESULT: []

-----------
QUERY:
-- insert enough tuples to fill at least two pages
INSERT INTO tidrangescan SELECT i,repeat('x', 100) FROM generate_series(1,200) AS s(i)
RESULT: []

-----------
QUERY:
-- remove all tuples after the 10th tuple on each page.  Trying to ensure
-- we get the same layout with all CPU architectures and smaller than standard
-- page sizes.
DELETE FROM tidrangescan
WHERE substring(ctid::text FROM ',(\d+)\)')::integer > 10 OR substring(ctid::text FROM '\((\d+),')::integer > 2
RESULT: []

-----------
QUERY:
VACUUM tidrangescan
RESULT: []

-----------
QUERY:
-- range scans with upper bound
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)'
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid <= '(1,5)'
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE ctid <= '(1,5)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)'
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)'
RESULT: []

-----------
QUERY:
-- range scans with lower bound
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid > '(2,8)'
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE ctid > '(2,8)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE '(2,8)' < ctid
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE '(2,8)' < ctid
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid >= '(2,8)'
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE ctid >= '(2,8)'
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid >= '(100,0)'
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE ctid >= '(100,0)'
RESULT: []

-----------
QUERY:
-- range scans with both bounds
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE ctid > '(1,4)' AND '(1,7)' >= ctid
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE ctid > '(1,4)' AND '(1,7)' >= ctid
RESULT: []

-----------
QUERY:
EXPLAIN (COSTS OFF)
SELECT ctid FROM tidrangescan WHERE '(1,7)' >= ctid AND ctid > '(1,4)'
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE '(1,7)' >= ctid AND ctid > '(1,4)'
RESULT: []

-----------
QUERY:
-- extreme offsets
SELECT ctid FROM tidrangescan WHERE ctid > '(0,65535)' AND ctid < '(1,0)' LIMIT 1
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)' LIMIT 1
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE ctid > '(4294967295,65535)'
RESULT: []

-----------
QUERY:
SELECT ctid FROM tidrangescan WHERE ctid < '(0,0)'
RESULT: []

-----------
QUERY:
-- NULLs in the range cannot return tuples
SELECT ctid FROM tidrangescan WHERE ctid >= (SELECT NULL::tid)
RESULT: []

-----------
QUERY:
-- rescans
EXPLAIN (COSTS OFF)
SELECT t.ctid,t2.c FROM tidrangescan t,
LATERAL (SELECT count(*) c FROM tidrangescan t2 WHERE t2.ctid <= t.ctid) t2
WHERE t.ctid < '(1,0)'
RESULT: []

-----------
QUERY:
SELECT t.ctid,t2.c FROM tidrangescan t,
LATERAL (SELECT count(*) c FROM tidrangescan t2 WHERE t2.ctid <= t.ctid) t2
WHERE t.ctid < '(1,0)'
RESULT: []

-----------
QUERY:
-- cursors

-- Ensure we get a TID Range scan without a Materialize node.
EXPLAIN (COSTS OFF)
DECLARE c SCROLL CURSOR FOR SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)'
RESULT: []

-----------
QUERY:
BEGIN
RESULT: []

-----------
QUERY:
DECLARE c SCROLL CURSOR FOR SELECT ctid FROM tidrangescan WHERE ctid < '(1,0)'
RESULT: []

-----------
QUERY:
FETCH NEXT c
RESULT: []

-----------
QUERY:
FETCH NEXT c
RESULT: []

-----------
QUERY:
FETCH PRIOR c
RESULT: []

-----------
QUERY:
FETCH FIRST c
RESULT: []

-----------
QUERY:
FETCH LAST c
RESULT: []

-----------
QUERY:
COMMIT
RESULT: []

-----------
QUERY:
DROP TABLE tidrangescan
RESULT: []

-----------
QUERY:
RESET enable_seqscan
RESULT: []
=========================================
Summary for test case tidrangescan/test.sql of postgres
=========================================
