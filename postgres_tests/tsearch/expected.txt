
-----------
QUERY:
-- directory paths are passed to us in environment variables
-- \getenv abs_srcdir '/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests'

--
-- Sanity checks for text search catalogs
--
-- NB: we assume the oidjoins test will have caught any dangling links,
-- that is OID or REGPROC fields that are not zero and do not match some
-- row in the linked-to table.  However, if we want to enforce that a link
-- field can/* REPLACED */''t be 0, we have to check it here.

-- Find unexpected zero link entries

SELECT oid, prsname
FROM pg_ts_parser
WHERE prsnamespace = 0 OR prsstart = 0 OR prstoken = 0 OR prsend = 0 OR
      -- prsheadline is optional
      prslextype = 0;
RESULT:
	postgres: []

-----------
QUERY:


SELECT oid, dictname
FROM pg_ts_dict
WHERE dictnamespace = 0 OR dictowner = 0 OR dicttemplate = 0;
RESULT:
	postgres: []

-----------
QUERY:


SELECT oid, tmplname
FROM pg_ts_template
WHERE tmplnamespace = 0 OR tmpllexize = 0;
RESULT:
	postgres: []

-----------
QUERY:
  -- tmplinit is optional

SELECT oid, cfgname
FROM pg_ts_config
WHERE cfgnamespace = 0 OR cfgowner = 0 OR cfgparser = 0;
RESULT:
	postgres: []

-----------
QUERY:


SELECT mapcfg, maptokentype, mapseqno
FROM pg_ts_config_map
WHERE mapcfg = 0 OR mapdict = 0;
RESULT:
	postgres: []

-----------
QUERY:


-- Look for pg_ts_config_map entries that aren/* REPLACED */''t one of parser/* REPLACED */''s token types
SELECT * FROM
  ( SELECT oid AS cfgid, (ts_token_type(cfgparser)).tokid AS tokid
    FROM pg_ts_config ) AS tt
RIGHT JOIN pg_ts_config_map AS m
    ON (tt.cfgid=m.mapcfg AND tt.tokid=m.maptokentype)
WHERE
    tt.cfgid IS NULL OR tt.tokid IS NULL;
RESULT:
	postgres: []

-----------
QUERY:


-- Load some test data
CREATE TABLE test_tsvector(
	t text,
	a tsvector
);
RESULT:
	postgres: None

-----------
QUERY:


-- \set filename /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests' '/data/tsearch.data'
COPY test_tsvector FROM /* REPLACED */'/home/keuscha/Documents/FS2024/AST/project/AST24-SQL-dialects-comparison/postgres_tests/data/tsearch.data';
RESULT:
	postgres: None

-----------
QUERY:


ANALYZE test_tsvector;
RESULT:
	postgres: None

-----------
QUERY:


-- test basic text search behavior without indexes, then with

SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
RESULT:
	postgres: [(158,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh';
RESULT:
	postgres: [(17,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt';
RESULT:
	postgres: [(6,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt';
RESULT:
	postgres: [(98,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)';
RESULT:
	postgres: [(23,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)';
RESULT:
	postgres: [(39,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*';
RESULT:
	postgres: [(494,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}');
RESULT:
	postgres: [(158,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme';
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme';
RESULT:
	postgres: [(508,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'pl <-> yh';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'yh <-> pl';
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'qe <2> qt';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> yh';
RESULT:
	postgres: [(3,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> !yh';
RESULT:
	postgres: [(432,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!yh <-> pl';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!qe <2> qt';
RESULT:
	postgres: [(6,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(pl <-> yh)';
RESULT:
	postgres: [(507,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(yh <-> pl)';
RESULT:
	postgres: [(508,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(qe <2> qt)';
RESULT:
	postgres: [(507,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:A';
RESULT:
	postgres: [(56,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:D';
RESULT:
	postgres: [(58,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:A';
RESULT:
	postgres: [(452,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:D';
RESULT:
	postgres: [(450,)]

-----------
QUERY:


create index wowidx on test_tsvector using gist (a);
RESULT:
	postgres: None

-----------
QUERY:


SET enable_seqscan=OFF;
RESULT:
	postgres: None

-----------
QUERY:

SET enable_indexscan=ON;
RESULT:
	postgres: None

-----------
QUERY:

SET enable_bitmapscan=OFF;
RESULT:
	postgres: None

-----------
QUERY:


explain (costs off) SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
RESULT:
	postgres: [('Aggregate',), ('  ->  Index Scan using wowidx on test_tsvector',), ("        Index Cond: (a @@ '''wr'' | ''qh'''::tsquery)",)]

-----------
QUERY:


SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
RESULT:
	postgres: [(158,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh';
RESULT:
	postgres: [(17,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt';
RESULT:
	postgres: [(6,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt';
RESULT:
	postgres: [(98,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)';
RESULT:
	postgres: [(23,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)';
RESULT:
	postgres: [(39,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*';
RESULT:
	postgres: [(494,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}');
RESULT:
	postgres: [(158,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme';
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme';
RESULT:
	postgres: [(508,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'pl <-> yh';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'yh <-> pl';
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'qe <2> qt';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> yh';
RESULT:
	postgres: [(3,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> !yh';
RESULT:
	postgres: [(432,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!yh <-> pl';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!qe <2> qt';
RESULT:
	postgres: [(6,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(pl <-> yh)';
RESULT:
	postgres: [(507,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(yh <-> pl)';
RESULT:
	postgres: [(508,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(qe <2> qt)';
RESULT:
	postgres: [(507,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:A';
RESULT:
	postgres: [(56,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:D';
RESULT:
	postgres: [(58,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:A';
RESULT:
	postgres: [(452,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:D';
RESULT:
	postgres: [(450,)]

-----------
QUERY:


SET enable_indexscan=OFF;
RESULT:
	postgres: None

-----------
QUERY:

SET enable_bitmapscan=ON;
RESULT:
	postgres: None

-----------
QUERY:


explain (costs off) SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
RESULT:
	postgres: [('Aggregate',), ('  ->  Bitmap Heap Scan on test_tsvector',), ("        Recheck Cond: (a @@ '''wr'' | ''qh'''::tsquery)",), ('        ->  Bitmap Index Scan on wowidx',), ("              Index Cond: (a @@ '''wr'' | ''qh'''::tsquery)",)]

-----------
QUERY:


SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
RESULT:
	postgres: [(158,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh';
RESULT:
	postgres: [(17,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt';
RESULT:
	postgres: [(6,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt';
RESULT:
	postgres: [(98,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)';
RESULT:
	postgres: [(23,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)';
RESULT:
	postgres: [(39,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*';
RESULT:
	postgres: [(494,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}');
RESULT:
	postgres: [(158,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme';
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme';
RESULT:
	postgres: [(508,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'pl <-> yh';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'yh <-> pl';
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'qe <2> qt';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> yh';
RESULT:
	postgres: [(3,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> !yh';
RESULT:
	postgres: [(432,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!yh <-> pl';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!qe <2> qt';
RESULT:
	postgres: [(6,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(pl <-> yh)';
RESULT:
	postgres: [(507,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(yh <-> pl)';
RESULT:
	postgres: [(508,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(qe <2> qt)';
RESULT:
	postgres: [(507,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:A';
RESULT:
	postgres: [(56,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:D';
RESULT:
	postgres: [(58,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:A';
RESULT:
	postgres: [(452,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:D';
RESULT:
	postgres: [(450,)]

-----------
QUERY:


-- Test siglen parameter of GiST tsvector_ops
CREATE INDEX wowidx1 ON test_tsvector USING gist (a tsvector_ops(foo=1));
RESULT:
	postgres: unrecognized parameter "foo"


-----------
QUERY:

CREATE INDEX wowidx1 ON test_tsvector USING gist (a tsvector_ops(siglen=0));
RESULT:
	postgres: value 0 out of bounds for option "siglen"
DETAIL:  Valid values are between "1" and "2024".


-----------
QUERY:

CREATE INDEX wowidx1 ON test_tsvector USING gist (a tsvector_ops(siglen=2048));
RESULT:
	postgres: value 2048 out of bounds for option "siglen"
DETAIL:  Valid values are between "1" and "2024".


-----------
QUERY:

CREATE INDEX wowidx1 ON test_tsvector USING gist (a tsvector_ops(siglen=100,foo='bar'));
RESULT:
	postgres: unrecognized parameter "foo"


-----------
QUERY:

CREATE INDEX wowidx1 ON test_tsvector USING gist (a tsvector_ops(siglen=100, siglen = 200));
RESULT:
	postgres: parameter "siglen" specified more than once


-----------
QUERY:


CREATE INDEX wowidx2 ON test_tsvector USING gist (a tsvector_ops(siglen=1));
RESULT:
	postgres: None

-----------
QUERY:


-- \d test_tsvector

DROP INDEX wowidx;
RESULT:
	postgres: None

-----------
QUERY:


EXPLAIN (costs off) SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
RESULT:
	postgres: [('Aggregate',), ('  ->  Bitmap Heap Scan on test_tsvector',), ("        Recheck Cond: (a @@ '''wr'' | ''qh'''::tsquery)",), ('        ->  Bitmap Index Scan on wowidx2',), ("              Index Cond: (a @@ '''wr'' | ''qh'''::tsquery)",)]

-----------
QUERY:


SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
RESULT:
	postgres: [(158,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh';
RESULT:
	postgres: [(17,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt';
RESULT:
	postgres: [(6,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt';
RESULT:
	postgres: [(98,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)';
RESULT:
	postgres: [(23,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)';
RESULT:
	postgres: [(39,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*';
RESULT:
	postgres: [(494,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}');
RESULT:
	postgres: [(158,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme';
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme';
RESULT:
	postgres: [(508,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'pl <-> yh';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'yh <-> pl';
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'qe <2> qt';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> yh';
RESULT:
	postgres: [(3,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> !yh';
RESULT:
	postgres: [(432,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!yh <-> pl';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!qe <2> qt';
RESULT:
	postgres: [(6,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(pl <-> yh)';
RESULT:
	postgres: [(507,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(yh <-> pl)';
RESULT:
	postgres: [(508,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(qe <2> qt)';
RESULT:
	postgres: [(507,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:A';
RESULT:
	postgres: [(56,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:D';
RESULT:
	postgres: [(58,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:A';
RESULT:
	postgres: [(452,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:D';
RESULT:
	postgres: [(450,)]

-----------
QUERY:


DROP INDEX wowidx2;
RESULT:
	postgres: None

-----------
QUERY:


CREATE INDEX wowidx ON test_tsvector USING gist (a tsvector_ops(siglen=484));
RESULT:
	postgres: None

-----------
QUERY:


-- \d test_tsvector

EXPLAIN (costs off) SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
RESULT:
	postgres: [('Aggregate',), ('  ->  Bitmap Heap Scan on test_tsvector',), ("        Recheck Cond: (a @@ '''wr'' | ''qh'''::tsquery)",), ('        ->  Bitmap Index Scan on wowidx',), ("              Index Cond: (a @@ '''wr'' | ''qh'''::tsquery)",)]

-----------
QUERY:


SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
RESULT:
	postgres: [(158,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh';
RESULT:
	postgres: [(17,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt';
RESULT:
	postgres: [(6,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt';
RESULT:
	postgres: [(98,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)';
RESULT:
	postgres: [(23,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)';
RESULT:
	postgres: [(39,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*';
RESULT:
	postgres: [(494,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}');
RESULT:
	postgres: [(158,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme';
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme';
RESULT:
	postgres: [(508,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'pl <-> yh';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'yh <-> pl';
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'qe <2> qt';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> yh';
RESULT:
	postgres: [(3,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> !yh';
RESULT:
	postgres: [(432,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!yh <-> pl';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!qe <2> qt';
RESULT:
	postgres: [(6,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(pl <-> yh)';
RESULT:
	postgres: [(507,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(yh <-> pl)';
RESULT:
	postgres: [(508,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(qe <2> qt)';
RESULT:
	postgres: [(507,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:A';
RESULT:
	postgres: [(56,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:D';
RESULT:
	postgres: [(58,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:A';
RESULT:
	postgres: [(452,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:D';
RESULT:
	postgres: [(450,)]

-----------
QUERY:


RESET enable_seqscan;
RESULT:
	postgres: None

-----------
QUERY:

RESET enable_indexscan;
RESULT:
	postgres: None

-----------
QUERY:

RESET enable_bitmapscan;
RESULT:
	postgres: None

-----------
QUERY:


DROP INDEX wowidx;
RESULT:
	postgres: None

-----------
QUERY:


CREATE INDEX wowidx ON test_tsvector USING gin (a);
RESULT:
	postgres: None

-----------
QUERY:


SET enable_seqscan=OFF;
RESULT:
	postgres: None

-----------
QUERY:

-- GIN only supports bitmapscan, so no need to test plain indexscan

explain (costs off) SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
RESULT:
	postgres: [('Aggregate',), ('  ->  Bitmap Heap Scan on test_tsvector',), ("        Recheck Cond: (a @@ '''wr'' | ''qh'''::tsquery)",), ('        ->  Bitmap Index Scan on wowidx',), ("              Index Cond: (a @@ '''wr'' | ''qh'''::tsquery)",)]

-----------
QUERY:


SELECT count(*) FROM test_tsvector WHERE a @@ 'wr|qh';
RESULT:
	postgres: [(158,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wr&qh';
RESULT:
	postgres: [(17,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq&yt';
RESULT:
	postgres: [(6,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'eq|yt';
RESULT:
	postgres: [(98,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq&yt)|(wr&qh)';
RESULT:
	postgres: [(23,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '(eq|yt)&(wr|qh)';
RESULT:
	postgres: [(39,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'w:*|q:*';
RESULT:
	postgres: [(494,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ any ('{wr,qh}');
RESULT:
	postgres: [(158,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'no_such_lexeme';
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!no_such_lexeme';
RESULT:
	postgres: [(508,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'pl <-> yh';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'yh <-> pl';
RESULT:
	postgres: [(0,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'qe <2> qt';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> yh';
RESULT:
	postgres: [(3,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!pl <-> !yh';
RESULT:
	postgres: [(432,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!yh <-> pl';
RESULT:
	postgres: [(1,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!qe <2> qt';
RESULT:
	postgres: [(6,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(pl <-> yh)';
RESULT:
	postgres: [(507,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(yh <-> pl)';
RESULT:
	postgres: [(508,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!(qe <2> qt)';
RESULT:
	postgres: [(507,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:A';
RESULT:
	postgres: [(56,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wd:D';
RESULT:
	postgres: [(58,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:A';
RESULT:
	postgres: [(452,)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!wd:D';
RESULT:
	postgres: [(450,)]

-----------
QUERY:


-- Test optimization of non-empty GIN_SEARCH_MODE_ALL queries
EXPLAIN (COSTS OFF)
SELECT count(*) FROM test_tsvector WHERE a @@ '!qh';
RESULT:
	postgres: [('Aggregate',), ('  ->  Bitmap Heap Scan on test_tsvector',), ("        Recheck Cond: (a @@ '!''qh'''::tsquery)",), ('        ->  Bitmap Index Scan on wowidx',), ("              Index Cond: (a @@ '!''qh'''::tsquery)",)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ '!qh';
RESULT:
	postgres: [(410,)]

-----------
QUERY:


EXPLAIN (COSTS OFF)
SELECT count(*) FROM test_tsvector WHERE a @@ 'wr' AND a @@ '!qh';
RESULT:
	postgres: [('Aggregate',), ('  ->  Bitmap Heap Scan on test_tsvector',), ("        Recheck Cond: ((a @@ '''wr'''::tsquery) AND (a @@ '!''qh'''::tsquery))",), ('        ->  Bitmap Index Scan on wowidx',), ("              Index Cond: ((a @@ '''wr'''::tsquery) AND (a @@ '!''qh'''::tsquery))",)]

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ 'wr' AND a @@ '!qh';
RESULT:
	postgres: [(60,)]

-----------
QUERY:


RESET enable_seqscan;
RESULT:
	postgres: None

-----------
QUERY:


INSERT INTO test_tsvector VALUES ('???', 'DFG:1A,2B,6C,10 FGH');
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM ts_stat('SELECT a FROM test_tsvector') ORDER BY ndoc DESC, nentry DESC, word LIMIT 10;
RESULT:
	postgres: [('qq', 108, 108), ('qt', 102, 102), ('qe', 100, 101), ('qh', 98, 99), ('qw', 98, 98), ('qa', 97, 97), ('ql', 94, 94), ('qs', 94, 94), ('qr', 92, 93), ('qi', 92, 92)]

-----------
QUERY:

SELECT * FROM ts_stat('SELECT a FROM test_tsvector', 'AB') ORDER BY ndoc DESC, nentry DESC, word;
RESULT:
	postgres: [('DFG', 1, 2)]

-----------
QUERY:


--dictionaries and to_tsvector

SELECT ts_lexize('english_stem', 'skies');
RESULT:
	postgres: [(['sky'],)]

-----------
QUERY:

SELECT ts_lexize('english_stem', 'identity');
RESULT:
	postgres: [(['ident'],)]

-----------
QUERY:


SELECT * FROM ts_token_type('default');
RESULT:
	postgres: [(1, 'asciiword', 'Word, all ASCII'), (2, 'word', 'Word, all letters'), (3, 'numword', 'Word, letters and digits'), (4, 'email', 'Email address'), (5, 'url', 'URL'), (6, 'host', 'Host'), (7, 'sfloat', 'Scientific notation'), (8, 'version', 'Version number'), (9, 'hword_numpart', 'Hyphenated word part, letters and digits'), (10, 'hword_part', 'Hyphenated word part, all letters'), (11, 'hword_asciipart', 'Hyphenated word part, all ASCII'), (12, 'blank', 'Space symbols'), (13, 'tag', 'XML tag'), (14, 'protocol', 'Protocol head'), (15, 'numhword', 'Hyphenated word, letters and digits'), (16, 'asciihword', 'Hyphenated word, all ASCII'), (17, 'hword', 'Hyphenated word, all letters'), (18, 'url_path', 'URL path'), (19, 'file', 'File or path name'), (20, 'float', 'Decimal notation'), (21, 'int', 'Signed integer'), (22, 'uint', 'Unsigned integer'), (23, 'entity', 'XML entity')]

-----------
QUERY:


SELECT * FROM ts_parse('default', '345 qwe@efd.r '' http://www.com/ http://aew.werc.ewr/?ad=qwe&dw 1aew.werc.ewr/?ad=qwe&dw 2aew.werc.ewr http://3aew.werc.ewr/?ad=qwe&dw http://4aew.werc.ewr http://5aew.werc.ewr:8100/?  ad=qwe&dw 6aew.werc.ewr:8100/?ad=qwe&dw 7aew.werc.ewr:8100/?ad=qwe&dw=%20%32 +4.0e-10 qwe qwe qwqwe 234.435 455 5.005 teodor@stack.net teodor@123-stack.net 123_teodor@stack.net 123-teodor@stack.net qwe-wer asdf <fr>qwer jf sdjk<we hjwer <werrwe> ewr1> ewri2 <a href="qwe<qwe>">
/usr/local/fff /awdf/dwqe/4325 rewt/ewr wefjn /wqe-324/ewr gist.h gist.h.c gist.c. readline 4.2 4.2. 4.2, readline-4.2 readline-4.2. 234
<i <b> wow  < jqw <> qwerty');
RESULT:
	postgres: [(22, '345'), (12, ' '), (1, 'qwe'), (12, '@'), (19, 'efd.r'), (12, " ' "), (14, 'http://'), (6, 'www.com'), (12, '/ '), (14, 'http://'), (5, 'aew.werc.ewr/?ad=qwe&dw'), (6, 'aew.werc.ewr'), (18, '/?ad=qwe&dw'), (12, ' '), (5, '1aew.werc.ewr/?ad=qwe&dw'), (6, '1aew.werc.ewr'), (18, '/?ad=qwe&dw'), (12, ' '), (6, '2aew.werc.ewr'), (12, ' '), (14, 'http://'), (5, '3aew.werc.ewr/?ad=qwe&dw'), (6, '3aew.werc.ewr'), (18, '/?ad=qwe&dw'), (12, ' '), (14, 'http://'), (6, '4aew.werc.ewr'), (12, ' '), (14, 'http://'), (5, '5aew.werc.ewr:8100/?'), (6, '5aew.werc.ewr:8100'), (18, '/?'), (12, '  '), (1, 'ad'), (12, '='), (1, 'qwe'), (12, '&'), (1, 'dw'), (12, ' '), (5, '6aew.werc.ewr:8100/?ad=qwe&dw'), (6, '6aew.werc.ewr:8100'), (18, '/?ad=qwe&dw'), (12, ' '), (5, '7aew.werc.ewr:8100/?ad=qwe&dw=%20%32'), (6, '7aew.werc.ewr:8100'), (18, '/?ad=qwe&dw=%20%32'), (12, ' '), (7, '+4.0e-10'), (12, ' '), (1, 'qwe'), (12, ' '), (1, 'qwe'), (12, ' '), (1, 'qwqwe'), (12, ' '), (20, '234.435'), (12, ' '), (22, '455'), (12, ' '), (20, '5.005'), (12, ' '), (4, 'teodor@stack.net'), (12, ' '), (4, 'teodor@123-stack.net'), (12, ' '), (4, '123_teodor@stack.net'), (12, ' '), (4, '123-teodor@stack.net'), (12, ' '), (16, 'qwe-wer'), (11, 'qwe'), (12, '-'), (11, 'wer'), (12, ' '), (1, 'asdf'), (12, ' '), (13, '<fr>'), (1, 'qwer'), (12, ' '), (1, 'jf'), (12, ' '), (1, 'sdjk'), (12, '<'), (1, 'we'), (12, ' '), (1, 'hjwer'), (12, ' '), (13, '<werrwe>'), (12, ' '), (3, 'ewr1'), (12, '> '), (3, 'ewri2'), (12, ' '), (13, '<a href="qwe<qwe>">'), (12, '\n'), (19, '/usr/local/fff'), (12, ' '), (19, '/awdf/dwqe/4325'), (12, ' '), (19, 'rewt/ewr'), (12, ' '), (1, 'wefjn'), (12, ' '), (19, '/wqe-324/ewr'), (12, ' '), (19, 'gist.h'), (12, ' '), (19, 'gist.h.c'), (12, ' '), (19, 'gist.c'), (12, '. '), (1, 'readline'), (12, ' '), (20, '4.2'), (12, ' '), (20, '4.2'), (12, '. '), (20, '4.2'), (12, ', '), (1, 'readline'), (20, '-4.2'), (12, ' '), (1, 'readline'), (20, '-4.2'), (12, '. '), (22, '234'), (12, '\n'), (12, '<'), (1, 'i'), (12, ' '), (13, '<b>'), (12, ' '), (1, 'wow'), (12, '  '), (12, '< '), (1, 'jqw'), (12, ' '), (12, '<> '), (1, 'qwerty')]

-----------
QUERY:


SELECT to_tsvector('english', '345 qwe@efd.r '' http://www.com/ http://aew.werc.ewr/?ad=qwe&dw 1aew.werc.ewr/?ad=qwe&dw 2aew.werc.ewr http://3aew.werc.ewr/?ad=qwe&dw http://4aew.werc.ewr http://5aew.werc.ewr:8100/?  ad=qwe&dw 6aew.werc.ewr:8100/?ad=qwe&dw 7aew.werc.ewr:8100/?ad=qwe&dw=%20%32 +4.0e-10 qwe qwe qwqwe 234.435 455 5.005 teodor@stack.net teodor@123-stack.net 123_teodor@stack.net 123-teodor@stack.net qwe-wer asdf <fr>qwer jf sdjk<we hjwer <werrwe> ewr1> ewri2 <a href="qwe<qwe>">
/usr/local/fff /awdf/dwqe/4325 rewt/ewr wefjn /wqe-324/ewr gist.h gist.h.c gist.c. readline 4.2 4.2. 4.2, readline-4.2 readline-4.2. 234
<i <b> wow  < jqw <> qwerty');
RESULT:
	postgres: [("'+4.0e-10':28 '-4.2':63,65 '/?':18 '/?ad=qwe&dw':7,10,14,24 '/?ad=qwe&dw=%20%32':27 '/awdf/dwqe/4325':51 '/usr/local/fff':50 '/wqe-324/ewr':54 '123-teodor@stack.net':38 '123_teodor@stack.net':37 '1aew.werc.ewr':9 '1aew.werc.ewr/?ad=qwe&dw':8 '234':66 '234.435':32 '2aew.werc.ewr':11 '345':1 '3aew.werc.ewr':13 '3aew.werc.ewr/?ad=qwe&dw':12 '4.2':59,60,61 '455':33 '4aew.werc.ewr':15 '5.005':34 '5aew.werc.ewr:8100':17 '5aew.werc.ewr:8100/?':16 '6aew.werc.ewr:8100':23 '6aew.werc.ewr:8100/?ad=qwe&dw':22 '7aew.werc.ewr:8100':26 '7aew.werc.ewr:8100/?ad=qwe&dw=%20%32':25 'ad':19 'aew.werc.ewr':6 'aew.werc.ewr/?ad=qwe&dw':5 'asdf':42 'dw':21 'efd.r':3 'ewr1':48 'ewri2':49 'gist.c':57 'gist.h':55 'gist.h.c':56 'hjwer':47 'jf':44 'jqw':69 'qwe':2,20,29,30,40 'qwe-wer':39 'qwer':43 'qwerti':70 'qwqwe':31 'readlin':58,62,64 'rewt/ewr':52 'sdjk':45 'teodor@123-stack.net':36 'teodor@stack.net':35 'wefjn':53 'wer':41 'wow':68 'www.com':4",)]

-----------
QUERY:


SELECT length(to_tsvector('english', '345 qwe@efd.r '' http://www.com/ http://aew.werc.ewr/?ad=qwe&dw 1aew.werc.ewr/?ad=qwe&dw 2aew.werc.ewr http://3aew.werc.ewr/?ad=qwe&dw http://4aew.werc.ewr http://5aew.werc.ewr:8100/?  ad=qwe&dw 6aew.werc.ewr:8100/?ad=qwe&dw 7aew.werc.ewr:8100/?ad=qwe&dw=%20%32 +4.0e-10 qwe qwe qwqwe 234.435 455 5.005 teodor@stack.net teodor@123-stack.net 123_teodor@stack.net 123-teodor@stack.net qwe-wer asdf <fr>qwer jf sdjk<we hjwer <werrwe> ewr1> ewri2 <a href="qwe<qwe>">
/usr/local/fff /awdf/dwqe/4325 rewt/ewr wefjn /wqe-324/ewr gist.h gist.h.c gist.c. readline 4.2 4.2. 4.2, readline-4.2 readline-4.2. 234
<i <b> wow  < jqw <> qwerty'));
RESULT:
	postgres: [(56,)]

-----------
QUERY:


-- ts_debug

SELECT * from ts_debug('english', '<myns:foo-bar_baz.blurfl>abc&nm1;
RESULT:
	postgres: unterminated quoted string at or near "'<myns:foo-bar_baz.blurfl>abc&nm1;"
LINE 5: SELECT * from ts_debug('english', '<myns:foo-bar_baz.blurfl>...
                                          ^


-----------
QUERY:
def&#xa9;
RESULT:
	postgres: syntax error at or near "def"
LINE 1: def&#xa9;
        ^


-----------
QUERY:
ghi&#245;
RESULT:
	postgres: syntax error at or near "ghi"
LINE 1: ghi&#245;
        ^


-----------
QUERY:
jkl</myns:foo-bar_baz.blurfl>');
RESULT:
	postgres: syntax error at or near "jkl"
LINE 1: jkl</myns:foo-bar_baz.blurfl>');
        ^


-----------
QUERY:


-- check parsing of URLs
SELECT * from ts_debug('english', 'http://www.harewoodsolutions.co.uk/press.aspx</span>');
RESULT:
	postgres: [('protocol', 'Protocol head', 'http://', '{}', None, None), ('url', 'URL', 'www.harewoodsolutions.co.uk/press.aspx', '{simple}', 'simple', ['www.harewoodsolutions.co.uk/press.aspx']), ('host', 'Host', 'www.harewoodsolutions.co.uk', '{simple}', 'simple', ['www.harewoodsolutions.co.uk']), ('url_path', 'URL path', '/press.aspx', '{simple}', 'simple', ['/press.aspx']), ('tag', 'XML tag', '</span>', '{}', None, None)]

-----------
QUERY:

SELECT * from ts_debug('english', 'http://aew.wer0c.ewr/id?ad=qwe&dw<span>');
RESULT:
	postgres: [('protocol', 'Protocol head', 'http://', '{}', None, None), ('url', 'URL', 'aew.wer0c.ewr/id?ad=qwe&dw', '{simple}', 'simple', ['aew.wer0c.ewr/id?ad=qwe&dw']), ('host', 'Host', 'aew.wer0c.ewr', '{simple}', 'simple', ['aew.wer0c.ewr']), ('url_path', 'URL path', '/id?ad=qwe&dw', '{simple}', 'simple', ['/id?ad=qwe&dw']), ('tag', 'XML tag', '<span>', '{}', None, None)]

-----------
QUERY:

SELECT * from ts_debug('english', 'http://5aew.werc.ewr:8100/?');
RESULT:
	postgres: [('protocol', 'Protocol head', 'http://', '{}', None, None), ('url', 'URL', '5aew.werc.ewr:8100/?', '{simple}', 'simple', ['5aew.werc.ewr:8100/?']), ('host', 'Host', '5aew.werc.ewr:8100', '{simple}', 'simple', ['5aew.werc.ewr:8100']), ('url_path', 'URL path', '/?', '{simple}', 'simple', ['/?'])]

-----------
QUERY:

SELECT * from ts_debug('english', '5aew.werc.ewr:8100/?xx');
RESULT:
	postgres: [('url', 'URL', '5aew.werc.ewr:8100/?xx', '{simple}', 'simple', ['5aew.werc.ewr:8100/?xx']), ('host', 'Host', '5aew.werc.ewr:8100', '{simple}', 'simple', ['5aew.werc.ewr:8100']), ('url_path', 'URL path', '/?xx', '{simple}', 'simple', ['/?xx'])]

-----------
QUERY:

SELECT token, alias,
  dictionaries, dictionaries is null as dnull, array_dims(dictionaries) as ddims,
  lexemes, lexemes is null as lnull, array_dims(lexemes) as ldims
from ts_debug('english', 'a title');
RESULT:
	postgres: [('a', 'asciiword', '{english_stem}', False, '[1:1]', [], False, None), (' ', 'blank', '{}', False, None, None, True, None), ('title', 'asciiword', '{english_stem}', False, '[1:1]', ['titl'], False, '[1:1]')]

-----------
QUERY:


-- to_tsquery

SELECT to_tsquery('english', 'qwe & sKies ');
RESULT:
	postgres: [("'qwe' & 'sky'",)]

-----------
QUERY:

SELECT to_tsquery('simple', 'qwe & sKies ');
RESULT:
	postgres: [("'qwe' & 'skies'",)]

-----------
QUERY:

SELECT to_tsquery('english', '''the wether'':dc & ''           sKies '':BC ');
RESULT:
	postgres: [("'wether':CD & 'sky':BC",)]

-----------
QUERY:

SELECT to_tsquery('english', 'asd&(and|fghj)');
RESULT:
	postgres: [("'asd' & 'fghj'",)]

-----------
QUERY:

SELECT to_tsquery('english', '(asd&and)|fghj');
RESULT:
	postgres: [("'asd' | 'fghj'",)]

-----------
QUERY:

SELECT to_tsquery('english', '(asd&!and)|fghj');
RESULT:
	postgres: [("'asd' | 'fghj'",)]

-----------
QUERY:

SELECT to_tsquery('english', '(the|and&(i&1))&fghj');
RESULT:
	postgres: [("'1' & 'fghj'",)]

-----------
QUERY:


SELECT plainto_tsquery('english', 'the and z 1))& fghj');
RESULT:
	postgres: [("'z' & '1' & 'fghj'",)]

-----------
QUERY:

SELECT plainto_tsquery('english', 'foo bar') && plainto_tsquery('english', 'asd');
RESULT:
	postgres: [("'foo' & 'bar' & 'asd'",)]

-----------
QUERY:

SELECT plainto_tsquery('english', 'foo bar') || plainto_tsquery('english', 'asd fg');
RESULT:
	postgres: [("'foo' & 'bar' | 'asd' & 'fg'",)]

-----------
QUERY:

SELECT plainto_tsquery('english', 'foo bar') || !!plainto_tsquery('english', 'asd fg');
RESULT:
	postgres: [("'foo' & 'bar' | !( 'asd' & 'fg' )",)]

-----------
QUERY:

SELECT plainto_tsquery('english', 'foo bar') && 'asd | fg';
RESULT:
	postgres: [("'foo' & 'bar' & ( 'asd' | 'fg' )",)]

-----------
QUERY:


-- Check stop word deletion, a and s are stop-words
SELECT to_tsquery('english', '!(a & !b) & c');
RESULT:
	postgres: [("!!'b' & 'c'",)]

-----------
QUERY:

SELECT to_tsquery('english', '!(a & !b)');
RESULT:
	postgres: [("!!'b'",)]

-----------
QUERY:


SELECT to_tsquery('english', '(1 <-> 2) <-> a');
RESULT:
	postgres: [("'1' <-> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '(1 <-> a) <-> 2');
RESULT:
	postgres: [("'1' <2> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '(a <-> 1) <-> 2');
RESULT:
	postgres: [("'1' <-> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', 'a <-> (1 <-> 2)');
RESULT:
	postgres: [("'1' <-> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '1 <-> (a <-> 2)');
RESULT:
	postgres: [("'1' <2> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '1 <-> (2 <-> a)');
RESULT:
	postgres: [("'1' <-> '2'",)]

-----------
QUERY:


SELECT to_tsquery('english', '(1 <-> 2) <3> a');
RESULT:
	postgres: [("'1' <-> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '(1 <-> a) <3> 2');
RESULT:
	postgres: [("'1' <4> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '(a <-> 1) <3> 2');
RESULT:
	postgres: [("'1' <3> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', 'a <3> (1 <-> 2)');
RESULT:
	postgres: [("'1' <-> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '1 <3> (a <-> 2)');
RESULT:
	postgres: [("'1' <4> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '1 <3> (2 <-> a)');
RESULT:
	postgres: [("'1' <3> '2'",)]

-----------
QUERY:


SELECT to_tsquery('english', '(1 <3> 2) <-> a');
RESULT:
	postgres: [("'1' <3> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '(1 <3> a) <-> 2');
RESULT:
	postgres: [("'1' <4> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '(a <3> 1) <-> 2');
RESULT:
	postgres: [("'1' <-> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', 'a <-> (1 <3> 2)');
RESULT:
	postgres: [("'1' <3> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '1 <-> (a <3> 2)');
RESULT:
	postgres: [("'1' <4> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '1 <-> (2 <3> a)');
RESULT:
	postgres: [("'1' <-> '2'",)]

-----------
QUERY:


SELECT to_tsquery('english', '((a <-> 1) <-> 2) <-> s');
RESULT:
	postgres: [("'1' <-> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '(2 <-> (a <-> 1)) <-> s');
RESULT:
	postgres: [("'2' <2> '1'",)]

-----------
QUERY:

SELECT to_tsquery('english', '((1 <-> a) <-> 2) <-> s');
RESULT:
	postgres: [("'1' <2> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '(2 <-> (1 <-> a)) <-> s');
RESULT:
	postgres: [("'2' <-> '1'",)]

-----------
QUERY:

SELECT to_tsquery('english', 's <-> ((a <-> 1) <-> 2)');
RESULT:
	postgres: [("'1' <-> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', 's <-> (2 <-> (a <-> 1))');
RESULT:
	postgres: [("'2' <2> '1'",)]

-----------
QUERY:

SELECT to_tsquery('english', 's <-> ((1 <-> a) <-> 2)');
RESULT:
	postgres: [("'1' <2> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', 's <-> (2 <-> (1 <-> a))');
RESULT:
	postgres: [("'2' <-> '1'",)]

-----------
QUERY:


SELECT to_tsquery('english', '((a <-> 1) <-> s) <-> 2');
RESULT:
	postgres: [("'1' <2> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '(s <-> (a <-> 1)) <-> 2');
RESULT:
	postgres: [("'1' <-> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '((1 <-> a) <-> s) <-> 2');
RESULT:
	postgres: [("'1' <3> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '(s <-> (1 <-> a)) <-> 2');
RESULT:
	postgres: [("'1' <2> '2'",)]

-----------
QUERY:

SELECT to_tsquery('english', '2 <-> ((a <-> 1) <-> s)');
RESULT:
	postgres: [("'2' <2> '1'",)]

-----------
QUERY:

SELECT to_tsquery('english', '2 <-> (s <-> (a <-> 1))');
RESULT:
	postgres: [("'2' <3> '1'",)]

-----------
QUERY:

SELECT to_tsquery('english', '2 <-> ((1 <-> a) <-> s)');
RESULT:
	postgres: [("'2' <-> '1'",)]

-----------
QUERY:

SELECT to_tsquery('english', '2 <-> (s <-> (1 <-> a))');
RESULT:
	postgres: [("'2' <2> '1'",)]

-----------
QUERY:


SELECT to_tsquery('english', 'foo <-> (a <-> (the <-> bar))');
RESULT:
	postgres: [("'foo' <3> 'bar'",)]

-----------
QUERY:

SELECT to_tsquery('english', '((foo <-> a) <-> the) <-> bar');
RESULT:
	postgres: [("'foo' <3> 'bar'",)]

-----------
QUERY:

SELECT to_tsquery('english', 'foo <-> a <-> the <-> bar');
RESULT:
	postgres: [("'foo' <3> 'bar'",)]

-----------
QUERY:

SELECT phraseto_tsquery('english', 'PostgreSQL can be extended by the user in many ways');
RESULT:
	postgres: [("'postgresql' <3> 'extend' <3> 'user' <2> 'mani' <-> 'way'",)]

-----------
QUERY:



SELECT ts_rank_cd(to_tsvector('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 4: SELECT ts_rank_cd(to_tsvector('english', '
                                                 ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
'), to_tsquery('english', 'paint&water'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_rank_cd(to_tsvector('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 3: SELECT ts_rank_cd(to_tsvector('english', '
                                                 ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
'), to_tsquery('english', 'breath&motion&water'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_rank_cd(to_tsvector('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 3: SELECT ts_rank_cd(to_tsvector('english', '
                                                 ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
'), to_tsquery('english', 'ocean'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_rank_cd(to_tsvector('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 3: SELECT ts_rank_cd(to_tsvector('english', '
                                                 ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
'), to_tsquery('english', 'painted <-> Ship'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_rank_cd(strip(to_tsvector('both stripped')),
                  to_tsquery('both & stripped'));
RESULT:
	postgres: [(0.0,)]

-----------
QUERY:


SELECT ts_rank_cd(to_tsvector('unstripped') || strip(to_tsvector('stripped')),
                  to_tsquery('unstripped & stripped'));
RESULT:
	postgres: [(0.0,)]

-----------
QUERY:


--headline tests
SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 4: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', to_tsquery('english', 'paint&water'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 3: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', to_tsquery('english', 'breath&motion&water'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 3: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', to_tsquery('english', 'ocean'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 3: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', to_tsquery('english', 'day & drink'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 3: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', to_tsquery('english', 'day | drink'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 3: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', to_tsquery('english', 'day | !drink'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 3: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', to_tsquery('english', 'painted <-> Ship & drink'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 3: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', to_tsquery('english', 'painted <-> Ship | drink'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 3: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', to_tsquery('english', 'painted <-> Ship | !drink'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 3: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', phraseto_tsquery('english', 'painted Ocean'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 3: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', phraseto_tsquery('english', 'idle as a painted Ship'));
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


SELECT ts_headline('english',
'Lorem ipsum urna.  Nullam nullam ullamcorper urna.',
to_tsquery('english','Lorem') && phraseto_tsquery('english','ullamcorper urna'),
'MaxWords=100, MinWords=1');
RESULT:
	postgres: [('<b>Lorem</b> ipsum <b>urna</b>.  Nullam nullam <b>ullamcorper</b> <b>urna</b>',)]

-----------
QUERY:


SELECT ts_headline('english',
'Lorem ipsum urna.  Nullam nullam ullamcorper urna.',
phraseto_tsquery('english','ullamcorper urna'),
'MaxWords=100, MinWords=5');
RESULT:
	postgres: [('<b>urna</b>.  Nullam nullam <b>ullamcorper</b> <b>urna</b>.',)]

-----------
QUERY:


SELECT ts_headline('english', '
<html>
<!-- some comment -->
<body>
Sea view wow <u>foo bar</u> <i>qq</i>
<a href="http://www.google.com/foo.bar.html" target="_blank">YES &nbsp;
RESULT:
	postgres: unterminated quoted string at or near "'
<html>
<!-- some comment -->
<body>
Sea view wow <u>foo bar</u> <i>qq</i>
<a href="http://www.google.com/foo.bar.html" target="_blank">YES &nbsp;"
LINE 3: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:
</a>
ff-bg
<script>
       document.write(15);
RESULT:
	postgres: syntax error at or near "</"
LINE 1: </a>
        ^


-----------
QUERY:

</script>
</body>
</html>',
to_tsquery('english', 'sea&foo'), 'HighlightAll=true');
RESULT:
	postgres: syntax error at or near "</"
LINE 2: </script>
        ^


-----------
QUERY:


SELECT ts_headline('simple', '1 2 3 1 3'::text, '1 <-> 3', 'MaxWords=2, MinWords=1');
RESULT:
	postgres: [('<b>1</b> <b>3</b>',)]

-----------
QUERY:

SELECT ts_headline('simple', '1 2 3 1 3'::text, '1 & 3', 'MaxWords=4, MinWords=1');
RESULT:
	postgres: [('<b>1</b> 2 <b>3</b>',)]

-----------
QUERY:

SELECT ts_headline('simple', '1 2 3 1 3'::text, '1 <-> 3', 'MaxWords=4, MinWords=1');
RESULT:
	postgres: [('<b>1</b> <b>3</b>',)]

-----------
QUERY:


--Check if headline fragments work
SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 4: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', to_tsquery('english', 'ocean'), 'MaxFragments=1');
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


--Check if more than one fragments are displayed
SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 4: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', to_tsquery('english', 'Coleridge & stuck'), 'MaxFragments=2');
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


--Fragments when there all query words are not in the document
SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 4: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', to_tsquery('english', 'ocean & seahorse'), 'MaxFragments=1');
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


--FragmentDelimiter option
SELECT ts_headline('english', '
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;
RESULT:
	postgres: unterminated quoted string at or near "'
Day after day, day after day,
  We stuck, nor breath nor motion,
As idle as a painted Ship
  Upon a painted Ocean.
Water, water, every where
  And all the boards did shrink;"
LINE 4: SELECT ts_headline('english', '
                                      ^


-----------
QUERY:

Water, water, every where,
  Nor any drop to drink.
S. T. Coleridge (1772-1834)
', to_tsquery('english', 'Coleridge & stuck'), 'MaxFragments=2,FragmentDelimiter=***');
RESULT:
	postgres: syntax error at or near "Water"
LINE 2: Water, water, every where,
        ^


-----------
QUERY:


--Fragments with phrase search
SELECT ts_headline('english',
'Lorem ipsum urna.  Nullam nullam ullamcorper urna.',
to_tsquery('english','Lorem') && phraseto_tsquery('english','ullamcorper urna'),
'MaxFragments=100, MaxWords=100, MinWords=1');
RESULT:
	postgres: [('<b>Lorem</b> ipsum <b>urna</b>.  Nullam nullam <b>ullamcorper</b> <b>urna</b>',)]

-----------
QUERY:


-- Edge cases with empty query
SELECT ts_headline('english',
'', to_tsquery('english', ''));
RESULT:
	postgres: [('',)]

-----------
QUERY:

SELECT ts_headline('english',
'foo bar', to_tsquery('english', ''));
RESULT:
	postgres: [('foo bar',)]

-----------
QUERY:


--Rewrite sub system

CREATE TABLE test_tsquery (txtkeyword TEXT, txtsample TEXT);
RESULT:
	postgres: None

-----------
QUERY:

-- \set ECHO none
\copy test_tsquery from stdin
'New York'	new <-> york | big <-> apple | nyc
Moscow	moskva | moscow
'Sanct Peter'	Peterburg | peter | 'Sanct Peterburg'
foo & bar & qq	foo & (bar | qq) & city
1 & (2 <-> 3)	2 <-> 4
5 <-> 6	5 <-> 7
\.
-- \set ECHO all

ALTER TABLE test_tsquery ADD COLUMN keyword tsquery;
RESULT:
	postgres: syntax error at or near "\"
LINE 3: \copy test_tsquery from stdin
        ^


-----------
QUERY:

UPDATE test_tsquery SET keyword = to_tsquery('english', txtkeyword);
RESULT:
	postgres: column "keyword" of relation "test_tsquery" does not exist
LINE 2: UPDATE test_tsquery SET keyword = to_tsquery('english', txtk...
                                ^


-----------
QUERY:

ALTER TABLE test_tsquery ADD COLUMN sample tsquery;
RESULT:
	postgres: None

-----------
QUERY:

UPDATE test_tsquery SET sample = to_tsquery('english', txtsample::text);
RESULT:
	postgres: None

-----------
QUERY:



SELECT COUNT(*) FROM test_tsquery WHERE keyword <  'new <-> york';
RESULT:
	postgres: column "keyword" does not exist
LINE 4: SELECT COUNT(*) FROM test_tsquery WHERE keyword <  'new <-> ...
                                                ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT COUNT(*) FROM test_tsquery WHERE keyword <= 'new <-> york';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT COUNT(*) FROM test_tsquery WHERE keyword <= 'new <-> ...
                                                ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT COUNT(*) FROM test_tsquery WHERE keyword = 'new <-> york';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT COUNT(*) FROM test_tsquery WHERE keyword = 'new <-> y...
                                                ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT COUNT(*) FROM test_tsquery WHERE keyword >= 'new <-> york';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT COUNT(*) FROM test_tsquery WHERE keyword >= 'new <-> ...
                                                ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT COUNT(*) FROM test_tsquery WHERE keyword >  'new <-> york';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT COUNT(*) FROM test_tsquery WHERE keyword >  'new <-> ...
                                                ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:


CREATE UNIQUE INDEX bt_tsq ON test_tsquery (keyword);
RESULT:
	postgres: column "keyword" does not exist


-----------
QUERY:


SET enable_seqscan=OFF;
RESULT:
	postgres: None

-----------
QUERY:


SELECT COUNT(*) FROM test_tsquery WHERE keyword <  'new <-> york';
RESULT:
	postgres: column "keyword" does not exist
LINE 3: SELECT COUNT(*) FROM test_tsquery WHERE keyword <  'new <-> ...
                                                ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT COUNT(*) FROM test_tsquery WHERE keyword <= 'new <-> york';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT COUNT(*) FROM test_tsquery WHERE keyword <= 'new <-> ...
                                                ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT COUNT(*) FROM test_tsquery WHERE keyword = 'new <-> york';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT COUNT(*) FROM test_tsquery WHERE keyword = 'new <-> y...
                                                ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT COUNT(*) FROM test_tsquery WHERE keyword >= 'new <-> york';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT COUNT(*) FROM test_tsquery WHERE keyword >= 'new <-> ...
                                                ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT COUNT(*) FROM test_tsquery WHERE keyword >  'new <-> york';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT COUNT(*) FROM test_tsquery WHERE keyword >  'new <-> ...
                                                ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:


RESET enable_seqscan;
RESULT:
	postgres: None

-----------
QUERY:


SELECT ts_rewrite('foo & bar & qq & new & york',  'new & york'::tsquery, 'big & apple | nyc | new & york & city');
RESULT:
	postgres: [("'foo' & 'bar' & 'qq' & ( 'city' & 'new' & 'york' | 'nyc' | 'big' & 'apple' )",)]

-----------
QUERY:

SELECT ts_rewrite(ts_rewrite('new & !york ', 'york', '!jersey'),
                  'jersey', 'mexico');
RESULT:
	postgres: [("'new' & !!'mexico'",)]

-----------
QUERY:


SELECT ts_rewrite('moscow', 'SELECT keyword, sample FROM test_tsquery'::text );
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite('moscow & hotel', 'SELECT keyword, sample FROM test_tsquery'::text );
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite('bar & qq & foo & (new <-> york)', 'SELECT keyword, sample FROM test_tsquery'::text );
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:


SELECT ts_rewrite( 'moscow', 'SELECT keyword, sample FROM test_tsquery');
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite( 'moscow & hotel', 'SELECT keyword, sample FROM test_tsquery');
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite( 'bar & qq & foo & (new <-> york)', 'SELECT keyword, sample FROM test_tsquery');
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:


SELECT ts_rewrite('1 & (2 <-> 3)', 'SELECT keyword, sample FROM test_tsquery'::text );
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite('1 & (2 <2> 3)', 'SELECT keyword, sample FROM test_tsquery'::text );
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite('5 <-> (1 & (2 <-> 3))', 'SELECT keyword, sample FROM test_tsquery'::text );
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite('5 <-> (6 | 8)', 'SELECT keyword, sample FROM test_tsquery'::text );
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:


-- Check empty substitution
SELECT ts_rewrite(to_tsquery('5 & (6 | 5)'), to_tsquery('5'), to_tsquery(''));
RESULT:
	postgres: [("'6'",)]

-----------
QUERY:

SELECT ts_rewrite(to_tsquery('!5'), to_tsquery('5'), to_tsquery(''));
RESULT:
	postgres: [('',)]

-----------
QUERY:


SELECT keyword FROM test_tsquery WHERE keyword @> 'new';
RESULT:
	postgres: column "keyword" does not exist
LINE 3: SELECT keyword FROM test_tsquery WHERE keyword @> 'new';
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT keyword FROM test_tsquery WHERE keyword @> 'moscow';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT keyword FROM test_tsquery WHERE keyword @> 'moscow';
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT keyword FROM test_tsquery WHERE keyword <@ 'new';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT keyword FROM test_tsquery WHERE keyword <@ 'new';
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT keyword FROM test_tsquery WHERE keyword <@ 'moscow';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT keyword FROM test_tsquery WHERE keyword <@ 'moscow';
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT ts_rewrite( query, 'SELECT keyword, sample FROM test_tsquery' ) FROM to_tsquery('english', 'moscow') AS query;
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite( query, 'SELECT keyword, sample FROM test_tsquery' ) FROM to_tsquery('english', 'moscow & hotel') AS query;
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite( query, 'SELECT keyword, sample FROM test_tsquery' ) FROM to_tsquery('english', 'bar & qq & foo & (new <-> york)') AS query;
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite( query, 'SELECT keyword, sample FROM test_tsquery' ) FROM to_tsquery('english', 'moscow') AS query;
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite( query, 'SELECT keyword, sample FROM test_tsquery' ) FROM to_tsquery('english', 'moscow & hotel') AS query;
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite( query, 'SELECT keyword, sample FROM test_tsquery' ) FROM to_tsquery('english', 'bar & qq & foo & (new <-> york)') AS query;
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:


CREATE INDEX qq ON test_tsquery USING gist (keyword tsquery_ops);
RESULT:
	postgres: column "keyword" does not exist


-----------
QUERY:

SET enable_seqscan=OFF;
RESULT:
	postgres: None

-----------
QUERY:


SELECT keyword FROM test_tsquery WHERE keyword @> 'new';
RESULT:
	postgres: column "keyword" does not exist
LINE 3: SELECT keyword FROM test_tsquery WHERE keyword @> 'new';
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT keyword FROM test_tsquery WHERE keyword @> 'moscow';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT keyword FROM test_tsquery WHERE keyword @> 'moscow';
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT keyword FROM test_tsquery WHERE keyword <@ 'new';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT keyword FROM test_tsquery WHERE keyword <@ 'new';
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT keyword FROM test_tsquery WHERE keyword <@ 'moscow';
RESULT:
	postgres: column "keyword" does not exist
LINE 2: SELECT keyword FROM test_tsquery WHERE keyword <@ 'moscow';
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".


-----------
QUERY:

SELECT ts_rewrite( query, 'SELECT keyword, sample FROM test_tsquery' ) FROM to_tsquery('english', 'moscow') AS query;
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite( query, 'SELECT keyword, sample FROM test_tsquery' ) FROM to_tsquery('english', 'moscow & hotel') AS query;
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite( query, 'SELECT keyword, sample FROM test_tsquery' ) FROM to_tsquery('english', 'bar & qq & foo & (new <-> york)') AS query;
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite( query, 'SELECT keyword, sample FROM test_tsquery' ) FROM to_tsquery('english', 'moscow') AS query;
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite( query, 'SELECT keyword, sample FROM test_tsquery' ) FROM to_tsquery('english', 'moscow & hotel') AS query;
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:

SELECT ts_rewrite( query, 'SELECT keyword, sample FROM test_tsquery' ) FROM to_tsquery('english', 'bar & qq & foo & (new <-> york)') AS query;
RESULT:
	postgres: column "keyword" does not exist
LINE 1: SELECT keyword, sample FROM test_tsquery
               ^
HINT:  Perhaps you meant to reference the column "test_tsquery.txtkeyword".
QUERY:  SELECT keyword, sample FROM test_tsquery


-----------
QUERY:


SELECT ts_rewrite(tsquery_phrase('foo', 'foo'), 'foo', 'bar | baz');
RESULT:
	postgres: [("( 'bar' | 'baz' ) <-> ( 'bar' | 'baz' )",)]

-----------
QUERY:

SELECT to_tsvector('foo bar') @@
  ts_rewrite(tsquery_phrase('foo', 'foo'), 'foo', 'bar | baz');
RESULT:
	postgres: [(False,)]

-----------
QUERY:

SELECT to_tsvector('bar baz') @@
  ts_rewrite(tsquery_phrase('foo', 'foo'), 'foo', 'bar | baz');
RESULT:
	postgres: [(True,)]

-----------
QUERY:


RESET enable_seqscan;
RESULT:
	postgres: None

-----------
QUERY:


--test GUC
SET default_text_search_config=simple;
RESULT:
	postgres: None

-----------
QUERY:


SELECT to_tsvector('SKIES My booKs');
RESULT:
	postgres: [("'books':3 'my':2 'skies':1",)]

-----------
QUERY:

SELECT plainto_tsquery('SKIES My booKs');
RESULT:
	postgres: [("'skies' & 'my' & 'books'",)]

-----------
QUERY:

SELECT to_tsquery('SKIES & My | booKs');
RESULT:
	postgres: [("'skies' & 'my' | 'books'",)]

-----------
QUERY:


SET default_text_search_config=english;
RESULT:
	postgres: None

-----------
QUERY:


SELECT to_tsvector('SKIES My booKs');
RESULT:
	postgres: [("'book':3 'sky':1",)]

-----------
QUERY:

SELECT plainto_tsquery('SKIES My booKs');
RESULT:
	postgres: [("'sky' & 'book'",)]

-----------
QUERY:

SELECT to_tsquery('SKIES & My | booKs');
RESULT:
	postgres: [("'sky' | 'book'",)]

-----------
QUERY:


--trigger
CREATE TRIGGER tsvectorupdate
BEFORE UPDATE OR INSERT ON test_tsvector
FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger(a, 'pg_catalog.english', t);
RESULT:
	postgres: None

-----------
QUERY:


SELECT count(*) FROM test_tsvector WHERE a @@ to_tsquery('345&qwerty');
RESULT:
	postgres: [(0,)]

-----------
QUERY:

INSERT INTO test_tsvector (t) VALUES ('345 qwerty');
RESULT:
	postgres: None

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ to_tsquery('345&qwerty');
RESULT:
	postgres: [(1,)]

-----------
QUERY:

UPDATE test_tsvector SET t = null WHERE t = '345 qwerty';
RESULT:
	postgres: None

-----------
QUERY:

SELECT count(*) FROM test_tsvector WHERE a @@ to_tsquery('345&qwerty');
RESULT:
	postgres: [(0,)]

-----------
QUERY:


INSERT INTO test_tsvector (t) VALUES ('345 qwerty');
RESULT:
	postgres: None

-----------
QUERY:


SELECT count(*) FROM test_tsvector WHERE a @@ to_tsquery('345&qwerty');
RESULT:
	postgres: [(1,)]

-----------
QUERY:


-- Test inlining of immutable constant functions

-- to_tsquery(text) is not immutable, so it won/* REPLACED */''t be inlined
explain (costs off)
select * from test_tsquery, to_tsquery('new') q where txtsample @@ q;
RESULT:
	postgres: [('Nested Loop',), ('  Join Filter: (test_tsquery.txtsample @@ q.q)',), ('  ->  Function Scan on to_tsquery q',), ('  ->  Seq Scan on test_tsquery',)]

-----------
QUERY:


-- to_tsquery(regconfig, text) is an immutable function.
-- That allows us to get rid of using function scan and join at all.
explain (costs off)
select * from test_tsquery, to_tsquery('english', 'new') q where txtsample @@ q;
RESULT:
	postgres: [('Seq Scan on test_tsquery',), ("  Filter: (txtsample @@ '''new'''::tsquery)",)]

-----------
QUERY:


-- test finding items in GIN/* REPLACED */''s pending list
create temp table pendtest (ts tsvector);
RESULT:
	postgres: None

-----------
QUERY:

create index pendtest_idx on pendtest using gin(ts);
RESULT:
	postgres: None

-----------
QUERY:

insert into pendtest values (to_tsvector('Lore ipsam'));
RESULT:
	postgres: None

-----------
QUERY:

insert into pendtest values (to_tsvector('Lore ipsum'));
RESULT:
	postgres: None

-----------
QUERY:

select * from pendtest where 'ipsu:*'::tsquery @@ ts;
RESULT:
	postgres: [("'ipsum':2 'lore':1",)]

-----------
QUERY:

select * from pendtest where 'ipsa:*'::tsquery @@ ts;
RESULT:
	postgres: [("'ipsam':2 'lore':1",)]

-----------
QUERY:

select * from pendtest where 'ips:*'::tsquery @@ ts;
RESULT:
	postgres: [("'ipsam':2 'lore':1",), ("'ipsum':2 'lore':1",)]

-----------
QUERY:

select * from pendtest where 'ipt:*'::tsquery @@ ts;
RESULT:
	postgres: []

-----------
QUERY:

select * from pendtest where 'ipi:*'::tsquery @@ ts;
RESULT:
	postgres: []

-----------
QUERY:


--check OP_PHRASE on index
create temp table phrase_index_test(fts tsvector);
RESULT:
	postgres: None

-----------
QUERY:

insert into phrase_index_test values ('A fat cat has just eaten a rat.');
RESULT:
	postgres: None

-----------
QUERY:

insert into phrase_index_test values (to_tsvector('english', 'A fat cat has just eaten a rat.'));
RESULT:
	postgres: None

-----------
QUERY:

create index phrase_index_test_idx on phrase_index_test using gin(fts);
RESULT:
	postgres: None

-----------
QUERY:

set enable_seqscan = off;
RESULT:
	postgres: None

-----------
QUERY:

select * from phrase_index_test where fts @@ phraseto_tsquery('english', 'fat cat');
RESULT:
	postgres: [("'cat':3 'eaten':6 'fat':2 'rat':8",)]

-----------
QUERY:

set enable_seqscan = on;
RESULT:
	postgres: None

-----------
QUERY:


-- test websearch_to_tsquery function
select websearch_to_tsquery('simple', 'I have a fat:*ABCD cat');
RESULT:
	postgres: [("'i' & 'have' & 'a' & 'fat' & 'abcd' & 'cat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'orange:**AABBCCDD');
RESULT:
	postgres: [("'orange' & 'aabbccdd'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'fat:A!cat:B|rat:C<');
RESULT:
	postgres: [("'fat' & 'a' & 'cat' & 'b' & 'rat' & 'c'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'fat:A : cat:B');
RESULT:
	postgres: [("'fat' & 'a' & 'cat' & 'b'",)]

-----------
QUERY:


select websearch_to_tsquery('simple', 'fat*rat');
RESULT:
	postgres: [("'fat' <-> 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'fat-rat');
RESULT:
	postgres: [("'fat-rat' <-> 'fat' <-> 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'fat_rat');
RESULT:
	postgres: [("'fat' <-> 'rat'",)]

-----------
QUERY:


-- weights are completely ignored
select websearch_to_tsquery('simple', 'abc : def');
RESULT:
	postgres: [("'abc' & 'def'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'abc:def');
RESULT:
	postgres: [("'abc' & 'def'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'a:::b');
RESULT:
	postgres: [("'a' & 'b'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'abc:d');
RESULT:
	postgres: [("'abc' & 'd'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', ':');
RESULT:
	postgres: [('',)]

-----------
QUERY:


-- these operators are ignored
select websearch_to_tsquery('simple', 'abc & def');
RESULT:
	postgres: [("'abc' & 'def'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'abc | def');
RESULT:
	postgres: [("'abc' & 'def'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'abc <-> def');
RESULT:
	postgres: [("'abc' & 'def'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'abc (pg or class)');
RESULT:
	postgres: [("'abc' & 'pg' | 'class'",)]

-----------
QUERY:


-- NOT is ignored in quotes
select websearch_to_tsquery('english', 'My brand new smartphone');
RESULT:
	postgres: [("'brand' & 'new' & 'smartphon'",)]

-----------
QUERY:

select websearch_to_tsquery('english', 'My brand "new smartphone"');
RESULT:
	postgres: [("'brand' & 'new' <-> 'smartphon'",)]

-----------
QUERY:

select websearch_to_tsquery('english', 'My brand "new -smartphone"');
RESULT:
	postgres: [("'brand' & 'new' <-> 'smartphon'",)]

-----------
QUERY:


-- test OR operator
select websearch_to_tsquery('simple', 'cat or rat');
RESULT:
	postgres: [("'cat' | 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'cat OR rat');
RESULT:
	postgres: [("'cat' | 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'cat "OR" rat');
RESULT:
	postgres: [("'cat' & 'or' & 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'cat OR');
RESULT:
	postgres: [("'cat' & 'or'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'OR rat');
RESULT:
	postgres: [("'or' & 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', '"fat cat OR rat"');
RESULT:
	postgres: [("'fat' <-> 'cat' <-> 'or' <-> 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'fat (cat OR rat');
RESULT:
	postgres: [("'fat' & 'cat' | 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'or OR or');
RESULT:
	postgres: [("'or' | 'or'",)]

-----------
QUERY:


-- OR is an operator here ...
select websearch_to_tsquery('simple', '"fat cat"or"fat rat"');
RESULT:
	postgres: [("'fat' <-> 'cat' | 'fat' <-> 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'fat or(rat');
RESULT:
	postgres: [("'fat' | 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'fat or)rat');
RESULT:
	postgres: [("'fat' | 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'fat or&rat');
RESULT:
	postgres: [("'fat' | 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'fat or|rat');
RESULT:
	postgres: [("'fat' | 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'fat or!rat');
RESULT:
	postgres: [("'fat' | 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'fat or<rat');
RESULT:
	postgres: [("'fat' | 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'fat or>rat');
RESULT:
	postgres: [("'fat' | 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'fat or ');
RESULT:
	postgres: [("'fat' & 'or'",)]

-----------
QUERY:


-- ... but not here
select websearch_to_tsquery('simple', 'abc orange');
RESULT:
	postgres: [("'abc' & 'orange'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'abc OR1234');
RESULT:
	postgres: [("'abc' & 'or1234'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'abc or-abc');
RESULT:
	postgres: [("'abc' & 'or-abc' <-> 'or' <-> 'abc'",)]

-----------
QUERY:

select websearch_to_tsquery('simple', 'abc OR_abc');
RESULT:
	postgres: [("'abc' & 'or' <-> 'abc'",)]

-----------
QUERY:


-- test quotes
select websearch_to_tsquery('english', '"pg_class pg');
RESULT:
	postgres: [("'pg' <-> 'class' <-> 'pg'",)]

-----------
QUERY:

select websearch_to_tsquery('english', 'pg_class pg"');
RESULT:
	postgres: [("'pg' <-> 'class' & 'pg'",)]

-----------
QUERY:

select websearch_to_tsquery('english', '"pg_class pg"');
RESULT:
	postgres: [("'pg' <-> 'class' <-> 'pg'",)]

-----------
QUERY:

select websearch_to_tsquery('english', '"pg_class : pg"');
RESULT:
	postgres: [("'pg' <-> 'class' <-> 'pg'",)]

-----------
QUERY:

select websearch_to_tsquery('english', 'abc "pg_class pg"');
RESULT:
	postgres: [("'abc' & 'pg' <-> 'class' <-> 'pg'",)]

-----------
QUERY:

select websearch_to_tsquery('english', '"pg_class pg" def');
RESULT:
	postgres: [("'pg' <-> 'class' <-> 'pg' & 'def'",)]

-----------
QUERY:

select websearch_to_tsquery('english', 'abc "pg pg_class pg" def');
RESULT:
	postgres: [("'abc' & 'pg' <-> 'pg' <-> 'class' <-> 'pg' & 'def'",)]

-----------
QUERY:

select websearch_to_tsquery('english', ' or "pg pg_class pg" or ');
RESULT:
	postgres: [("'pg' <-> 'pg' <-> 'class' <-> 'pg'",)]

-----------
QUERY:

select websearch_to_tsquery('english', '""pg pg_class pg""');
RESULT:
	postgres: [("'pg' & 'pg' <-> 'class' & 'pg'",)]

-----------
QUERY:

select websearch_to_tsquery('english', 'abc """"" def');
RESULT:
	postgres: [("'abc' & 'def'",)]

-----------
QUERY:

select websearch_to_tsquery('english', 'cat -"fat rat"');
RESULT:
	postgres: [("'cat' & !( 'fat' <-> 'rat' )",)]

-----------
QUERY:

select websearch_to_tsquery('english', 'cat -"fat rat" cheese');
RESULT:
	postgres: [("'cat' & !( 'fat' <-> 'rat' ) & 'chees'",)]

-----------
QUERY:

select websearch_to_tsquery('english', 'abc "def -"');
RESULT:
	postgres: [("'abc' & 'def'",)]

-----------
QUERY:

select websearch_to_tsquery('english', 'abc "def :"');
RESULT:
	postgres: [("'abc' & 'def'",)]

-----------
QUERY:


select websearch_to_tsquery('english', '"A fat cat" has just eaten a -rat.');
RESULT:
	postgres: [("'fat' <-> 'cat' & 'eaten' & !'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('english', '"A fat cat" has just eaten OR !rat.');
RESULT:
	postgres: [("'fat' <-> 'cat' & 'eaten' | 'rat'",)]

-----------
QUERY:

select websearch_to_tsquery('english', '"A fat cat" has just (+eaten OR -rat)');
RESULT:
	postgres: [("'fat' <-> 'cat' & 'eaten' | !'rat'",)]

-----------
QUERY:


select websearch_to_tsquery('english', 'this is ----fine');
RESULT:
	postgres: [("!!!!'fine'",)]

-----------
QUERY:

select websearch_to_tsquery('english', '(()) )))) this ||| is && -fine, "dear friend" OR good');
RESULT:
	postgres: [("!'fine' & 'dear' <-> 'friend' | 'good'",)]

-----------
QUERY:

select websearch_to_tsquery('english', 'an old <-> cat " is fine &&& too');
RESULT:
	postgres: [("'old' & 'cat' & 'fine'",)]

-----------
QUERY:


select websearch_to_tsquery('english', '"A the" OR just on');
RESULT:
	postgres: [('',)]

-----------
QUERY:

select websearch_to_tsquery('english', '"a fat cat" ate a rat');
RESULT:
	postgres: [("'fat' <-> 'cat' & 'ate' & 'rat'",)]

-----------
QUERY:


select to_tsvector('english', 'A fat cat ate a rat') @@
	websearch_to_tsquery('english', '"a fat cat" ate a rat');
RESULT:
	postgres: [(True,)]

-----------
QUERY:


select to_tsvector('english', 'A fat grey cat ate a rat') @@
	websearch_to_tsquery('english', '"a fat cat" ate a rat');
RESULT:
	postgres: [(False,)]

-----------
QUERY:


-- cases handled by gettoken_tsvector()
select websearch_to_tsquery('''');
RESULT:
	postgres: [('',)]

-----------
QUERY:

select websearch_to_tsquery('''abc''''def''');
RESULT:
	postgres: [("'abc' <-> 'def'",)]

-----------
QUERY:

select websearch_to_tsquery('\abc');
RESULT:
	postgres: [("'abc'",)]

-----------
QUERY:

select websearch_to_tsquery('\');
RESULT:
	postgres: [('',)]
