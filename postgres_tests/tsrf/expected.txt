
-----------
QUERY:
--
-- tsrf - targetlist set returning function tests
--

-- simple srf
SELECT generate_series(1, 3);
RESULT:
	postgres: [(1,), (2,), (3,)]

-----------
QUERY:


-- parallel iteration
SELECT generate_series(1, 3), generate_series(3,5);
RESULT:
	postgres: [(1, 3), (2, 4), (3, 5)]

-----------
QUERY:


-- parallel iteration, different number of rows
SELECT generate_series(1, 2), generate_series(1,4);
RESULT:
	postgres: [(1, 1), (2, 2), (None, 3), (None, 4)]

-----------
QUERY:


-- srf, with SRF argument
SELECT generate_series(1, generate_series(1, 3));
RESULT:
	postgres: [(1,), (1,), (2,), (1,), (2,), (3,)]

-----------
QUERY:


-- but we/* REPLACED */''ve traditionally rejected the same in FROM
SELECT * FROM generate_series(1, generate_series(1, 3));
RESULT:
	postgres: set-returning functions must appear at top level of FROM
LINE 4: SELECT * FROM generate_series(1, generate_series(1, 3));
                                         ^


-----------
QUERY:


-- srf, with two SRF arguments
SELECT generate_series(generate_series(1,3), generate_series(2, 4));
RESULT:
	postgres: [(1,), (2,), (2,), (3,), (3,), (4,)]

-----------
QUERY:


-- check proper nesting of SRFs in different expressions
explain (verbose, costs off)
SELECT generate_series(1, generate_series(1, 3)), generate_series(2, 4);
RESULT:
	postgres: [('ProjectSet',), ('  Output: generate_series(1, (generate_series(1, 3))), (generate_series(2, 4))',), ('  ->  ProjectSet',), ('        Output: generate_series(1, 3), generate_series(2, 4)',), ('        ->  Result',)]

-----------
QUERY:

SELECT generate_series(1, generate_series(1, 3)), generate_series(2, 4);
RESULT:
	postgres: [(1, 2), (1, 3), (2, 3), (1, 4), (2, 4), (3, 4)]

-----------
QUERY:


CREATE TABLE few(id int, dataa text, datab text);
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO few VALUES(1, 'a', 'foo'),(2, 'a', 'bar'),(3, 'b', 'bar');
RESULT:
	postgres: None

-----------
QUERY:


-- SRF with a provably-dummy relation
explain (verbose, costs off)
SELECT unnest(ARRAY[1, 2]) FROM few WHERE false;
RESULT:
	postgres: [('ProjectSet',), ("  Output: unnest('{1,2}'::integer[])",), ('  ->  Result',), ('        One-Time Filter: false',)]

-----------
QUERY:

SELECT unnest(ARRAY[1, 2]) FROM few WHERE false;
RESULT:
	postgres: []

-----------
QUERY:


-- SRF shouldn/* REPLACED */''t prevent upper query from recognizing lower as dummy
explain (verbose, costs off)
SELECT * FROM few f1,
  (SELECT unnest(ARRAY[1,2]) FROM few f2 WHERE false OFFSET 0) ss;
RESULT:
	postgres: [('Result',), ('  Output: f1.id, f1.dataa, f1.datab, ss.unnest',), ('  One-Time Filter: false',)]

-----------
QUERY:

SELECT * FROM few f1,
  (SELECT unnest(ARRAY[1,2]) FROM few f2 WHERE false OFFSET 0) ss;
RESULT:
	postgres: []

-----------
QUERY:


-- SRF output order of sorting is maintained, if SRF is not referenced
SELECT few.id, generate_series(1,3) g FROM few ORDER BY id DESC;
RESULT:
	postgres: [(3, 1), (3, 2), (3, 3), (2, 1), (2, 2), (2, 3), (1, 1), (1, 2), (1, 3)]

-----------
QUERY:


-- but SRFs can be referenced in sort
SELECT few.id, generate_series(1,3) g FROM few ORDER BY id, g DESC;
RESULT:
	postgres: [(1, 3), (1, 2), (1, 1), (2, 3), (2, 2), (2, 1), (3, 3), (3, 2), (3, 1)]

-----------
QUERY:

SELECT few.id, generate_series(1,3) g FROM few ORDER BY id, generate_series(1,3) DESC;
RESULT:
	postgres: [(1, 3), (1, 2), (1, 1), (2, 3), (2, 2), (2, 1), (3, 3), (3, 2), (3, 1)]

-----------
QUERY:


-- it/* REPLACED */''s weird to have ORDER BYs that increase the number of results
SELECT few.id FROM few ORDER BY id, generate_series(1,3) DESC;
RESULT:
	postgres: [(1,), (1,), (1,), (2,), (2,), (2,), (3,), (3,), (3,)]

-----------
QUERY:


-- SRFs are computed after aggregation
SET enable_hashagg TO 0;
RESULT:
	postgres: None

-----------
QUERY:
 -- stable output order
SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa;
RESULT:
	postgres: [('a', 1, 1, 1, 1), ('a', 1, 1, 1, 1), ('a', 1, 1, 1, 3)]

-----------
QUERY:

-- unless referenced in GROUP BY clause
SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa, unnest('{1,1,3}'::int[]);
RESULT:
	postgres: [('a', 2, 1, 1, 1), ('a', 1, 1, 1, 3)]

-----------
QUERY:

SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa, 5;
RESULT:
	postgres: [('a', 2, 1, 1, 1), ('a', 1, 1, 1, 3)]

-----------
QUERY:

RESET enable_hashagg;
RESULT:
	postgres: None

-----------
QUERY:


-- check HAVING works when GROUP BY does [not] reference SRF output
SELECT dataa, generate_series(1,1), count(*) FROM few GROUP BY 1 HAVING count(*) > 1;
RESULT:
	postgres: [('a', 1, 2)]

-----------
QUERY:

SELECT dataa, generate_series(1,1), count(*) FROM few GROUP BY 1, 2 HAVING count(*) > 1;
RESULT:
	postgres: [('a', 1, 2)]

-----------
QUERY:


-- it/* REPLACED */''s weird to have GROUP BYs that increase the number of results
SELECT few.dataa, count(*) FROM few WHERE dataa = 'a' GROUP BY few.dataa ORDER BY 2;
RESULT:
	postgres: [('a', 2)]

-----------
QUERY:

SELECT few.dataa, count(*) FROM few WHERE dataa = 'a' GROUP BY few.dataa, unnest('{1,1,3}'::int[]) ORDER BY 2;
RESULT:
	postgres: [('a', 2), ('a', 4)]

-----------
QUERY:


-- SRFs are not allowed if they/* REPLACED */''d need to be conditionally executed
SELECT q1, case when q1 > 0 then generate_series(1,3) else 0 end FROM int8_tbl;
RESULT:
	postgres: set-returning functions are not allowed in CASE
LINE 4: SELECT q1, case when q1 > 0 then generate_series(1,3) else 0...
                                         ^
HINT:  You might be able to move the set-returning function into a LATERAL FROM item.


-----------
QUERY:

SELECT q1, coalesce(generate_series(1,3), 0) FROM int8_tbl;
RESULT:
	postgres: set-returning functions are not allowed in COALESCE
LINE 2: SELECT q1, coalesce(generate_series(1,3), 0) FROM int8_tbl;
                            ^
HINT:  You might be able to move the set-returning function into a LATERAL FROM item.


-----------
QUERY:


-- SRFs are not allowed in aggregate arguments
SELECT min(generate_series(1, 3)) FROM few;
RESULT:
	postgres: aggregate function calls cannot contain set-returning function calls
LINE 4: SELECT min(generate_series(1, 3)) FROM few;
                   ^
HINT:  You might be able to move the set-returning function into a LATERAL FROM item.


-----------
QUERY:


-- ... unless they/* REPLACED */''re within a sub-select
SELECT sum((3 = ANY(SELECT generate_series(1,4)))::int);
RESULT:
	postgres: [(1,)]

-----------
QUERY:


SELECT sum((3 = ANY(SELECT lag(x) over(order by x)
                    FROM generate_series(1,4) x))::int);
RESULT:
	postgres: [(1,)]

-----------
QUERY:


-- SRFs are not allowed in window function arguments, either
SELECT min(generate_series(1, 3)) OVER() FROM few;
RESULT:
	postgres: window function calls cannot contain set-returning function calls
LINE 4: SELECT min(generate_series(1, 3)) OVER() FROM few;
                   ^
HINT:  You might be able to move the set-returning function into a LATERAL FROM item.


-----------
QUERY:


-- SRFs are normally computed after window functions
SELECT id,lag(id) OVER(), count(*) OVER(), generate_series(1,3) FROM few;
RESULT:
	postgres: [(1, None, 3, 1), (1, None, 3, 2), (1, None, 3, 3), (2, 1, 3, 1), (2, 1, 3, 2), (2, 1, 3, 3), (3, 2, 3, 1), (3, 2, 3, 2), (3, 2, 3, 3)]

-----------
QUERY:

-- unless referencing SRFs
SELECT SUM(count(*)) OVER(PARTITION BY generate_series(1,3) ORDER BY generate_series(1,3)), generate_series(1,3) g FROM few GROUP BY g;
RESULT:
	postgres: [(Decimal('3'), 1), (Decimal('3'), 2), (Decimal('3'), 3)]

-----------
QUERY:


-- sorting + grouping
SELECT few.dataa, count(*), min(id), max(id), generate_series(1,3) FROM few GROUP BY few.dataa ORDER BY 5, 1;
RESULT:
	postgres: [('a', 2, 1, 2, 1), ('b', 1, 3, 3, 1), ('a', 2, 1, 2, 2), ('b', 1, 3, 3, 2), ('a', 2, 1, 2, 3), ('b', 1, 3, 3, 3)]

-----------
QUERY:


-- grouping sets are a bit special, they produce NULLs in columns not actually NULL
set enable_hashagg = false;
RESULT:
	postgres: None

-----------
QUERY:

SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab);
RESULT:
	postgres: [('a', 'bar', 1, 1), ('a', 'bar', 2, 1), ('a', 'foo', 1, 1), ('a', 'foo', 2, 1), ('a', None, 1, 2), ('a', None, 2, 2), ('b', 'bar', 1, 1), ('b', 'bar', 2, 1), ('b', None, 1, 1), ('b', None, 2, 1), (None, None, 1, 3), (None, None, 2, 3), (None, 'bar', 1, 2), (None, 'bar', 2, 2), (None, 'foo', 1, 1), (None, 'foo', 2, 1)]

-----------
QUERY:

SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY dataa;
RESULT:
	postgres: [('a', 'bar', 1, 1), ('a', 'bar', 2, 1), ('a', 'foo', 1, 1), ('a', 'foo', 2, 1), ('a', None, 1, 2), ('a', None, 2, 2), ('b', 'bar', 1, 1), ('b', 'bar', 2, 1), ('b', None, 1, 1), ('b', None, 2, 1), (None, None, 1, 3), (None, None, 2, 3), (None, 'bar', 1, 2), (None, 'bar', 2, 2), (None, 'foo', 1, 1), (None, 'foo', 2, 1)]

-----------
QUERY:

SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY g;
RESULT:
	postgres: [('a', 'bar', 1, 1), ('a', 'foo', 1, 1), ('a', None, 1, 2), ('b', 'bar', 1, 1), ('b', None, 1, 1), (None, None, 1, 3), (None, 'bar', 1, 2), (None, 'foo', 1, 1), (None, 'foo', 2, 1), ('a', 'bar', 2, 1), ('b', None, 2, 1), ('a', 'foo', 2, 1), (None, 'bar', 2, 2), ('a', None, 2, 2), (None, None, 2, 3), ('b', 'bar', 2, 1)]

-----------
QUERY:

SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g);
RESULT:
	postgres: [('a', 'bar', 1, 1), ('a', 'bar', 2, 1), ('a', 'bar', None, 2), ('a', 'foo', 1, 1), ('a', 'foo', 2, 1), ('a', 'foo', None, 2), ('a', None, None, 4), ('b', 'bar', 1, 1), ('b', 'bar', 2, 1), ('b', 'bar', None, 2), ('b', None, None, 2), (None, None, None, 6), (None, 'bar', 1, 2), (None, 'bar', 2, 2), (None, 'bar', None, 4), (None, 'foo', 1, 1), (None, 'foo', 2, 1), (None, 'foo', None, 2), ('a', None, 1, 2), ('b', None, 1, 1), (None, None, 1, 3), ('a', None, 2, 2), ('b', None, 2, 1), (None, None, 2, 3)]

-----------
QUERY:

SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g) ORDER BY dataa;
RESULT:
	postgres: [('a', 'foo', None, 2), ('a', None, None, 4), ('a', None, 2, 2), ('a', 'bar', 1, 1), ('a', 'bar', 2, 1), ('a', 'bar', None, 2), ('a', 'foo', 1, 1), ('a', 'foo', 2, 1), ('a', None, 1, 2), ('b', 'bar', 1, 1), ('b', None, None, 2), ('b', None, 1, 1), ('b', 'bar', 2, 1), ('b', 'bar', None, 2), ('b', None, 2, 1), (None, None, 2, 3), (None, None, None, 6), (None, 'bar', 1, 2), (None, 'bar', 2, 2), (None, 'bar', None, 4), (None, 'foo', 1, 1), (None, 'foo', 2, 1), (None, 'foo', None, 2), (None, None, 1, 3)]

-----------
QUERY:

SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g) ORDER BY g;
RESULT:
	postgres: [('a', 'bar', 1, 1), ('a', 'foo', 1, 1), ('b', 'bar', 1, 1), (None, 'bar', 1, 2), (None, 'foo', 1, 1), ('a', None, 1, 2), ('b', None, 1, 1), (None, None, 1, 3), ('a', None, 2, 2), ('b', None, 2, 1), (None, 'bar', 2, 2), (None, None, 2, 3), (None, 'foo', 2, 1), ('a', 'bar', 2, 1), ('a', 'foo', 2, 1), ('b', 'bar', 2, 1), ('a', None, None, 4), ('b', 'bar', None, 2), ('b', None, None, 2), (None, None, None, 6), ('a', 'foo', None, 2), ('a', 'bar', None, 2), (None, 'bar', None, 4), (None, 'foo', None, 2)]

-----------
QUERY:

reset enable_hashagg;
RESULT:
	postgres: None

-----------
QUERY:


-- case with degenerate ORDER BY
explain (verbose, costs off)
select 'foo' as f, generate_series(1,2) as g from few order by 1;
RESULT:
	postgres: [('ProjectSet',), ("  Output: 'foo'::text, generate_series(1, 2)",), ('  ->  Seq Scan on public.few',), ('        Output: id, dataa, datab',)]

-----------
QUERY:

select 'foo' as f, generate_series(1,2) as g from few order by 1;
RESULT:
	postgres: [('foo', 1), ('foo', 2), ('foo', 1), ('foo', 2), ('foo', 1), ('foo', 2)]

-----------
QUERY:


-- data modification
CREATE TABLE fewmore AS SELECT generate_series(1,3) AS data;
RESULT:
	postgres: None

-----------
QUERY:

INSERT INTO fewmore VALUES(generate_series(4,5));
RESULT:
	postgres: None

-----------
QUERY:

SELECT * FROM fewmore;
RESULT:
	postgres: [(1,), (2,), (3,), (4,), (5,)]

-----------
QUERY:


-- SRFs are not allowed in UPDATE (they once were, but it was nonsense)
UPDATE fewmore SET data = generate_series(4,9);
RESULT:
	postgres: set-returning functions are not allowed in UPDATE
LINE 4: UPDATE fewmore SET data = generate_series(4,9);
                                  ^


-----------
QUERY:


-- SRFs are not allowed in RETURNING
INSERT INTO fewmore VALUES(1) RETURNING generate_series(1,3);
RESULT:
	postgres: set-returning functions are not allowed in RETURNING
LINE 4: INSERT INTO fewmore VALUES(1) RETURNING generate_series(1,3)...
                                                ^


-----------
QUERY:


-- nor standalone VALUES (but surely this is a bug?)
VALUES(1, generate_series(1,2));
RESULT:
	postgres: set-returning functions are not allowed in VALUES
LINE 4: VALUES(1, generate_series(1,2));
                  ^


-----------
QUERY:


-- We allow tSRFs that are not at top level
SELECT int4mul(generate_series(1,2), 10);
RESULT:
	postgres: [(10,), (20,)]

-----------
QUERY:

SELECT generate_series(1,3) IS DISTINCT FROM 2;
RESULT:
	postgres: [(True,), (False,), (True,)]

-----------
QUERY:


-- but SRFs in function RTEs must be at top level (annoying restriction)
SELECT * FROM int4mul(generate_series(1,2), 10);
RESULT:
	postgres: set-returning functions must appear at top level of FROM
LINE 4: SELECT * FROM int4mul(generate_series(1,2), 10);
                              ^


-----------
QUERY:


-- DISTINCT ON is evaluated before tSRF evaluation if SRF is not
-- referenced either in ORDER BY or in the DISTINCT ON list. The ORDER
-- BY reference can be implicitly generated, if there/* REPLACED */''s no other ORDER BY.

-- implicit reference (via implicit ORDER) to all columns
SELECT DISTINCT ON (a) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b);
RESULT:
	postgres: [(1, 1, 1), (3, 2, 1), (5, 3, 1)]

-----------
QUERY:


-- unreferenced in DISTINCT ON or ORDER BY
SELECT DISTINCT ON (a) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)
ORDER BY a, b DESC;
RESULT:
	postgres: [(1, 4, 1), (1, 4, 2), (1, 4, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (5, 3, 1), (5, 3, 2), (5, 3, 3)]

-----------
QUERY:


-- referenced in ORDER BY
SELECT DISTINCT ON (a) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)
ORDER BY a, b DESC, g DESC;
RESULT:
	postgres: [(1, 4, 3), (3, 2, 3), (5, 3, 3)]

-----------
QUERY:


-- referenced in ORDER BY and DISTINCT ON
SELECT DISTINCT ON (a, b, g) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)
ORDER BY a, b DESC, g DESC;
RESULT:
	postgres: [(1, 4, 3), (1, 4, 2), (1, 4, 1), (1, 1, 3), (1, 1, 2), (1, 1, 1), (3, 2, 3), (3, 2, 2), (3, 2, 1), (3, 1, 3), (3, 1, 2), (3, 1, 1), (5, 3, 3), (5, 3, 2), (5, 3, 1), (5, 1, 3), (5, 1, 2), (5, 1, 1)]

-----------
QUERY:


-- only SRF mentioned in DISTINCT ON
SELECT DISTINCT ON (g) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b);
RESULT:
	postgres: [(3, 2, 1), (5, 1, 2), (3, 1, 3)]

-----------
QUERY:


-- LIMIT / OFFSET is evaluated after SRF evaluation
SELECT a, generate_series(1,2) FROM (VALUES(1),(2),(3)) r(a) LIMIT 2 OFFSET 2;
RESULT:
	postgres: [(2, 1), (2, 2)]

-----------
QUERY:

-- SRFs are not allowed in LIMIT.
SELECT 1 LIMIT generate_series(1,3);
RESULT:
	postgres: set-returning functions are not allowed in LIMIT
LINE 3: SELECT 1 LIMIT generate_series(1,3);
                       ^


-----------
QUERY:


-- tSRF in correlated subquery, referencing table outside
SELECT (SELECT generate_series(1,3) LIMIT 1 OFFSET few.id) FROM few;
RESULT:
	postgres: [(2,), (3,), (None,)]

-----------
QUERY:

-- tSRF in correlated subquery, referencing SRF outside
SELECT (SELECT generate_series(1,3) LIMIT 1 OFFSET g.i) FROM generate_series(0,3) g(i);
RESULT:
	postgres: [(1,), (2,), (3,), (None,)]

-----------
QUERY:


-- Operators can return sets too
CREATE OPERATOR |@| (PROCEDURE = unnest, RIGHTARG = ANYARRAY);
RESULT:
	postgres: None

-----------
QUERY:

SELECT |@|ARRAY[1,2,3];
RESULT:
	postgres: [(1,), (2,), (3,)]

-----------
QUERY:


-- Some fun cases involving duplicate SRF calls
explain (verbose, costs off)
select generate_series(1,3) as x, generate_series(1,3) + 1 as xp1;
RESULT:
	postgres: [('Result',), ('  Output: (generate_series(1, 3)), ((generate_series(1, 3)) + 1)',), ('  ->  ProjectSet',), ('        Output: generate_series(1, 3)',), ('        ->  Result',)]

-----------
QUERY:

select generate_series(1,3) as x, generate_series(1,3) + 1 as xp1;
RESULT:
	postgres: [(1, 2), (2, 3), (3, 4)]

-----------
QUERY:

explain (verbose, costs off)
select generate_series(1,3)+1 order by generate_series(1,3);
RESULT:
	postgres: [('Sort',), ('  Output: (((generate_series(1, 3)) + 1)), (generate_series(1, 3))',), ('  Sort Key: (generate_series(1, 3))',), ('  ->  Result',), ('        Output: ((generate_series(1, 3)) + 1), (generate_series(1, 3))',), ('        ->  ProjectSet',), ('              Output: generate_series(1, 3)',), ('              ->  Result',)]

-----------
QUERY:

select generate_series(1,3)+1 order by generate_series(1,3);
RESULT:
	postgres: [(2,), (3,), (4,)]

-----------
QUERY:


-- Check that SRFs of same nesting level run in lockstep
explain (verbose, costs off)
select generate_series(1,3) as x, generate_series(3,6) + 1 as y;
RESULT:
	postgres: [('Result',), ('  Output: (generate_series(1, 3)), ((generate_series(3, 6)) + 1)',), ('  ->  ProjectSet',), ('        Output: generate_series(1, 3), generate_series(3, 6)',), ('        ->  Result',)]

-----------
QUERY:

select generate_series(1,3) as x, generate_series(3,6) + 1 as y;
RESULT:
	postgres: [(1, 4), (2, 5), (3, 6), (None, 7)]

-----------
QUERY:


-- Clean up
DROP TABLE few;
RESULT:
	postgres: None

-----------
QUERY:

DROP TABLE fewmore;
RESULT:
	postgres: None
