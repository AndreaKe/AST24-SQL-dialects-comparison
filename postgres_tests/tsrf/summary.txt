Guest DBMS identified: postgres
-----------
QUERY:
--
-- tsrf - targetlist set returning function tests
--

-- simple srf
SELECT generate_series(1, 3)
RESULT: []

-----------
QUERY:
-- parallel iteration
SELECT generate_series(1, 3), generate_series(3,5)
RESULT: []

-----------
QUERY:
-- parallel iteration, different number of rows
SELECT generate_series(1, 2), generate_series(1,4)
RESULT: []

-----------
QUERY:
-- srf, with SRF argument
SELECT generate_series(1, generate_series(1, 3))
RESULT: []

-----------
QUERY:
-- but we/* REPLACED */''ve traditionally rejected the same in FROM
SELECT * FROM generate_series(1, generate_series(1, 3))
RESULT: []

-----------
QUERY:
-- srf, with two SRF arguments
SELECT generate_series(generate_series(1,3), generate_series(2, 4))
RESULT: []

-----------
QUERY:
-- check proper nesting of SRFs in different expressions
explain (verbose, costs off)
SELECT generate_series(1, generate_series(1, 3)), generate_series(2, 4)
RESULT: []

-----------
QUERY:
SELECT generate_series(1, generate_series(1, 3)), generate_series(2, 4)
RESULT: []

-----------
QUERY:
CREATE TABLE few(id int, dataa text, datab text)
RESULT: []

-----------
QUERY:
INSERT INTO few VALUES(1, 'a', 'foo'),(2, 'a', 'bar'),(3, 'b', 'bar')
RESULT: []

-----------
QUERY:
-- SRF with a provably-dummy relation
explain (verbose, costs off)
SELECT unnest(ARRAY[1, 2]) FROM few WHERE false
RESULT: []

-----------
QUERY:
SELECT unnest(ARRAY[1, 2]) FROM few WHERE false
RESULT: []

-----------
QUERY:
-- SRF shouldn/* REPLACED */''t prevent upper query from recognizing lower as dummy
explain (verbose, costs off)
SELECT * FROM few f1,
  (SELECT unnest(ARRAY[1,2]) FROM few f2 WHERE false OFFSET 0) ss
RESULT: []

-----------
QUERY:
SELECT * FROM few f1,
  (SELECT unnest(ARRAY[1,2]) FROM few f2 WHERE false OFFSET 0) ss
RESULT: []

-----------
QUERY:
-- SRF output order of sorting is maintained, if SRF is not referenced
SELECT few.id, generate_series(1,3) g FROM few ORDER BY id DESC
RESULT: []

-----------
QUERY:
-- but SRFs can be referenced in sort
SELECT few.id, generate_series(1,3) g FROM few ORDER BY id, g DESC
RESULT: []

-----------
QUERY:
SELECT few.id, generate_series(1,3) g FROM few ORDER BY id, generate_series(1,3) DESC
RESULT: []

-----------
QUERY:
-- it/* REPLACED */''s weird to have ORDER BYs that increase the number of results
SELECT few.id FROM few ORDER BY id, generate_series(1,3) DESC
RESULT: []

-----------
QUERY:
-- SRFs are computed after aggregation
SET enable_hashagg TO 0
RESULT: []

-----------
QUERY:
-- stable output order
SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa
RESULT: []

-----------
QUERY:
-- unless referenced in GROUP BY clause
SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa, unnest('{1,1,3}'::int[])
RESULT: []

-----------
QUERY:
SELECT few.dataa, count(*), min(id), max(id), unnest('{1,1,3}'::int[]) FROM few WHERE few.id = 1 GROUP BY few.dataa, 5
RESULT: []

-----------
QUERY:
RESET enable_hashagg
RESULT: []

-----------
QUERY:
-- check HAVING works when GROUP BY does [not] reference SRF output
SELECT dataa, generate_series(1,1), count(*) FROM few GROUP BY 1 HAVING count(*) > 1
RESULT: []

-----------
QUERY:
SELECT dataa, generate_series(1,1), count(*) FROM few GROUP BY 1, 2 HAVING count(*) > 1
RESULT: []

-----------
QUERY:
-- it/* REPLACED */''s weird to have GROUP BYs that increase the number of results
SELECT few.dataa, count(*) FROM few WHERE dataa = 'a' GROUP BY few.dataa ORDER BY 2
RESULT: []

-----------
QUERY:
SELECT few.dataa, count(*) FROM few WHERE dataa = 'a' GROUP BY few.dataa, unnest('{1,1,3}'::int[]) ORDER BY 2
RESULT: []

-----------
QUERY:
-- SRFs are not allowed if they/* REPLACED */''d need to be conditionally executed
SELECT q1, case when q1 > 0 then generate_series(1,3) else 0 end FROM int8_tbl
RESULT: []

-----------
QUERY:
SELECT q1, coalesce(generate_series(1,3), 0) FROM int8_tbl
RESULT: []

-----------
QUERY:
-- SRFs are not allowed in aggregate arguments
SELECT min(generate_series(1, 3)) FROM few
RESULT: []

-----------
QUERY:
-- ... unless they/* REPLACED */''re within a sub-select
SELECT sum((3 = ANY(SELECT generate_series(1,4)))::int)
RESULT: []

-----------
QUERY:
SELECT sum((3 = ANY(SELECT lag(x) over(order by x)
                    FROM generate_series(1,4) x))::int)
RESULT: []

-----------
QUERY:
-- SRFs are not allowed in window function arguments, either
SELECT min(generate_series(1, 3)) OVER() FROM few
RESULT: []

-----------
QUERY:
-- SRFs are normally computed after window functions
SELECT id,lag(id) OVER(), count(*) OVER(), generate_series(1,3) FROM few
RESULT: []

-----------
QUERY:
-- unless referencing SRFs
SELECT SUM(count(*)) OVER(PARTITION BY generate_series(1,3) ORDER BY generate_series(1,3)), generate_series(1,3) g FROM few GROUP BY g
RESULT: []

-----------
QUERY:
-- sorting + grouping
SELECT few.dataa, count(*), min(id), max(id), generate_series(1,3) FROM few GROUP BY few.dataa ORDER BY 5, 1
RESULT: []

-----------
QUERY:
-- grouping sets are a bit special, they produce NULLs in columns not actually NULL
set enable_hashagg = false
RESULT: []

-----------
QUERY:
SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab)
RESULT: []

-----------
QUERY:
SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY dataa
RESULT: []

-----------
QUERY:
SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab) ORDER BY g
RESULT: []

-----------
QUERY:
SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g)
RESULT: []

-----------
QUERY:
SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g) ORDER BY dataa
RESULT: []

-----------
QUERY:
SELECT dataa, datab b, generate_series(1,2) g, count(*) FROM few GROUP BY CUBE(dataa, datab, g) ORDER BY g
RESULT: []

-----------
QUERY:
reset enable_hashagg
RESULT: []

-----------
QUERY:
-- case with degenerate ORDER BY
explain (verbose, costs off)
select 'foo' as f, generate_series(1,2) as g from few order by 1
RESULT: []

-----------
QUERY:
select 'foo' as f, generate_series(1,2) as g from few order by 1
RESULT: []

-----------
QUERY:
-- data modification
CREATE TABLE fewmore AS SELECT generate_series(1,3) AS data
RESULT: []

-----------
QUERY:
INSERT INTO fewmore VALUES(generate_series(4,5))
RESULT: []

-----------
QUERY:
SELECT * FROM fewmore
RESULT: []

-----------
QUERY:
-- SRFs are not allowed in UPDATE (they once were, but it was nonsense)
UPDATE fewmore SET data = generate_series(4,9)
RESULT: []

-----------
QUERY:
-- SRFs are not allowed in RETURNING
INSERT INTO fewmore VALUES(1) RETURNING generate_series(1,3)
RESULT: []

-----------
QUERY:
-- nor standalone VALUES (but surely this is a bug?)
VALUES(1, generate_series(1,2))
RESULT: []

-----------
QUERY:
-- We allow tSRFs that are not at top level
SELECT int4mul(generate_series(1,2), 10)
RESULT: []

-----------
QUERY:
SELECT generate_series(1,3) IS DISTINCT FROM 2
RESULT: []

-----------
QUERY:
-- but SRFs in function RTEs must be at top level (annoying restriction)
SELECT * FROM int4mul(generate_series(1,2), 10)
RESULT: []

-----------
QUERY:
-- DISTINCT ON is evaluated before tSRF evaluation if SRF is not
-- referenced either in ORDER BY or in the DISTINCT ON list. The ORDER
-- BY reference can be implicitly generated, if there/* REPLACED */''s no other ORDER BY.

-- implicit reference (via implicit ORDER) to all columns
SELECT DISTINCT ON (a) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)
RESULT: []

-----------
QUERY:
-- unreferenced in DISTINCT ON or ORDER BY
SELECT DISTINCT ON (a) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)
ORDER BY a, b DESC
RESULT: []

-----------
QUERY:
-- referenced in ORDER BY
SELECT DISTINCT ON (a) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)
ORDER BY a, b DESC, g DESC
RESULT: []

-----------
QUERY:
-- referenced in ORDER BY and DISTINCT ON
SELECT DISTINCT ON (a, b, g) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)
ORDER BY a, b DESC, g DESC
RESULT: []

-----------
QUERY:
-- only SRF mentioned in DISTINCT ON
SELECT DISTINCT ON (g) a, b, generate_series(1,3) g
FROM (VALUES (3, 2), (3,1), (1,1), (1,4), (5,3), (5,1)) AS t(a, b)
RESULT: []

-----------
QUERY:
-- LIMIT / OFFSET is evaluated after SRF evaluation
SELECT a, generate_series(1,2) FROM (VALUES(1),(2),(3)) r(a) LIMIT 2 OFFSET 2
RESULT: []

-----------
QUERY:
-- SRFs are not allowed in LIMIT.
SELECT 1 LIMIT generate_series(1,3)
RESULT: []

-----------
QUERY:
-- tSRF in correlated subquery, referencing table outside
SELECT (SELECT generate_series(1,3) LIMIT 1 OFFSET few.id) FROM few
RESULT: []

-----------
QUERY:
-- tSRF in correlated subquery, referencing SRF outside
SELECT (SELECT generate_series(1,3) LIMIT 1 OFFSET g.i) FROM generate_series(0,3) g(i)
RESULT: []

-----------
QUERY:
-- Operators can return sets too
CREATE OPERATOR |@| (PROCEDURE = unnest, RIGHTARG = ANYARRAY)
RESULT: []

-----------
QUERY:
SELECT |@|ARRAY[1,2,3]
RESULT: []

-----------
QUERY:
-- Some fun cases involving duplicate SRF calls
explain (verbose, costs off)
select generate_series(1,3) as x, generate_series(1,3) + 1 as xp1
RESULT: []

-----------
QUERY:
select generate_series(1,3) as x, generate_series(1,3) + 1 as xp1
RESULT: []

-----------
QUERY:
explain (verbose, costs off)
select generate_series(1,3)+1 order by generate_series(1,3)
RESULT: []

-----------
QUERY:
select generate_series(1,3)+1 order by generate_series(1,3)
RESULT: []

-----------
QUERY:
-- Check that SRFs of same nesting level run in lockstep
explain (verbose, costs off)
select generate_series(1,3) as x, generate_series(3,6) + 1 as y
RESULT: []

-----------
QUERY:
select generate_series(1,3) as x, generate_series(3,6) + 1 as y
RESULT: []

-----------
QUERY:
-- Clean up
DROP TABLE few
RESULT: []

-----------
QUERY:
DROP TABLE fewmore
RESULT: []
=========================================
Summary for test case tsrf/test.sql of postgres
=========================================
