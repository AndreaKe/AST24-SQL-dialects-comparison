Guest DBMS identified: postgres
-----------
QUERY:
-- deal with numeric instability of ts_rank
SET extra_float_digits = 0
RESULT: []

-----------
QUERY:
--Base tsvector test

SELECT '1'::tsvector
RESULT: []

-----------
QUERY:
SELECT '1 '::tsvector
RESULT: []

-----------
QUERY:
SELECT ' 1'::tsvector
RESULT: []

-----------
QUERY:
SELECT ' 1 '::tsvector
RESULT: []

-----------
QUERY:
SELECT '1 2'::tsvector
RESULT: []

-----------
QUERY:
SELECT '''1 2'''::tsvector
RESULT: []

-----------
QUERY:
SELECT E'''1 \\''2'''::tsvector
RESULT: []

-----------
QUERY:
SELECT E'''1 \\''2''3'::tsvector
RESULT: []

-----------
QUERY:
SELECT E'''1 \\''2'' 3'::tsvector
RESULT: []

-----------
QUERY:
SELECT E'''1 \\''2'' '' 3'' 4 '::tsvector
RESULT: []

-----------
QUERY:
SELECT $$'\\as' ab\c ab\\c AB\\\c ab\\\\c$$::tsvector
RESULT: []

-----------
QUERY:
SELECT tsvectorin(tsvectorout($$'\\as' ab\c ab\\c AB\\\c ab\\\\c$$::tsvector))
RESULT: []

-----------
QUERY:
SELECT '''w'':4A,3B,2C,1D,5 a:8'
RESULT: []

-----------
QUERY:
SELECT 'a:3A b:2a'::tsvector || 'ba:1234 a:1B'
RESULT: []

-----------
QUERY:
SELECT $$'' '1' '2'$$::tsvector
RESULT: []

-----------
QUERY:
-- error, empty lexeme is not allowed

-- Also try it with non-error-throwing API
SELECT pg_input_is_valid('foo', 'tsvector')
RESULT: []

-----------
QUERY:
SELECT pg_input_is_valid($$''$$, 'tsvector')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info($$''$$, 'tsvector')
RESULT: []

-----------
QUERY:
--Base tsquery test
SELECT '1'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1 '::tsquery
RESULT: []

-----------
QUERY:
SELECT ' 1'::tsquery
RESULT: []

-----------
QUERY:
SELECT ' 1 '::tsquery
RESULT: []

-----------
QUERY:
SELECT '''1 2'''::tsquery
RESULT: []

-----------
QUERY:
SELECT E'''1 \\''2'''::tsquery
RESULT: []

-----------
QUERY:
SELECT '!1'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1|2'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1|!2'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!1|2'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!1|!2'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!(!1|!2)'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!(!1|2)'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!(1|!2)'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!(1|2)'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1&2'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!1&2'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1&!2'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!1&!2'::tsquery
RESULT: []

-----------
QUERY:
SELECT '(1&2)'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1&(2)'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!(1)&2'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!(1&2)'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1|2&3'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1|(2&3)'::tsquery
RESULT: []

-----------
QUERY:
SELECT '(1|2)&3'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1|2&!3'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1|!2&3'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!1|2&3'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!1|(2&3)'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!(1|2)&3'::tsquery
RESULT: []

-----------
QUERY:
SELECT '(!1|2)&3'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1|(2|(4|(5|6)))'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1|2|4|5|6'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1&(2&(4&(5&6)))'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1&2&4&5&6'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1&(2&(4&(5|6)))'::tsquery
RESULT: []

-----------
QUERY:
SELECT '1&(2&(4&(5|!6)))'::tsquery
RESULT: []

-----------
QUERY:
SELECT E'1&(''2''&('' 4''&(\\|5 | ''6 \\'' !|&'')))'::tsquery
RESULT: []

-----------
QUERY:
SELECT $$'\\as'$$::tsquery
RESULT: []

-----------
QUERY:
SELECT 'a:* & nbb:*ac | doo:a* | goo'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!!b'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!!!b'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!(!b)'::tsquery
RESULT: []

-----------
QUERY:
SELECT 'a & !!b'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!!a & b'::tsquery
RESULT: []

-----------
QUERY:
SELECT '!!a & !!b'::tsquery
RESULT: []

-----------
QUERY:
-- Also try it with non-error-throwing API
SELECT pg_input_is_valid('foo', 'tsquery')
RESULT: []

-----------
QUERY:
SELECT pg_input_is_valid('foo!', 'tsquery')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('foo!', 'tsquery')
RESULT: []

-----------
QUERY:
SELECT * FROM pg_input_error_info('a <100000> b', 'tsquery')
RESULT: []

-----------
QUERY:
--comparisons
SELECT 'a' < 'b & c'::tsquery as "true"
RESULT: []

-----------
QUERY:
SELECT 'a' > 'b & c'::tsquery as "false"
RESULT: []

-----------
QUERY:
SELECT 'a | f' < 'b & c'::tsquery as "false"
RESULT: []

-----------
QUERY:
SELECT 'a | ff' < 'b & c'::tsquery as "false"
RESULT: []

-----------
QUERY:
SELECT 'a | f | g' < 'b & c'::tsquery as "false"
RESULT: []

-----------
QUERY:
--concatenation
SELECT numnode( 'new'::tsquery )
RESULT: []

-----------
QUERY:
SELECT numnode( 'new & york'::tsquery )
RESULT: []

-----------
QUERY:
SELECT numnode( 'new & york | qwery'::tsquery )
RESULT: []

-----------
QUERY:
SELECT 'foo & bar'::tsquery && 'asd'
RESULT: []

-----------
QUERY:
SELECT 'foo & bar'::tsquery || 'asd & fg'
RESULT: []

-----------
QUERY:
SELECT 'foo & bar'::tsquery || !!'asd & fg'::tsquery
RESULT: []

-----------
QUERY:
SELECT 'foo & bar'::tsquery && 'asd | fg'
RESULT: []

-----------
QUERY:
SELECT 'a' <-> 'b & d'::tsquery
RESULT: []

-----------
QUERY:
SELECT 'a & g' <-> 'b & d'::tsquery
RESULT: []

-----------
QUERY:
SELECT 'a & g' <-> 'b | d'::tsquery
RESULT: []

-----------
QUERY:
SELECT 'a & g' <-> 'b <-> d'::tsquery
RESULT: []

-----------
QUERY:
SELECT tsquery_phrase('a <3> g', 'b & d', 10)
RESULT: []

-----------
QUERY:
-- tsvector-tsquery operations

SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca' as "true"
RESULT: []

-----------
QUERY:
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:B' as "true"
RESULT: []

-----------
QUERY:
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:A' as "true"
RESULT: []

-----------
QUERY:
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:C' as "false"
RESULT: []

-----------
QUERY:
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & ca:CB' as "true"
RESULT: []

-----------
QUERY:
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & c:*C' as "false"
RESULT: []

-----------
QUERY:
SELECT 'a b:89  ca:23A,64b d:34c'::tsvector @@ 'd:AC & c:*CB' as "true"
RESULT: []

-----------
QUERY:
SELECT 'a b:89  ca:23A,64b cb:80c d:34c'::tsvector @@ 'd:AC & c:*C' as "true"
RESULT: []

-----------
QUERY:
SELECT 'a b:89  ca:23A,64c cb:80b d:34c'::tsvector @@ 'd:AC & c:*C' as "true"
RESULT: []

-----------
QUERY:
SELECT 'a b:89  ca:23A,64c cb:80b d:34c'::tsvector @@ 'd:AC & c:*B' as "true"
RESULT: []

-----------
QUERY:
SELECT 'wa:1D wb:2A'::tsvector @@ 'w:*D & w:*A'::tsquery as "true"
RESULT: []

-----------
QUERY:
SELECT 'wa:1D wb:2A'::tsvector @@ 'w:*D <-> w:*A'::tsquery as "true"
RESULT: []

-----------
QUERY:
SELECT 'wa:1A wb:2D'::tsvector @@ 'w:*D <-> w:*A'::tsquery as "false"
RESULT: []

-----------
QUERY:
SELECT 'wa:1A'::tsvector @@ 'w:*A'::tsquery as "true"
RESULT: []

-----------
QUERY:
SELECT 'wa:1A'::tsvector @@ 'w:*D'::tsquery as "false"
RESULT: []

-----------
QUERY:
SELECT 'wa:1A'::tsvector @@ '!w:*A'::tsquery as "false"
RESULT: []

-----------
QUERY:
SELECT 'wa:1A'::tsvector @@ '!w:*D'::tsquery as "true"
RESULT: []

-----------
QUERY:
-- historically, a stripped tsvector matches queries ignoring weights:
SELECT strip('wa:1A'::tsvector) @@ 'w:*A'::tsquery as "true"
RESULT: []

-----------
QUERY:
SELECT strip('wa:1A'::tsvector) @@ 'w:*D'::tsquery as "true"
RESULT: []

-----------
QUERY:
SELECT strip('wa:1A'::tsvector) @@ '!w:*A'::tsquery as "false"
RESULT: []

-----------
QUERY:
SELECT strip('wa:1A'::tsvector) @@ '!w:*D'::tsquery as "false"
RESULT: []

-----------
QUERY:
SELECT 'supernova'::tsvector @@ 'super'::tsquery AS "false"
RESULT: []

-----------
QUERY:
SELECT 'supeanova supernova'::tsvector @@ 'super'::tsquery AS "false"
RESULT: []

-----------
QUERY:
SELECT 'supeznova supernova'::tsvector @@ 'super'::tsquery AS "false"
RESULT: []

-----------
QUERY:
SELECT 'supernova'::tsvector @@ 'super:*'::tsquery AS "true"
RESULT: []

-----------
QUERY:
SELECT 'supeanova supernova'::tsvector @@ 'super:*'::tsquery AS "true"
RESULT: []

-----------
QUERY:
SELECT 'supeznova supernova'::tsvector @@ 'super:*'::tsquery AS "true"
RESULT: []

-----------
QUERY:
--phrase search
SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <-> 2' AS "true"
RESULT: []

-----------
QUERY:
SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <2> 2' AS "false"
RESULT: []

-----------
QUERY:
SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <-> 3' AS "false"
RESULT: []

-----------
QUERY:
SELECT to_tsvector('simple', '1 2 3 1') @@ '1 <2> 3' AS "true"
RESULT: []

-----------
QUERY:
SELECT to_tsvector('simple', '1 2 1 2') @@ '1 <3> 2' AS "true"
RESULT: []

-----------
QUERY:
SELECT to_tsvector('simple', '1 2 11 3') @@ '1 <-> 3' AS "false"
RESULT: []

-----------
QUERY:
SELECT to_tsvector('simple', '1 2 11 3') @@ '1:* <-> 3' AS "true"
RESULT: []

-----------
QUERY:
SELECT to_tsvector('simple', '1 2 3 4') @@ '1 <-> 2 <-> 3' AS "true"
RESULT: []

-----------
QUERY:
SELECT to_tsvector('simple', '1 2 3 4') @@ '(1 <-> 2) <-> 3' AS "true"
RESULT: []

-----------
QUERY:
SELECT to_tsvector('simple', '1 2 3 4') @@ '1 <-> (2 <-> 3)' AS "true"
RESULT: []

-----------
QUERY:
SELECT to_tsvector('simple', '1 2 3 4') @@ '1 <2> (2 <-> 3)' AS "false"
RESULT: []

-----------
QUERY:
SELECT to_tsvector('simple', '1 2 1 2 3 4') @@ '(1 <-> 2) <-> 3' AS "true"
RESULT: []

-----------
QUERY:
SELECT to_tsvector('simple', '1 2 1 2 3 4') @@ '1 <-> 2 <-> 3' AS "true"
RESULT: []

-----------
QUERY:
-- without position data, phrase search does not match
SELECT strip(to_tsvector('simple', '1 2 3 4')) @@ '1 <-> 2 <-> 3' AS "false"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'q x q y') @@ 'q <-> (x & y)' AS "false"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'q x') @@ 'q <-> (x | y <-> z)' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'q y') @@ 'q <-> (x | y <-> z)' AS "false"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'q y z') @@ 'q <-> (x | y <-> z)' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'q y x') @@ 'q <-> (x | y <-> z)' AS "false"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'q x y') @@ 'q <-> (x | y <-> z)' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'q x') @@ '(x | y <-> z) <-> q' AS "false"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x q') @@ '(x | y <-> z) <-> q' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y q') @@ '(x | y <-> z) <-> q' AS "false"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y z') @@ '(x | y <-> z) <-> q' AS "false"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y z q') @@ '(x | y <-> z) <-> q' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'y z q') @@ '(x | y <-> z) <-> q' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'y y q') @@ '(x | y <-> z) <-> q' AS "false"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'y y q') @@ '(!x | y <-> z) <-> q' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y q') @@ '(!x | y <-> z) <-> q' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'y y q') @@ '(x | y <-> !z) <-> q' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x q') @@ '(x | y <-> !z) <-> q' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x q') @@ '(!x | y <-> z) <-> q' AS "false"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'z q') @@ '(!x | y <-> z) <-> q' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y q') @@ '(!x | y) <-> y <-> q' AS "false"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y q') @@ '(!x | !y) <-> y <-> q' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y q') @@ '(x | !y) <-> y <-> q' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y q') @@ '(x | !!z) <-> y <-> q' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y q y') @@ '!x <-> y' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y q y') @@ '!x <-> !y' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y q y') @@ '!x <-> !!y' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y q y') @@ '!(x <-> y)' AS "false"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y q y') @@ '!(x <2> y)' AS "true"
RESULT: []

-----------
QUERY:
select strip(to_tsvector('simple', 'x y q y')) @@ '!x <-> y' AS "false"
RESULT: []

-----------
QUERY:
select strip(to_tsvector('simple', 'x y q y')) @@ '!x <-> !y' AS "false"
RESULT: []

-----------
QUERY:
select strip(to_tsvector('simple', 'x y q y')) @@ '!x <-> !!y' AS "false"
RESULT: []

-----------
QUERY:
select strip(to_tsvector('simple', 'x y q y')) @@ '!(x <-> y)' AS "true"
RESULT: []

-----------
QUERY:
select strip(to_tsvector('simple', 'x y q y')) @@ '!(x <2> y)' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', 'x y q y') @@ '!foo' AS "true"
RESULT: []

-----------
QUERY:
select to_tsvector('simple', '') @@ '!foo' AS "true"
RESULT: []

-----------
QUERY:
--ranking
SELECT ts_rank(' a:1 s:2C d g'::tsvector, 'a | s')
RESULT: []

-----------
QUERY:
SELECT ts_rank(' a:1 sa:2C d g'::tsvector, 'a | s')
RESULT: []

-----------
QUERY:
SELECT ts_rank(' a:1 sa:2C d g'::tsvector, 'a | s:*')
RESULT: []

-----------
QUERY:
SELECT ts_rank(' a:1 sa:2C d g'::tsvector, 'a | sa:*')
RESULT: []

-----------
QUERY:
SELECT ts_rank(' a:1 s:2B d g'::tsvector, 'a | s')
RESULT: []

-----------
QUERY:
SELECT ts_rank(' a:1 s:2 d g'::tsvector, 'a | s')
RESULT: []

-----------
QUERY:
SELECT ts_rank(' a:1 s:2C d g'::tsvector, 'a & s')
RESULT: []

-----------
QUERY:
SELECT ts_rank(' a:1 s:2B d g'::tsvector, 'a & s')
RESULT: []

-----------
QUERY:
SELECT ts_rank(' a:1 s:2 d g'::tsvector, 'a & s')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 s:2C d g'::tsvector, 'a | s')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 sa:2C d g'::tsvector, 'a | s')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 sa:2C d g'::tsvector, 'a | s:*')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 sa:2C d g'::tsvector, 'a | sa:*')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 sa:3C sab:2c d g'::tsvector, 'a | sa:*')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 s:2B d g'::tsvector, 'a | s')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 s:2 d g'::tsvector, 'a | s')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 s:2C d g'::tsvector, 'a & s')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 s:2B d g'::tsvector, 'a & s')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 s:2 d g'::tsvector, 'a & s')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 s:2A d g'::tsvector, 'a <-> s')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 s:2C d g'::tsvector, 'a <-> s')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 s:2 d g'::tsvector, 'a <-> s')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 s:2 d:2A g'::tsvector, 'a <-> s')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 s:2,3A d:2A g'::tsvector, 'a <2> s:A')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 b:2 s:3A d:2A g'::tsvector, 'a <2> s:A')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 sa:2D sb:2A g'::tsvector, 'a <-> s:*')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a <-> s:*')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a <-> s:* <-> sa:A')
RESULT: []

-----------
QUERY:
SELECT ts_rank_cd(' a:1 sa:2A sb:2D g'::tsvector, 'a <-> s:* <-> sa:B')
RESULT: []

-----------
QUERY:
SELECT 'a:1 b:2'::tsvector @@ 'a <-> b'::tsquery AS "true"
RESULT: []

-----------
QUERY:
SELECT 'a:1 b:2'::tsvector @@ 'a <0> b'::tsquery AS "false"
RESULT: []

-----------
QUERY:
SELECT 'a:1 b:2'::tsvector @@ 'a <1> b'::tsquery AS "true"
RESULT: []

-----------
QUERY:
SELECT 'a:1 b:2'::tsvector @@ 'a <2> b'::tsquery AS "false"
RESULT: []

-----------
QUERY:
SELECT 'a:1 b:3'::tsvector @@ 'a <-> b'::tsquery AS "false"
RESULT: []

-----------
QUERY:
SELECT 'a:1 b:3'::tsvector @@ 'a <0> b'::tsquery AS "false"
RESULT: []

-----------
QUERY:
SELECT 'a:1 b:3'::tsvector @@ 'a <1> b'::tsquery AS "false"
RESULT: []

-----------
QUERY:
SELECT 'a:1 b:3'::tsvector @@ 'a <2> b'::tsquery AS "true"
RESULT: []

-----------
QUERY:
SELECT 'a:1 b:3'::tsvector @@ 'a <3> b'::tsquery AS "false"
RESULT: []

-----------
QUERY:
SELECT 'a:1 b:3'::tsvector @@ 'a <0> a:*'::tsquery AS "true"
RESULT: []

-----------
QUERY:
-- tsvector editing operations

SELECT strip('w:12B w:13* w:12,5,6 a:1,3* a:3 w asd:1dc asd'::tsvector)
RESULT: []

-----------
QUERY:
SELECT strip('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector)
RESULT: []

-----------
QUERY:
SELECT strip('base hidden rebel spaceship strike'::tsvector)
RESULT: []

-----------
QUERY:
SELECT ts_delete(to_tsvector('english', 'Rebel spaceships, striking from a hidden base'), 'spaceship')
RESULT: []

-----------
QUERY:
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'base')
RESULT: []

-----------
QUERY:
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'bas')
RESULT: []

-----------
QUERY:
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'bases')
RESULT: []

-----------
QUERY:
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, 'spaceship')
RESULT: []

-----------
QUERY:
SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, 'spaceship')
RESULT: []

-----------
QUERY:
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceship','rebel'])
RESULT: []

-----------
QUERY:
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceships','rebel'])
RESULT: []

-----------
QUERY:
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceshi','rebel'])
RESULT: []

-----------
QUERY:
SELECT ts_delete('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector, ARRAY['spaceship','leya','rebel'])
RESULT: []

-----------
QUERY:
SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, ARRAY['spaceship','leya','rebel'])
RESULT: []

-----------
QUERY:
SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, ARRAY['spaceship','leya','rebel','rebel'])
RESULT: []

-----------
QUERY:
SELECT ts_delete('base hidden rebel spaceship strike'::tsvector, ARRAY['spaceship','leya','rebel', '', NULL])
RESULT: []

-----------
QUERY:
SELECT unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector)
RESULT: []

-----------
QUERY:
SELECT unnest('base hidden rebel spaceship strike'::tsvector)
RESULT: []

-----------
QUERY:
SELECT * FROM unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector)
RESULT: []

-----------
QUERY:
SELECT * FROM unnest('base hidden rebel spaceship strike'::tsvector)
RESULT: []

-----------
QUERY:
SELECT lexeme, positions[1] from unnest('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector)
RESULT: []

-----------
QUERY:
SELECT tsvector_to_array('base:7 hidden:6 rebel:1 spaceship:2,33A,34B,35C,36D strike:3'::tsvector)
RESULT: []

-----------
QUERY:
SELECT tsvector_to_array('base hidden rebel spaceship strike'::tsvector)
RESULT: []

-----------
QUERY:
SELECT array_to_tsvector(ARRAY['base','hidden','rebel','spaceship','strike'])
RESULT: []

-----------
QUERY:
-- null and empty string are disallowed, since we mustn/* REPLACED */''t make an empty lexeme
SELECT array_to_tsvector(ARRAY['base','hidden','rebel','spaceship', NULL])
RESULT: []

-----------
QUERY:
SELECT array_to_tsvector(ARRAY['base','hidden','rebel','spaceship', ''])
RESULT: []

-----------
QUERY:
-- array_to_tsvector must sort and de-dup
SELECT array_to_tsvector(ARRAY['foo','bar','baz','bar'])
RESULT: []

-----------
QUERY:
SELECT setweight('w:12B w:13* w:12,5,6 a:1,3* a:3 w asd:1dc asd zxc:81,567,222A'::tsvector, 'c')
RESULT: []

-----------
QUERY:
SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c')
RESULT: []

-----------
QUERY:
SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a}')
RESULT: []

-----------
QUERY:
SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a}')
RESULT: []

-----------
QUERY:
SELECT setweight('a:1,3A asd:1C w:5,6,12B,13A zxc:81,222A,567'::tsvector, 'c', '{a,zxc}')
RESULT: []

-----------
QUERY:
SELECT setweight('a asd w:5,6,12B,13A zxc'::tsvector, 'c', ARRAY['a', 'zxc', '', NULL])
RESULT: []

-----------
QUERY:
SELECT ts_filter('base:7A empir:17 evil:15 first:11 galact:16 hidden:6A rebel:1A spaceship:2A strike:3A victori:12 won:9'::tsvector, '{a}')
RESULT: []

-----------
QUERY:
SELECT ts_filter('base hidden rebel spaceship strike'::tsvector, '{a}')
RESULT: []

-----------
QUERY:
SELECT ts_filter('base hidden rebel spaceship strike'::tsvector, '{a,b,NULL}')
RESULT: []
=========================================
Summary for test case tstypes/test.sql of postgres
=========================================
