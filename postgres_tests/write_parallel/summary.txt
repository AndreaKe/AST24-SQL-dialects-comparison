Guest DBMS identified: postgres
-----------
QUERY:
--
-- PARALLEL
--

begin
RESULT: []

-----------
QUERY:
-- encourage use of parallel plans
set parallel_setup_cost=0
RESULT: []

-----------
QUERY:
set parallel_tuple_cost=0
RESULT: []

-----------
QUERY:
set min_parallel_table_scan_size=0
RESULT: []

-----------
QUERY:
set max_parallel_workers_per_gather=4
RESULT: []

-----------
QUERY:
--
-- Test write operations that has an underlying query that is eligible
-- for parallel plans
--
explain (costs off) create table parallel_write as
    select length(stringu1) from tenk1 group by length(stringu1)
RESULT: []

-----------
QUERY:
create table parallel_write as
    select length(stringu1) from tenk1 group by length(stringu1)
RESULT: []

-----------
QUERY:
drop table parallel_write
RESULT: []

-----------
QUERY:
explain (costs off) select length(stringu1) into parallel_write
    from tenk1 group by length(stringu1)
RESULT: []

-----------
QUERY:
select length(stringu1) into parallel_write
    from tenk1 group by length(stringu1)
RESULT: []

-----------
QUERY:
drop table parallel_write
RESULT: []

-----------
QUERY:
explain (costs off) create materialized view parallel_mat_view as
    select length(stringu1) from tenk1 group by length(stringu1)
RESULT: []

-----------
QUERY:
create materialized view parallel_mat_view as
    select length(stringu1) from tenk1 group by length(stringu1)
RESULT: []

-----------
QUERY:
create unique index on parallel_mat_view(length)
RESULT: []

-----------
QUERY:
refresh materialized view parallel_mat_view
RESULT: []

-----------
QUERY:
refresh materialized view concurrently parallel_mat_view
RESULT: []

-----------
QUERY:
drop materialized view parallel_mat_view
RESULT: []

-----------
QUERY:
prepare prep_stmt as select length(stringu1) from tenk1 group by length(stringu1)
RESULT: []

-----------
QUERY:
explain (costs off) create table parallel_write as execute prep_stmt
RESULT: []

-----------
QUERY:
create table parallel_write as execute prep_stmt
RESULT: []

-----------
QUERY:
drop table parallel_write
RESULT: []

-----------
QUERY:
rollback
RESULT: []
=========================================
Summary for test case write_parallel/test.sql of postgres
=========================================
